# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.webhook import Webhook


class SitesWebhooksControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesWebhooksControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_webhooks
        cls.response_catcher = cls.controller.http_call_back

    # Get List of Site Webhooks
    def test_list_site_webhooks(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_site_webhooks(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"created_time":0,"enabled":true,"headers":{},"id":"b069b358-4c97'
            '-5319-1f8c-7c5ca64d6ab1","modified_time":0,"name":"string","org_id'
            '":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","secret":"string","site_i'
            'd":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","splunk_token":"string",'
            '"topics":["location"],"type":"http-post","url":"string","verify_ce'
            'rt":true}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Webhook defines a webhook, modeled after [githubâ€™s model](https://developer.github.com/webhooks/).
    #
    #There is two types of webhooks:
    #* webhooks ([examples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace/folder/224925-be01e694-7253-4195-8563-78e2a745e114))
    #* raw data webhooks ([examples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace/folder/224925-e2d5d5f8-4bdb-4efc-93e4-90f4b33d0b2b))
    #
    ###### Webhooks
    #Webhooks can be configured at the org level (subset of topics only) and at the site level. It is possible to have multiple topics in the same webhook configuration and/or to have multiple webhooks configured at the same time.
    #
    ###### Client Raw Data Webhooks
    #Raw data webhooks are a special subset of webhooks that provide insight into raw data packets emitted by a client, identified by their advertising MAC address (assets, discovered ble, connected wifi, unconnected wifi). The data that client raw data webhooks encompasses are reporting AP information, RSSI Data, and any special packets/telemetry packets that the client may emit. Note that client raw webhooks are the raw data coming from the client and do not contain the X,Y location data of the client. In order to get the location data for a client please see our location webhooks. Clients can be identified uniquely across these client raw data topics and location webhook topic using MAC address as the Unique identifier (client identifier).
    #
    ####### Client Raw Data Webhooks Topics
    #Topics that correspond to client raw data for different client types. 
    #* `asset-raw-rssi` - Raw data from packets emitted by named and filtered assets 
    #* `discovered-raw-rssi` - Raw data from packets emitted by passive BLE devices 
    #* `wifi-conn-raw` - Raw data from packets emitted by connected devices 
    #* `wifi-unconn-raw` - Raw data from packets emitted by unconnected devices (passive)
    #
    ####### Rules for configuring client raw data webhooks
    #1. Only one instance of a webhook object containing a client raw data webhook topic is allowed. (a site level entry will override an org level entry for the client raw data webhook topic in question)
    #2. Only one client raw data webhook topic is allowed per `http-post` message to webhooks api
    #
    def test_create_site_webhook(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"enabled":true,"headers":{},"name":"string","secret":"string","sp'
            'lunk_token":"string","topics":["location"],"type":"http-post","url'
            '":"string","verify_cert":true}', Webhook.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_site_webhook(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"enabled":true,"headers":{},"id":"b069b358-4c97-'
            '5319-1f8c-7c5ca64d6ab1","modified_time":0,"name":"string","org_id"'
            ':"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","secret":"string","site_id'
            '":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","splunk_token":"string","'
            'topics":["location"],"type":"http-post","url":"string","verify_cer'
            't":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Delete Site Webhook
    def test_delete_site_webhook(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        webhook_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_webhook(site_id, webhook_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Site Webhook Details
    def test_get_site_webhook(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        webhook_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_webhook(site_id, webhook_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"enabled":true,"headers":{},"id":"b069b358-4c97-'
            '5319-1f8c-7c5ca64d6ab1","modified_time":0,"name":"string","org_id"'
            ':"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","secret":"string","site_id'
            '":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","splunk_token":"string","'
            'topics":["location"],"type":"http-post","url":"string","verify_cer'
            't":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Update Site Webhook
    def test_update_site_webhook(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        webhook_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"enabled":true,"headers":{},"name":"string","secret":"string","sp'
            'lunk_token":"string","topics":["location"],"type":"http-post","url'
            '":"string","verify_cert":true}', Webhook.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.update_site_webhook(site_id, webhook_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"enabled":true,"headers":{},"id":"b069b358-4c97-'
            '5319-1f8c-7c5ca64d6ab1","modified_time":0,"name":"string","org_id"'
            ':"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","secret":"string","site_id'
            '":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","splunk_token":"string","'
            'topics":["location"],"type":"http-post","url":"string","verify_cer'
            't":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Search webhooks deliveries
    #
    #To get a list of webhook deliveries in error, use the query parameter `?error=*`
    def test_search_site_webhooks_deliveries(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        webhook_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        status_code = None
        error = None
        topic = None
        start = 0
        end = 0
        duration = '1d'
        limit = 100

        # Perform the API call through the SDK function
        result = self.controller.search_site_webhooks_deliveries(site_id, webhook_id, status_code, error, topic, start, end, duration, limit)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":1688035193,"limit":10,"results":[{"error":"string","id":"55'
            'b0f02f-ebf6-4ad2-8b10-200508a97581","org_id":"fc7e2967-e7ef-41e6-b'
            '007-1217713de05a","req_headers":"{\"Content-Type\":[\"application/'
            'json\"],\"User-Agent\":[\"Mist-webhook\"]}","req_payload":"{\"topi'
            'c\":\"audits\",\"events\":[{\"admin_name\":\"John Doe john.doe@jun'
            'iper.net\",\"after\":\"{\\\\\"radio_config\\\\\": {\\\\\"band_24'
            '\\\\\": {\\\\\"disabled\\\\\": false, \\\\\"allow_rrm_disable'
            '\\\\\": false, \\\\\"power_min\\\\\": null, \\\\\"power_max\\\\\":'
            ' null, \\\\\"power\\\\\": 10, \\\\\"preamble\\\\\": \\\\\"short'
            '\\\\\", \\\\\"channels\\\\\": [1, 10], \\\\\"bandwidth\\\\\": 20}}'
            '}\",\"before\":\"{\\\\\"radio_config\\\\\": {\\\\\"band_24\\\\\": '
            '{\\\\\"disabled\\\\\": false, \\\\\"allow_rrm_disable\\\\\": false'
            ', \\\\\"power_min\\\\\": 8, \\\\\"power_max\\\\\": 18, \\\\\"power'
            '\\\\\": null, \\\\\"preamble\\\\\": \\\\\"long\\\\\", \\\\\"channe'
            'ls\\\\\": [1, 10], \\\\\"bandwidth\\\\\": 20}}}\",\"id\":\"737909a'
            '2-04ff-4aeb-b9da-cc924e74a4dd\",\"message\":\"Update Site Settings'
            '\",\"org_id\":\"fc7e2967-e7ef-41e6-b007-1217713de05a\",\"site_id\"'
            ':\"256c3a35-9cb7-436e-bc6d-314972645d95\",\"site_name\":\"Test Sit'
            'e\",\"src_ip\":\"1.2.3.4\",\"timestamp\":1685956576.923601,\"user_'
            'agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWeb'
            'Kit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36\"}]}'
            '","req_url":"http://example.com","resp_body":"Ok","resp_headers":"'
            'string","site_id":"256c3a35-9cb7-436e-bc6d-314972645d95","status_c'
            'ode":200,"timestamp":1687962508.5836561,"topic":"audits","webhook_'
            'id":"7a11b901-f719-4c91-8aef-deb8699a6364"}],"start":1687948793,"t'
            'otal":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # send a Ping event to the webhook
    def test_ping_site_webhook(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        webhook_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.ping_site_webhook(site_id, webhook_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


