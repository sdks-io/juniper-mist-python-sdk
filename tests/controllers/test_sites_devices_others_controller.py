# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper


class SitesDevicesOthersControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesDevicesOthersControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_devices_others
        cls.response_catcher = cls.controller.http_call_back

    # Get List of Site other devices (3rd party devices)
    def test_list_site_other_devices(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        vendor = None
        mac = None
        serial = None
        model = None
        name = None
        page = 1
        limit = 100

        # Perform the API call through the SDK function
        result = self.controller.list_site_other_devices(site_id, vendor, mac, serial, model, name, page, limit)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"created_time":1676983730,"device_mac":"001122334455","id":"ae9d'
            'ee49-69e7-4710-a114-5b827a777738","mac":"5c5b35000018","model":"AP'
            '41","modified_time":1676983730,"name":"hallway","org_id":"2818e386'
            '-8dec-2562-9ede-5b8a0fbbdc71","serial":"FXLH2015150025","site_id":'
            '"4ac1dcf4-9d8b-7211-65c4-057819f0862b","vendor":"cradlepoint"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Count Site OtherDevices Events
    def test_count_site_other_devices_events(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        distinct = 'mac'
        start = 0
        end = 0
        duration = '1d'
        limit = 100
        page = 1

        # Perform the API call through the SDK function
        result = self.controller.count_site_other_devices_events(site_id, distinct, start, end, duration, limit, page)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"distinct":"string","end":0,"limit":0,"percentage":0,"results":[{'
            '"count":0,"property":"string"}],"start":0,"total":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Search Site OtherDevices Events
    def test_search_site_other_devices_events(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        mac = None
        device_mac = None
        vendor = None
        mtype = None
        start = 0
        end = 0
        duration = '1d'
        limit = 100
        page = 1

        # Perform the API call through the SDK function
        result = self.controller.search_site_other_devices_events(site_id, mac, device_mac, vendor, mtype, start, end, duration, limit, page)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":0,"limit":0,"results":{"device_mac":"string","mac":"5c5b351'
            'e13b5","org_id":"4ac1dcf4-9d8b-7211-65c4-057819f0862a","site_id":"'
            '4ac1dcf4-9d8b-7211-65c4-057819f0862b","text":"Plugged: The Interna'
            'l 5GB (SIM1) has been inserted into Internal 1.","timestamp":54723'
            '5620.89,"type":"CELLULAR_EDGE_MODEM_WAN_PLUGGED","vendor":"cradlep'
            'oint"},"start":0,"total":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

