# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.device_ap import DeviceAp
from mistapi.models.api_v_1_sites_devices_restart_request import ApiV1SitesDevicesRestartRequest
from mistapi.models.api_v_1_sites_devices_restart_request_1 import ApiV1SitesDevicesRestartRequest1
from mistapi.models.api_v_1_sites_devices_support_request import ApiV1SitesDevicesSupportRequest


class SitesDevicesControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesDevicesControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_devices
        cls.response_catcher = cls.controller.http_call_back

    # Get list of devices on the site.
    def test_list_site_devices(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        mtype = 'ap'
        name = None
        page = 1
        limit = 100

        # Perform the API call through the SDK function
        result = self.controller.list_site_devices(site_id, mtype, name, page, limit)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"aeroscout":{"enabled":true,"host":"string"},"ble_config":{"beac'
            'on_enabled":true,"beacon_rate":0,"beacon_rate_mode":"string","beam'
            '_disabled":[0],"eddystone_uid_adv_power":-100,"eddystone_uid_beams'
            '":"string","eddystone_uid_enabled":true,"eddystone_uid_freq_msec":'
            '0,"eddystone_uid_instance":"string","eddystone_uid_namespace":"str'
            'ing","eddystone_url_adv_power":0,"eddystone_url_beams":"string","e'
            'ddystone_url_enabled":true,"eddystone_url_freq_msec":0,"eddystone_'
            'url_url":"string","ibeacon_adv_power":-100,"ibeacon_beams":"string'
            '","ibeacon_enabled":true,"ibeacon_freq_msec":0,"ibeacon_major":0,"'
            'ibeacon_minor":0,"ibeacon_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6'
            'ab1","power":0,"power_mode":"string"},"created_time":0,"deviceprof'
            'ile_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","disable_eth1":true'
            ',"disable_eth2":true,"disable_eth3":true,"disable_module":true,"he'
            'ight":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","image1_url":"'
            'string","iot_config":{"A1":{"enabled":true,"name":"string","output'
            '":true,"pullup":"internal","value":true},"A2":{"enabled":true,"nam'
            'e":"string","output":true,"pullup":"internal","value":true},"A3":{'
            '"enabled":true,"name":"string","output":true,"pullup":"internal","'
            'value":true},"A4":{"enabled":true,"name":"string","output":true,"p'
            'ullup":"internal","value":true},"DI1":{"enabled":true,"name":"stri'
            'ng","pullup":"internal","value":true},"DI2":{"enabled":true,"name"'
            ':"string","pullup":"internal","value":true},"DO":{"enabled":true,"'
            'name":"string","output":true,"pullup":"internal","value":true}},"i'
            'p_config":{"dns":["string"],"dns_suffix":["string"],"gateway":"str'
            'ing","gateway6":"string","ip":"string","ip6":"string","mtu":0,"net'
            'mask":"string","netmask6":"string","type":"static","type6":"string'
            '","vlan_id":1},"led":{"brightness":0,"enabled":true},"map_id":"b06'
            '9b358-4c97-5319-1f8c-7c5ca64d6ab1","mesh":{"enabled":true,"group":'
            '0,"role":"base"},"modified_time":0,"name":"string","notes":"string'
            '","ntp_servers":["string"],"org_id":"b069b358-4c97-5319-1f8c-7c5ca'
            '64d6ab1","orientation":0,"orientation_overwrite":true,"poe_passthr'
            'ough":true,"pwr_config":{"base":0},"radio_config":{"ant_gain_24":0'
            ',"ant_gain_5":0,"band_24":{"allow_rrm_disable":true,"antenna_mode"'
            ':"default","bandwidth":0,"channel":0,"disabled":true,"power":0,"po'
            'wer_max":0,"power_min":0,"preamble":"auto","usage":"string"},"band'
            '_24_usage":"24","band_5":{"allow_rrm_disable":true,"antenna_mode":'
            '"default","bandwidth":0,"channel":0,"disabled":true,"power":0,"pow'
            'er_max":0,"power_min":0,"preamble":"auto","usage":"string"},"band_'
            '5_on_24_radio":{"allow_rrm_disable":true,"antenna_mode":"default",'
            '"bandwidth":0,"channel":0,"disabled":true,"power":0,"power_max":0,'
            '"power_min":0,"preamble":"auto","usage":"string"},"scanning_enable'
            'd":true},"site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","switch_'
            'config":{"enabled":true,"eth0":{"port_vlan_id":1,"vlan_ids":[0]},"'
            'eth1":{"port_vlan_id":1,"vlan_ids":[0]},"eth2":{"port_vlan_id":1,"'
            'vlan_ids":[0]},"eth3":{"port_vlan_id":1,"vlan_ids":[0]},"module":{'
            '"port_vlan_id":1,"vlan_ids":[0]},"wds":{"port_vlan_id":1,"vlan_ids'
            '":[0]}},"usb_config":{"cacert":"string","channel":0,"enabled":true'
            ',"host":"string","port":0,"type":"string","verify_cert":true},"var'
            's":{},"x":0,"y":0}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Counts the number of entries in device config history for distinct field with given filters
    def test_count_site_device_config_history(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        distinct = None
        mac = None
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.count_site_device_config_history(site_id, distinct, mac, page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"distinct":"string","end":0,"limit":0,"percentage":0,"results":[{'
            '"count":0,"property":"string"}],"start":0,"total":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Search for entries in device config history
    def test_search_site_device_config_history(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_type = 'ap'
        mac = None
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.search_site_device_config_history(site_id, device_type, mac, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":1531862583,"limit":10,"results":[{"channel_24":11,"channel_'
            '5":100,"radio_macs":["5c5b352e000a","5c5b352e000b","5c5b352e000c"]'
            ',"radios":[{"band":"24","channel":11},{"band":"5","channel":100}],'
            '"secpolicy_violated":false,"ssids":["test24","test5"],"ssids_24":['
            '"test24"],"ssids_5":["test5"],"timestamp":1531855856.643369,"versi'
            'on":"apfw-0.2.14754-cersei-75c8","wlans":[{"auth":"psk","bands":["'
            '24"],"id":"be22bba7-8e22-e1cf-5185-b880816fe2cf","ssid":"test24","'
            'vlan_ids":["1"]},{"auth":"psk","bands":["5"],"id":"f8c18724-4118-3'
            '487-811a-f98964988604","ssid":"test5","vlan_ids":["1"]}]}],"start"'
            ':1531776183,"total":1}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Counts the number of entries in ap events history for distinct field with given filters
    def test_count_site_devices(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        distinct = 'model'
        hostname = None
        model = None
        mac = None
        version = None
        mxtunnel_status = None
        mxedge_id = None
        lldp_system_name = None
        lldp_system_desc = None
        lldp_port_id = None
        lldp_mgmt_addr = None
        map_id = None
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.count_site_devices(site_id, distinct, hostname, model, mac, version, mxtunnel_status, mxedge_id, lldp_system_name, lldp_system_desc, lldp_port_id, lldp_mgmt_addr, map_id, page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"distinct":"model","end":1604304258.674506,"limit":10,"percentage'
            '":100,"results":[{"count":1,"model":"AP41"},{"count":1,"model":"AP'
            '43"}],"start":1604217858.6744902,"total":2}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Counts the number of entries in ap events history for distinct field with given filters
    def test_count_site_device_events(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        distinct = 'model'
        model = None
        mtype = None
        type_code = None
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.count_site_device_events(site_id, distinct, model, mtype, type_code, page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"distinct":"type","end":1531862583,"limit":10,"percentage":100,"r'
            'esults":[{"count":10,"type":"AP_CONNECT_STATUS"},{"count":4,"type"'
            ':"AP_CONFIGURED"}],"start":1531776183,"total":2}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Search Devices Events
    def test_search_site_devices_events(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_type = None
        mac = None
        model = None
        text = None
        timestamp = None
        mtype = None
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.search_site_devices_events(site_id, device_type, mac, model, text, timestamp, mtype, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":1531862583,"limit":2,"next":"/api/v1/sites/8aaba0aa-09cc-44'
            'bd-9709-33b98040550c/devices/events/search?ap=5c5b350e0001&end=153'
            '1855849.000&limit=2&start=1531776183.0","results":[{"last_reboot_t'
            'ime":1531854327,"text":"Success","timestamp":1531855849.226722,"ty'
            'pe":"AP_CONNECT_STATUS","type_code":2002},{"timestamp":1531854326,'
            '"type":"AP_CONFIGURED"}],"start":1531776183,"total":14}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # To download the exported device information
    def test_export_site_devices(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.export_site_devices(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Import Information for Multiple Devices
    #
    #CSV format:
    #```csv
    #mac,name,map_id,x,y,height,orientation,labels,band_24.power,band_24.bandwidth,band_24.channel,band_24.disabled,band_5.power,band_5.bandwidth,band_5.channel,band_5.disabled,band_6.power,band_6.bandwidth,band_6.channel,band_6.disabled
    #5c5b53010101,"AP 1",845a23bf-bed9-e43c-4c86-6fa474be7ae5,30,10,2.3,45,"guest, campus, vip",1,20,0,false,0,40,0,false,17,80,0,false
    #```
    def test_import_site_devices(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('[{"aeroscout":{"enabled":false,"host":"string","locate_connected":'
            'true},"ble_config":{"beacon_enabled":true,"beacon_rate":0,"beacon_'
            'rate_mode":"default","beam_disabled":[0],"eddystone_uid_adv_power"'
            ':-100,"eddystone_uid_beams":"string","eddystone_uid_enabled":true,'
            '"eddystone_uid_freq_msec":0,"eddystone_uid_instance":"string","edd'
            'ystone_uid_namespace":"string","eddystone_url_adv_power":0,"eddyst'
            'one_url_beams":"string","eddystone_url_enabled":true,"eddystone_ur'
            'l_freq_msec":0,"eddystone_url_url":"string","ibeacon_adv_power":-1'
            '00,"ibeacon_beams":"string","ibeacon_enabled":false,"ibeacon_freq_'
            'msec":0,"ibeacon_major":0,"ibeacon_minor":0,"ibeacon_uuid":"1f89bc'
            '00-d0af-481b-82fe-a6629259a39f","power":9,"power_mode":"string"},"'
            'created_time":0,"deviceprofile_id":"366a0f23-8d77-404c-8908-b2e629'
            'ba0782","disable_eth1":false,"disable_eth2":false,"disable_eth3":f'
            'alse,"disable_module":false,"for_site":true,"height":0,"id":"484f6'
            'eca-6276-4993-bfeb-55cbbbba6f08","image1_url":"string","image2_url'
            '":"string","image3_url":"string","iot_config":{"A1":{"enabled":fal'
            'se,"name":"string","output":true,"pullup":"internal","value":0},"A'
            '2":{"enabled":false,"name":"string","output":true,"pullup":"intern'
            'al","value":0},"A3":{"enabled":false,"name":"string","output":true'
            ',"pullup":"internal","value":0},"A4":{"enabled":false,"name":"stri'
            'ng","output":true,"pullup":"internal","value":0},"DI1":{"enabled":'
            'false,"name":"string","pullup":"internal"},"DI2":{"enabled":false,'
            '"name":"string","pullup":"internal"},"DO":{"enabled":false,"name":'
            '"string","output":true,"pullup":"internal","value":0}},"ip_config"'
            ':{"dns":["string"],"dns_suffix":["string"],"gateway":"192.168.0.1"'
            ',"gateway6":"2001:0db8:85a3:0000:0000:8a2e:0370:7334","ip":"192.16'
            '8.0.1","ip6":"2001:0db8:85a3:0000:0000:8a2e:0370:7334","mtu":0,"ne'
            'tmask":"192.168.0.1","netmask6":"2001:0db8:85a3:0000:0000:8a2e:037'
            '0:7334","type":"static","type6":"static","vlan_id":1},"led":{"brig'
            'htness":0,"enabled":true},"locked":true,"map_id":"09d2b626-2e4e-45'
            'ef-a3c4-e6aeb6c83db1","mesh":{"enabled":false,"group":0,"role":"ba'
            'se"},"modified_time":0,"name":"string","notes":"string","ntp_serve'
            'rs":["string"],"org_id":"a40f5d1f-d889-42e9-94ea-b9b33585fc6b","or'
            'ientation":0,"poe_passthrough":false,"port_config":{"property1":{"'
            'disabled":true,"dynamic_vlan":{"default_vlan_id":0,"enabled":true,'
            '"type":"string","vlans":{"property1":"string","property2":"string"'
            '}},"enable_mac_auth":true,"forwarding":"all","mx_tunnel_id":"5f5ca'
            'c07-0805-46ea-aafd-5c5729042729","mxtunnel_name":"string","port_au'
            'th":"none","port_vlan_id":0,"radius_config":{"acct_interim_interva'
            'l":0,"acct_servers":[{"host":"string","keywrap_enabled":true,"keyw'
            'rap_format":"string","keywrap_kek":"string","keywrap_mack":"string'
            '","port":1813,"secret":"string"}],"auth_servers":[{"host":"string"'
            ',"keywrap_enabled":true,"keywrap_format":"string","keywrap_kek":"s'
            'tring","keywrap_mack":"string","port":1812,"secret":"string"}],"au'
            'th_servers_retries":3,"auth_servers_timeout":5,"coa_enabled":false'
            ',"coa_port":3799,"network":"string","source_ip":"string"},"radsec"'
            ':{"enabled":true,"idle_timeout":0,"server_name":"string","servers"'
            ':[{"host":"string","port":0}],"use_mxedge":true},"vlan_id":0,"vlan'
            'd_ids":[0],"wxtunnel_id":"string","wxtunnel_remote_id":"string"},"'
            'property2":{"disabled":true,"dynamic_vlan":{"default_vlan_id":0,"e'
            'nabled":true,"type":"string","vlans":{"property1":"string","proper'
            'ty2":"string"}},"enable_mac_auth":true,"forwarding":"all","mx_tunn'
            'el_id":"5f5cac07-0805-46ea-aafd-5c5729042729","mxtunnel_name":"str'
            'ing","port_auth":"none","port_vlan_id":0,"radius_config":{"acct_in'
            'terim_interval":0,"acct_servers":[{"host":"string","keywrap_enable'
            'd":true,"keywrap_format":"string","keywrap_kek":"string","keywrap_'
            'mack":"string","port":1813,"secret":"string"}],"auth_servers":[{"h'
            'ost":"string","keywrap_enabled":true,"keywrap_format":"string","ke'
            'ywrap_kek":"string","keywrap_mack":"string","port":1812,"secret":"'
            'string"}],"auth_servers_retries":3,"auth_servers_timeout":5,"coa_e'
            'nabled":false,"coa_port":3799,"network":"string","source_ip":"stri'
            'ng"},"radsec":{"enabled":true,"idle_timeout":0,"server_name":"stri'
            'ng","servers":[{"host":"string","port":0}],"use_mxedge":true},"vla'
            'n_id":0,"vland_ids":[0],"wxtunnel_id":"string","wxtunnel_remote_id'
            '":"string"}},"pwr_config":{"base":0},"radio_config":{"ant_gain_24"'
            ':0,"ant_gain_5":0,"ant_gain_6":0,"band_24":{"allow_rrm_disable":tr'
            'ue,"ant_gain":0,"antenna_mode":"default","bandwidth":20,"channel":'
            '0,"channels":[0],"disabled":true,"power":0,"power_max":0,"power_mi'
            'n":0,"preamble":"short","usage":"24"},"band_24_usage":"24","band_5'
            '":{"allow_rrm_disable":true,"ant_gain":0,"antenna_mode":"default",'
            '"bandwidth":20,"channel":0,"channels":[0],"disabled":true,"power":'
            '0,"power_max":0,"power_min":0,"preamble":"short","usage":"24"},"ba'
            'nd_5_on_24_radio":{"allow_rrm_disable":true,"ant_gain":0,"antenna_'
            'mode":"default","bandwidth":20,"channel":0,"channels":[0],"disable'
            'd":true,"power":0,"power_max":0,"power_min":0,"preamble":"short","'
            'usage":"24"},"band_6":{"allow_rrm_disable":true,"ant_gain":0,"ante'
            'nna_mode":"default","bandwidth":20,"channel":0,"channels":[0],"dis'
            'abled":true,"power":0,"power_max":0,"power_min":0,"preamble":"shor'
            't","usage":"24"},"scanning_enabled":true},"site_id":"72771e6a-6f5e'
            '-4de4-a5b9-1266c4197811","switch_config":{"enabled":false,"eth0":{'
            '"enable_vlan":true,"port_vlan_id":0,"vlan_ids":[0]},"eth1":{"enabl'
            'e_vlan":true,"port_vlan_id":0,"vlan_ids":[0]},"eth2":{"enable_vlan'
            '":true,"port_vlan_id":0,"vlan_ids":[0]},"eth3":{"enable_vlan":true'
            ',"port_vlan_id":0,"vlan_ids":[0]},"module":{"enable_vlan":true,"po'
            'rt_vlan_id":0,"vlan_ids":[0]},"wds":{"enable_vlan":true,"port_vlan'
            '_id":0,"vlan_ids":[0]}},"usb_config":{"cacert":"string","channel":'
            '0,"enabled":true,"host":"string","port":0,"type":"imagotag","verif'
            'y_cert":true},"vars":{},"x":0,"y":0}]', DeviceAp.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.import_site_devices(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"aeroscout":{"enabled":true,"host":"string"},"ble_config":{"beac'
            'on_enabled":true,"beacon_rate":0,"beacon_rate_mode":"string","beam'
            '_disabled":[0],"eddystone_uid_adv_power":-100,"eddystone_uid_beams'
            '":"string","eddystone_uid_enabled":true,"eddystone_uid_freq_msec":'
            '0,"eddystone_uid_instance":"string","eddystone_uid_namespace":"str'
            'ing","eddystone_url_adv_power":0,"eddystone_url_beams":"string","e'
            'ddystone_url_enabled":true,"eddystone_url_freq_msec":0,"eddystone_'
            'url_url":"string","ibeacon_adv_power":-100,"ibeacon_beams":"string'
            '","ibeacon_enabled":true,"ibeacon_freq_msec":0,"ibeacon_major":0,"'
            'ibeacon_minor":0,"ibeacon_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6'
            'ab1","power":0,"power_mode":"string"},"created_time":0,"deviceprof'
            'ile_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","disable_eth1":true'
            ',"disable_eth2":true,"disable_eth3":true,"disable_module":true,"he'
            'ight":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","image1_url":"'
            'string","iot_config":{"A1":{"enabled":true,"name":"string","output'
            '":true,"pullup":"internal","value":true},"A2":{"enabled":true,"nam'
            'e":"string","output":true,"pullup":"internal","value":true},"A3":{'
            '"enabled":true,"name":"string","output":true,"pullup":"internal","'
            'value":true},"A4":{"enabled":true,"name":"string","output":true,"p'
            'ullup":"internal","value":true},"DI1":{"enabled":true,"name":"stri'
            'ng","pullup":"internal","value":true},"DI2":{"enabled":true,"name"'
            ':"string","pullup":"internal","value":true},"DO":{"enabled":true,"'
            'name":"string","output":true,"pullup":"internal","value":true}},"i'
            'p_config":{"dns":["string"],"dns_suffix":["string"],"gateway":"str'
            'ing","gateway6":"string","ip":"string","ip6":"string","mtu":0,"net'
            'mask":"string","netmask6":"string","type":"static","type6":"string'
            '","vlan_id":1},"led":{"brightness":0,"enabled":true},"map_id":"b06'
            '9b358-4c97-5319-1f8c-7c5ca64d6ab1","mesh":{"enabled":true,"group":'
            '0,"role":"base"},"modified_time":0,"name":"string","notes":"string'
            '","ntp_servers":["string"],"org_id":"b069b358-4c97-5319-1f8c-7c5ca'
            '64d6ab1","orientation":0,"orientation_overwrite":true,"poe_passthr'
            'ough":true,"pwr_config":{"base":0},"radio_config":{"ant_gain_24":0'
            ',"ant_gain_5":0,"band_24":{"allow_rrm_disable":true,"antenna_mode"'
            ':"default","bandwidth":0,"channel":0,"disabled":true,"power":0,"po'
            'wer_max":0,"power_min":0,"preamble":"auto","usage":"string"},"band'
            '_24_usage":"24","band_5":{"allow_rrm_disable":true,"antenna_mode":'
            '"default","bandwidth":0,"channel":0,"disabled":true,"power":0,"pow'
            'er_max":0,"power_min":0,"preamble":"auto","usage":"string"},"band_'
            '5_on_24_radio":{"allow_rrm_disable":true,"antenna_mode":"default",'
            '"bandwidth":0,"channel":0,"disabled":true,"power":0,"power_max":0,'
            '"power_min":0,"preamble":"auto","usage":"string"},"scanning_enable'
            'd":true},"site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","switch_'
            'config":{"enabled":true,"eth0":{"port_vlan_id":1,"vlan_ids":[0]},"'
            'eth1":{"port_vlan_id":1,"vlan_ids":[0]},"eth2":{"port_vlan_id":1,"'
            'vlan_ids":[0]},"eth3":{"port_vlan_id":1,"vlan_ids":[0]},"module":{'
            '"port_vlan_id":1,"vlan_ids":[0]},"wds":{"port_vlan_id":1,"vlan_ids'
            '":[0]}},"usb_config":{"cacert":"string","channel":0,"enabled":true'
            ',"host":"string","port":0,"type":"string","verify_cert":true},"var'
            's":{},"x":0,"y":0}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Counts the number of entries in device config history for distinct field with given filters
    def test_count_site_device_last_config(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        distinct = 'mac'
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.count_site_device_last_config(site_id, distinct, page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"distinct":"ap","end":1604310805,"limit":10,"percentage":100,"res'
            'ults":[{"ap":"5c5b35000000","count":1},{"ap":"5c5b35000001","count'
            '":1}],"start":1604307205,"total":2}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Search Device Last Configs
    def test_search_site_device_last_configs(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_type = 'ap'
        mac = None
        version = None
        name = None
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.search_site_device_last_configs(site_id, device_type, mac, version, name, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":1531862583,"limit":10,"results":[{"channel_24":11,"channel_'
            '5":100,"radio_macs":["5c5b352e000a","5c5b352e000b","5c5b352e000c"]'
            ',"radios":[{"band":"24","channel":11},{"band":"5","channel":100}],'
            '"secpolicy_violated":false,"ssids":["test24","test5"],"ssids_24":['
            '"test24"],"ssids_5":["test5"],"timestamp":1531855856.643369,"versi'
            'on":"apfw-0.2.14754-cersei-75c8","wlans":[{"auth":"psk","bands":["'
            '24"],"id":"be22bba7-8e22-e1cf-5185-b880816fe2cf","ssid":"test24","'
            'vlan_ids":["1"]},{"auth":"psk","bands":["5"],"id":"f8c18724-4118-3'
            '487-811a-f98964988604","ssid":"test5","vlan_ids":["1"]}]}],"start"'
            ':1531776183,"total":1}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Note that only the devices that are connected will be restarted.
    def test_multi_restart_site_devices(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"device_ids":["00000000-0000-0000-1000-5c5b35584a6f","00000000-00'
            '00-0000-1000-5c5b350ea3b3"]}', ApiV1SitesDevicesRestartRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.multi_restart_site_devices(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Search Device
    def test_search_site_devices(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        hostname = None
        mtype = 'ap'
        model = None
        mac = None
        version = None
        power_constrained = None
        ip_address = '192.168.1.1'
        mxtunnel_status = None
        mxedge_id = None
        lldp_system_name = None
        lldp_system_desc = None
        lldp_port_id = None
        lldp_mgmt_addr = None
        band_24_channel = None
        band_5_channel = None
        band_6_channel = None
        band_24_bandwith = None
        band_5_bandwith = None
        band_6_bandwith = None
        eth_0_port_speed = None
        sort = 'timestamp'
        desc_sort = None
        stats = False
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.search_site_devices(site_id, hostname, mtype, model, mac, version, power_constrained, ip_address, mxtunnel_status, mxedge_id, lldp_system_name, lldp_system_desc, lldp_port_id, lldp_mgmt_addr, band_24_channel, band_5_channel, band_6_channel, band_24_bandwith, band_5_bandwith, band_6_bandwith, eth_0_port_speed, sort, desc_sort, stats, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":0,"limit":0,"next":"string","results":[{"hostname":["AP41-S'
            'TB-3E5299-WH-2001","AP41-STB-3E5299-WH-50","AP41-STB-3E5299","5c5b'
            '353e5299"],"ip":"10.2.16.205","lldp_mgmt_addr":"10.2.10.139","lldp'
            '_port_desc":"GigabitEthernet1/0/1","lldp_port_id":"Gi1/0/1","lldp_'
            'system_desc":"Cisco IOS Software, C2960S Software (C2960S-UNIVERSA'
            'LK9-M), Version 15.2(1)E1, RELEASE SOFTWARE (fc2)\\nTechnical Supp'
            'ort: http://www.cisco.com/techsupport\\nCopyright (c) 1986-2013 by'
            ' Cisco Systems, Inc.\\nCompiled Fri 22-Nov-13 07:10 by prod_rel_te'
            'am","lldp_system_name":"ME-DC-1-ACC-SW","mac":"5c5b353e5299","mode'
            'l":"AP41","mxedge_id":"00000000-0000-0000-1000-43a81f238391","mxtu'
            'nnel_status":"down","org_id":"6748cfa6-4e12-11e6-9188-0242ac110007'
            '","site_id":"a8178443-ecb5-461c-b854-f16627619ab3","sku":"AP41-US"'
            ',"timestamp":1596588619.007,"uptime":85280,"version":"0.7.20216"}]'
            ',"start":0,"total":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Delete Site Device
    def test_delete_site_device(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_device(site_id, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Device Configuration
    def test_get_site_device(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_device(site_id, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"aeroscout":{"enabled":false,"host":"string","locate_connected":t'
            'rue},"ble_config":{"beacon_enabled":true,"beacon_rate":0,"beacon_r'
            'ate_mode":"default","beam_disabled":[0],"eddystone_uid_adv_power":'
            '-100,"eddystone_uid_beams":"string","eddystone_uid_enabled":true,"'
            'eddystone_uid_freq_msec":0,"eddystone_uid_instance":"string","eddy'
            'stone_uid_namespace":"string","eddystone_url_adv_power":0,"eddysto'
            'ne_url_beams":"string","eddystone_url_enabled":true,"eddystone_url'
            '_freq_msec":0,"eddystone_url_url":"string","ibeacon_adv_power":-10'
            '0,"ibeacon_beams":"string","ibeacon_enabled":false,"ibeacon_freq_m'
            'sec":0,"ibeacon_major":0,"ibeacon_minor":0,"ibeacon_uuid":"1f89bc0'
            '0-d0af-481b-82fe-a6629259a39f","power":9,"power_mode":"string"},"c'
            'reated_time":0,"deviceprofile_id":"366a0f23-8d77-404c-8908-b2e629b'
            'a0782","disable_eth1":false,"disable_eth2":false,"disable_eth3":fa'
            'lse,"disable_module":false,"for_site":true,"height":0,"id":"474f6e'
            'ca-6276-4993-bfeb-5fcbbbba6f08","image1_url":"string","image2_url"'
            ':"string","image3_url":"string","iot_config":{"A1":{"enabled":fals'
            'e,"name":"string","output":true,"pullup":"internal","value":0},"A2'
            '":{"enabled":false,"name":"string","output":true,"pullup":"interna'
            'l","value":0},"A3":{"enabled":false,"name":"string","output":true,'
            '"pullup":"internal","value":0},"A4":{"enabled":false,"name":"strin'
            'g","output":true,"pullup":"internal","value":0},"DI1":{"enabled":f'
            'alse,"name":"string","pullup":"internal"},"DI2":{"enabled":false,"'
            'name":"string","pullup":"internal"},"DO":{"enabled":false,"name":"'
            'string","output":true,"pullup":"internal","value":0}},"ip_config":'
            '{"dns":["string"],"dns_suffix":["string"],"gateway":"192.168.0.1",'
            '"gateway6":"2001:0db8:85a3:0000:0000:8a2e:0370:7334","ip":"192.168'
            '.0.1","ip6":"2001:0db8:85a3:0000:0000:8a2e:0370:7334","mtu":0,"net'
            'mask":"192.168.0.1","netmask6":"2001:0db8:85a3:0000:0000:8a2e:0370'
            ':7334","type":"static","type6":"static","vlan_id":1},"led":{"brigh'
            'tness":0,"enabled":true},"map_id":"09d2b626-2e4e-45ef-a3c4-e6aeb6c'
            '83db1","mesh":{"enabled":false,"group":0,"role":"base"},"modified_'
            'time":0,"name":"string","notes":"string","ntp_servers":["string"],'
            '"org_id":"a40f5d1f-d889-42e9-94ea-b9b33585fc6b","orientation":0,"o'
            'rientation_overwrite":true,"poe_passthrough":false,"port_config":{'
            '"property1":{"disabled":true,"dynamic_vlan":{"default_vlan_id":0,"'
            'enabled":true,"type":"string","vlans":{"property1":"string","prope'
            'rty2":"string"}},"enable_mac_auth":true,"forwarding":"all","mx_tun'
            'nel_id":"5f5cac07-0805-46ea-aafd-5c5729042729","mxtunnel_name":"st'
            'ring","port_auth":"none","port_vlan_id":0,"radius_config":{"acct_i'
            'nterim_interval":0,"acct_servers":[{"host":"string","port":1813,"s'
            'ecret":"string"}],"auth_servers":[{"host":"string","port":1812,"se'
            'cret":"string"}],"auth_servers_retries":3,"auth_servers_timeout":5'
            ',"coa_enabled":false,"coa_port":3799,"network":"string","source_ip'
            '":"string"},"radsec":{"enabled":true,"idle_timeout":0,"server_name'
            '":"string","servers":[{"host":"string","port":0}],"use_mxedge":tru'
            'e},"vlan_id":0,"vland_ids":[0],"wxtunnel_id":"string","wxtunnel_re'
            'mote_id":"string"},"property2":{"disabled":true,"dynamic_vlan":{"d'
            'efault_vlan_id":0,"enabled":true,"type":"string","vlans":{"propert'
            'y1":"string","property2":"string"}},"enable_mac_auth":true,"forwar'
            'ding":"all","mx_tunnel_id":"5f5cac07-0805-46ea-aafd-5c5729042729",'
            '"mxtunnel_name":"string","port_auth":"none","port_vlan_id":0,"radi'
            'us_config":{"acct_interim_interval":0,"acct_servers":[{"host":"str'
            'ing","port":1813,"secret":"string"}],"auth_servers":[{"host":"stri'
            'ng","port":1812,"secret":"string"}],"auth_servers_retries":3,"auth'
            '_servers_timeout":5,"coa_enabled":false,"coa_port":3799,"network":'
            '"string","source_ip":"string"},"radsec":{"enabled":true,"idle_time'
            'out":0,"server_name":"string","servers":[{"host":"string","port":0'
            '}],"use_mxedge":true},"vlan_id":0,"vland_ids":[0],"wxtunnel_id":"s'
            'tring","wxtunnel_remote_id":"string"}},"pwr_config":{"base":0},"ra'
            'dio_config":{"ant_gain_24":0,"ant_gain_5":0,"ant_gain_6":0,"band_2'
            '4":{"allow_rrm_disable":true,"ant_gain":0,"antenna_mode":"default"'
            ',"bandwidth":20,"channel":0,"channels":[0],"disabled":true,"power"'
            ':0,"power_max":0,"power_min":0,"preamble":"short","usage":"24"},"b'
            'and_24_usage":"24","band_5":{"allow_rrm_disable":true,"ant_gain":0'
            ',"antenna_mode":"default","bandwidth":20,"channel":0,"channels":[0'
            '],"disabled":true,"power":0,"power_max":0,"power_min":0,"preamble"'
            ':"short","usage":"24"},"band_5_on_24_radio":{"allow_rrm_disable":t'
            'rue,"ant_gain":0,"antenna_mode":"default","bandwidth":20,"channel"'
            ':0,"channels":[0],"disabled":true,"power":0,"power_max":0,"power_m'
            'in":0,"preamble":"short","usage":"24"},"band_6":{"allow_rrm_disabl'
            'e":true,"ant_gain":0,"antenna_mode":"default","bandwidth":20,"chan'
            'nel":0,"channels":[0],"disabled":true,"power":0,"power_max":0,"pow'
            'er_min":0,"preamble":"short","usage":"24"},"scanning_enabled":true'
            '},"site_id":"72771e6a-6f5e-4de4-a5b9-1266c4197811","switch_config"'
            ':{"enabled":false,"eth0":{"enable_vlan":true,"port_vlan_id":0,"vla'
            'n_ids":[0]},"eth1":{"enable_vlan":true,"port_vlan_id":0,"vlan_ids"'
            ':[0]},"eth2":{"enable_vlan":true,"port_vlan_id":0,"vlan_ids":[0]},'
            '"eth3":{"enable_vlan":true,"port_vlan_id":0,"vlan_ids":[0]},"modul'
            'e":{"enable_vlan":true,"port_vlan_id":0,"vlan_ids":[0]},"wds":{"en'
            'able_vlan":true,"port_vlan_id":0,"vlan_ids":[0]}},"usb_config":{"c'
            'acert":"string","channel":0,"enabled":true,"host":"string","port":'
            '0,"type":"imagotag","verify_cert":true},"vars":{},"x":0,"y":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Update Device Configuration
    def test_update_site_device(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"aeroscout":{"enabled":true,"host":"string"},"ble_config":{"beaco'
            'n_enabled":true,"beacon_rate":0,"beacon_rate_mode":"default","beam'
            '_disabled":[0],"eddystone_uid_adv_power":-100,"eddystone_uid_beams'
            '":"string","eddystone_uid_enabled":true,"eddystone_uid_freq_msec":'
            '0,"eddystone_uid_instance":"string","eddystone_uid_namespace":"str'
            'ing","eddystone_url_adv_power":0,"eddystone_url_beams":"string","e'
            'ddystone_url_enabled":true,"eddystone_url_freq_msec":0,"eddystone_'
            'url_url":"string","ibeacon_adv_power":-100,"ibeacon_beams":"string'
            '","ibeacon_enabled":true,"ibeacon_freq_msec":0,"ibeacon_major":0,"'
            'ibeacon_minor":0,"ibeacon_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6'
            'ab1","power":1,"power_mode":"string"},"deviceprofile_id":"b069b358'
            '-4c97-5319-1f8c-7c5ca64d6ab1","disable_eth1":true,"disable_eth2":t'
            'rue,"disable_eth3":true,"disable_module":true,"height":0,"image1_u'
            'rl":"string","iot_config":{"A1":{"enabled":true,"name":"string","o'
            'utput":false,"pullup":"internal"},"A2":{"enabled":true,"name":"str'
            'ing","output":false,"pullup":"internal"},"A3":{"enabled":true,"nam'
            'e":"string","output":false,"pullup":"internal"},"A4":{"enabled":tr'
            'ue,"name":"string","output":false,"pullup":"internal"},"DI1":{"ena'
            'bled":true,"name":"string","pullup":"internal"},"DI2":{"enabled":t'
            'rue,"name":"string","pullup":"internal"},"DO":{"enabled":true,"nam'
            'e":"string","output":true,"pullup":"internal","value":1}},"ip_conf'
            'ig":{"dns":["string"],"dns_suffix":["string"],"gateway":"192.168.0'
            '.1","gateway6":"2001:0db8:85a3:0000:0000:8a2e:0370:7334","ip":"192'
            '.168.0.1","ip6":"2001:0db8:85a3:0000:0000:8a2e:0370:7334","mtu":0,'
            '"netmask":"192.168.0.1","netmask6":"2001:0db8:85a3:0000:0000:8a2e:'
            '0370:7334","type":"static","type6":"static","vlan_id":1},"led":{"b'
            'rightness":0,"enabled":true},"map_id":"b069b358-4c97-5319-1f8c-7c5'
            'ca64d6ab1","mesh":{"enabled":true,"group":0,"role":"base"},"name":'
            '"string","notes":"string","ntp_servers":["string"],"orientation":0'
            ',"orientation_overwrite":true,"poe_passthrough":true,"port_config"'
            ':{"property1":{"disabled":true,"dynamic_vlan":{"default_vlan_id":1'
            ',"enabled":true,"type":"string","vlans":{"property1":"string","pro'
            'perty2":"string"}},"enable_mac_auth":true,"forwarding":"all","mx_t'
            'unnel_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mxtunnel_name":"'
            'string","port_auth":"none","port_vlan_id":1,"radius_config":{"acct'
            '_interim_interval":0,"acct_servers":[{"host":"string","port":0,"se'
            'cret":"string"}],"auth_servers":[{"host":"string","port":0,"secret'
            '":"string"}],"auth_servers_retries":0,"auth_servers_timeout":0},"r'
            'adsec":{"enabled":true,"server_name":"string","servers":[{"host":"'
            'string","port":0}],"use_mxedge":true},"vland_ids":[0],"wxtunnel_id'
            '":"string","wxtunnel_remote_id":"string"},"property2":{"disabled":'
            'true,"dynamic_vlan":{"default_vlan_id":1,"enabled":true,"type":"st'
            'ring","vlans":{"property1":"string","property2":"string"}},"enable'
            '_mac_auth":true,"forwarding":"all","mx_tunnel_id":"420f6eca-6276-5'
            '993-bfeb-53cbbbba6f01","mxtunnel_name":"string","port_auth":"none"'
            ',"port_vlan_id":1,"radius_config":{"acct_interim_interval":0,"acct'
            '_servers":[{"host":"string","port":0,"secret":"string"}],"auth_ser'
            'vers":[{"host":"string","port":0,"secret":"string"}],"auth_servers'
            '_retries":0,"auth_servers_timeout":0},"radsec":{"enabled":true,"se'
            'rver_name":"string","servers":[{"host":"string","port":0}],"use_mx'
            'edge":true},"vland_ids":[0],"wxtunnel_id":"string","wxtunnel_remot'
            'e_id":"string"}},"pwr_config":{"base":0},"radio_config":{"ant_gain'
            '_24":0,"ant_gain_5":0,"band_24":{"allow_rrm_disable":true,"antenna'
            '_mode":"default","bandwidth":20,"channel":0,"disabled":true,"power'
            '":0,"power_max":0,"power_min":0,"preamble":"auto","usage":"24"},"b'
            'and_24_usage":"24","band_5":{"allow_rrm_disable":true,"antenna_mod'
            'e":"default","bandwidth":20,"channel":0,"disabled":true,"power":0,'
            '"power_max":0,"power_min":0,"preamble":"auto","usage":"24"},"band_'
            '5_on_24_radio":{"allow_rrm_disable":true,"antenna_mode":"default",'
            '"bandwidth":20,"channel":0,"disabled":true,"power":0,"power_max":0'
            ',"power_min":0,"preamble":"auto","usage":"24"},"scanning_enabled":'
            'true},"switch_config":{"enabled":true,"eth0":{"port_vlan_id":1,"vl'
            'an_ids":[0]},"eth1":{"port_vlan_id":1,"vlan_ids":[0]},"eth2":{"por'
            't_vlan_id":1,"vlan_ids":[0]},"eth3":{"port_vlan_id":1,"vlan_ids":['
            '0]},"module":{"port_vlan_id":1,"vlan_ids":[0]},"wds":{"port_vlan_i'
            'd":1,"vlan_ids":[0]}},"usb_config":{"cacert":"string","channel":0,'
            '"enabled":true,"host":"string","port":0,"type":"imagotag","verify_'
            'cert":true},"vars":{},"x":0,"y":0}')

        # Perform the API call through the SDK function
        result = self.controller.update_site_device(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"aeroscout":{"enabled":false,"host":"string","locate_connected":t'
            'rue},"ble_config":{"beacon_enabled":true,"beacon_rate":0,"beacon_r'
            'ate_mode":"default","beam_disabled":[0],"eddystone_uid_adv_power":'
            '-100,"eddystone_uid_beams":"string","eddystone_uid_enabled":true,"'
            'eddystone_uid_freq_msec":0,"eddystone_uid_instance":"string","eddy'
            'stone_uid_namespace":"string","eddystone_url_adv_power":0,"eddysto'
            'ne_url_beams":"string","eddystone_url_enabled":true,"eddystone_url'
            '_freq_msec":0,"eddystone_url_url":"string","ibeacon_adv_power":-10'
            '0,"ibeacon_beams":"string","ibeacon_enabled":false,"ibeacon_freq_m'
            'sec":0,"ibeacon_major":0,"ibeacon_minor":0,"ibeacon_uuid":"1f89bc0'
            '0-d0af-481b-82fe-a6629259a39f","power":9,"power_mode":"string"},"c'
            'reated_time":0,"deviceprofile_id":"366a0f23-8d77-404c-8908-b2e629b'
            'a0782","disable_eth1":false,"disable_eth2":false,"disable_eth3":fa'
            'lse,"disable_module":false,"for_site":true,"height":0,"id":"474f6e'
            'ca-6276-4993-bfeb-5fcbbbba6f08","image1_url":"string","image2_url"'
            ':"string","image3_url":"string","iot_config":{"A1":{"enabled":fals'
            'e,"name":"string","output":true,"pullup":"internal","value":0},"A2'
            '":{"enabled":false,"name":"string","output":true,"pullup":"interna'
            'l","value":0},"A3":{"enabled":false,"name":"string","output":true,'
            '"pullup":"internal","value":0},"A4":{"enabled":false,"name":"strin'
            'g","output":true,"pullup":"internal","value":0},"DI1":{"enabled":f'
            'alse,"name":"string","pullup":"internal"},"DI2":{"enabled":false,"'
            'name":"string","pullup":"internal"},"DO":{"enabled":false,"name":"'
            'string","output":true,"pullup":"internal","value":0}},"ip_config":'
            '{"dns":["string"],"dns_suffix":["string"],"gateway":"192.168.0.1",'
            '"gateway6":"2001:0db8:85a3:0000:0000:8a2e:0370:7334","ip":"192.168'
            '.0.1","ip6":"2001:0db8:85a3:0000:0000:8a2e:0370:7334","mtu":0,"net'
            'mask":"192.168.0.1","netmask6":"2001:0db8:85a3:0000:0000:8a2e:0370'
            ':7334","type":"static","type6":"static","vlan_id":1},"led":{"brigh'
            'tness":0,"enabled":true},"map_id":"09d2b626-2e4e-45ef-a3c4-e6aeb6c'
            '83db1","mesh":{"enabled":false,"group":0,"role":"base"},"modified_'
            'time":0,"name":"string","notes":"string","ntp_servers":["string"],'
            '"org_id":"a40f5d1f-d889-42e9-94ea-b9b33585fc6b","orientation":0,"o'
            'rientation_overwrite":true,"poe_passthrough":false,"port_config":{'
            '"property1":{"disabled":true,"dynamic_vlan":{"default_vlan_id":0,"'
            'enabled":true,"type":"string","vlans":{"property1":"string","prope'
            'rty2":"string"}},"enable_mac_auth":true,"forwarding":"all","mx_tun'
            'nel_id":"5f5cac07-0805-46ea-aafd-5c5729042729","mxtunnel_name":"st'
            'ring","port_auth":"none","port_vlan_id":0,"radius_config":{"acct_i'
            'nterim_interval":0,"acct_servers":[{"host":"string","port":1813,"s'
            'ecret":"string"}],"auth_servers":[{"host":"string","port":1812,"se'
            'cret":"string"}],"auth_servers_retries":3,"auth_servers_timeout":5'
            ',"coa_enabled":false,"coa_port":3799,"network":"string","source_ip'
            '":"string"},"radsec":{"enabled":true,"idle_timeout":0,"server_name'
            '":"string","servers":[{"host":"string","port":0}],"use_mxedge":tru'
            'e},"vlan_id":0,"vland_ids":[0],"wxtunnel_id":"string","wxtunnel_re'
            'mote_id":"string"},"property2":{"disabled":true,"dynamic_vlan":{"d'
            'efault_vlan_id":0,"enabled":true,"type":"string","vlans":{"propert'
            'y1":"string","property2":"string"}},"enable_mac_auth":true,"forwar'
            'ding":"all","mx_tunnel_id":"5f5cac07-0805-46ea-aafd-5c5729042729",'
            '"mxtunnel_name":"string","port_auth":"none","port_vlan_id":0,"radi'
            'us_config":{"acct_interim_interval":0,"acct_servers":[{"host":"str'
            'ing","port":1813,"secret":"string"}],"auth_servers":[{"host":"stri'
            'ng","port":1812,"secret":"string"}],"auth_servers_retries":3,"auth'
            '_servers_timeout":5,"coa_enabled":false,"coa_port":3799,"network":'
            '"string","source_ip":"string"},"radsec":{"enabled":true,"idle_time'
            'out":0,"server_name":"string","servers":[{"host":"string","port":0'
            '}],"use_mxedge":true},"vlan_id":0,"vland_ids":[0],"wxtunnel_id":"s'
            'tring","wxtunnel_remote_id":"string"}},"pwr_config":{"base":0},"ra'
            'dio_config":{"ant_gain_24":0,"ant_gain_5":0,"ant_gain_6":0,"band_2'
            '4":{"allow_rrm_disable":true,"ant_gain":0,"antenna_mode":"default"'
            ',"bandwidth":20,"channel":0,"channels":[0],"disabled":true,"power"'
            ':0,"power_max":0,"power_min":0,"preamble":"short","usage":"24"},"b'
            'and_24_usage":"24","band_5":{"allow_rrm_disable":true,"ant_gain":0'
            ',"antenna_mode":"default","bandwidth":20,"channel":0,"channels":[0'
            '],"disabled":true,"power":0,"power_max":0,"power_min":0,"preamble"'
            ':"short","usage":"24"},"band_5_on_24_radio":{"allow_rrm_disable":t'
            'rue,"ant_gain":0,"antenna_mode":"default","bandwidth":20,"channel"'
            ':0,"channels":[0],"disabled":true,"power":0,"power_max":0,"power_m'
            'in":0,"preamble":"short","usage":"24"},"band_6":{"allow_rrm_disabl'
            'e":true,"ant_gain":0,"antenna_mode":"default","bandwidth":20,"chan'
            'nel":0,"channels":[0],"disabled":true,"power":0,"power_max":0,"pow'
            'er_min":0,"preamble":"short","usage":"24"},"scanning_enabled":true'
            '},"site_id":"72771e6a-6f5e-4de4-a5b9-1266c4197811","switch_config"'
            ':{"enabled":false,"eth0":{"enable_vlan":true,"port_vlan_id":0,"vla'
            'n_ids":[0]},"eth1":{"enable_vlan":true,"port_vlan_id":0,"vlan_ids"'
            ':[0]},"eth2":{"enable_vlan":true,"port_vlan_id":0,"vlan_ids":[0]},'
            '"eth3":{"enable_vlan":true,"port_vlan_id":0,"vlan_ids":[0]},"modul'
            'e":{"enable_vlan":true,"port_vlan_id":0,"vlan_ids":[0]},"wds":{"en'
            'able_vlan":true,"port_vlan_id":0,"vlan_ids":[0]}},"usb_config":{"c'
            'acert":"string","channel":0,"enabled":true,"host":"string","port":'
            '0,"type":"imagotag","verify_cert":true},"vars":{},"x":0,"y":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Config CLI Commands
    #For a brown-field switch deployment where we adopted the switch through Adoption Command, we do not wipe out / overwrite the existing config automatically. Instead, we generate CLI commands that we would have generated. The user can inspect, modify, and incorporate this into their existing config manually.
    #
    #Once they feel comfortable about the config we generate, they can enable allow_mist_config where we will take full control of their config like a claimed switch
    def test_get_site_device_config_cmd(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        sort = 'false'

        # Perform the API call through the SDK function
        result = self.controller.get_site_device_config_cmd(site_id, device_id, sort)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"cli":["set system hostname corp-a135"]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # In the case where soemthing happens during/after ZTP, the root-password is modified (required for ZTP to set up outbound-ssh) but the user-defined password config has not be configured. This API can be used to retrieve the temporary password.
    def test_get_site_device_ztp_password(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_device_ztp_password(site_id, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"root_password":"ef8070ef8f924edb592e1819ed64b31172ab8de9d5cde75d'
            '3f46acd9506202ab9b1cbb97e381c5aa11037f17e5ed7b4b609461cd813d944670'
            '549d410ef82f2e"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Restart / Reboot a device
    def test_restart_site_device(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.restart_site_device(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Support / Upload device support files
    #
    ##### Info Param
    #**Parameter**|**Description** 
    # :-------------: |:-------------: |:-------------: 
    #process|Upload 1 file with output of show system processes extensive
    #outbound-ssh|Upload 1 file that concatenates all /var/log/outbound-ssh.log* files
    #messages|Upload 1 to 10 /var/log/messages* files
    #core-dumps|Upload all core dump files, if any
    #full|string|Upload 1 file with output of request support information, 1 file that concatenates all /var/log/outbound-ssh.log files, all core dump files, the 3 most recent /var/log/messages files, and Mist agent logs (for Junos devices running the Mist agent)
    #var-logs|Upload all non-empty files in the /var/log/ directory
    #jma-logs|Upload Mist agent logs (for Junos devices running the Mist agent only)
    def test_upload_site_device_support_file(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"info":"full"}', ApiV1SitesDevicesSupportRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.upload_site_device_support_file(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


