# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.api_v_1_sites_devices_clear_arp_request import ApiV1SitesDevicesClearArpRequest
from mistapi.models.api_v_1_sites_devices_clear_bgp_request import ApiV1SitesDevicesClearBgpRequest
from mistapi.models.api_v_1_sites_devices_release_dhcp_request import ApiV1SitesDevicesReleaseDhcpRequest
from mistapi.models.api_v_1_sites_devices_service_ping_request import ApiV1SitesDevicesServicePingRequest
from mistapi.models.api_v_1_sites_devices_show_route_request import ApiV1SitesDevicesShowRouteRequest
from mistapi.models.api_v_1_sites_devices_show_service_path_request import ApiV1SitesDevicesShowServicePathRequest


class SitesDevicesWANControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesDevicesWANControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_devices_wan
        cls.response_catcher = cls.controller.http_call_back

    # Clear the entire ARP cache or a subset if arguments are provided.
    #
    #*Note*: port_id is optional if neither vlan nor ip is specified
    def test_clear_site_ssr_arp_cache(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"ip":"10.1.1.1","node":"node0","port_id":"wan","vlan":1000}', ApiV1SitesDevicesClearArpRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.clear_site_ssr_arp_cache(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"session":"session_id"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Clear routes associated with one or all BGP neighbors
    def test_clear_site_ssr_bgp_routes(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"neighbor":"all","type":"in","vrf":"TestVrf"}', ApiV1SitesDevicesClearBgpRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.clear_site_ssr_bgp_routes(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"session":"session_id"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Releases an active DHCP lease.
    def test_release_site_ssr_dhcp_lease(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"node":"node0","port":"string"}', ApiV1SitesDevicesReleaseDhcpRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.release_site_ssr_dhcp_lease(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # DNS resolutions are performed on the Device. The output will be available through websocket. As there can be multiple command issued against the same SSR at the same time and the output all goes through the same websocket stream, `session` is used for demux.
    # 
    # #### Subscribe to Device Command outputs
    #`WS /api-ws/v1/stream`
    #
    #```json
    #{
    #    "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
    #}
    #```
    ###### Example output from ws stream
    #```
    # Router      | Hostname               | Resolved | Last Resolved        | Expiration
    #-------------|------------------------|----------|----------------------|---------------------
    # test-device | xxx.yyy.net            | Y        | 2022-03-28T03:56:49Z | 2022-03-28T03:57:49Z
    #```
    def test_test_site_ssr_dns_resolution(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.test_site_ssr_dns_resolution(site_id, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"session":"session_id"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Ping from SSR
    #
    #Service Ping can be performed from the Device. The output will be available through websocket. As there can be multiple command issued against the same device at the same time and the output all goes through the same websocket stream, session is introduced for demux.
    #
    ##### Subscribe to Device Command outputs
    #`WS /api-ws/v1/stream`
    #
    #```json
    #{
    #    "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
    #}
    #```
    ###### Example output from ws stream
    #```json
    #{
    #    "event": "data",
    #    "channel": "/sites/4ac1dcf4-9d8b-7211-65c4-057819f0862b/devices/00000000-0000-0000-1000-5c5b350e0060/cmd",
    #    "data": {
    #        "session": "session_id",
    #        "raw": "64 bytes from 23.211.0.110: seq=8 ttl=58 time=12.323 ms\n"
    #    }
    #}
    #```
    def test_service_ping_from_ssr(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"count":10,"host":"1.1.1.1","service":"web-session"}', ApiV1SitesDevicesServicePingRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.service_ping_from_ssr(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"session":"session_id"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get routes from the Device. The output will be available through websocket. As there can be multiple command issued against the same device at the same time and the output all goes through the same websocket stream, `session` is introduced for demux.
    #
    ##### Subscribe to Device Command outputs
    #`WS /api-ws/v1/stream`
    #
    #```json
    #{
    #    "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
    #}
    #```
    ###### Example output from ws stream
    #```
    #admin@labsystem1.fiedler# show bgp neighbors
    #BGP neighbor is 192.168.4.1, remote AS 4200000001, local AS 4200000128, external
    #link
    #  BGP version 4, remote router ID 1.1.1.1
    #  BGP state = Established, up for 00:27:25
    #  Last read 00:00:25, hold time is 90, keepalive interval is 30 seconds
    #  Configured hold time is 90, keepalive interval is 30 seconds
    #  Neighbor capabilities:
    #    4 Byte AS: advertised and received
    #    Route refresh: advertised and received(old &amp; new)
    #    Address family IPv4 Unicast: advertised and received
    #    Graceful Restart Capabilty: advertised and received
    #      Remote Restart timer is 120 seconds
    #      Address families by peer:
    #        none
    #        ...
    #```
    def test_get_site_ssr_and_srx_routes(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"neighbor":"192.168.4.1","prefix":"192.168.0.5/30","protocol":"bg'
            'p","route":"advertised","vrf_name":"default"}', ApiV1SitesDevicesShowRouteRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.get_site_ssr_and_srx_routes(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"session":"session_id"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get service path information of the Device. The output will be available through websocket. As there can be multiple command issued against the same device at the same time and the output all goes through the same websocket stream, session is introduced for demux.
    #
    #
    ##### Subscribe to Device Command outputs
    #`WS /api-ws/v1/stream`
    #
    #```json
    #{
    #    "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
    #}
    #```
    ###### Example output from ws stream
    #```
    #show service-path
    #
    #Service    Service-route     Type              Destination  Next-Hop  Interface  Vector  Cost  Rate  Capacity        State
    #
    #Web        web-route1        service-agent     4.4.4.4      1.1.1.2     lan        red     10    1    200/3000       Up*
    #Web        web-route1        service-agent     4.4.4.4      1.1.1.3     lan        red     10    1    200/3000       Up
    #Web        web-route2        service-agent     5.5.5.5      2.2.2.2     lan       blue     20    2    50/unlimited   Down
    #Login      <None>            BgpOverSVR        10.1.1.1     1.2.3.4     wan        red     10    3        -          Up
    #Login      <None>            BgpOverSVR        11.1.1.1     1.2.3.4     wan        red     10    1        -          Up
    #App1       <None>            Routed                -           -         -          -      -     -        -          -
    #App1       learned-routed    Routed                -           -         -          -      -     -        -          -
    #```
    def test_get_site_ssr_service_path(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"node":"node0","service_name":"any"}', ApiV1SitesDevicesShowServicePathRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.get_site_ssr_service_path(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"session":"session_id"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

