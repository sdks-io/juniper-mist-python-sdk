# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.api_v_1_sites_maps_auto_placement_request import ApiV1SitesMapsAutoPlacementRequest
from mistapi.models.api_v_1_sites_maps_clear_autoplacement_request import ApiV1SitesMapsClearAutoplacementRequest


class SitesMapsAutoPlacementControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesMapsAutoPlacementControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_maps_auto_placement
        cls.response_catcher = cls.controller.http_call_back

    # This API is called to force stop auto placement for a given map
    def test_delete_site_ap_autoplacement(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        self.controller.delete_site_ap_autoplacement(site_id, map_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # This API is called to view the current status of auto placement for a given map.
    def test_get_site_ap_auto_placement(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_ap_auto_placement(site_id, map_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end_time":1678900362,"start_time":1678900062,"status":"done"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This API is called to trigger a map for auto placement. For auto placement feature to work, RTT-FTM data need to be collected from the APs on the map. This scan is disruptive and therefore the user must be notified of service disrution during the functioning of auto placement Repeated POST to this endpoint while a map is still running will be rejected.
    #
    #List of devices to provide suggestions for is an optional parameter that can be given to this API. This will provide autoplacement suggestions only for the devices specified. If no list of devices is provided, all APs asociated with that map are considered by default
    def test_run_site_ap_autoplacement(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        self.controller.run_site_ap_autoplacement(site_id, map_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # This API is used to destroy the cached autoplacement locations of a map or subset of APs on a map.
    def test_clear_site_ap_autoplacement(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.clear_site_ap_autoplacement(site_id, map_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


