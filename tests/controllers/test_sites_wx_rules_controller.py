# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.wxlan_rule import WxlanRule


class SitesWxRulesControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesWxRulesControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_wx_rules
        cls.response_catcher = cls.controller.http_call_back

    # Get List of Site WxLan Rules
    def test_list_site_wx_rules(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_site_wx_rules(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"action":"allow","blocked_apps":["string"],"created_time":0,"dst'
            '_allow_wxtags":["string"],"dst_deny_wxtags":["string"],"enabled":t'
            'rue,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","modified_time":0,'
            '"name":"string","order":0,"org_id":"b069b358-4c97-5319-1f8c-7c5ca6'
            '4d6ab1","site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","src_wxta'
            'gs":["string"]}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Create Site WxLan Rule
    def test_create_site_wx_rule(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"action":"allow","blocked_apps":["string"],"dst_allow_wxtags":["s'
            'tring"],"dst_deny_wxtags":["string"],"enabled":true,"name":"string'
            '","order":0,"src_wxtags":["string"]}', WxlanRule.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_site_wx_rule(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"action":"allow","blocked_apps":["string"],"created_time":0,"dst_'
            'allow_wxtags":["string"],"dst_deny_wxtags":["string"],"enabled":tr'
            'ue,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","modified_time":0,"'
            'name":"string","order":0,"org_id":"b069b358-4c97-5319-1f8c-7c5ca64'
            'd6ab1","site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","src_wxtag'
            's":["string"]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Site WxLan Rule Derived
    def test_get_site_wx_rules_derived(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_wx_rules_derived(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"action":"allow","blocked_apps":["string"],"created_time":0,"dst'
            '_allow_wxtags":["string"],"dst_deny_wxtags":["string"],"enabled":t'
            'rue,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","modified_time":0,'
            '"name":"string","order":0,"org_id":"b069b358-4c97-5319-1f8c-7c5ca6'
            '4d6ab1","site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","src_wxta'
            'gs":["string"]}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Delete Site WxLan Rule
    def test_delete_site_wx_rule(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        wxrules_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_wx_rule(site_id, wxrules_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Site WxLan Rule Details
    def test_get_site_wx_rule(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        wxrules_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_wx_rule(site_id, wxrules_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"action":"allow","blocked_apps":["string"],"created_time":0,"dst_'
            'allow_wxtags":["string"],"dst_deny_wxtags":["string"],"enabled":tr'
            'ue,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","modified_time":0,"'
            'name":"string","order":0,"org_id":"b069b358-4c97-5319-1f8c-7c5ca64'
            'd6ab1","site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","src_wxtag'
            's":["string"]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Update Site WxLan Rule
    def test_update_site_wx_rule(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        wxrules_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.update_site_wx_rule(site_id, wxrules_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"action":"allow","blocked_apps":["string"],"created_time":0,"dst_'
            'allow_wxtags":["string"],"dst_deny_wxtags":["string"],"enabled":tr'
            'ue,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","modified_time":0,"'
            'name":"string","order":0,"org_id":"b069b358-4c97-5319-1f8c-7c5ca64'
            'd6ab1","site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","src_wxtag'
            's":["string"]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

