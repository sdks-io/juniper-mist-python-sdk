# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.map import Map
from mistapi.models.json import Json
from mistapi.models.api_v_1_sites_maps_set_map_request import ApiV1SitesMapsSetMapRequest


class SitesMapsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesMapsControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_maps
        cls.response_catcher = cls.controller.http_call_back

    # Get List of Site Maps
    def test_list_site_maps(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_site_maps(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"created_time":0,"flags":{},"height":0,"height_m":0,"id":"b069b3'
            '58-4c97-5319-1f8c-7c5ca64d6ab1","latlng_br":{"lat":"string","lng":'
            '"string"},"latlng_tl":{"lat":"string","lng":"string"},"locked":tru'
            'e,"modified_time":0,"name":"string","occupancy_limit":0,"org_id":"'
            'b069b358-4c97-5319-1f8c-7c5ca64d6ab1","orientation":0,"origin_x":0'
            ',"origin_y":0,"ppm":0,"site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6'
            'ab1","sitesurvey_path":[{"coordinate":"string","id":"b069b358-4c97'
            '-5319-1f8c-7c5ca64d6ab1","name":"string","nodes":[{"edges":{"N2":"'
            'string"},"name":"string","position":{"x":0,"y":0}}]}],"thumbnail_u'
            'rl":"string","type":"image","url":"string","view":"roadmap","wall_'
            'path":{"coordinate":"string","nodes":[{"edges":{"N2":"string"},"na'
            'me":"string","position":{"x":0,"y":0}}]},"wayfinding":{"micello":{'
            '"account_key":"string","default_level_id":0,"map_id":"b069b358-4c9'
            '7-5319-1f8c-7c5ca64d6ab1"},"snap_to_path":true},"wayfinding_path":'
            '{"coordinate":"string","nodes":[{"edges":{"N2":"string"},"name":"s'
            'tring","position":{"x":0,"y":0}}]},"width":0,"width_m":0}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Create Site Map
    def test_create_site_map(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"flags":{},"height":0,"height_m":0,"latlng_br":{"lat":"string","l'
            'ng":"string"},"latlng_tl":{"lat":"string","lng":"string"},"locked"'
            ':true,"name":"string","occupancy_limit":0,"orientation":0,"origin_'
            'x":0,"origin_y":0,"ppm":0,"sitesurvey_path":[{"coordinate":"string'
            '","id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","name":"string","nod'
            'es":[{"edges":{"N2":"string"},"name":"string","position":{"x":0,"y'
            '":0}}]}],"thumbnail_url":"string","type":"image","url":"string","v'
            'iew":"roadmap","wall_path":{"coordinate":"string","nodes":[{"edges'
            '":{"N2":"string"},"name":"string","position":{"x":0,"y":0}}]},"way'
            'finding":{"micello":{"account_key":"string","default_level_id":0,"'
            'map_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1"},"snap_to_path":tru'
            'e},"wayfinding_path":{"coordinate":"string","nodes":[{"edges":{"N2'
            '":"string"},"name":"string","position":{"x":0,"y":0}}]},"width":0,'
            '"width_m":0}', Map.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_site_map(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Import data from files is a multipart POST which has an file, an optional json, and an optional csv, to create floorplan, assign matching inventory to specific site, place ap if name or mac matches.
    #
    ## Note
    #This endpoint (at the site level), the AP must be already assigned to the site to be placed on the floorplan. If you want to place APs from the Org inventory, it is required to use the endpoint at the Org level [importOrgMaps](#operation/importOrgMaps)
    #
    ## CSV File Format
    #```csv
    #Vendor AP name,Mist AP Mac
    #US Office AP-2,5c:5b:35:00:00:02
    #US Office AP-3,5c5b35000002
    #``` 
    def test_import_site_maps(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        auto_deviceprofile_assignment = None
        csv = None
        file = None
        json = None

        # Perform the API call through the SDK function
        result = self.controller.import_site_maps(site_id, auto_deviceprofile_assignment, csv, file, json)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"aps":[{"action":"ignored","floorplan_id":"cbdb7f0b-3be0-4872-88f'
            '9-58790b509c23-j68kows8","height":3,"mac":"5c5b35000001","orientat'
            'ion":45},{"action":"placed","height":3,"mac":"5c5b35000001","map_i'
            'd":"845a23bf-bed9-e43c-4c86-6fa474be7ae5","orientation":45}],"floo'
            'rplans":[{"action":"ignored","id":"cbdb7f0b-3be0-4872-88f9-58790b5'
            '09c23-j68kows8","map_id":"845a23bf-bed9-e43c-4c86-6fa474be7ae5","n'
            'ame":"map1","reason":"no aps placed"}],"site_id":"4ac1dcf4-9d8b-72'
            '11-65c4-057819f0862b","summary":{"num_ap_assigned":1,"num_inv_assi'
            'gned":1,"num_map_assigned":1}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Delete Site Map
    def test_delete_site_map(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_map(site_id, map_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Site Map Details
    def test_get_site_map(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_map(site_id, map_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Update Site Map
    def test_update_site_map(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"flags":{},"height":0,"height_m":0,"latlng_br":{"lat":"string","l'
            'ng":"string"},"latlng_tl":{"lat":"string","lng":"string"},"locked"'
            ':true,"name":"string","occupancy_limit":0,"orientation":0,"origin_'
            'x":0,"origin_y":0,"ppm":0,"sitesurvey_path":[{"coordinate":"string'
            '","id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","name":"string","nod'
            'es":[{"edges":{"N2":"string"},"name":"string","position":{"x":0,"y'
            '":0}}]}],"thumbnail_url":"string","type":"image","url":"string","v'
            'iew":"roadmap","wall_path":{"coordinate":"string","nodes":[{"edges'
            '":{"N2":"string"},"name":"string","position":{"x":0,"y":0}}]},"way'
            'finding":{"micello":{"account_key":"string","default_level_id":0,"'
            'map_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1"},"snap_to_path":tru'
            'e},"wayfinding_path":{"coordinate":"string","nodes":[{"edges":{"N2'
            '":"string"},"name":"string","position":{"x":0,"y":0}}]},"width":0,'
            '"width_m":0}', Map.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.update_site_map(site_id, map_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Delete Site Map Image
    def test_delete_site_map_image(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_map_image(site_id, map_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Add image map is a multipart POST which has an file (Image) and an optional json parameter
    def test_add_site_map_image(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        file = None
        json = None

        # Perform the API call through the SDK function
        result = self.controller.add_site_map_image(site_id, map_id, file, json)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # This API can be used to assign a list of AP Macs associated with site_id to the specified map_id. Note that map_id must be associated with corresponding site_id. This API obeys the following rules 
    #1. if AP is unassigned to any Map, it gets associated with map_id 
    #2. Any moved APs are returned in the response 
    #3. If the AP is considered a locked AP, no action will be taken
    def test_bulk_assign_site_aps_to_map(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"device_ids":["5c5b35000001","5c5b35584a6f"]}', ApiV1SitesMapsSetMapRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.bulk_assign_site_aps_to_map(site_id, map_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"locked":["5c5b35584a6f"],"moved":["5c5b35000001"]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This imports the vendor map meta data into the Map JSON. This is required by the SDK and App in order to access/render the vendor Map properly.
    def test_import_site_wayfindings(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"client_id":"199d6770-0f6f-407a-9bd5-fc33c7840194","client_secret'
            '":"/9Nog3yDzcYj0bY91XJZQLCt+m9DXaIVhx+Ghk3ddd","customer_id":123,"'
            'endpoint_url":"https://api.jibestream.com","map_id":"b069b358-4c97'
            '-5319-1f8c-7c5ca64d6ab1","mmpp":223,"ppm":4,"vendor_name":"jibestr'
            'eam","venue_id":123}')

        # Perform the API call through the SDK function
        result = self.controller.import_site_wayfindings(site_id, map_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


