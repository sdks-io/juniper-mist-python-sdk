# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper


class SitesRoguesControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesRoguesControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_rogues
        cls.response_catcher = cls.controller.http_call_back

    # Count Rogue Events
    def test_count_site_rogue_events(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        distinct = 'bssid'
        mtype = None
        ssid = None
        bssid = None
        ap_mac = None
        channel = None
        seen_on_lan = None
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.count_site_rogue_events(site_id, distinct, mtype, ssid, bssid, ap_mac, channel, seen_on_lan, page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"distinct":"string","end":0,"limit":0,"percentage":0,"results":[{'
            '"count":0,"property":"string"}],"start":0,"total":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Search Rogue Events
    def test_search_site_rogue_events(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        mtype = None
        ssid = None
        bssid = None
        ap_mac = None
        channel = None
        seen_on_lan = None
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.search_site_rogue_events(site_id, mtype, ssid, bssid, ap_mac, channel, seen_on_lan, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":1538074800,"limit":10,"results":[{"ap":"5c5b350e10030","bss'
            'id":"38ff363c8c4c","channel":136,"rssi":-54,"ssid":"MyHomeNetwork"'
            ',"timestamp":1538074612},{"ap":"5c5b350e10030","bssid":"60d02c2394'
            'cc","channel":11,"rssi":-59,"ssid":"Home-Office","timestamp":15380'
            '74612}],"start":1538071200,"total":2}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Rogue AP Details
    def test_get_site_rogue_ap(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        rogue_bssid = '0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_rogue_ap(site_id, rogue_bssid)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"manufacture":"Intel Corporate","seen_as_client":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Send Deauth frame to clients connected to a Rogue AP
    def test_deauth_site_wireless_clients_connected_to_a_rogue(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        rogue_bssid = '0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.deauth_site_wireless_clients_connected_to_a_rogue(site_id, rogue_bssid)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


