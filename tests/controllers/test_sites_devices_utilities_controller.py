# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.api_v_1_sites_devices_arp_request import ApiV1SitesDevicesArpRequest
from mistapi.models.api_v_1_sites_devices_ping_request import ApiV1SitesDevicesPingRequest
from mistapi.models.api_v_1_sites_devices_traceroute_request import ApiV1SitesDevicesTracerouteRequest


class SitesDevicesUtilitiesControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesDevicesUtilitiesControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_devices_utilities
        cls.response_catcher = cls.controller.http_call_back

    # ARP can be performed on the Device. The output will be available through websocket. As there can be multiple command issued against the same AP at the same time and the output all goes through the same websocket stream, session is introduced for demux.
    #
    #
    ##### Subscribe to Device Command outputs
    #`WS /api-ws/v1/stream`
    #
    #```json
    #{
    #    "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
    #}
    #```
    ###### Example output from ws stream
    #```json
    #{ 
    # "event": "data", 
    # "channel": "/sites/4ac1dcf4-9d8b-7211-65c4-057819f0862b/devices/00000000-0000-0000-1000-5c5b350e0060/cmd", 
    # "data": { 
    #   "session": "session_id", 
    #   "raw": 
    #   "Output": "\tMAC\t\tDEV\tVLAN\tRx Packets\t\t Rx Bytes\t\tTx Packets\t\t Tx Bytes\tFlows\tIdle sec\n-----------------------------------------------------------------------------------------------------------------------"
    #  } 
    #}
    #```
    def test_arp_from_device(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"node":"node0"}', ApiV1SitesDevicesArpRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.arp_from_device(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"session":"session_id"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Ping from AP, Switch and SSR
    #
    #Ping can be performed from the Device. The output will be available through websocket. As there can be multiple command issued against the same AP at the same time and the output all goes through the same websocket stream, session is introduced for demux.
    #
    ##### Subscribe to Device Command outputs
    #`WS /api-ws/v1/stream`
    #
    #```json
    #{
    #    "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
    #}
    #```
    ###### Example output from ws stream
    #```json
    #{
    #    "event": "data",
    #    "channel": "/sites/4ac1dcf4-9d8b-7211-65c4-057819f0862b/devices/00000000-0000-0000-1000-5c5b350e0060/cmd",
    #    "data": {
    #        "session": "session_id",
    #        "raw": "64 bytes from 23.211.0.110: seq=8 ttl=58 time=12.323 ms\n"
    #    }
    #}
    #```
    def test_ping_from_device(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"count":10,"host":"1.1.1.1"}', ApiV1SitesDevicesPingRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.ping_from_device(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"session":"session_id"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Create recovery device snapshot (Available on Junos OS EX2300-, EX3400-, EX4400- devices)
    def test_create_site_device_snapshot(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.create_site_device_snapshot(site_id, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"status_id":"string","staus":"starting","timestamp":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Traceroute can be performed from the Device. The output will be available through websocket. As there can be multiple command issued against the same AP at the same time and the output all goes through the same websocket stream, session is introduced for demux.
    #
    ##### Subscribe to Device Command outputs
    #`WS /api-ws/v1/stream`
    #
    #```json
    #{
    #    "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
    #}
    #```
    def test_traceroute_from_device(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"host":"string","port":33434,"protocol":"udp"}', ApiV1SitesDevicesTracerouteRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.traceroute_from_device(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"session":"session_id"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

