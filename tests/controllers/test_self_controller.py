# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.api_v_1_recover_request import ApiV1RecoverRequest
from mistapi.models.admin import Admin
from mistapi.models.api_v_1_self_two_factor_verify_request import ApiV1SelfTwoFactorVerifyRequest
from mistapi.models.model_object_email import ModelObjectEmail


class SelfControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SelfControllerTests, cls).setUpClass()
        cls.controller = cls.client.self
        cls.response_catcher = cls.controller.http_call_back

    # Recover Password
    #An email will also be sent to the user with a link to https://manage.mist.com/verify/recover?token=:token
    def test_recover_password(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"email":"test@mistsys.com","recaptcha":"see https://www.google.co'
            'm/recaptcha/"}', ApiV1RecoverRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.recover_password(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # To delete ones account and every associated with it. The effects:
    #
    #the account would be deleted
    #any orphaned Org (that only has this account as admin) will be deleted
    #along with all data with Org (sites, wlans, devices) will be gone.
    def test_delete_self(self):

        # Perform the API call through the SDK function
        result = self.controller.delete_self()

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get ‘whoami’ and privileges (which org and which sites I have access to)
    def test_get_self(self):

        # Perform the API call through the SDK function
        result = self.controller.get_self()

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"admin_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","email":"user@e'
            'xample.com","first_name":"string","last_name":"string","privileges'
            '":[{"msp_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","msp_name":"st'
            'ring","name":"string","org_id":"b069b358-4c97-5319-1f8c-7c5ca64d6a'
            'b1","org_name":"string","orggroup_ids":["b069b358-4c97-5319-1f8c-7'
            'c5ca64d6ab1"],"role":"admin","scope":"org","site_id":"b069b358-4c9'
            '7-5319-1f8c-7c5ca64d6ab1","sitegroup_ids":["6f4bf402-45f9-2a56-6c8'
            'b-7f83d3bc98e9"]}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # update Account Information
    def test_update_self(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"email":"john.smith@mycorp.net","enable_two_factor":true,"first_n'
            'ame":"John","last_name":"Smith","password":"foryoureyesonly","pers'
            'ona":"security","phone":"14081112222","phone2":"14083334444"}', Admin.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.update_self(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"admin_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","email":"user@e'
            'xample.com","first_name":"string","last_name":"string","privileges'
            '":[{"msp_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","msp_name":"st'
            'ring","name":"string","org_id":"b069b358-4c97-5319-1f8c-7c5ca64d6a'
            'b1","org_name":"string","orggroup_ids":["b069b358-4c97-5319-1f8c-7'
            'c5ca64d6ab1"],"role":"admin","scope":"org","site_id":"b069b358-4c9'
            '7-5319-1f8c-7c5ca64d6ab1","sitegroup_ids":["6f4bf402-45f9-2a56-6c8'
            'b-7f83d3bc98e9"]}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get List of change logs across all Orgs for current admin
    #Audit logs records all administrative activities done by current admin across all orgs
    def test_list_self_audit_logs(self):
        # Parameters for the API call
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.list_self_audit_logs(page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":1428954000,"limit":100,"page":1,"results":[{"admin_id":"72b'
            'fa2bd-e58a-4670-9d20-a1468f7a6f58","admin_name":"test@mistsys.com"'
            ',"after":{"auth":{"type":"open"}},"before":{"auth":{"type":"psk"}}'
            ',"id":"c6f9347b-b0a4-4a23-b927-fa9249f2ffb2","message":"Update WLA'
            'N \"Corporate\"","org_id":"423f6eca-6276-4994-bfeb-53cbbbba6f04","'
            'site_id":"4ac1dcf4-9d8b-7211-65c4-057819f0862b","timestamp":143138'
            '2121}],"start":1428939600,"total":135}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get List of all the subscriptions
    def test_list_alarm_subscriptions(self):

        # Perform the API call through the SDK function
        result = self.controller.list_alarm_subscriptions()

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Generate QR code for verification
    def test_generate_qr_code_for_verification(self):
        # Parameters for the API call
        by = 'qrcode'

        # Perform the API call through the SDK function
        result = self.controller.generate_qr_code_for_verification(by)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Verify Two-factor (OTP)
    #
    #To verify two-factor authentication by using a code generated by app (e.g. Google Authenticator, Authy) or by SMS. Upon successful verification, the otp_verified will be set to true if it hasn’t already been.
    def test_verify_two_factor(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"two_factor":"123456"}', ApiV1SelfTwoFactorVerifyRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.verify_two_factor(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Change Email
    #We require the user to verify that they actually own the email address they intend to change it to.
    #
    #After the API call, the user will receive an email to the new email address with a link like https://manage.mist.com/verify/update?expire=:exp_time&email=:admin_email&token=:token
    #
    #Upon clicking the link, the user is provided with a login page to authenticate using existing credentials. After successful login, the email address of the user gets updated
    #
    #**Note**: The request parameter email can be used by UI to validate that the current session (if any) belongs to the admin or provide a login page (by pre-populating the email on login screen). UI can also use the request parameter expire to validate token expiry.
    def test_update_self_email(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"email":"new@mistsys.com"}', ModelObjectEmail.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.update_self_email(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


