# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.curd_ui_settings import CurdUiSettings


class SitesUISettingsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesUISettingsControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_ui_settings
        cls.response_catcher = cls.controller.http_call_back

    # CURD site UI settings
    def test_get_site_curd_settings(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_curd_settings(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"created_time":1508823803,"defaultScopeId":"67970e46-4e12-11e6-9'
            '188-0242ad112847","defaultScopeType":"site","defaultTimeRange":{"e'
            'nd":1508828400,"endDate":"10/23/2017","interval":"1d","name":"This'
            ' Week","shortName":"thisWeek","start":1508655600,"usePreset":true}'
            ',"description":"Description of the databoard","for_site":true,"id"'
            ':"3bdcc7e8-c04d-4512-b4fc-093da9057eb0","isCustomDataboard":true,"'
            'isScopeLinked":true,"isTimeRangeLinked":true,"modified_time":15088'
            '23803,"name":"New Databoard","org_id":"6f4bf402-45f9-2a56-6c8b-7f8'
            '3d3bc98e9","purpose":"databoard","site_id":"67970e46-4e12-11e6-918'
            '8-0242ad112847","tiles":[{"chartBand":"2.4 ghz","chartColor":"#00B'
            '4AD","chartDirection":"tx + rx","chartRankBy":"","chartType":"time'
            'Series","colspan":5,"column":1,"hideEmptyRows":true,"id":"7a9ab38c'
            '-cfc3-483d-b51a-0aec571fadc0-j956nurl","metric":{"apiName":"client'
            '-dhcp-latency"},"name":"New Analysis","row":1,"rowspan":2,"scopeId'
            '":"e0c767834b4c","scopeType":"client","timeRange":{"end":150882374'
            '3,"endDate":"10/23/2017","interval":"1d","name":"Past 7 Days","sho'
            'rtName":"7d","start":1508223600,"usePreset":true},"trendType":"lin'
            'e","vizType":"averageTimeSeriesChart"}]}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # CURD site UI settings
    def test_create_site_curd_settings(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_site_curd_settings(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":1508823803,"defaultScopeId":"67970e46-4e12-11e6-91'
            '88-0242ad112847","defaultScopeType":"site","defaultTimeRange":{"en'
            'd":1508828400,"endDate":"10/23/2017","interval":"1d","name":"This '
            'Week","shortName":"thisWeek","start":1508655600,"usePreset":true},'
            '"description":"Description of the databoard","for_site":true,"id":'
            '"3bdcc7e8-c04d-4512-b4fc-093da9057eb0","isCustomDataboard":true,"i'
            'sScopeLinked":true,"isTimeRangeLinked":true,"modified_time":150882'
            '3803,"name":"New Databoard","org_id":"b069b358-4c97-5319-1f8c-7c5c'
            'a64d6ab1","purpose":"databoard","site_id":"67970e46-4e12-11e6-9188'
            '-0242ad112847","tiles":[{"chartBand":"2.4 ghz","chartColor":"#00B4'
            'AD","chartDirection":"tx + rx","chartRankBy":"","chartType":"timeS'
            'eries","colspan":5,"column":1,"hideEmptyRows":true,"id":"7a9ab38c-'
            'cfc3-483d-b51a-0aec571fadc0-j956nurl","metric":{"apiName":"client-'
            'dhcp-latency"},"name":"New Analysis","row":1,"rowspan":2,"scopeId"'
            ':"e0c767834b4c","scopeType":"client","timeRange":{"end":1508823743'
            ',"endDate":"10/23/2017","interval":"1d","name":"Past 7 Days","shor'
            'tName":"7d","start":1508223600,"usePreset":true},"trendType":"line'
            '","vizType":"averageTimeSeriesChart"}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get both site UI settings(for_site=true) and org UI settings (for_site=false)
    def test_get_site_derived_curd_setting(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_derived_curd_setting(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":1508823803,"defaultScopeId":"67970e46-4e12-11e6-91'
            '88-0242ad112847","defaultScopeType":"site","defaultTimeRange":{"en'
            'd":1508828400,"endDate":"10/23/2017","interval":"1d","name":"This '
            'Week","shortName":"thisWeek","start":1508655600,"usePreset":true},'
            '"description":"Description of the databoard","for_site":true,"id":'
            '"3bdcc7e8-c04d-4512-b4fc-093da9057eb0","isCustomDataboard":true,"i'
            'sScopeLinked":true,"isTimeRangeLinked":true,"modified_time":150882'
            '3803,"name":"New Databoard","org_id":"b069b358-4c97-5319-1f8c-7c5c'
            'a64d6ab1","purpose":"databoard","site_id":"67970e46-4e12-11e6-9188'
            '-0242ad112847","tiles":[{"chartBand":"2.4 ghz","chartColor":"#00B4'
            'AD","chartDirection":"tx + rx","chartRankBy":"","chartType":"timeS'
            'eries","colspan":5,"column":1,"hideEmptyRows":true,"id":"7a9ab38c-'
            'cfc3-483d-b51a-0aec571fadc0-j956nurl","metric":{"apiName":"client-'
            'dhcp-latency"},"name":"New Analysis","row":1,"rowspan":2,"scopeId"'
            ':"e0c767834b4c","scopeType":"client","timeRange":{"end":1508823743'
            ',"endDate":"10/23/2017","interval":"1d","name":"Past 7 Days","shor'
            'tName":"7d","start":1508223600,"usePreset":true},"trendType":"line'
            '","vizType":"averageTimeSeriesChart"}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # CURD site UI settings
    def test_delete_site_curd_setting(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        uisetting_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_curd_setting(site_id, uisetting_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # CURD site UI settings
    def test_get_site_curd_setting(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        uisetting_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_curd_setting(site_id, uisetting_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":1508823803,"defaultScopeId":"67970e46-4e12-11e6-91'
            '88-0242ad112847","defaultScopeType":"site","defaultTimeRange":{"en'
            'd":1508828400,"endDate":"10/23/2017","interval":"1d","name":"This '
            'Week","shortName":"thisWeek","start":1508655600,"usePreset":true},'
            '"description":"Description of the databoard","for_site":true,"id":'
            '"3bdcc7e8-c04d-4512-b4fc-093da9057eb0","isCustomDataboard":true,"i'
            'sScopeLinked":true,"isTimeRangeLinked":true,"modified_time":150882'
            '3803,"name":"New Databoard","org_id":"b069b358-4c97-5319-1f8c-7c5c'
            'a64d6ab1","purpose":"databoard","site_id":"67970e46-4e12-11e6-9188'
            '-0242ad112847","tiles":[{"chartBand":"2.4 ghz","chartColor":"#00B4'
            'AD","chartDirection":"tx + rx","chartRankBy":"","chartType":"timeS'
            'eries","colspan":5,"column":1,"hideEmptyRows":true,"id":"7a9ab38c-'
            'cfc3-483d-b51a-0aec571fadc0-j956nurl","metric":{"apiName":"client-'
            'dhcp-latency"},"name":"New Analysis","row":1,"rowspan":2,"scopeId"'
            ':"e0c767834b4c","scopeType":"client","timeRange":{"end":1508823743'
            ',"endDate":"10/23/2017","interval":"1d","name":"Past 7 Days","shor'
            'tName":"7d","start":1508223600,"usePreset":true},"trendType":"line'
            '","vizType":"averageTimeSeriesChart"}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # CURD site UI settings
    def test_update_site_curd_setting(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        uisetting_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"created_time":0,"defaultScopeId":"string","defaultScopeType":"st'
            'ring","defaultTimeRange":{"end":0,"endDate":"string","interval":"s'
            'tring","name":"string","shortName":"string","start":0,"usePreset":'
            'true},"description":"string","for_site":true,"id":"491f6eca-6276-4'
            '993-bfeb-a3cbbbba6f08","isCustomDataboard":true,"isScopeLinked":tr'
            'ue,"isTimeRangeLinked":true,"modified_time":0,"name":"string","org'
            '_id":"a40f5d1f-d889-42e9-94ea-b9b33585fc6b","purpose":"string","si'
            'te_id":"72771e6a-6f5e-4de4-a5b9-1266c4197811","tiles":[{"chartBand'
            '":"string","chartColor":"string","chartDirection":"string","chartR'
            'ankBy":"string","chartType":"string","colspan":0,"column":0,"hideE'
            'mptyRows":true,"id":"string","metric":{"apiName":"string"},"name":'
            '"string","row":0,"rowspan":0,"scopeId":"string","scopeType":"strin'
            'g","timeRange":{"end":0,"endDate":"string","interval":"string","na'
            'me":"string","shortName":"string","start":0,"usePreset":true},"tre'
            'ndType":"string","vizType":"string"}]}', CurdUiSettings.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.update_site_curd_setting(site_id, uisetting_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"defaultScopeId":"string","defaultScopeType":"st'
            'ring","defaultTimeRange":{"end":0,"endDate":"string","interval":"s'
            'tring","name":"string","shortName":"string","start":0,"usePreset":'
            'true},"description":"string","for_site":true,"id":"490f6eca-6276-4'
            '993-bfeb-b3cbbbba6f08","isCustomDataboard":true,"isScopeLinked":tr'
            'ue,"isTimeRangeLinked":true,"modified_time":0,"name":"string","org'
            '_id":"a40f5d1f-d889-42e9-94ea-b9b33585fc6b","purpose":"string","si'
            'te_id":"72771e6a-6f5e-4de4-a5b9-1266c4197811","tiles":[{"chartBand'
            '":"string","chartColor":"string","chartDirection":"string","chartR'
            'ankBy":"string","chartType":"string","colspan":0,"column":0,"hideE'
            'mptyRows":true,"id":"string","metric":{"apiName":"string"},"name":'
            '"string","row":0,"rowspan":0,"scopeId":"string","scopeType":"strin'
            'g","timeRange":{"end":0,"endDate":"string","interval":"string","na'
            'me":"string","shortName":"string","start":0,"usePreset":true},"tre'
            'ndType":"string","vizType":"string"}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

