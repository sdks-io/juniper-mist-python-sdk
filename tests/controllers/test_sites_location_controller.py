# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.model_ml import ModelMl


class SitesLocationControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesLocationControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_location
        cls.response_catcher = cls.controller.http_call_back

    # Get Beam Coverage Overview
    def test_get_site_beam_coverage_overview(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '00000000-0000-0000-0000-000000000000'
        mtype = 'sdkclient'
        duration = '1h'
        resolution = 'default'
        client_type = None
        start = 0
        end = 0

        # Perform the API call through the SDK function
        result = self.controller.get_site_beam_coverage_overview(site_id, map_id, mtype, duration, resolution, client_type, start, end)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"beams_means":[[1,3,3.2],[6,10,6.5]],"end":1428954000,"gridsize":'
            '1,"result_def":["x","y","beams_mean","beacons_mean","max_rssi","av'
            'g_rssi"],"results":[[1,3,3.2,18.5,-68,-70],[6,10,6.5,30,1,-72.5,-7'
            '5]],"start":1428939600}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Machine Learning Current Stat
    #For each VBLE AP, it has ML model parameters (e.g. Path-loss-estimate, Intercept) as well as completion indicators (Level and PercentageComplete). For the completeness, ML takes N sample to finish its first level and use N*0.25 samples to complete each successive level. When a device is moved, the completeness will be reset as it has to re-learn.
    def test_get_site_machine_learning_current_stat(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '00000000-0000-0000-0000-000000000000'

        # Perform the API call through the SDK function
        result = self.controller.get_site_machine_learning_current_stat(site_id, map_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"current":{"Android":{"completed":36,"int":-6,"level":3,"ple":-3'
            ',"quality":"4","src":"device","timestamp":1442854794},"iOS":{"comp'
            'leted":16,"int":-6,"level":6,"ple":-3,"quality":"2","src":"default'
            '","timestamp":1442854704},"iPod":{"int":-10,"overwrite":true,"ple"'
            ':-5,"src":"overwrite"}},"device_id":"b069b358-4c97-5319-1f8c-7c5ca'
            '64d6ab1"},{"beacon_id":"7913f032-aab4-c3ae-e83e-5a2756ef4d40","cur'
            'rent":{"iOS":{"completed":16,"int":-6,"level":6,"ple":-3,"quality"'
            ':"last","src":"device","timestamp":1442854704}}}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Default PLF for Models
    def test_get_site_default_plf_for_models(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_default_plf_for_models(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"current":{"Android":{"completed":36,"int":-6,"level":3,"ple":-3'
            ',"quality":"4","src":"device","timestamp":1442854794},"iOS":{"comp'
            'leted":16,"int":-6,"level":6,"ple":-3,"quality":"2","src":"default'
            '","timestamp":1442854704},"iPod":{"int":-10,"overwrite":true,"ple"'
            ':-5,"src":"overwrite"}},"device_id":"b069b358-4c97-5319-1f8c-7c5ca'
            '64d6ab1"},{"beacon_id":"7913f032-aab4-c3ae-e83e-5a2756ef4d40","cur'
            'rent":{"iOS":{"completed":16,"int":-6,"level":6,"ple":-3,"quality"'
            ':"last","src":"device","timestamp":1442854704}}}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Clear ML Overwrite for Device
    def test_clear_site_ml_overwrite_for_device(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.clear_site_ml_overwrite_for_device(site_id, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Overwrite ML For Device
    def test_overwrite_site_ml_for_device(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"iOS":{"int":6,"ple":-3},"iPod":{"int":-10,"ple":-5}}', ModelMl.from_dictionary, as_dict=True)

        # Perform the API call through the SDK function
        result = self.controller.overwrite_site_ml_for_device(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"current":{"Android":{"completed":36,"int":-6,"level":3,"ple":-3'
            ',"quality":"4","src":"device","timestamp":1442854794},"iOS":{"comp'
            'leted":16,"int":-6,"level":6,"ple":-3,"quality":"2","src":"default'
            '","timestamp":1442854704},"iPod":{"int":-10,"overwrite":true,"ple"'
            ':-5,"src":"overwrite"}},"device_id":"b069b358-4c97-5319-1f8c-7c5ca'
            '64d6ab1"},{"beacon_id":"7913f032-aab4-c3ae-e83e-5a2756ef4d40","cur'
            'rent":{"iOS":{"completed":16,"int":-6,"level":6,"ple":-3,"quality"'
            ':"last","src":"device","timestamp":1442854704}}}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Clear ML Overwrite for Map
    def test_clear_site_ml_overwrite_for_map(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.clear_site_ml_overwrite_for_map(site_id, map_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Overwrite ML For Map
    def test_overwrite_site_ml_for_map(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"iOS":{"int":6,"ple":-3},"iPod":{"int":-10,"ple":-5}}', ModelMl.from_dictionary, as_dict=True)

        # Perform the API call through the SDK function
        result = self.controller.overwrite_site_ml_for_map(site_id, map_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"current":{"Android":{"completed":36,"int":-6,"level":3,"ple":-3'
            ',"quality":"4","src":"device","timestamp":1442854794},"iOS":{"comp'
            'leted":16,"int":-6,"level":6,"ple":-3,"quality":"2","src":"default'
            '","timestamp":1442854704},"iPod":{"int":-10,"overwrite":true,"ple"'
            ':-5,"src":"overwrite"}},"device_id":"b069b358-4c97-5319-1f8c-7c5ca'
            '64d6ab1"},{"beacon_id":"7913f032-aab4-c3ae-e83e-5a2756ef4d40","cur'
            'rent":{"iOS":{"completed":16,"int":-6,"level":6,"ple":-3,"quality"'
            ':"last","src":"device","timestamp":1442854704}}}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Reset ML Stats by Map
    def test_reset_site_ml_stats_by_map(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.reset_site_ml_stats_by_map(site_id, map_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Machine Learning Events
    def test_get_site_machine_learning_events(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '00000000-0000-0000-0000-000000000000'
        map_ip = None
        client_type = None
        duration = None
        start = 0
        end = 0
        interval = None

        # Perform the API call through the SDK function
        result = self.controller.get_site_machine_learning_events(site_id, device_id, map_ip, client_type, duration, start, end, interval)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":1428954000,"interval":600,"start":1428939600,"updates":[{"c'
            'lient_type":"iOS","completed":6,"int":-6,"level":0,"ple":-3,"times'
            'tamp":1442854794},{"client_type":"iOS","completed":4,"int":-4,"lev'
            'el":0,"ple":-2,"timestamp":1442854796},{"client_type":"iOS","compl'
            'eted":2,"int":-2,"level":0,"ple":-1,"timestamp":1442854798}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

