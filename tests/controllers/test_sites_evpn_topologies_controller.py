# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.junos_evpn_topology import JunosEvpnTopology


class SitesEVPNTopologiesControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesEVPNTopologiesControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_evpn_topologies
        cls.response_catcher = cls.controller.http_call_back

    # Get the existing EVPN topology
    def test_get_site_evpn_topology(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_evpn_topology(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"id":"9197ec96-4c8d-529f-c595-035895e688b2","name":"CC","pod_name'
            's":{"1":"default","2":"default"},"switches":[{"downlink_ips":["10.'
            '255.240.6","10.255.240.8"],"downlinks":["5c5b35000007","5c5b350000'
            '08"],"evpn_id":1,"mac":"5c5b35000003","model":"QFX10002-36Q","role'
            '":"collapsed-core","uplinks":["5c5b35000005","5c5b35000006"]}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # While all the `evpn_id` / `downlink_ips` can be specifidd by hand, the easiest way is to call the `build_vpn_topology` API, allowing you to examine the diff, and update it yourself. You can also simply call it with `overwrite=true` which will apply the updates for you.
    #
    #**Notes:**
    #1. You can use `core` / `distribution` / `access` to create a CLOS topology
    #2. You can also use `core` / `distribution` to form a 2-tier EVPN topology where ESI-Lag is configured distribution to connect to access switches
    #3. In a small/medium campus, `collapsed-core` can be used where core switches are the inter-connected to do EVPN
    #4. The API uses a few pre-defined parameters and best-practices to generate the configs. It can be customized by using `evpn_options` in Site Setting / Network Template. (e.g. a different subnet for the underlay)
    #
    ##### Collapsed Core
    #In a small-medium campus, EVPN can also be enabled only at the core switches (up to 4) by assigning all participating switches with `collapsed-core role`. When there are more than 2 switches, a ring-like topology will be formed.
    #
    ##### ESI-Lag
    #If the access switchess does not have EVPN support, you can take advantage of EVPN by setting up ESI-Lag on distribution switches
    #
    ##### Leaf / Access / Collapsed-Core
    #For leaf nodes in a EVPN topology, youâ€™d have to configure the IPs for networks that would participate in EVPN. Optionally, VRFs to isolate traffic from one tenant verus another
    def test_create_site_evpn_topology(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"name":"CC","overwrite":true,"pod_names":{"1":"default","2":"defa'
            'ult"},"switches":[{"mac":"5c5b35000003","role":"collapsed-core"},{'
            '"mac":"5c5b35000004","role":"collapsed-core"}]}', JunosEvpnTopology.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_site_evpn_topology(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"id":"9197ec96-4c8d-529f-c595-035895e688b2","name":"CC","pod_name'
            's":{"1":"default","2":"default"},"switches":[{"downlink_ips":["10.'
            '255.240.6","10.255.240.8"],"downlinks":["5c5b35000007","5c5b350000'
            '08"],"evpn_id":1,"mac":"5c5b35000003","model":"QFX10002-36Q","role'
            '":"collapsed-core","uplinks":["5c5b35000005","5c5b35000006"]}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Delete the site EVPN Topology
    def test_delete_site_evpn_topology(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        evpn_topology_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_evpn_topology(site_id, evpn_topology_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get One EVPN Topology Detail
    def test_get_site_evpn_tolopogy(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        evpn_topology_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        self.controller.get_site_evpn_tolopogy(site_id, evpn_topology_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Update the EVPN Topolgy
    def test_update_site_evpn_topology(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        evpn_topology_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"overwrite":false,"switches":[{"mac":"5c5b35000003","role":"colla'
            'psed-core"},{"mac":"5c5b35000004","role":"none"}]}', JunosEvpnTopology.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.update_site_evpn_topology(site_id, evpn_topology_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"id":"9197ec96-4c8d-529f-c595-035895e688b2","name":"CC","pod_name'
            's":{"1":"default","2":"default"},"switches":[{"downlink_ips":["10.'
            '255.240.6","10.255.240.8"],"downlinks":["5c5b35000007","5c5b350000'
            '08"],"evpn_id":1,"mac":"5c5b35000003","model":"QFX10002-36Q","role'
            '":"collapsed-core","uplinks":["5c5b35000005","5c5b35000006"]}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

