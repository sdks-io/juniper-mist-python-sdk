# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper


class SitesServicePoliciesControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesServicePoliciesControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_service_policies
        cls.response_catcher = cls.controller.http_call_back

    # Retrieves the list of Device Profiles available for the Site
    def test_list_site_device_profiles_derived(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        resolve = False

        # Perform the API call through the SDK function
        result = self.controller.list_site_device_profiles_derived(site_id, resolve)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"aeroscout":{"enabled":false,"host":"string","locate_connected":'
            'true},"ble_config":{"beacon_enabled":true,"beacon_rate":0,"beacon_'
            'rate_mode":"default","beam_disabled":[0],"eddystone_uid_adv_power"'
            ':-100,"eddystone_uid_beams":"string","eddystone_uid_enabled":true,'
            '"eddystone_uid_freq_msec":0,"eddystone_uid_instance":"string","edd'
            'ystone_uid_namespace":"string","eddystone_url_adv_power":0,"eddyst'
            'one_url_beams":"string","eddystone_url_enabled":true,"eddystone_ur'
            'l_freq_msec":0,"eddystone_url_url":"string","ibeacon_adv_power":-1'
            '00,"ibeacon_beams":"string","ibeacon_enabled":false,"ibeacon_freq_'
            'msec":0,"ibeacon_major":0,"ibeacon_minor":0,"ibeacon_uuid":"1f89bc'
            '00-d0af-481b-82fe-a6629259a39f","power":9,"power_mode":"string"},"'
            'created_time":0,"disable_eth1":false,"disable_eth2":false,"disable'
            '_eth3":false,"disable_module":false,"for_site":true,"height":0,"id'
            '":"471f6eca-6276-4993-bfeb-53cbbbba6f38","iot_config":{"A1":{"enab'
            'led":false,"name":"string","output":true,"pullup":"internal"},"A2"'
            ':{"enabled":false,"name":"string","output":true,"pullup":"internal'
            '"},"A3":{"enabled":false,"name":"string","output":true,"pullup":"i'
            'nternal"},"A4":{"enabled":false,"name":"string","output":true,"pul'
            'lup":"internal"},"DI1":{"enabled":false,"name":"string","pullup":"'
            'internal"},"DI2":{"enabled":false,"name":"string","pullup":"intern'
            'al"},"DO":{"enabled":false,"name":"string","output":true,"pullup":'
            '"internal","value":0}},"ip_config":{"dns":["string"],"dns_suffix":'
            '["string"],"gateway":"192.168.0.1","gateway6":"2001:0db8:85a3:0000'
            ':0000:8a2e:0370:7334","ip":"192.168.0.1","ip6":"2001:0db8:85a3:000'
            '0:0000:8a2e:0370:7334","mtu":0,"netmask":"192.168.0.1","netmask6":'
            '"2001:0db8:85a3:0000:0000:8a2e:0370:7334","type":"static","type6":'
            '"static","vlan_id":1},"led":{"brightness":0,"enabled":true},"map_i'
            'd":"09d2b626-2e4e-45ef-a3c4-e6aeb6c83db1","mesh":{"enabled":false,'
            '"group":0,"role":"base"},"modified_time":0,"name":"string","notes"'
            ':"string","ntp_servers":["string"],"org_id":"a40f5d1f-d889-42e9-94'
            'ea-b9b33585fc6b","orientation":0,"orientation_overwrite":true,"poe'
            '_passthrough":false,"port_config":{"property1":{"disabled":true,"d'
            'ynamic_vlan":{"default_vlan_id":0,"enabled":true,"type":"string","'
            'vlans":{"property1":"string","property2":"string"}},"enable_mac_au'
            'th":true,"forwarding":"all","mx_tunnel_id":"5f5cac07-0805-46ea-aaf'
            'd-5c5729042729","mxtunnel_name":"string","port_auth":"none","port_'
            'vlan_id":0,"radius_config":{"acct_interim_interval":0,"acct_server'
            's":[{"host":"string","port":1813,"secret":"string"}],"auth_servers'
            '":[{"host":"string","port":1812,"secret":"string"}],"auth_servers_'
            'retries":3,"auth_servers_timeout":5},"radsec":{"enabled":true,"ser'
            'ver_name":"string","servers":[{"host":"string","port":0}],"use_mxe'
            'dge":true},"vlan_id":0,"vland_ids":[0],"wxtunnel_id":"string","wxt'
            'unnel_remote_id":"string"},"property2":{"disabled":true,"dynamic_v'
            'lan":{"default_vlan_id":0,"enabled":true,"type":"string","vlans":{'
            '"property1":"string","property2":"string"}},"enable_mac_auth":true'
            ',"forwarding":"all","mx_tunnel_id":"5f5cac07-0805-46ea-aafd-5c5729'
            '042729","mxtunnel_name":"string","port_auth":"none","port_vlan_id"'
            ':0,"radius_config":{"acct_interim_interval":0,"acct_servers":[{"ho'
            'st":"string","port":1813,"secret":"string"}],"auth_servers":[{"hos'
            't":"string","port":1812,"secret":"string"}],"auth_servers_retries"'
            ':3,"auth_servers_timeout":5},"radsec":{"enabled":true,"server_name'
            '":"string","servers":[{"host":"string","port":0}],"use_mxedge":tru'
            'e},"vlan_id":0,"vland_ids":[0],"wxtunnel_id":"string","wxtunnel_re'
            'mote_id":"string"}},"pwr_config":{"base":0},"radio_config":{"ant_g'
            'ain_24":0,"ant_gain_5":0,"band_24":{"allow_rrm_disable":true,"ant_'
            'gain":0,"antenna_mode":"default","bandwidth":20,"channel":0,"chann'
            'els":[0],"disabled":true,"power":0,"power_max":0,"power_min":0,"pr'
            'eamble":"short","usage":"24"},"band_24_usage":"24","band_5":{"allo'
            'w_rrm_disable":true,"ant_gain":0,"antenna_mode":"default","bandwid'
            'th":20,"channel":0,"channels":[0],"disabled":true,"power":0,"power'
            '_max":0,"power_min":0,"preamble":"short","usage":"24"},"band_5_on_'
            '24_radio":{"allow_rrm_disable":true,"ant_gain":0,"antenna_mode":"d'
            'efault","bandwidth":20,"channel":0,"channels":[0],"disabled":true,'
            '"power":0,"power_max":0,"power_min":0,"preamble":"short","usage":"'
            '24"},"scanning_enabled":true},"site_id":"72771e6a-6f5e-4de4-a5b9-1'
            '266c4197811","switch_config":{"enabled":false,"eth0":{"enable_vlan'
            '":true,"port_vlan_id":0,"vlan_ids":[0]},"eth1":{"enable_vlan":true'
            ',"port_vlan_id":0,"vlan_ids":[0]},"eth2":{"enable_vlan":true,"port'
            '_vlan_id":0,"vlan_ids":[0]},"eth3":{"enable_vlan":true,"port_vlan_'
            'id":0,"vlan_ids":[0]},"module":{"enable_vlan":true,"port_vlan_id":'
            '0,"vlan_ids":[0]},"wds":{"enable_vlan":true,"port_vlan_id":0,"vlan'
            '_ids":[0]}},"usb_config":{"cacert":"string","channel":0,"enabled":'
            'true,"host":"string","port":0,"type":"imagotag","verify_cert":true'
            '},"vars":{},"x":0,"y":0}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Retrieves the list of Service Policies available for the Site
    def test_list_site_service_policies_derived(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        resolve = False

        # Perform the API call through the SDK function
        result = self.controller.list_site_service_policies_derived(site_id, resolve)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


