# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.capture import Capture


class SitesPcapsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesPcapsControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_pcaps
        cls.response_catcher = cls.controller.http_call_back

    # Get List of Site Packet Captures
    def test_list_site_packet_captures(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'
        client_mac = None

        # Perform the API call through the SDK function
        result = self.controller.list_site_packet_captures(site_id, page, limit, start, end, duration, client_mac)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":1461089816,"limit":100,"next":"/api/v1/sites/67970e46-4e12-'
            '11e6-9188-0242ac110007/insights/marvis?start=1461099816&token=AAAA'
            'FgAIAAAAAFj6ohEAAAhzZXZlcml0eQB%2F%2F%2F%2F1&limit=100&end=1461089'
            '816","results":[{"ap_macs":["5c5b35000010"],"timestamp":1461869041'
            ',"type":"new_assoc","url":"https://..."}],"start":1461099816}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Stop current capture
    def test_stop_site_packet_capture(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.stop_site_packet_capture(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Capturing status
    def test_get_site_capturing_status(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_capturing_status(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"aps":["5c5b350e001c","5c5b350e001b"],"client_mac":"60a10a773412"'
            ',"duration":300,"failed":[],"id":"a9a84e13-a714-b1eb-152f-a4344162'
            '17d5","includes_mcast":false,"max_pkt_len":128,"num_packets":1000,'
            '"ok":["5c5b350e001c","5c5b350e001b"],"started_time":1435080709,"ty'
            'pe":"client"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Initiate a Packet Capture
    #
    #The output will be available through websocket. As there can be multiple command issued against the same AP at the same time and the output all goes through the same websocket stream, session is introduced for demux.
    #
    ##### Subscribe to Device Command outputs
    #`WS /api-ws/v1/stream`
    #
    #```json
    #{
    #    subscribe: "/sites/{site_id}/pcaps"
    #}
    #```
    ##### Response (Wireless/RadioTap)
    #```json
    #{
    #    "event": "data"
    #    "channel": "/sites/:site_id/pcaps"
    #    "data": {
    #         "capture_id": "6b1be4fb-b239-44d9-9d3b-cb1ff3af1721",
    #     "lost_messages": 0
    #         "pcap_dict": {
    #             "channel_frequency": 2412,
    #             "channel": "1",
    #             "datarate": "1.0 Mbps",
    #             "rssi": -75, 
    #             "dst": "78:bd:bc:ca:0b:0a",
    #             "src": "18:b8:1f:4c:91:c0",
    #             "bssid": "18:b8:1f:4c:91:c0",
    #             "frame_type": "Management", 
    #             "frame_subtype": "Probe Response", 
    #         "proto": "802.11", 
    #             "ap_mac": "d4:20:b0:81:99:2e", 
    #             "direction": "tx", 
    #             "timestamp": 1652246543, 
    #             "length": 416.0,
    #             "interface": "radiotap",
    #             "info": "1652246544.467733 1683216786us tsft 1.0 Mb/s 2412 MHz 11g -75dBm signal -82dBm noise antenna 0 Probe Response (ATTKmsWiVS) [1.0* 2.0* 5.5* 11.0* 18.0 24.0 36.0 54.0 Mbit] CH: 2, PRIVACY\\n",
    #         }, 
    #        "pcap_raw": "1MOyoQIABAAAAAAAAAAAAP//AAABAAAAEEh7Yh5VBwCgAQAAoAEAAAAAKwBvCADAAQAAAIw7reCS2VNkAAAAABACbAmABLWuAAEAEBgAAwACAABQADoBeL28ygsKGLgfTJHAGLgfTJHAcIZ2WDlBJQAAAGQAERUACkFUVEttc1dpVlMBCIKEi5YkMEhsAwECBwZVUyABCx4gAQAjAhkAKgEEMgQMEhhgMBQBAAAPrAQBAAAPrAQBAAAPrAIMAAsFAQAbAABGBTIIAQAALRqtCR////8AAAAAAAAAAAAAAAAAAAAAAAAAAD0WAggVAAAAAAAAAAAAAAAAAAAAAAAAAH8IBAAIAAAAAEDdkwBQ8gQQSgABEBBEAAECEDsAAQMQRwAQn2481frn3KT+uGod2ERx+RAhAAtBcnJpcywgSW5jLhAjAApCR1cyMTAtNzAwECQACkJHVzIxMC03MDAQQgAKQkdXMjEwLTcwMBBUAAgABgBQ8gQAARARAA5BcnJpcyBXaXJlbGVzcxAIAAIgCBA8AAEBEEkABgA3KgABIN0JABAYAgEQHAAA3RgAUPICAQGEAAOkAAAnpAAAQkNeAGIyLwAzjakr"
    #}
    #```
    #
    ##### vResponse (Wired)
    #```json
    #{
    #    "event": "data"
    #    "channel": "/sites/67970e46-4e12-11e6-9188-0242ac110007/pcaps"
    #    "data": {
    #        "capture_id": "f039b1b4-a23e-48b2-906a-0da40524de73", 
    #        "pcap_dict": {
    #             "dst_mac": "68:ec:c5:09:2e:87",
    #             "src_mac": "8c:3b:ad:e0:47:40", 
    #             "vlan": 1, 
    #             "src_ip": "34.224.147.117", 
    #             "dst_ip": "192.168.1.55",
    #             "dst_port": 51635, 
    #             "src_port": 443,
    #             "proto": "TCP", 
    #             "ap_mac": "d4:20:b0:81:99:2e",
    #             "direction": "tx", 
    #             "timestamp": 1652247615, 
    #             "length": 159.0, 
    #             "interface": "wired",
    #             "info": "1652247616.007409 IP ec2-34-224-147-117.compute-1.amazonaws.com.https > ip-192-168-1-55.ec2.internal.51635: Flags [P.], seq 2192123968:2192124057, ack 4035166782, win 12, options [nop,nop,TS val 597467050 ecr 740580660], length 89\\n",
    #             }, 
    #        "pcap_raw": "1MOyoQIABAAAAAAAAAAAAP//AAABAAAAQEx7YhMzAACfAAAAnwAAAGjsxQkuh4w7reBHQIEAAAEIAEUAAI1bLEAAKAZ/CiLgk3XAqAE3AbvJs4KpKEDwg8I+gBgADFf9AAABAQgKI5yfqiwkXTQXAwMAVKY5JopoKQrVEn0/3ld4YntctGEH/rTZuwtCvzSncFw71QJveJi9uxHs57KC8w9Apph3YvXJrmWg7M37+o+YV0KH/xmr626s5Bkhb3QhKOu+NoNEmA=="
    #
    #    }
    #}
    #```
    #
    ##### Stop Response (Wired/Wireless)
    #```json
    #{
    #    "event": "data"
    #    "channel": "/sites/67970e46-4e12-11e6-9188-0242ac110007/pcaps"
    #    "data": {
    #      "capture_id": "a2f7374d-6a70-41fd-8a3f-71e42573baaf", 
    #      "lost_messages": 0,
    #      "pcap_dict": null
    #    }
    #}
    #```
    def test_start_site_packet_capture(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"client_mac":"60a10a773412","duration":600,"includes_mcast":false'
            ',"max_pkt_len":128,"num_packets":100,"type":"new_assoc"}', Capture.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.start_site_packet_capture(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"ap_count":3,"aps":[],"duration":600,"enabled":true,"expiry":1614'
            '886726.5411825,"format":"stream","id":"a9a84e13-a714-b1eb-152f-a43'
            '4416217d5","include_mcast":false,"invalid_aps":{},"max_pkt_len":68'
            ',"num_packets":100,"org_id":"a9346fba-f920-e99a-cc51-2e8dcc57fa3c"'
            ',"raw":true,"site_id":"67970e46-4e12-11e6-9188-0242ac110007","ssid'
            '":"","timestamp":1614886126.5411825,"type":"radiotap"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

