# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper


class SitesNetworksControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesNetworksControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_networks
        cls.response_catcher = cls.controller.http_call_back

    # Retrieves the list of Networks available for the Site
    def test_list_site_networks_derived(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        resolve = False

        # Perform the API call through the SDK function
        result = self.controller.list_site_networks_derived(site_id, resolve)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"created_time":0,"disallow_mist_services":false,"gateway":"192.1'
            '68.70.1","hosts":{"property1":{"external_ips":"172.16.10.32-172.16'
            '.10.35","ips":"192.168.70.32-192.168.70.35"},"property2":{"externa'
            'l_ips":"172.16.10.32-172.16.10.35","ips":"192.168.70.32-192.168.70'
            '.35"}},"id":"497f6eca-6276-4993-bfeb-53cbbbba6f13","internal_acces'
            's":{"enabled":true},"internet_access":{"create_simple_service_poli'
            'cy":false,"destination_nat":{"property1":{"internal_ip":"192.168.7'
            '0.30","name":"web server","port":443},"property2":{"internal_ip":"'
            '192.168.70.30","name":"web server","port":443}},"enabled":true,"re'
            'stricted":false,"static_nat":{"property1":{"internal_ip":"192.168.'
            '70.3","name":"printer-1"},"property2":{"internal_ip":"192.168.70.3'
            '","name":"printer-1"}}},"isolation":true,"modified_time":0,"name":'
            '"string","org_id":"a40f5d1f-d889-42e9-94ea-b9b33585fc6b","subnet":'
            '"192.168.70.0/24","tenants":{"property1":{"addresses":"string"},"p'
            'roperty2":{"addresses":"string"}},"vlan_id":0,"vpn_access":{"prope'
            'rty1":{"allow_ping":true,"destination_nat":{"property1":{"name":"w'
            'eb server","port":443,"to":"192.168.70.5/30"},"property2":{"name":'
            '"web server","port":443,"to":"192.168.70.5/30"}},"nat_pool":"172.1'
            '6.0.0/26","routed":true,"source_nat":{"exteral_ip":"172.16.0.8/30"'
            '},"static_nat":{"property1":{"internal_ip":"192.168.70.3","name":"'
            'pos-station-1"},"property2":{"internal_ip":"192.168.70.3","name":"'
            'pos-station-1"}},"summarized_subnet":"172.16.0.0/16"},"property2":'
            '{"allow_ping":true,"destination_nat":{"property1":{"name":"web ser'
            'ver","port":443,"to":"192.168.70.5/30"},"property2":{"name":"web s'
            'erver","port":443,"to":"192.168.70.5/30"}},"nat_pool":"172.16.0.0/'
            '26","routed":true,"source_nat":{"exteral_ip":"172.16.0.8/30"},"sta'
            'tic_nat":{"property1":{"internal_ip":"192.168.70.3","name":"pos-st'
            'ation-1"},"property2":{"internal_ip":"192.168.70.3","name":"pos-st'
            'ation-1"}},"summarized_subnet":"172.16.0.0/16"}}}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

