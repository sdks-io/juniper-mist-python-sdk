# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.api_v_1_sites_devices_reset_radio_config_request import ApiV1SitesDevicesResetRadioConfigRequest
from mistapi.models.api_v_1_sites_devices_zerioze_request import ApiV1SitesDevicesZeriozeRequest


class SitesDevicesWirelessControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesDevicesWirelessControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_devices_wireless
        cls.response_catcher = cls.controller.http_call_back

    # Get a list of allowed channels (per channel width)
    def test_get_site_device_radio_channels(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        country_code = 'US'

        # Perform the API call through the SDK function
        result = self.controller.get_site_device_radio_channels(site_id, country_code)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"band24_40mhz_allowed":false,"band24_channels":{"20":[1,2,3,4,5,6'
            ',7,8,9,10,11],"40":[1,2,3,4,5,6,7,8,9,10,11]},"band24_enabled":tru'
            'e,"band5_channels":{"20":[36,40,44,48,52,56,60,64,100,104,108,112,'
            '116,120,124,128,132,136,140,144,149,153,157,161,165],"40":[36,40,4'
            '4,48,52,56,60,64,100,104,108,112,116,120,124,128,132,136,140,144,1'
            '49,153,157,161],"80":[36,40,44,48,52,56,60,64,100,104,108,112,116,'
            '120,124,128,132,136,140,144,149,153,157,161],"dfs":[52,56,60,64,10'
            '0,104,108,112,116,120,124,128,132,136,140,144],"outdoor":[36,40,44'
            ',48,52,56,60,64,100,104,108,112,116,120,124,128,132,136,140,144,14'
            '9,153,157,161,165]},"band5_enabled":true,"certified":true,"code":8'
            '40,"dfs_ok":true,"key":"US","name":"United States","uses":"US_FCC"'
            '}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # To force all APs to reprovision itself again. 
    def test_reprovision_site_all_aps(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.reprovision_site_all_aps(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Reset all APs in the Site to use RRM
    def test_reset_site_all_aps_to_use_rrm(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"bands":["24","5","6"],"force":false}', ApiV1SitesDevicesResetRadioConfigRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.reset_site_all_aps_to_use_rrm(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Zeroize all FIPS APs in the Site
    def test_zeroize_site_fips_all_aps(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"password":"NUKETHESITE"}', ApiV1SitesDevicesZeriozeRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.zeroize_site_fips_all_aps(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Returns the current state of each enabled IoT pin configured as an output.
    def test_get_site_device_iot_port(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_device_iot_port(site_id, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        assert '{"A1":1,"DO":0}' == self.response_catcher.response.text

    # **Note**: For each IoT pin referenced:
    # * The pin must be enabled using the Device `iot_config` API
    # * The pin must support the output direction
    def test_set_site_device_iot_port(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = {"A1":1,"DO":0}

        # Perform the API call through the SDK function
        result = self.controller.set_site_device_iot_port(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        assert '{"A1":1,"DO":0}' == self.response_catcher.response.text

    # Locate a Device by blinking it’s LED, it’s a persisted state that has to be stopped by calling Stop Locating API
    def test_start_site_locate_device(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.start_site_locate_device(site_id, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Stop Locate a Device
    def test_stop_site_locate_device(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.stop_site_locate_device(site_id, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


