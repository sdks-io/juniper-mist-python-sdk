# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.api_v_1_sites_devices_bounce_port_request import ApiV1SitesDevicesBouncePortRequest
from mistapi.models.api_v_1_sites_devices_cable_test_request import ApiV1SitesDevicesCableTestRequest
from mistapi.models.api_v_1_sites_devices_clear_bpdu_error_request import ApiV1SitesDevicesClearBpduErrorRequest
from mistapi.models.api_v_1_sites_devices_clear_macs_request import ApiV1SitesDevicesClearMacsRequest
from mistapi.models.junos_port_config import JunosPortConfig


class SitesDevicesWiredControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesDevicesWiredControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_devices_wired
        cls.response_catcher = cls.controller.http_call_back

    # Port Bounce can be performed from the Switch.The output will be available through websocket. As there can be multiple command issued against the same AP at the same time and the output all goes through the same websocket stream, session is introduced for demux.
    #
    ##### Subscribe to Device Command outputs
    #`WS /api-ws/v1/stream`
    #
    #```json
    #{
    #    "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
    #}
    #```
    ###### Example output from ws stream
    #```json
    #{
    #    "event": "data",
    #    "channel": "/sites/4ac1dcf4-9d8b-7211-65c4-057819f0862b/devices/00000000-0000-0000-1000-5c5b350e0060/cmd",
    #    "data": {
    #        "session": "session_id",
    #        "raw": "Port bounce complete."
    #    }
    #}
    #```
    def test_ports_bounce_from_switch(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"ports":["ge-0/0/0","ge-0/0/1"]}', ApiV1SitesDevicesBouncePortRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.ports_bounce_from_switch(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # TDR can be performed from the Switch. The output will be available through websocket. As there can be multiple command issued against the same Switch at the same time and the output all goes through the same websocket stream, session is introduced for demux.
    #
    ##### Subscribe to Device Command outputs
    #`WS /api-ws/v1/stream`
    #
    #```json
    #{
    #    "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
    #}
    #```
    ###### Example output from ws stream
    #```json
    #{
    #    "event": "data",
    #    "channel": "/sites/4ac1dcf4-9d8b-7211-65c4-057819f0862b/devices/00000000-0000-0000-1000-5c5b350e0060/cmd",
    #    "data": {
    #        "session": "session_id",
    #        "raw": "Interface TDR detail:\nTest status : Test successfully executed  ge-0/0/0\n"
    #    }
    #}
    #```
    def test_cable_test_from_switch(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"port":"ge-0/0/0"}', ApiV1SitesDevicesCableTestRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.cable_test_from_switch(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"session":"session_id"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Clear bridge protocol data unit (BPDU) error condition caused by the detection of a possible bridging loop from Spanning Tree Protocol (STP) operation that renders the port unoperational.
    def test_clear_bpdu_erros_from_ports_on_switch(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.clear_bpdu_erros_from_ports_on_switch(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Clear all learned MAC addresses, including persistent MAC addresses, on a port.
    def test_clear_all_learned_macs_from_port_on_switch(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"ports":["ge-0/0/0.0"]}', ApiV1SitesDevicesClearMacsRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.clear_all_learned_macs_from_port_on_switch(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Sometimes HelpDesk Admin needs to change port configs
    def test_delete_site_local_switch_port_config(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_local_switch_port_config(site_id, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Sometimes HelpDesk Admin needs to change port configs
    def test_update_site_local_switch_port_config(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"ae_disable_lacp":true,"ae_idx":0,"aggregated":false,"description'
            '":"string","disable_autoneg":true,"duplex":"auto","dynamic_usage":'
            '"string","esilag":true,"poe_disabled":true,"speed":"auto","usage":'
            '"string"}', JunosPortConfig.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.update_site_local_switch_port_config(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # This API can be used to poll statistics from the Switch proactively once. After it is called, the statistics will be pushed back to the cloud within the statistics interval.
    def test_poll_site_switch_stats(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.poll_site_switch_stats(site_id, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get version compliance metrics for managed or monitored switches
    #
    def test_get_site_switches_metrics(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        mtype = None
        scope = None
        switch_mac = None

        # Perform the API call through the SDK function
        result = self.controller.get_site_switches_metrics(site_id, mtype, scope, switch_mac)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"active_ports_summary":{"details":{"active_port_count":4,"total_p'
            'ort_count":4},"score":100,"total_switch_count":2},"config_success"'
            ':{"details":{"config_success_count":2},"score":100,"total_switch_c'
            'ount":2},"version_compliance":{"details":{"major_versions":[{"majo'
            'r_count":1,"major_version":"21.4R3.5","model":"EX2300-C-12P","syst'
            'em_names":[]},{"major_count":1,"major_version":"6.0.4-11","model":'
            '"SSR120","system_names":[]}]},"score":100,"total_switch_count":2}}'
            '')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

