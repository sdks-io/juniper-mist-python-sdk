# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper


class SitesClientsWiredControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesClientsWiredControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_clients_wired
        cls.response_catcher = cls.controller.http_call_back

    # Count by Distinct Attributes of Clients
    def test_count_site_wired_clients(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        distinct = 'mac'
        mac = None
        device_mac = None
        port_id = None
        vlan = None
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.count_site_wired_clients(site_id, distinct, mac, device_mac, port_id, vlan, page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"distinct":"string","end":0,"limit":0,"percentage":0,"results":[{'
            '"count":0,"property":"string"}],"start":0,"total":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Search Wired Clients
    def test_search_site_wired_clients(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_mac = None
        mac = None
        ip = None
        port_id = None
        vlan = None
        ip_address = '192.168.1.1'
        manufacture = None
        text = None
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.search_site_wired_clients(site_id, device_mac, mac, ip, port_id, vlan, ip_address, manufacture, text, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":1648529800.8221116,"limit":1000,"results":[{"device_mac":["'
            '001122334455"],"device_mac_port":[{"device_mac":"001122334455","ip'
            '":"","port_id":"et-0/0/1","port_parent":"","start":"2020-12-10T00:'
            '07:36.262+0000","vlan":1,"when":"2022-03-29T04:56:05.172+0000"}],"'
            'ip":["11.216.202.61"],"mac":"112233445566","org_id":"c168ddee-c14c'
            '-11e5-8e81-1258369c38a9","port_id":["et-0/0/1"],"site_id":"c168dde'
            'e-c14c-11e5-8e81-1258369c38a9","timestamp":1571174567.807,"vlan":['
            '0,1001]}],"start":1648443400.8221116,"total":1}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

