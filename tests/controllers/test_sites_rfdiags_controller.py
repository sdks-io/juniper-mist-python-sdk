# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.rfdiag import Rfdiag


class SitesRfdiagsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesRfdiagsControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_rfdiags
        cls.response_catcher = cls.controller.http_call_back

    # List RF Glass Recording
    def test_get_site_site_rfdiag_recording(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.get_site_site_rfdiag_recording(site_id, page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[[{"asset_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","asset_name":'
            '"string","client_name":"string","duration":0,"end_time":0,"frame_c'
            'ount":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mac":"string"'
            ',"map_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","name":"string","'
            'next":"string","raw_events":"string","ready":true,"sdkclient_id":"'
            'b069b358-4c97-5319-1f8c-7c5ca64d6ab1","sdkclient_name":"string","s'
            'dkclient_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","start_time"'
            ':0,"type":"sdkclient","url":"string"}]]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Start RF Glass Recording
    def test_start_site_recording(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.start_site_recording(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"asset_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","asset_name":"'
            'string","client_name":"string","duration":0,"end_time":0,"frame_co'
            'unt":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mac":"string",'
            '"map_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","name":"string","n'
            'ext":"string","raw_events":"string","ready":true,"sdkclient_id":"b'
            '069b358-4c97-5319-1f8c-7c5ca64d6ab1","sdkclient_name":"string","sd'
            'kclient_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","start_time":'
            '0,"type":"sdkclient","url":"string"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Delete Recording
    def test_delete_site_rfdiag_recording(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        rfdiag_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_rfdiag_recording(site_id, rfdiag_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get RF Diage Recording Details
    def test_get_site_rfdiag_recording(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        rfdiag_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_rfdiag_recording(site_id, rfdiag_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"asset_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","asset_name":"'
            'string","client_name":"string","duration":0,"end_time":0,"frame_co'
            'unt":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mac":"string",'
            '"map_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","name":"string","n'
            'ext":"string","raw_events":"string","ready":true,"sdkclient_id":"b'
            '069b358-4c97-5319-1f8c-7c5ca64d6ab1","sdkclient_name":"string","sd'
            'kclient_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","start_time":'
            '0,"type":"sdkclient","url":"string"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Update Recording
    def test_update_site_rfdiag_recording(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        rfdiag_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.update_site_rfdiag_recording(site_id, rfdiag_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"asset_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","asset_name":"'
            'string","client_name":"string","duration":0,"end_time":0,"frame_co'
            'unt":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mac":"string",'
            '"map_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","name":"string","n'
            'ext":"string","raw_events":"string","ready":true,"sdkclient_id":"b'
            '069b358-4c97-5319-1f8c-7c5ca64d6ab1","sdkclient_name":"string","sd'
            'kclient_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","start_time":'
            '0,"type":"sdkclient","url":"string"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Download Recording
    #Download raw_events blob
    def test_download_site_rfdiag_recording(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        rfdiag_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.download_site_rfdiag_recording(site_id, rfdiag_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # If the recording session is active for the given rfdiag_id, it will finish the recording. duration and end_time will be updated to reflect the correct values.
    def test_stop_site_rfdiag_recording(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        rfdiag_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.stop_site_rfdiag_recording(site_id, rfdiag_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


