# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.psk import Psk


class SitesPsksControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesPsksControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_psks
        cls.response_catcher = cls.controller.http_call_back

    # Get List of Site PSKs
    def test_list_site_psks(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        ssid = None
        role = None
        name = None
        page = 1
        limit = 100

        # Perform the API call through the SDK function
        result = self.controller.list_site_psks(site_id, ssid, role, name, page, limit)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"created_time":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","ma'
            'c":"string","modified_time":0,"name":"string","org_id":"b069b358-4'
            'c97-5319-1f8c-7c5ca64d6ab1","passphrase":"stringst","site_id":"b06'
            '9b358-4c97-5319-1f8c-7c5ca64d6ab1","ssid":"string","usage":"multi"'
            ',"vlan_id":1}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Create Site PSK
    def test_create_site_psk(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"mac":"string","name":"string","passphrase":"stringst","ssid":"st'
            'ring","usage":"multi","vlan_id":1}', Psk.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_site_psk(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Update multi PSKs
    def test_update_site_psks(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('[{"id":"2f64a022-9422-4fa3-92aa-ff6559a9f7f9","name":"common123","'
            'passphrase":"foryoureyesonly2","ssid":"warehouse"},{"id":"110c59ae'
            '-d7b2-40f9-9bf2-82367370e55a","name":"common12","passphrase":"fory'
            'oureyesonly1","role":"teacher","ssid":"warehouse","usage":"single"'
            '}]', Psk.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.update_site_psks(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"created_time":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","ma'
            'c":"string","modified_time":0,"name":"string","org_id":"b069b358-4'
            'c97-5319-1f8c-7c5ca64d6ab1","passphrase":"stringst","site_id":"b06'
            '9b358-4c97-5319-1f8c-7c5ca64d6ab1","ssid":"string","usage":"multi"'
            ',"vlan_id":1}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Import PSK from CSV file or JSON
    #
    ### CSV File Format
    #```csv
    #PSK Import CSV File Format:
    #name,ssid,passphrase,usage,vlan_id,mac
    #Common,warehouse,foryoureyesonly,single,35,a31425f31278
    #Justin,reception,visible,multi,1002
    #```
    def test_import_site_psks(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        file = None

        # Perform the API call through the SDK function
        result = self.controller.import_site_psks(site_id, file)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"created_time":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","ma'
            'c":"string","modified_time":0,"name":"string","org_id":"b069b358-4'
            'c97-5319-1f8c-7c5ca64d6ab1","passphrase":"stringst","site_id":"b06'
            '9b358-4c97-5319-1f8c-7c5ca64d6ab1","ssid":"string","usage":"multi"'
            ',"vlan_id":1}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Delete Site PSK
    def test_delete_site_psk(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        psk_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_psk(site_id, psk_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Site PSK Details
    def test_get_site_psk(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        psk_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_psk(site_id, psk_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Update Site PSK
    def test_update_site_psk(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        psk_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"mac":"string","name":"string","passphrase":"stringst","ssid":"st'
            'ring","usage":"multi","vlan_id":1}', Psk.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.update_site_psk(site_id, psk_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


