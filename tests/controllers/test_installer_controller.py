# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.installer_devices import InstallerDevices


class InstallerControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(InstallerControllerTests, cls).setUpClass()
        cls.controller = cls.client.installer
        cls.response_catcher = cls.controller.http_call_back

    # Get List of alarm templates
    def test_list_installer_alarm_templates(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_installer_alarm_templates(org_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"id":"684dfc5c-fe77-2290-eb1d-ef3d677fe168","name":"AlarmTemplat'
            'e 1"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get List of Device Profiles
    def test_list_installer_device_profiles(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_installer_device_profiles(org_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"id":"6f4bf402-45f9-2a56-6c8b-7f83d3bc98e9","name":"DeviceProfil'
            'e 1"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get List of recently claimed devices
    def test_list_installer_list_of_renctly_claimed_devices(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_installer_list_of_renctly_claimed_devices(org_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"connected":true,"mac":"5c5b35000018","model":"AP41","serial":"F'
            'XLH2015150025"},{"connected":false,"deviceprofile_name":"SJ1","nam'
            'e":"hallway","site_name":"SJ1"},{"connected":true,"height":2.7,"ma'
            'p_id":"845a23bf-bed9-e43c-4c86-6fa474be7ae5","orientation":90,"x":'
            '150,"y":300}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This mirrors `POST /api/v1/orgs/{org_id}/inventory` (see Inventory API)
    def test_claim_installer_devices(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('["6JG8E-PTFV2-A9Z2N","DVH4V-SNMSZ-PDXBR"]')

        # Perform the API call through the SDK function
        result = self.controller.claim_installer_devices(org_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"added":["6JG8E-PTFV2-A9Z2N"],"duplicated":["DVH4V-SNMSZ-PDXBR"],'
            '"error":["PO1025335ohoh"],"inventory_added":[{"mac":"5c5b35000018"'
            ',"magic":"6JG8EPTFV2A9Z2N","model":"AP41","serial":"FXLH2015150025'
            '","type":"ap"}],"inventory_duplicated":[{"mac":"5c5b35000012","mag'
            'ic":"DVH4VSNMSZPDXBR","model":"AP41","serial":"FXLH2015150027","ty'
            'pe":"ap"}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Unassign recently claimed devices
    def test_unassign_installer_recently_claimed_device(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_mac = '0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.unassign_installer_recently_claimed_device(org_id, device_mac)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Provision or Replace a device 
    #
    #If replacing_mac is in the request payload, other attributes are ignored, we attempt to replace existing device (with mac replacing_mac) with the inventory device being configured. The replacement device must be in the inventory but not assigned, and the replacing_mac device must be assigned to a site, and satisfy grace period requirements. The Device replaced will become unassigned.
    def test_provision_installer_devices(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_mac = '0000000000ab'
        body = APIHelper.json_deserialize('{"deviceprofile_name":"string","for_site":true,"height":0,"map_id"'
            ':"09d2b626-2e4e-45ef-a3c4-e6aeb6c83db1","name":"string","orientati'
            'on":0,"site_id":"72771e6a-6f5e-4de4-a5b9-1266c4197811","site_name"'
            ':"string","x":0,"y":0}', InstallerDevices.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.provision_installer_devices(org_id, device_mac, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Locate a Device by blinking it’s LED, it’s a persisted state that has to be stopped by calling Stop Locating API
    def test_start_installer_locate_device(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_mac = '0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.start_installer_locate_device(org_id, device_mac, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Stop it
    def test_stop_installer_locate_device(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_mac = '0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.stop_installer_locate_device(org_id, device_mac)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get List of RF Templates
    def test_list_installer_rf_templates_names(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_installer_rf_templates_names(org_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"id":"bb8a9017-1e36-5d6c-6f2b-551abe8a76a2","name":"RFTemplate 1'
            '"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get List of Secuity Policies
    def test_list_installer_sec_policies(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_installer_sec_policies(org_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"id":"3bcd0beb-5d0a-4cbd-92c1-14aea91e98ef","name":"SecuPolicy 1'
            '"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get List of Site Groups
    def test_list_installer_site_groups(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_installer_site_groups(org_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"id":"581328b6-e382-f54e-c9dc-999983183a34","name":"SiteGroup 1"'
            '}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get List of Sites
    def test_list_installer_sites(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_installer_sites(org_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"address":"1601 S. Deanza Blvd., Cupertino, CA, 95014","country_'
            'code":"US","id":"4ac1dcf4-9d8b-7211-65c4-057819f0862b","latlng":{"'
            'lat":37.295833,"lng":-122.032946},"name":"Mist Office","timezone":'
            '"America/Los_Angeles"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

