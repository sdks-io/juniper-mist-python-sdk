# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.device_upgrade import DeviceUpgrade
from mistapi.models.api_v_1_sites_devices_upgrade_request import ApiV1SitesDevicesUpgradeRequest
from mistapi.models.api_v_1_sites_ssr_upgrade_request import ApiV1SitesSsrUpgradeRequest


class SitesDevicesUpgradesControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesDevicesUpgradesControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_devices_upgrades
        cls.response_catcher = cls.controller.http_call_back

    # Get all upgrades for site
    def test_list_site_devices_upgrade(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        status = None

        # Perform the API call through the SDK function
        result = self.controller.list_site_devices_upgrade(site_id, status)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"counts":{"download_requested":0,"downloaded":0,"failed":0,"rebo'
            'ot_in_progress":0,"rebooted":0,"skipped":0,"total":0},"enable_p2p"'
            ':true,"force":true,"id":"472f6eca-6276-4993-bfeb-53cbbbba6f28","st'
            'art_time":0,"status":"created","strategy":"big_bang","target_versi'
            'on":"string"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Upgrade Multiple Device
    #
    #**Note**: this call doesnâ€™t guarantee the devices to be upgraded right away (they may be offline)
    def test_multi_upgrade_site_devices(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"canary_phases":[1,10,50,100],"device_ids":["string"],"enable_p2p'
            '":true,"force":false,"max_failure_percentage":5,"max_failures":[0]'
            ',"models":["string"],"start_time":0,"strategy":"big_bang","version'
            '":"stable"}', DeviceUpgrade.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.multi_upgrade_site_devices(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"counts":{"downloaded":0,"failed":0,"reboot_in_progress":0,"reboo'
            'ted":0,"total":0},"enable_p2p":true,"force":true,"id":"473f6eca-62'
            '76-4993-bfeb-53cbbbba6f18","start_time":0,"status":"created","stra'
            'tegy":"big_bang","target_version":"string"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Site Device Upgrade
    def test_get_site_upgrade(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        upgrade_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_upgrade(site_id, upgrade_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"counts":{"downloaded":0,"failed":0,"reboot_in_progress":0,"reboo'
            'ted":0,"total":0},"enable_p2p":true,"force":true,"id":"473f6eca-62'
            '76-4993-bfeb-53cbbbba6f18","start_time":0,"status":"created","stra'
            'tegy":"big_bang","target_version":"string"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Best effort to cancel an upgrade. Devices which are already upgraded wont be touched
    def test_cancel_site_device_upgrade(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        upgrade_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.cancel_site_device_upgrade(site_id, upgrade_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get List of Available Device Versions
    def test_list_site_available_device_versions(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        mtype = 'ap'
        model = None

        # Perform the API call through the SDK function
        result = self.controller.list_site_available_device_versions(site_id, mtype, model)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"model":"AP41","tag":"stable","version":"v0.1.543"},{"model":"AP'
            '21","version":"v0.1.545"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Device Upgrade
    def test_upgrade_site_device(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"version":"3.1.5"}', ApiV1SitesDevicesUpgradeRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.upgrade_site_device(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"status":"inprogress","status_id":5,"timestamp":1428949501}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Specific Site SSR Upgrade
    def test_get_site_ssr_upgrade(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        upgrade_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_ssr_upgrade(site_id, upgrade_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"channel":"stable","device_type":"gateway","id":"5cbcee0a-c620-4b'
            'b4-a25e-15000934e9d8","status":"upgrading","targets":{"failed":[],'
            '"queued":[],"success":[],"upgrading":["8e525f1d-4178-4ae1-a988-2b0'
            '176855e55"]},"versions":{}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Upgrade Site SSR device
    def test_upgrade_site_ssr(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"channel":"stable","version":"5.3.1-170-93"}', ApiV1SitesSsrUpgradeRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.upgrade_site_ssr(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"channel":"stable","counts":{"failed":0,"queued":1,"success":0,"u'
            'pgrading":1},"device_type":"gateway","id":"ceef2c8a-e2e6-447a-8b27'
            '-cb4f3ec1adae","status":"upgrading","strategy":"serial","versions"'
            ':{}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

