# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper


class SitesClientsWanControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesClientsWanControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_clients_wan
        cls.response_catcher = cls.controller.http_call_back

    # Count by Distinct Attributes of Site WAN Client-Events
    #
    def test_count_site_wan_client_events(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        distinct = 'type'

        # Perform the API call through the SDK function
        result = self.controller.count_site_wan_client_events(site_id, distinct)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"distinct":"string","end":0,"limit":0,"percentage":0,"results":[{'
            '"count":0,"property":"string"}],"start":0,"total":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Count Site WAN Clients
    def test_count_site_wan_clients(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        distinct = 'mac'
        start = 0
        end = 0
        duration = '1d'
        limit = 100
        page = 1

        # Perform the API call through the SDK function
        result = self.controller.count_site_wan_clients(site_id, distinct, start, end, duration, limit, page)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"distinct":"string","end":0,"limit":0,"percentage":0,"results":[{'
            '"count":0,"property":"string"}],"start":0,"total":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Search Site WAN Client Events
    def test_search_site_wan_clients_events(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        mtype = None
        mac = None
        hostname = None
        ip = None
        mfg = None
        start = 0
        end = 0
        duration = '1d'
        limit = 100
        page = 1

        # Perform the API call through the SDK function
        result = self.controller.search_site_wan_clients_events(site_id, mtype, mac, hostname, ip, mfg, start, end, duration, limit, page)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":0,"limit":0,"results":{"When":"2022-12-31T23:59:59.293Z","e'
            'v_type":"CLIENT_IP_ASSIGNED","metadata":{},"org_id":"b0b9f142-aaba'
            '-11e6-aafc-0242ac110002","random_mac":true,"site_id":"fc656275-b15'
            '7-43fd-b922-5f4f341c19bf","text":"DHCP Ack IP 192.168.88.216","wci'
            'd":"62bbfb75-10d8-49d1-dec7-d2df91624287"},"start":0,"total":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Search Site WAN Clients
    def test_search_site_wan_clients(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        mac = None
        hostname = None
        ip = None
        mfg = None
        start = 0
        end = 0
        duration = '1d'
        limit = 100
        page = 1

        # Perform the API call through the SDK function
        result = self.controller.search_site_wan_clients(site_id, mac, hostname, ip, mfg, start, end, duration, limit, page)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":0,"limit":0,"results":{"When":"2022-12-31T23:59:43.497+0000'
            '","hostname":["sonoszp"],"ip":["192.168.1.139"],"last_hostname":"s'
            'onoszp","last_ip":"192.168.1.139","mfg":"Sonos","org_id":"b4e16c72'
            '-d50e-4c03-a952-a3217e231e2c","site_id":"f688779c-e335-4f88-8d7c-9'
            'c5e9964528b","wcid":"8bbe7389-212b-c65d-2208-00fab2017936"},"start'
            '":0,"total":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

