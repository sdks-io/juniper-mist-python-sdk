# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.asset import Asset


class SitesAssetsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesAssetsControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_assets
        cls.response_catcher = cls.controller.http_call_back

    # Get List of Site Assets
    def test_list_site_assets(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_site_assets(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Create Site Asset
    def test_create_site_asset(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_site_asset(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mac'
            '":"string","map_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","modifi'
            'ed_time":0,"name":"string","org_id":"b069b358-4c97-5319-1f8c-7c5ca'
            '64d6ab1","site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","tag_id"'
            ':"6f4bf402-45f9-2a56-6c8b-7f83d3bc98e9"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Impert Site Assets. 
    #
    #It can be done via a CSV file or a JSON payload.
    #
    ### CSV File Format
    #```csv
    #name,mac
    #"asset_name",5c5b53010101
    #``` 
    def test_import_site_assets(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        upsert = 'False'
        file = None

        # Perform the API call through the SDK function
        result = self.controller.import_site_assets(site_id, upsert, file)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Delete Site Asset
    def test_delete_site_asset(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        asset_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_asset(site_id, asset_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Delete Site Asset
    def test_delete_site_asset_1(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        asset_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_asset(site_id, asset_id)

        # Test response code
        assert self.response_catcher.response.status_code == 201

    # Get Site Asset Details
    def test_get_site_asset(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        asset_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_asset(site_id, asset_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mac'
            '":"string","map_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","modifi'
            'ed_time":0,"name":"string","org_id":"b069b358-4c97-5319-1f8c-7c5ca'
            '64d6ab1","site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","tag_id"'
            ':"6f4bf402-45f9-2a56-6c8b-7f83d3bc98e9"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Update Site Asset
    def test_update_site_asset(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        asset_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.update_site_asset(site_id, asset_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mac'
            '":"string","map_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","modifi'
            'ed_time":0,"name":"string","org_id":"b069b358-4c97-5319-1f8c-7c5ca'
            '64d6ab1","site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","tag_id"'
            ':"6f4bf402-45f9-2a56-6c8b-7f83d3bc98e9"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Count Asset by distinct field
    def test_count_site_assets(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        distinct = 'map_id'

        # Perform the API call through the SDK function
        result = self.controller.count_site_assets(site_id, distinct)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"distinct":"string","end":0,"limit":0,"percentage":0,"results":[{'
            '"count":0,"property":"string"}],"start":0,"total":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Assets Search
    def test_search_site_assets(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        mac = None
        map_id = None
        ibeacon_uuid = None
        ibeacon_major = None
        ibeacon_minor = None
        eddystone_uid_namespace = None
        eddystone_uid_instance = None
        eddystone_url = None
        device_name = None
        by = None
        name = None
        ap_mac = None
        beam = None
        rssi = None
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.search_site_assets(site_id, mac, map_id, ibeacon_uuid, ibeacon_major, ibeacon_minor, eddystone_uid_namespace, eddystone_uid_instance, eddystone_url, device_name, by, name, ap_mac, beam, rssi, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":0,"limit":0,"next":"string","results":[{"battery_voltage":0'
            ',"eddystone_uid_instance":"string","eddystone_uid_namespace":"stri'
            'ng","eddystone_url_url":"string","ibeacon_major":0,"ibeacon_minor"'
            ':0,"ibeacon_uuid":"1f89bc00-d0af-481b-82fe-a6629259a39f","last_see'
            'n":0,"mac":"string","map_id":"09d2b626-2e4e-45ef-a3c4-e6aeb6c83db1'
            '","name":"string","rssizones":[{"id":"476f6eca-6276-4993-bfeb-5dcb'
            'bbba6f08","since":0}],"x":0,"y":0,"zones":[{"id":"475f6eca-6276-49'
            '93-bfeb-5ecbbbba6f08","since":0}]}],"start":0,"total":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get a list of BLE beacons that matches Asset or AssetFilter
    def test_get_site_assets_of_interest(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        duration = '1d'
        start = 0
        end = 0
        page = 1
        limit = 100

        # Perform the API call through the SDK function
        result = self.controller.get_site_assets_of_interest(site_id, duration, start, end, page, limit)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"_checkpoint_prep":0,"_checkpoint_preparer":0,"_checkpoint_scan"'
            ':0,"_id":"string","_timestamp":0,"_ttl":0,"ap_mac":"string","beam"'
            ':0,"by":"string","curr_site":"string","device_name":"string","id":'
            '"string","last_seen":0,"mac":"string","manufacture":"string","map_'
            'id":"string","name":"string","rssi":0}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

