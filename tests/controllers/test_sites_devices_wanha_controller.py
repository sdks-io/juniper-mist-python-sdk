# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.api_v_1_sites_devices_ha_request import ApiV1SitesDevicesHaRequest
from mistapi.models.api_v_1_sites_devices_ha_request_1 import ApiV1SitesDevicesHaRequest1


class SitesDevicesWANHAControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesDevicesWANHAControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_devices_wan_ha
        cls.response_catcher = cls.controller.http_call_back

    # Delete HA Cluster
    def test_delete_site_device_ha_cluster(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_device_ha_cluster(site_id, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Create HA Cluster
    #Both nodes has to be in the same site. We expect the user to configure ha_sync / ha_data port in port_configs already
    #
    #### SRX cabling
    #
    #see [Chassis Cluster User Guide for SRX Series Devices](https://www.juniper.net/documentation/us/en/software/junos/chassis-cluster-security-devices/topics/concept/chassis-cluster-srx-series-node-interface-understanding.html) Hereâ€™s the recommended cabling.
    #
    ##### SRX300
    #
    #From ZTP / default state, ge-0/0/0 and ge-0/0/7 (SFP) are default WAN ports and will get DHCP IP. However, ge-0/0/0 becomes OOB/fxp0 after cluster is enabled (i.e. using it for reach Mist is not recommended)
    #
    #1.  form cluster in UI
    #2.  configure ge-0/0/7,ge-1/0/7 for WAN (reth0)
    #3.  configure ge-0/0/2,ge-1/0/2 for ha_data
    #4.  configure ge-0/0/3- for LAN or additional WAN e.g.
    #    
    #
    #``` json
    #{
    #    "port_config": {
    #        "ge-0/0/2,ge-1/0/2": {
    #            "usage": "ha_data"
    #        },
    #        "ge-0/0/7,ge-1/0/7": {
    #            "usage": "wan",
    #            "redundant": true,
    #            "reth_idx": 0,
    #            "ip_config": {"type": "dhcp"}
    #        },
    #    }
    #}
    #
    #```
    #
    #1.  connect ge-0/0/1 back to back for ha_control
    #2.  connect ge-0/0/2 back to back for ha_data
    #3.  connect both ge-0/0/7 to uplink switch to WAN and to reach Mist
    #4.  power up both devices
    #5.  it takes about 30 minutes for the cluster to form
    #    
    #
    ##### SRX320
    #
    #From ZTP / default state, ge-0/0/0, ge-0/0/7 (SFP) and cl-1/0/0 (LTE) are default WAN ports and will get DHCP IP. However, ge-0/0/0 becomes OOB/fxp0 after cluster is enabled (i.e. using it for reach Mist is not recommended)
    #
    ###### ZTP via ge-0/0/7
    #
    #Similar to SRX300
    #
    ###### ZTP via cl-1/0/0 (LTE)
    #
    #1.  form cluster in UI
    #2.  configure cl-1/0/0, cl-3/0/0 as WAN (reth0)
    #3.  configure ge-0/0/2,ge-3/0/2 for ha_data
    #4.  same as above
    #    
    #
    ##### SRX340 / SRX345 / SRX380
    #
    #SRX340/SRX345 has dedicated OOB/fxp0 ports
    #
    #1.  form cluster in UI
    #2.  configure ge-0/0/0,ge-5/0/0 for WAN (reth0)
    #3.  configure ge-0/0/2,ge-5/0/2 for ha_data
    #4.  configure ge-0/0/3- for LAN or additional WAN
    #5.  connect ge-0/0/0 to uplink switch to WAN and to reach Mist
    #6.  connect ge-0/0/1 back-to-back for ha_control
    #7.  connect ge-0/0/2 back-to-back for ha_data (fabric); or for SRX380, xe-0/0/16 if 10G SFP+ is used
    #8.  connect ge-0/0/3- to LAN or additional WANs
    #    
    #
    ##### SRX550
    #
    #ge-0/0/0 becomes OOB/fxp0 after cluster is enabled, make suenable oob_ip_config as dhcp to maintain cloud connectivity
    #
    #1.  connect ge-0/0/0 to reach Mist (after cluster is fully up, this port becomes OOB/fxp0)
    #2.  connect ge-0/0/1 back-to-back for ha_control
    #3.  connect ge-0/0/2 back-to-back for ha_data (fabric)
    #4.  connect ge-0/0/3 to WAN (after cluster is up, intended to be used for reth0)
    #5.  connect ge-0/0/4- to LAN or additional WANs
    #    
    #
    ##### SRX1500
    #
    #SRX1500 has, additionally, dedicated HA Control port
    #
    #1.  form cluster in UI
    #2.  configure ge-0/0/0,ge-5/0/0 for WAN (reth0)
    #3.  configure ge-0/0/1,ge-5/0/1 for ha_data
    #4.  configure ge-0/0/2- for LAN or additional WAN
    #5.  connect dedicated ha_control back-to-back
    #6.  connect ge-0/0/0 to uplink switch to WAN and to reach Mist
    #7.  connect ge-0/0/1 back-to-back for ha_data
    #8.  connect ge-0/0/2- to LAN or additional WANs
    #    
    #
    ##### SRX4100
    #
    #SRX4100 has dedicated ha_control and ha_data (fabric) ports
    #
    #1.  connect dedicated ha_control back-to-back
    #2.  connect dedicated ha_data back-to-back
    #3.  connect xe-0/0/0 to WAN to reach Mist
    #4.  connect xe-0/0/1- to LAN or additional WANs
    #    
    #
    ##### VSRX
    #
    #When standalone, VSRX has fxp0 as first Network Adapter, then ge-0/0/0-N When clustered, VSRX has fxp0, em0, then ge-0/0/0-N
    #
    #1.  connect net0 (fxp0) to WAN to reach Mist
    #2.  connect net1 back-to-back for ha_control
    #3.  connect net2 (ge-0/0/0) back-to-back for ha_data (fab0/fab1)
    #4.  connect net3 (ge-0/0/1) to WAN, intended to be used for reth0
    #5.  connect net4 (ge-0/0/2) to LAN
    #    
    #
    #SRX340/SRX345 has dedicated OOB/fxp0 ports VSRX has fxp0 as first Network Adapter, then ge-0/0/0-N
    #
    #1.  connect ge-0/0/0 to WAN to reach Mist
    #2.  connect ge-0/0/1 back-to-back for ha_control
    #3.  connect ge-0/0/2 back-to-back for ha_data (fabric); or for SRX380, xe-0/0/16 if 10G SFP+ is used
    #4.  connect ge-0/0/3- to LAN or additional WANs
    #    
    #
    ##### SRX550
    #
    #ge-0/0/0 becomes OOB/fxp0 after cluster is enabled, make suenable oob_ip_config as dhcp to maintain cloud connectivity
    #
    #1.  connect ge-0/0/0 to reach Mist (after cluster is fully up, this port becomes OOB/fxp0)
    #2.  connect ge-0/0/1 back-to-back for ha_control
    #3.  connect ge-0/0/2 back-to-back for ha_data (fabric)
    #4.  connect ge-0/0/3 to WAN (after cluster is up, intended to be used for reth0)
    #5.  connect ge-0/0/4- to LAN or additional WANs
    #    
    #
    ##### SRX1500
    #
    #SRX1500 has, additionally, dedicated HA Control port
    #
    #1.  connect dedicated ha_control back-to-back
    #2.  connect ge-0/0/0 to WAN to reach mist
    #3.  connect ge-0/0/1 back-to-back for ha_data
    #4.  connect ge-0/0/2- to LAN or additional WANs
    #    
    #
    ##### SRX4100
    #
    #SRX4100 has dedicated ha_control and ha_data (fabric) ports
    #
    #1.  connect dedicated ha_control back-to-back
    #2.  connect dedicated ha_data back-to-back
    #3.  connect xe-0/0/0 to WAN to reach Mist
    #4.  connect xe-0/0/1- to LAN or additional WANs
    def test_create_site_device_ha_cluster(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"nodes":[{"mac":"aff827549235"},{"mac":"8396cd006c8c"}]}', ApiV1SitesDevicesHaRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_site_device_ha_cluster(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Swap nodes on the HA Cluster
    def test_swap_site_device_ha_cluster_node(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        device_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.swap_site_device_ha_cluster_node(site_id, device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


