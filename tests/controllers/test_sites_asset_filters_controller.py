# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.asset_filter import AssetFilter


class SitesAssetFiltersControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesAssetFiltersControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_asset_filters
        cls.response_catcher = cls.controller.http_call_back

    # Get List of Site Asset Filters
    def test_list_site_asset_filters(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_site_asset_filters(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Create Site Asset Filter
    def test_create_site_asset_filters(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_site_asset_filters(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"disasbled":true,"eddystone_uid_namespace":"stri'
            'ng","eddystone_url":"string","for_site":true,"ibeacon_major":0,"ib'
            'eacon_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","id":"b069b358-'
            '4c97-5319-1f8c-7c5ca64d6ab1","mfg_company_id":0,"modified_time":0,'
            '"name":"string","org_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","s'
            'ite_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Deletes an existing BLE asset filter for the given site.
    def test_delete_site_asset_filter(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        assetfilter_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_asset_filter(site_id, assetfilter_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Site Asset Filter Details
    def test_get_site_asset_filter(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        assetfilter_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_asset_filter(site_id, assetfilter_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"disasbled":true,"eddystone_uid_namespace":"stri'
            'ng","eddystone_url":"string","for_site":true,"ibeacon_major":0,"ib'
            'eacon_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","id":"b069b358-'
            '4c97-5319-1f8c-7c5ca64d6ab1","mfg_company_id":0,"modified_time":0,'
            '"name":"string","org_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","s'
            'ite_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Updates an existing BLE asset filter for the given site.
    def test_update_site_asset_filter(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        assetfilter_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.update_site_asset_filter(site_id, assetfilter_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"disasbled":true,"eddystone_uid_namespace":"stri'
            'ng","eddystone_url":"string","for_site":true,"ibeacon_major":0,"ib'
            'eacon_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","id":"b069b358-'
            '4c97-5319-1f8c-7c5ca64d6ab1","mfg_company_id":0,"modified_time":0,'
            '"name":"string","org_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","s'
            'ite_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

