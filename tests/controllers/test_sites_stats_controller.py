# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper


class SitesStatsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesStatsControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_stats
        cls.response_catcher = cls.controller.http_call_back

    # Get Site Stats
    def test_get_site_stats(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_stats(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"address":"string","alarmtemplate_id":"b069b358-4c97-5319-1f8c-7c'
            '5ca64d6ab1","country_code":"string","created_time":0,"id":"b069b35'
            '8-4c97-5319-1f8c-7c5ca64d6ab1","lat":0,"latlng":{"lat":0,"lng":0},'
            '"lng":0,"modified_time":0,"msp_id":"b069b358-4c97-5319-1f8c-7c5ca6'
            '4d6ab1","name":"string","networktemplate_id":"b069b358-4c97-5319-1'
            'f8c-7c5ca64d6ab1","num_ap":0,"num_ap_connected":0,"num_clients":0,'
            '"num_devices":0,"num_devices_connected":0,"num_gateway":0,"num_gat'
            'eway_connected":0,"num_switch":0,"num_switch_connected":0,"org_id"'
            ':"a40f5d1f-d889-42e9-94ea-b9b33585fc6b","rftemplate_id":"b069b358-'
            '4c97-5319-1f8c-7c5ca64d6ab1","sitegroup_ids":["6f4bf402-45f9-2a56-'
            '6c8b-7f83d3bc98e9"],"timezone":"string","tzoffset":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get List of Site Assets Stats
    def test_list_site_assets_stats(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.list_site_assets_stats(site_id, page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"battery_voltage":0,"eddystone_uid_instance":"string","eddystone'
            '_uid_namespace":"string","eddystone_url_url":"string","ibeacon_maj'
            'or":0,"ibeacon_minor":0,"ibeacon_uuid":"1f89bc00-d0af-481b-82fe-a6'
            '629259a39f","last_seen":0,"mac":"string","map_id":"09d2b626-2e4e-4'
            '5ef-a3c4-e6aeb6c83db1","name":"string","rssizones":[{"id":"478f6ec'
            'a-6276-4993-bfeb-5bcbbbba6f08","since":0}],"x":0,"y":0,"zones":[{"'
            'id":"477f6eca-6276-4993-bfeb-5ccbbbba6f08","since":0}]}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Site Asset Details
    def test_get_site_asset_stats(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.get_site_asset_stats(site_id, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"battery_voltage":0,"eddystone_uid_instance":"string","eddystone_'
            'uid_namespace":"string","eddystone_url_url":"string","ibeacon_majo'
            'r":0,"ibeacon_minor":0,"ibeacon_uuid":"1f89bc00-d0af-481b-82fe-a66'
            '29259a39f","last_seen":0,"mac":"string","map_id":"09d2b626-2e4e-45'
            'ef-a3c4-e6aeb6c83db1","name":"string","rssizones":[{"id":"480f6eca'
            '-6276-4993-bfeb-59cbbbba6f08","since":0}],"x":0,"y":0,"zones":[{"i'
            'd":"479f6eca-6276-4993-bfeb-5acbbbba6f08","since":0}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get List of Site Beacons Stats
    def test_list_site_beacons_stats(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.list_site_beacons_stats(site_id, page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get List of Site All Clients Stats Details
    def test_list_site_wireless_clients_stats(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        wired = False

        # Perform the API call through the SDK function
        result = self.controller.list_site_wireless_clients_stats(site_id, wired)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"_id":"003ee1bec926","_ttl":277,"ap_id":"00000000-0000-0000-1000'
            '-d420b085fdff","auth_state":"authorizedForCompleteAccess","eth_por'
            't":"eth1","last_seen":1645060912.0751352,"mac":"e45f01319a43","rx_'
            'bytes":0,"rx_pkts":0,"site_id":"1916d52a-4a90-11e5-8b45-1258369c38'
            'a9","tx_bytes":0,"tx_pkts":0,"uptime":8723766,"vlan_id":70}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Site Client Stats Details
    def test_get_site_wireless_client_stats(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        client_mac = '0000000000ab'
        wired = False

        # Perform the API call through the SDK function
        result = self.controller.get_site_wireless_client_stats(site_id, client_mac, wired)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"_id":"003ee1bec926","_ttl":277,"ap_id":"00000000-0000-0000-1000-'
            'd420b085fdff","auth_state":"authorizedForCompleteAccess","eth_port'
            '":"eth1","last_seen":1645060912.0751352,"mac":"e45f01319a43","rx_b'
            'ytes":0,"rx_pkts":0,"site_id":"1916d52a-4a90-11e5-8b45-1258369c38a'
            '9","tx_bytes":0,"tx_pkts":0,"uptime":8723766,"vlan_id":70}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get List of Site Discovered BLE Assets that doesnâ€™t match any of the Asset / Assetfilters
    def test_list_site_discovered_assets(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.list_site_discovered_assets(site_id, page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Search Discovered Switch Metrics
    def test_search_site_discovered_switches_metrics(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        scope = 'site'
        mtype = None
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.search_site_discovered_switches_metrics(site_id, scope, mtype, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":1675193686.0191767,"limit":1,"next":"/api/v1/sites/f5fcbee5'
            '-fbca-45b3-8bf1-1619ede87879/stats/discovered_switch_metrics/searc'
            'h?end=1675193686.0191767&limit=1&search_after=%5B1675193400000%5D&'
            'start=1675107286.0191767","results":[{"details":{},"org_id":"203d3'
            'd02-dbc0-4c1b-9f41-76896a3330f4","scope":"site","score":100,"site_'
            'id":"f5fcbee5-fbca-45b3-8bf1-1619ede87879","timestamp":1675193400,'
            '"type":"inactive_wired_vlans"}],"start":1675107286.0191767,"total"'
            ':3}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Count Discovered Switches
    def test_count_site_discovered_switches(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        distinct = 'system_name'
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.count_site_discovered_switches(site_id, distinct, page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"distinct":"system_name","end":1604496202.3555834,"limit":1000,"p'
            'ercentage":100,"results":[{"count":1,"system_name":"test-ex"},{"co'
            'unt":1,"system_name":"sw-jn-01"}],"start":1604409802.3555677,"tota'
            'l":2}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Discovered switches related metrics, lists related switch system names & details if not compliant
    def test_get_site_discovered_switches_metrics(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        threshold = None
        system_name = None

        # Perform the API call through the SDK function
        result = self.controller.get_site_discovered_switches_metrics(site_id, threshold, system_name)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"inactive_wired_vlans":{"details":{},"score":100},"poe_compliance'
            '":{"details":{"total_aps":63,"total_power":981500},"score":100},"s'
            'witch_ap_affinity":{"details":{"system_name":["mist-lab-ex2300c","'
            'switch1"],"threshold":12},"score":33.3333},"version_compliance":{"'
            'details":{"major_versions":[{"major_count":2,"model":"EX2300-C-12P'
            '","system_names":["switch1","mist-lab-ex2300c"]},{"major_count":1,'
            '"model":"EX4300-48P","system_names":[]}],"total_switch_count":5},"'
            'score":75}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Search Discovered Switches
    def test_search_site_discovered_switches(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        adopted = None
        system_name = None
        hostname = None
        vendor = None
        model = None
        version = None
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.search_site_discovered_switches(site_id, adopted, system_name, hostname, vendor, model, version, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"end":1604496474.8978634,"limit":1000,"results":[{"aps":[{"hostna'
            'me":"ap41nearlab","inactive_wired_vlans":[],"mac":"5c5b352e2001","'
            'poe_status":true,"when":"2019-06-13T19:53:16.870+0000"}],"mgmt_add'
            'r":"10.1.1.1","model":"EX2300-C-12P","org_id":"6748cfa6-4e12-11e6-'
            '9188-0242ac110007","site_id":"67970e46-4e12-11e6-9188-0242ac110007'
            '","system_desc":"Juniper Networks, Inc. ex2300-c-12p Ethernet Swit'
            'ch, kernel JUNOS 18.2R2.6, Build date: 2018-12-07 13:19:04 UTC Cop'
            'yright (c) 1996-2018 Juniper Networks, Inc.","system_name":"mist-l'
            'ab-ex2300c","timestamp":1560457177.037,"vendor":"Juniper Networks"'
            ',"version":"18.2R2.6"}],"start":1604410074.8978484,"total":1}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Site Gateway Metrics
    def test_get_site_gateway_metrics(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_gateway_metrics(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"config_success":99.9,"version_compliance":{"major_version":{"SRX'
            '320":{"major_count":0,"major_version":"19.4R2-S1.2"}},"score":99.9'
            ',"type":"gateway"}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Site Clients Stats By Map
    def test_get_site_wireless_clients_stats_by_map(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        page = 1
        limit = 100
        start = 0
        end = 0
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.get_site_wireless_clients_stats_by_map(site_id, map_id, page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"_ttl":0,"accuracy":0,"airespace_ifname":"string","airwatch":{"a'
            'uthorized":true},"ap_id":"325b588d-147b-4fa4-bb40-83383f83c77e","a'
            'p_mac":"string","band":"24","channel":0,"dual_band":true,"family":'
            '"string","guest":{"authorized":false,"authorized_expiring_time":0,'
            '"authorized_time":0,"company":"string","email":"string","field1":"'
            'string","name":"string"},"hostname":"string","idle_time":0,"ip":"1'
            '92.168.0.1","ip6":"2001:0db8:85a3:0000:0000:8a2e:0370:7334","is_gu'
            'est":false,"key_mgmt":"string","last_seen":0,"mac":"string","manuf'
            'acture":"string","map_id":"09d2b626-2e4e-45ef-a3c4-e6aeb6c83db1","'
            'model":"string","num_locating_aps":0,"os":"string","power_saving":'
            'true,"proto":"a","psk_id":"4cb94c10-4e99-46b0-8261-4c71d0b2cb9d","'
            'rssi":0,"rx_bps":0,"rx_bytes":0,"rx_packets":0,"rx_rate":0,"rx_ret'
            'ries":0,"snr":0,"ssid":"string","tx_bps":0,"tx_bytes":0,"tx_packet'
            's":0,"tx_rate":0,"tx_retries":0,"type":"string","uptime":0,"userna'
            'me":"string","vlan_id":0,"wlan_id":"5028e92b-fc59-4056-91d1-ea4b4c'
            'a1617a","x":0,"y":0}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get a list of BLE beacons that we discovered (whether theyâ€™re defined as assets or not)
    def test_get_site_discovered_asset_by_map(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_discovered_asset_by_map(site_id, map_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"device_name":"[TV] UN65JU670D","duration":120,"eddystone_uid_in'
            'stance":"5c5b35000001","eddystone_uid_namespace":"2818e3868dec2562'
            '9ede","eddystone_url_url":"https://www.abc.com","ibeacon_major":13'
            ',"ibeacon_minor":138,"ibeacon_uuid":"f3f17139-704a-f03a-2786-04002'
            '79e37c3","last_seen":1428939600,"mac":"6fa474be7ae5","manufacture"'
            ':"Apple","mfg_company_id":935,"mfg_data":"648520a1020000","x":60,"'
            'y":80}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get SdkClient Stats By Map
    def test_get_site_sdk_stats_by_map(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_sdk_stats_by_map(site_id, map_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"id":"de87bf9d-183f-e383-cc68-6ba43947d403","last_seen":14289396'
            '00,"map_id":"845a23bf-bed9-e43c-4c86-6fa474be7ae5","name":"John\'s'
            ' iPhone","network_connection":{"mac":"c3-b6-e5-af-41-15","rssi":-7'
            '5,"signal_level":3,"type":"WiFi"},"uuid":"ada72f8f-1643-e5c6-94db-'
            'f2a5636f1a64","x":60,"y":80}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get List of Site Unconnected Client Location
    def test_list_site_unconnected_client_stats(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_site_unconnected_client_stats(site_id, map_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"ap_mac":"5c5b350e0410","last_seen":1428939600,"mac":"5684dae9ac'
            '8b","manufacture":"Apple","map_id":"ea77be98-ab51-4ff8-a863-ac3c8e'
            '1b1c3a","rssi":-75,"x":60,"y":80}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Detail Stats of a SdkClient
    def test_get_site_sdk_stats(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        sdkclient_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_sdk_stats(site_id, sdkclient_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"id":"de87bf9d-183f-e383-cc68-6ba43947d403","last_seen":142893960'
            '0,"map_id":"845a23bf-bed9-e43c-4c86-6fa474be7ae5","name":"John\'s '
            'iPhone","network_connection":{"mac":"c3-b6-e5-af-41-15","rssi":-75'
            ',"signal_level":3,"type":"WiFi"},"uuid":"ada72f8f-1643-e5c6-94db-f'
            '2a5636f1a64","vbeacons":[{"id":"d379d29d-24b4-96c5-5dd4-6f2a2dc5aa'
            'eb","since":1428939300}],"x":60,"y":80,"zones":[{"id":"8ac84899-32'
            'db-6327-334c-9b6d58544cfe","since":1428939600}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Wxlan Rule usage
    def test_get_site_wx_rules_usage(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_wx_rules_usage(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"action":"allow","client_mac":["3bbbf819bb6f","bd96cbc4910f"],"d'
            'st_allow_wxtags":["fff34466-eec0-3756-6765-381c728a6037","eee2c7b0'
            '-d1d0-5a30-f349-e35fa43dc3b3"],"dst_deny_wxtags":["aaa34466-eec0-3'
            '756-6765-381c728a6037","bbb2c7b0-d1d0-5a30-f349-e35fa43dc3b3"],"ds'
            't_wxtags":["d4134466-eec0-3756-6765-381c728a6037","1a42c7b0-d1d0-5'
            'a30-f349-e35fa43dc3b3"],"name":"Guest","order":1,"src_wxtags":["8b'
            'fc2490-d726-3587-038d-cb2e71bd2330","3aa8e73f-9f46-d827-8d6a-567bb'
            '7e67fc9"],"usage":{"00000000-0000-0000-0000-000000000000":{"num_fl'
            'ows":30},"1a42c7b0-d1d0-5a30-f349-e35fa43dc3b3":{"num_flows":60},"'
            'd4134466-eec0-3756-6765-381c728a6037":{"num_flows":60}}}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get List of Site Zones Stats
    def test_list_site_zones_stats(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        map_id = '00000000-0000-0000-0000-000000000000'

        # Perform the API call through the SDK function
        result = self.controller.list_site_zones_stats(site_id, map_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"assets_waits":{"avg":0,"max":0,"min":0,"p95":0},"clients_waits"'
            ':{"avg":1200,"max":3610,"min":600,"p95":2800},"created_time":16166'
            '25211,"id":"123470c7-5d9d-424a-8475-8b344c621234","map_id":"123449'
            'd4-d12f-4feb-b40f-5be0e2ae1234","modified_time":1616625211,"name":'
            '"Zone A","num_assets":0,"num_clients":80,"num_sdkclients":10,"occu'
            'pancy_limit":4,"org_id":"1234c1a0-6ef6-11e6-8bbf-02e208b21234","sd'
            'kclients_waits":{"avg":1200,"max":3610,"min":600,"p95":2800},"site'
            '_id":"123448e6-6ef6-11e6-8bbf-02e208b21234","vertices":[{"x":732,"'
            'y":1821},{"x":732.5,"y":1731},{"x":837.5,"y":1731.5},{"x":839,"y":'
            '1821}],"vertices_m":[{"x":24.1983341951072,"y":60.198314985369144}'
            ',{"x":24.214863111907139,"y":57.223109961380558},{"x":27.685935639'
            '893827,"y":57.239638878180493},{"x":27.735522390293639,"y":60.1983'
            '14985369144}]}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

