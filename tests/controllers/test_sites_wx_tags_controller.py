# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.wxlan_tag import WxlanTag


class SitesWxTagsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesWxTagsControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_wx_tags
        cls.response_catcher = cls.controller.http_call_back

    # Get List of Site WxTags
    def test_list_site_wx_tags(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_site_wx_tags(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"created_time":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","la'
            'st_ips":["string"],"mac":"string","match":"wlan_id","modified_time'
            '":0,"name":"string","op":"in","org_id":"b069b358-4c97-5319-1f8c-7c'
            '5ca64d6ab1","resource_mac":"string","services":["string"],"site_id'
            '":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","specs":[{"port_range":"s'
            'tring","protocol":"tcp","subnet":["string"]}],"subnet":"string","t'
            'ype":"match","values":["string"]}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Create Site WxTag
    def test_create_site_wx_tag(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"last_ips":["string"],"mac":"string","match":"wlan_id","name":"st'
            'ring","op":"in","resource_mac":"string","services":["string"],"spe'
            'cs":[{"port_range":"string","protocol":"tcp","subnet":["string"]}]'
            ',"subnet":"string","type":"match","values":["string"]}', WxlanTag.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_site_wx_tag(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","las'
            't_ips":["string"],"mac":"string","match":"wlan_id","modified_time"'
            ':0,"name":"string","op":"in","org_id":"b069b358-4c97-5319-1f8c-7c5'
            'ca64d6ab1","resource_mac":"string","services":["string"],"site_id"'
            ':"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","specs":[{"port_range":"st'
            'ring","protocol":"tcp","subnet":["string"]}],"subnet":"string","ty'
            'pe":"match","values":["string"]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Application List
    def test_get_site_application_list(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_application_list(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"group":"Emails","key":"gmail","name":"Gmail - web/app"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Delete Site WxTag
    def test_delete_site_wx_tag(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        wxtag_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_wx_tag(site_id, wxtag_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Site WxTag Details
    def test_get_site_wx_tag(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        wxtag_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_wx_tag(site_id, wxtag_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","las'
            't_ips":["string"],"mac":"string","match":"wlan_id","modified_time"'
            ':0,"name":"string","op":"in","org_id":"b069b358-4c97-5319-1f8c-7c5'
            'ca64d6ab1","resource_mac":"string","services":["string"],"site_id"'
            ':"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","specs":[{"port_range":"st'
            'ring","protocol":"tcp","subnet":["string"]}],"subnet":"string","ty'
            'pe":"match","values":["string"]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Update Site WxTag
    def test_update_site_wx_tag(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        wxtag_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"last_ips":["string"],"mac":"string","match":"wlan_id","name":"st'
            'ring","op":"in","resource_mac":"string","services":["string"],"spe'
            'cs":[{"port_range":"string","protocol":"tcp","subnet":["string"]}]'
            ',"subnet":"string","type":"match","values":["string"]}', WxlanTag.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.update_site_wx_tag(site_id, wxtag_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","las'
            't_ips":["string"],"mac":"string","match":"wlan_id","modified_time"'
            ':0,"name":"string","op":"in","org_id":"b069b358-4c97-5319-1f8c-7c5'
            'ca64d6ab1","resource_mac":"string","services":["string"],"site_id"'
            ':"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","specs":[{"port_range":"st'
            'ring","protocol":"tcp","subnet":["string"]}],"subnet":"string","ty'
            'pe":"match","values":["string"]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Current Matching Clients of a WXLAN Tag
    def test_get_site_current_matching_clients_of_a_wx_tag(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        wxtag_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_current_matching_clients_of_a_wx_tag(site_id, wxtag_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"mac":"5684dae9ac8b","since":1428939600}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

