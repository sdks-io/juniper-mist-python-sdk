# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.api_v_1_sites_rrm_optimize_request import ApiV1SitesRrmOptimizeRequest


class SitesRRMControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesRRMControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_rrm
        cls.response_catcher = cls.controller.http_call_back

    # Get Current Channel Planning
    def test_get_site_current_channel_planning(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_current_channel_planning(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"band_24":{},"band_24_metric":{"avg_aps_per_channel":0,"channel_d'
            'istribution_uniformity":0,"cochannel_neighbors":0,"density":0,"nap'
            's_by_channel":{},"naps_by_power":{},"neighbors":0,"noise":0},"band'
            '_5":{},"band_5_metric":{"avg_aps_per_channel":0,"channel_distribut'
            'ion_uniformity":0,"cochannel_neighbors":0,"density":0,"naps_by_cha'
            'nnel":{},"naps_by_power":{},"neighbors":0,"noise":0},"rftemplate":'
            '{"band_24":{"allow_rrm_disable":true,"antenna_mode":"default","ban'
            'dwidth":20,"channel":0,"disabled":true,"power":0,"power_max":0,"po'
            'wer_min":0,"preamble":"auto","usage":"24"},"band_5":{"allow_rrm_di'
            'sable":true,"antenna_mode":"default","bandwidth":20,"channel":0,"d'
            'isabled":true,"power":0,"power_max":0,"power_min":0,"preamble":"au'
            'to","usage":"24"},"country_code":"string","created_time":0,"id":"b'
            '069b358-4c97-5319-1f8c-7c5ca64d6ab1","model_specific":{"property1"'
            ':{"band_24":{"allow_rrm_disable":true,"antenna_mode":"default","ba'
            'ndwidth":20,"channel":0,"disabled":true,"power":0,"power_max":0,"p'
            'ower_min":0,"preamble":"auto","usage":"24"},"band_5":{"allow_rrm_d'
            'isable":true,"antenna_mode":"default","bandwidth":20,"channel":0,"'
            'disabled":true,"power":0,"power_max":0,"power_min":0,"preamble":"a'
            'uto","usage":"24"}},"property2":{"band_24":{"allow_rrm_disable":tr'
            'ue,"antenna_mode":"default","bandwidth":20,"channel":0,"disabled":'
            'true,"power":0,"power_max":0,"power_min":0,"preamble":"auto","usag'
            'e":"24"},"band_5":{"allow_rrm_disable":true,"antenna_mode":"defaul'
            't","bandwidth":20,"channel":0,"disabled":true,"power":0,"power_max'
            '":0,"power_min":0,"preamble":"auto","usage":"24"}}},"modified_time'
            '":0,"name":"string","org_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1'
            '","site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1"},"rftemplate_id'
            '":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","rftemplate_name":"string'
            '","status":"updating","timestamp":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Optimize Site RRM
    def test_optimize_site_rrm(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"bands":["24","5","6"]}', ApiV1SitesRrmOptimizeRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.optimize_site_rrm(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


