# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.wxlan_tunnel import WxlanTunnel


class SitesWxTunnelsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesWxTunnelsControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_wx_tunnels
        cls.response_catcher = cls.controller.http_call_back

    # Get List of Site WxLan Tunnels
    def test_list_site_wx_tunnels(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_site_wx_tunnels(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"created_time":0,"dmvpn":{"enabled":true,"holding_time":0,"host_'
            'routes":["string"]},"for_mgmt":true,"hello_interval":1,"hello_retr'
            'ies":3,"hostname":"string","id":"b069b358-4c97-5319-1f8c-7c5ca64d6'
            'ab1","ipsec":{"enabled":true,"psk":"string123"},"is_static":true,"'
            'modified_time":0,"mtu":1500,"name":"string","org_id":"b069b358-4c9'
            '7-5319-1f8c-7c5ca64d6ab1","peers":["string"],"router_id":"string",'
            '"secret":"string","sessions":[{"ap_as_session_id":"string","commen'
            't":"string","enable_cookie":true,"ethertype":"ethernet","local_ses'
            'sion_id":1,"pseudo_802-1ad_enabled":true,"remote_id":"string","rem'
            'ote_session_id":1,"use_ap_as_session_ids":true}],"site_id":"b069b3'
            '58-4c97-5319-1f8c-7c5ca64d6ab1","udp_port":0,"use_udp":true}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Create Site WxLan Tunnel
    def test_create_site_wx_tunnel(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"dmvpn":{"enabled":true,"holding_time":0,"host_routes":["string"]'
            '},"for_mgmt":true,"hello_interval":1,"hello_retries":3,"hostname":'
            '"string","ipsec":{"enabled":true,"psk":"string123"},"is_static":tr'
            'ue,"mtu":0,"name":"string","peers":["string"],"router_id":"string"'
            ',"secret":"string","sessions":[{"ap_as_session_id":"string","comme'
            'nt":"string","enable_cookie":true,"ethertype":"ethernet","local_se'
            'ssion_id":1,"pseudo_802-1ad_enabled":true,"remote_id":"string","re'
            'mote_session_id":1,"use_ap_as_session_ids":true}],"udp_port":0,"us'
            'e_udp":true}', WxlanTunnel.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_site_wx_tunnel(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"dmvpn":{"enabled":true,"holding_time":0,"host_r'
            'outes":["string"]},"for_mgmt":true,"hello_interval":1,"hello_retri'
            'es":3,"hostname":"string","id":"b069b358-4c97-5319-1f8c-7c5ca64d6a'
            'b1","ipsec":{"enabled":true,"psk":"string123"},"is_static":true,"m'
            'odified_time":0,"mtu":0,"name":"string","org_id":"b069b358-4c97-53'
            '19-1f8c-7c5ca64d6ab1","peers":["string"],"router_id":"string","sec'
            'ret":"string","sessions":[{"ap_as_session_id":"string","comment":"'
            'string","enable_cookie":true,"ethertype":"ethernet","local_session'
            '_id":1,"pseudo_802-1ad_enabled":true,"remote_id":"string","remote_'
            'session_id":1,"use_ap_as_session_ids":true}],"site_id":"b069b358-4'
            'c97-5319-1f8c-7c5ca64d6ab1","udp_port":0,"use_udp":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Delete Site WxLan Tunnel
    def test_delete_site_wx_tunnel(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        wxtunnel_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_wx_tunnel(site_id, wxtunnel_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Site WxLan tunnel Details
    def test_get_site_wx_tunnel(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        wxtunnel_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_wx_tunnel(site_id, wxtunnel_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"dmvpn":{"enabled":true,"holding_time":0,"host_r'
            'outes":["string"]},"for_mgmt":true,"hello_interval":1,"hello_retri'
            'es":3,"hostname":"string","id":"b069b358-4c97-5319-1f8c-7c5ca64d6a'
            'b1","ipsec":{"enabled":true,"psk":"string123"},"is_static":true,"m'
            'odified_time":0,"mtu":0,"name":"string","org_id":"b069b358-4c97-53'
            '19-1f8c-7c5ca64d6ab1","peers":["string"],"router_id":"string","sec'
            'ret":"string","sessions":[{"ap_as_session_id":"string","comment":"'
            'string","enable_cookie":true,"ethertype":"ethernet","local_session'
            '_id":1,"pseudo_802-1ad_enabled":true,"remote_id":"string","remote_'
            'session_id":1,"use_ap_as_session_ids":true}],"site_id":"b069b358-4'
            'c97-5319-1f8c-7c5ca64d6ab1","udp_port":0,"use_udp":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Update Site WxLan Tunnel
    def test_update_site_wx_tunnel(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        wxtunnel_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"dmvpn":{"enabled":true,"holding_time":0,"host_routes":["string"]'
            '},"for_mgmt":true,"hello_interval":1,"hello_retries":3,"hostname":'
            '"string","ipsec":{"enabled":true,"psk":"string123"},"is_static":tr'
            'ue,"mtu":0,"name":"string","peers":["string"],"router_id":"string"'
            ',"secret":"string","sessions":[{"ap_as_session_id":"string","comme'
            'nt":"string","enable_cookie":true,"ethertype":"ethernet","local_se'
            'ssion_id":1,"pseudo_802-1ad_enabled":true,"remote_id":"string","re'
            'mote_session_id":1,"use_ap_as_session_ids":true}],"udp_port":0,"us'
            'e_udp":true}', WxlanTunnel.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.update_site_wx_tunnel(site_id, wxtunnel_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"dmvpn":{"enabled":true,"holding_time":0,"host_r'
            'outes":["string"]},"for_mgmt":true,"hello_interval":1,"hello_retri'
            'es":3,"hostname":"string","id":"b069b358-4c97-5319-1f8c-7c5ca64d6a'
            'b1","ipsec":{"enabled":true,"psk":"string123"},"is_static":true,"m'
            'odified_time":0,"mtu":0,"name":"string","org_id":"b069b358-4c97-53'
            '19-1f8c-7c5ca64d6ab1","peers":["string"],"router_id":"string","sec'
            'ret":"string","sessions":[{"ap_as_session_id":"string","comment":"'
            'string","enable_cookie":true,"ethertype":"ethernet","local_session'
            '_id":1,"pseudo_802-1ad_enabled":true,"remote_id":"string","remote_'
            'session_id":1,"use_ap_as_session_ids":true}],"site_id":"b069b358-4'
            'c97-5319-1f8c-7c5ca64d6ab1","udp_port":0,"use_udp":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

