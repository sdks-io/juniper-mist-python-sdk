# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.beacon import Beacon


class SitesBeaconsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesBeaconsControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_beacons
        cls.response_catcher = cls.controller.http_call_back

    # Get List of Site Beacons
    def test_list_site_beacons(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_site_beacons(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"created_time":0,"eddystone_instance":"string","eddystone_namesp'
            'ace":"string","eddystone_url":"string","ibeacon_major":0,"ibeacon_'
            'minor":0,"ibeacon_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","id'
            '":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mac":"string","map_id":"'
            'b069b358-4c97-5319-1f8c-7c5ca64d6ab1","modified_time":0,"name":"st'
            'ring","org_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","power":0,"s'
            'ite_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","type":"eddystone-u'
            'id","x":0,"y":0}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Create Site Beacon
    def test_create_site_beacon(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"eddystone_instance":"string","eddystone_namespace":"string","edd'
            'ystone_url":"string","ibeacon_major":0,"ibeacon_minor":0,"ibeacon_'
            'uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mac":"string","map_i'
            'd":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","name":"string","power":'
            '0,"type":"eddystone-uid","x":0,"y":0}', Beacon.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_site_beacon(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"eddystone_instance":"string","eddystone_namespa'
            'ce":"string","eddystone_url":"string","ibeacon_major":0,"ibeacon_m'
            'inor":0,"ibeacon_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","id"'
            ':"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mac":"string","map_id":"b'
            '069b358-4c97-5319-1f8c-7c5ca64d6ab1","modified_time":0,"name":"str'
            'ing","org_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","power":0,"si'
            'te_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","type":"eddystone-ui'
            'd","x":0,"y":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Delete Site Beacon
    def test_delete_site_beacons(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        beacon_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_beacons(site_id, beacon_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Site Beacon Details
    def test_get_site_beacon(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        beacon_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_beacon(site_id, beacon_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"eddystone_instance":"string","eddystone_namespa'
            'ce":"string","eddystone_url":"string","ibeacon_major":0,"ibeacon_m'
            'inor":0,"ibeacon_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","id"'
            ':"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mac":"string","map_id":"b'
            '069b358-4c97-5319-1f8c-7c5ca64d6ab1","modified_time":0,"name":"str'
            'ing","org_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","power":0,"si'
            'te_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","type":"eddystone-ui'
            'd","x":0,"y":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Update Site Beacon
    def test_update_site_beacons(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        beacon_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"eddystone_instance":"string","eddystone_namespace":"string","edd'
            'ystone_url":"string","ibeacon_major":0,"ibeacon_minor":0,"ibeacon_'
            'uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mac":"string","map_i'
            'd":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","name":"string","power":'
            '0,"type":"eddystone-uid","x":0,"y":0}', Beacon.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.update_site_beacons(site_id, beacon_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"eddystone_instance":"string","eddystone_namespa'
            'ce":"string","eddystone_url":"string","ibeacon_major":0,"ibeacon_m'
            'inor":0,"ibeacon_uuid":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","id"'
            ':"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","mac":"string","map_id":"b'
            '069b358-4c97-5319-1f8c-7c5ca64d6ab1","modified_time":0,"name":"str'
            'ing","org_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","power":0,"si'
            'te_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","type":"eddystone-ui'
            'd","x":0,"y":0}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

