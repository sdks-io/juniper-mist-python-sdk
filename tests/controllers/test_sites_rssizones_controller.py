# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.rssizone import Rssizone


class SitesRssizonesControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SitesRssizonesControllerTests, cls).setUpClass()
        cls.controller = cls.client.sites_rssizones
        cls.response_catcher = cls.controller.http_call_back

    # Get List of Site RSSI Zone (RSSI-based)
    def test_list_site_rssi_zones(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.list_site_rssi_zones(site_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"created_time":0,"devices":[{"device_id":"b069b358-4c97-5319-1f8'
            'c-7c5ca64d6ab1","rssi":0}],"id":"b069b358-4c97-5319-1f8c-7c5ca64d6'
            'ab1","modified_time":0,"name":"string","org_id":"b069b358-4c97-531'
            '9-1f8c-7c5ca64d6ab1"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Create RSSI Zone
    def test_create_site_rssi_zone(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"devices":[{"device_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","r'
            'ssi":0}],"name":"string"}', Rssizone.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_site_rssi_zone(site_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"devices":[{"device_id":"b069b358-4c97-5319-1f8c'
            '-7c5ca64d6ab1","rssi":0}],"id":"b069b358-4c97-5319-1f8c-7c5ca64d6a'
            'b1","modified_time":0,"name":"string","org_id":"b069b358-4c97-5319'
            '-1f8c-7c5ca64d6ab1"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Delete Site RSSI Zone
    def test_delete_site_rssi_zone(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        rssizone_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.delete_site_rssi_zone(site_id, rssizone_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Site RSSI Zone details
    def test_get_site_rssi_zone(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        rssizone_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_site_rssi_zone(site_id, rssizone_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"created_time":0,"devices":[{"device_id":"b069b358-4c97-5319-1f8'
            'c-7c5ca64d6ab1","rssi":0}],"id":"b069b358-4c97-5319-1f8c-7c5ca64d6'
            'ab1","modified_time":0,"name":"string","org_id":"b069b358-4c97-531'
            '9-1f8c-7c5ca64d6ab1","site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6a'
            'b1"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Update Site RSSI Zone
    def test_update_site_rssi_zone(self):
        # Parameters for the API call
        site_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        rssizone_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = APIHelper.json_deserialize('{"devices":[{"device_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab1","r'
            'ssi":0}],"name":"string"}', Rssizone.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.update_site_rssi_zone(site_id, rssizone_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"created_time":0,"devices":[{"device_id":"b069b358-4c97-5319-1f8c'
            '-7c5ca64d6ab1","rssi":0}],"id":"b069b358-4c97-5319-1f8c-7c5ca64d6a'
            'b1","modified_time":0,"name":"string","org_id":"b069b358-4c97-5319'
            '-1f8c-7c5ca64d6ab1","site_id":"b069b358-4c97-5319-1f8c-7c5ca64d6ab'
            '1"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

