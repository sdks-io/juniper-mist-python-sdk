# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.psk import Psk
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_psks_401_error_exception import ApiV1SitesPsks401ErrorException
from mistapi.exceptions.api_v_1_sites_psks_403_error_exception import ApiV1SitesPsks403ErrorException
from mistapi.exceptions.api_v_1_sites_psks_404_error_exception import ApiV1SitesPsks404ErrorException
from mistapi.exceptions.api_v_1_sites_psks_import_401_error_exception import ApiV1SitesPsksImport401ErrorException
from mistapi.exceptions.api_v_1_sites_psks_import_403_error_exception import ApiV1SitesPsksImport403ErrorException
from mistapi.exceptions.api_v_1_sites_psks_import_404_error_exception import ApiV1SitesPsksImport404ErrorException


class SitesPsksController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesPsksController, self).__init__(config)

    def list_site_psks(self,
                       site_id,
                       ssid=None,
                       role=None,
                       name=None,
                       page=1,
                       limit=100):
        """Does a GET request to /api/v1/sites/{site_id}/psks.

        Get List of Site PSKs

        Args:
            site_id (uuid|string): TODO: type description here.
            ssid (string, optional): TODO: type description here.
            role (string, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100

        Returns:
            list of Psk: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/psks')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('ssid')
                         .value(ssid))
            .query_param(Parameter()
                         .key('role')
                         .value(role))
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Psk.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesPsks401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesPsks403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesPsks404ErrorException)
        ).execute()

    def create_site_psk(self,
                        site_id,
                        body=None):
        """Does a POST request to /api/v1/sites/{site_id}/psks.

        Create Site PSK

        Args:
            site_id (uuid|string): TODO: type description here.
            body (Psk, optional): Request Body

        Returns:
            Psk: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/psks')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Psk.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesPsks401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesPsks403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesPsks404ErrorException)
        ).execute()

    def update_site_psks(self,
                         site_id,
                         body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/psks.

        Update multi PSKs

        Args:
            site_id (uuid|string): TODO: type description here.
            body (list of Psk, optional): TODO: type description here.

        Returns:
            list of Psk: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/psks')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Psk.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesPsks401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesPsks403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesPsks404ErrorException)
        ).execute()

    def import_site_psks(self,
                         site_id,
                         file=None):
        """Does a POST request to /api/v1/sites/{site_id}/psks/import.

        Import PSK from CSV file or JSON
        ## CSV File Format
        ```csv
        PSK Import CSV File Format:
        name,ssid,passphrase,usage,vlan_id,mac
        Common,warehouse,foryoureyesonly,single,35,a31425f31278
        Justin,reception,visible,multi,1002
        ```

        Args:
            site_id (uuid|string): TODO: type description here.
            file (string, optional): TODO: type description here.

        Returns:
            list of Psk: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/psks/import')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('file')
                        .value(file))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Psk.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesPsksImport401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesPsksImport403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesPsksImport404ErrorException)
        ).execute()

    def delete_site_psk(self,
                        site_id,
                        psk_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/psks/{psk_id}.

        Delete Site PSK

        Args:
            site_id (uuid|string): TODO: type description here.
            psk_id (uuid|string): PSK ID

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/psks/{psk_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('psk_id')
                            .value(psk_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesPsks401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesPsks403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesPsks404ErrorException)
        ).execute()

    def get_site_psk(self,
                     site_id,
                     psk_id):
        """Does a GET request to /api/v1/sites/{site_id}/psks/{psk_id}.

        Get Site PSK Details

        Args:
            site_id (uuid|string): TODO: type description here.
            psk_id (uuid|string): PSK ID

        Returns:
            Psk: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/psks/{psk_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('psk_id')
                            .value(psk_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Psk.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesPsks401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesPsks403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesPsks404ErrorException)
        ).execute()

    def update_site_psk(self,
                        site_id,
                        psk_id,
                        body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/psks/{psk_id}.

        Update Site PSK

        Args:
            site_id (uuid|string): TODO: type description here.
            psk_id (uuid|string): PSK ID
            body (Psk, optional): Request Body

        Returns:
            Psk: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/psks/{psk_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('psk_id')
                            .value(psk_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Psk.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesPsks401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesPsks403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesPsks404ErrorException)
        ).execute()
