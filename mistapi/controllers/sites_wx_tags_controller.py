# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.wxlan_tag import WxlanTag
from mistapi.models.api_v_1_sites_wxtags_apps_response import ApiV1SitesWxtagsAppsResponse
from mistapi.models.api_v_1_sites_wxtags_clients_response import ApiV1SitesWxtagsClientsResponse
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_wxtags_401_error_exception import ApiV1SitesWxtags401ErrorException
from mistapi.exceptions.api_v_1_sites_wxtags_403_error_exception import ApiV1SitesWxtags403ErrorException
from mistapi.exceptions.api_v_1_sites_wxtags_404_error_exception import ApiV1SitesWxtags404ErrorException
from mistapi.exceptions.api_v_1_sites_wxtags_apps_401_error_exception import ApiV1SitesWxtagsApps401ErrorException
from mistapi.exceptions.api_v_1_sites_wxtags_apps_403_error_exception import ApiV1SitesWxtagsApps403ErrorException
from mistapi.exceptions.api_v_1_sites_wxtags_apps_404_error_exception import ApiV1SitesWxtagsApps404ErrorException
from mistapi.exceptions.api_v_1_sites_wxtags_clients_401_error_exception import ApiV1SitesWxtagsClients401ErrorException
from mistapi.exceptions.api_v_1_sites_wxtags_clients_403_error_exception import ApiV1SitesWxtagsClients403ErrorException
from mistapi.exceptions.api_v_1_sites_wxtags_clients_404_error_exception import ApiV1SitesWxtagsClients404ErrorException


class SitesWxTagsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesWxTagsController, self).__init__(config)

    def list_site_wx_tags(self,
                          site_id):
        """Does a GET request to /api/v1/sites/{site_id}/wxtags.

        Get List of Site WxTags

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            list of WxlanTag: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wxtags')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(WxlanTag.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWxtags401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWxtags403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWxtags404ErrorException)
        ).execute()

    def create_site_wx_tag(self,
                           site_id,
                           body=None):
        """Does a POST request to /api/v1/sites/{site_id}/wxtags.

        Create Site WxTag

        Args:
            site_id (uuid|string): TODO: type description here.
            body (WxlanTag, optional): Request Body

        Returns:
            WxlanTag: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wxtags')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(WxlanTag.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWxtags401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWxtags403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWxtags404ErrorException)
        ).execute()

    def get_site_application_list(self,
                                  site_id):
        """Does a GET request to /api/v1/sites/{site_id}/wxtags/apps.

        Get Application List

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            list of ApiV1SitesWxtagsAppsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wxtags/apps')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesWxtagsAppsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWxtagsApps401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWxtagsApps403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWxtagsApps404ErrorException)
        ).execute()

    def delete_site_wx_tag(self,
                           site_id,
                           wxtag_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/wxtags/{wxtag_id}.

        Delete Site WxTag

        Args:
            site_id (uuid|string): TODO: type description here.
            wxtag_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wxtags/{wxtag_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('wxtag_id')
                            .value(wxtag_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWxtags401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWxtags403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWxtags404ErrorException)
        ).execute()

    def get_site_wx_tag(self,
                        site_id,
                        wxtag_id):
        """Does a GET request to /api/v1/sites/{site_id}/wxtags/{wxtag_id}.

        Get Site WxTag Details

        Args:
            site_id (uuid|string): TODO: type description here.
            wxtag_id (uuid|string): TODO: type description here.

        Returns:
            WxlanTag: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wxtags/{wxtag_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('wxtag_id')
                            .value(wxtag_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(WxlanTag.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWxtags401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWxtags403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWxtags404ErrorException)
        ).execute()

    def update_site_wx_tag(self,
                           site_id,
                           wxtag_id,
                           body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/wxtags/{wxtag_id}.

        Update Site WxTag

        Args:
            site_id (uuid|string): TODO: type description here.
            wxtag_id (uuid|string): TODO: type description here.
            body (WxlanTag, optional): Request Body

        Returns:
            WxlanTag: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wxtags/{wxtag_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('wxtag_id')
                            .value(wxtag_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(WxlanTag.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWxtags401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWxtags403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWxtags404ErrorException)
        ).execute()

    def get_site_current_matching_clients_of_a_wx_tag(self,
                                                      site_id,
                                                      wxtag_id):
        """Does a GET request to /api/v1/sites/{site_id}/wxtags/{wxtag_id}/clients.

        Get Current Matching Clients of a WXLAN Tag

        Args:
            site_id (uuid|string): TODO: type description here.
            wxtag_id (uuid|string): TODO: type description here.

        Returns:
            list of ApiV1SitesWxtagsClientsResponse: Response from the API.
                OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wxtags/{wxtag_id}/clients')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('wxtag_id')
                            .value(wxtag_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesWxtagsClientsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWxtagsClients401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWxtagsClients403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWxtagsClients404ErrorException)
        ).execute()
