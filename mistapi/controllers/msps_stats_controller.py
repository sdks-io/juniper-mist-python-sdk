# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.license import License
from mistapi.models.stats_org import StatsOrg
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_msps_stats_licenses_401_error_exception import ApiV1MspsStatsLicenses401ErrorException
from mistapi.exceptions.api_v_1_msps_stats_licenses_403_error_exception import ApiV1MspsStatsLicenses403ErrorException
from mistapi.exceptions.api_v_1_msps_stats_licenses_404_error_exception import ApiV1MspsStatsLicenses404ErrorException
from mistapi.exceptions.api_v_1_msps_stats_orgs_401_error_exception import ApiV1MspsStatsOrgs401ErrorException
from mistapi.exceptions.api_v_1_msps_stats_orgs_403_error_exception import ApiV1MspsStatsOrgs403ErrorException
from mistapi.exceptions.api_v_1_msps_stats_orgs_404_error_exception import ApiV1MspsStatsOrgs404ErrorException


class MspsStatsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(MspsStatsController, self).__init__(config)

    def list_msp_org_licenses(self,
                              msp_id):
        """Does a GET request to /api/v1/msps/{msp_id}/stats/licenses.

        Get List of MSP Licences

        Args:
            msp_id (uuid|string): TODO: type description here.

        Returns:
            License: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/stats/licenses')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(License.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsStatsLicenses401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsStatsLicenses403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsStatsLicenses404ErrorException)
        ).execute()

    def list_msp_org_stats(self,
                           msp_id,
                           page=1,
                           limit=100):
        """Does a GET request to /api/v1/msps/{msp_id}/stats/orgs.

        Get List of MSP Orgs Stats

        Args:
            msp_id (uuid|string): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100

        Returns:
            list of StatsOrg: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/stats/orgs')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsOrg.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsStatsOrgs401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsStatsOrgs403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsStatsOrgs404ErrorException)
        ).execute()
