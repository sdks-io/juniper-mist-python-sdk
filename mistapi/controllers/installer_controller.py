# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.api_v_1_installer_orgs_alarmtemplates_response import ApiV1InstallerOrgsAlarmtemplatesResponse
from mistapi.models.api_v_1_installer_orgs_deviceprofiles_response import ApiV1InstallerOrgsDeviceprofilesResponse
from mistapi.models.api_v_1_installer_orgs_devices_response import ApiV1InstallerOrgsDevicesResponse
from mistapi.models.api_v_1_installer_orgs_devices_response_1 import ApiV1InstallerOrgsDevicesResponse1
from mistapi.models.api_v_1_installer_orgs_rftemplates_response import ApiV1InstallerOrgsRftemplatesResponse
from mistapi.models.api_v_1_installer_orgs_secpolicies_response import ApiV1InstallerOrgsSecpoliciesResponse
from mistapi.models.api_v_1_installer_orgs_sitegroups_response import ApiV1InstallerOrgsSitegroupsResponse
from mistapi.models.api_v_1_installer_orgs_sites_response import ApiV1InstallerOrgsSitesResponse
from mistapi.models.map import Map
from mistapi.models.map_import import MapImport
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_installer_orgs_alarmtemplates_401_error_exception import ApiV1InstallerOrgsAlarmtemplates401ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_alarmtemplates_403_error_exception import ApiV1InstallerOrgsAlarmtemplates403ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_alarmtemplates_404_error_exception import ApiV1InstallerOrgsAlarmtemplates404ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_deviceprofiles_401_error_exception import ApiV1InstallerOrgsDeviceprofiles401ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_deviceprofiles_403_error_exception import ApiV1InstallerOrgsDeviceprofiles403ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_deviceprofiles_404_error_exception import ApiV1InstallerOrgsDeviceprofiles404ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_devices_401_error_exception import ApiV1InstallerOrgsDevices401ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_devices_403_error_exception import ApiV1InstallerOrgsDevices403ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_devices_404_error_exception import ApiV1InstallerOrgsDevices404ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_devices_400_error_exception import ApiV1InstallerOrgsDevices400ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_devices_locate_401_error_exception import ApiV1InstallerOrgsDevicesLocate401ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_devices_locate_403_error_exception import ApiV1InstallerOrgsDevicesLocate403ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_devices_locate_404_error_exception import ApiV1InstallerOrgsDevicesLocate404ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_devices_unlocate_401_error_exception import ApiV1InstallerOrgsDevicesUnlocate401ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_devices_unlocate_403_error_exception import ApiV1InstallerOrgsDevicesUnlocate403ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_devices_unlocate_404_error_exception import ApiV1InstallerOrgsDevicesUnlocate404ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_devices_image_name_401_error_exception import ApiV1InstallerOrgsDevicesImageName401ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_devices_image_name_403_error_exception import ApiV1InstallerOrgsDevicesImageName403ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_devices_image_name_404_error_exception import ApiV1InstallerOrgsDevicesImageName404ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_rftemplates_401_error_exception import ApiV1InstallerOrgsRftemplates401ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_rftemplates_403_error_exception import ApiV1InstallerOrgsRftemplates403ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_rftemplates_404_error_exception import ApiV1InstallerOrgsRftemplates404ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_secpolicies_401_error_exception import ApiV1InstallerOrgsSecpolicies401ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_secpolicies_403_error_exception import ApiV1InstallerOrgsSecpolicies403ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_secpolicies_404_error_exception import ApiV1InstallerOrgsSecpolicies404ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sitegroups_401_error_exception import ApiV1InstallerOrgsSitegroups401ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sitegroups_403_error_exception import ApiV1InstallerOrgsSitegroups403ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sitegroups_404_error_exception import ApiV1InstallerOrgsSitegroups404ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sites_401_error_exception import ApiV1InstallerOrgsSites401ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sites_403_error_exception import ApiV1InstallerOrgsSites403ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sites_404_error_exception import ApiV1InstallerOrgsSites404ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sites_maps_401_error_exception import ApiV1InstallerOrgsSitesMaps401ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sites_maps_403_error_exception import ApiV1InstallerOrgsSitesMaps403ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sites_maps_404_error_exception import ApiV1InstallerOrgsSitesMaps404ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sites_maps_import_401_error_exception import ApiV1InstallerOrgsSitesMapsImport401ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sites_maps_import_403_error_exception import ApiV1InstallerOrgsSitesMapsImport403ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sites_maps_import_404_error_exception import ApiV1InstallerOrgsSitesMapsImport404ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sites_maps_map_id_401_error_exception import ApiV1InstallerOrgsSitesMapsMapId401ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sites_maps_map_id_403_error_exception import ApiV1InstallerOrgsSitesMapsMapId403ErrorException
from mistapi.exceptions.api_v_1_installer_orgs_sites_maps_map_id_404_error_exception import ApiV1InstallerOrgsSitesMapsMapId404ErrorException
from mistapi.exceptions.api_v_1_installer_sites_optimize_401_error_exception import ApiV1InstallerSitesOptimize401ErrorException
from mistapi.exceptions.api_v_1_installer_sites_optimize_403_error_exception import ApiV1InstallerSitesOptimize403ErrorException
from mistapi.exceptions.api_v_1_installer_sites_optimize_404_error_exception import ApiV1InstallerSitesOptimize404ErrorException


class InstallerController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(InstallerController, self).__init__(config)

    def list_installer_alarm_templates(self,
                                       org_id):
        """Does a GET request to /api/v1/installer/orgs/{org_id}/alarmtemplates.

        Get List of alarm templates

        Args:
            org_id (uuid|string): TODO: type description here.

        Returns:
            list of ApiV1InstallerOrgsAlarmtemplatesResponse: Response from
                the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/alarmtemplates')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1InstallerOrgsAlarmtemplatesResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsAlarmtemplates401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsAlarmtemplates403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsAlarmtemplates404ErrorException)
        ).execute()

    def list_installer_device_profiles(self,
                                       org_id):
        """Does a GET request to /api/v1/installer/orgs/{org_id}/deviceprofiles.

        Get List of Device Profiles

        Args:
            org_id (uuid|string): TODO: type description here.

        Returns:
            list of ApiV1InstallerOrgsDeviceprofilesResponse: Response from
                the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/deviceprofiles')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1InstallerOrgsDeviceprofilesResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsDeviceprofiles401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsDeviceprofiles403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsDeviceprofiles404ErrorException)
        ).execute()

    def list_installer_list_of_renctly_claimed_devices(self,
                                                       org_id):
        """Does a GET request to /api/v1/installer/orgs/{org_id}/devices.

        Get List of recently claimed devices

        Args:
            org_id (uuid|string): TODO: type description here.

        Returns:
            list of ApiV1InstallerOrgsDevicesResponse: Response from the API.
                OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/devices')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1InstallerOrgsDevicesResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsDevices401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsDevices403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsDevices404ErrorException)
        ).execute()

    def claim_installer_devices(self,
                                org_id,
                                body=None):
        """Does a POST request to /api/v1/installer/orgs/{org_id}/devices.

        This mirrors `POST /api/v1/orgs/{org_id}/inventory` (see Inventory
        API)

        Args:
            org_id (uuid|string): TODO: type description here.
            body (list of string, optional): Request Body

        Returns:
            ApiV1InstallerOrgsDevicesResponse1: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/devices')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1InstallerOrgsDevicesResponse1.from_dictionary)
            .local_error('400', 'Bad Request if none of the entries are valid', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsDevices401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsDevices403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsDevices404ErrorException)
        ).execute()

    def unassign_installer_recently_claimed_device(self,
                                                   org_id,
                                                   device_mac):
        """Does a DELETE request to /api/v1/installer/orgs/{org_id}/devices/{device_mac}.

        Unassign recently claimed devices

        Args:
            org_id (uuid|string): TODO: type description here.
            device_mac (string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/devices/{device_mac}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_mac')
                            .value(device_mac)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsDevices401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsDevices403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsDevices404ErrorException)
        ).execute()

    def provision_installer_devices(self,
                                    org_id,
                                    device_mac,
                                    body=None):
        """Does a PUT request to /api/v1/installer/orgs/{org_id}/devices/{device_mac}.

        Provision or Replace a device 
        If replacing_mac is in the request payload, other attributes are
        ignored, we attempt to replace existing device (with mac
        replacing_mac) with the inventory device being configured. The
        replacement device must be in the inventory but not assigned, and the
        replacing_mac device must be assigned to a site, and satisfy grace
        period requirements. The Device replaced will become unassigned.

        Args:
            org_id (uuid|string): TODO: type description here.
            device_mac (string): TODO: type description here.
            body (InstallerDevices, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/devices/{device_mac}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_mac')
                            .value(device_mac)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', ApiV1InstallerOrgsDevices400ErrorException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsDevices401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsDevices403ErrorException)
            .local_error('404', 'Not Found', ApiV1InstallerOrgsDevices404ErrorException)
        ).execute()

    def start_installer_locate_device(self,
                                      org_id,
                                      device_mac,
                                      body=None):
        """Does a POST request to /api/v1/installer/orgs/{org_id}/devices/{device_mac}/locate.

        Locate a Device by blinking it’s LED, it’s a persisted state that has
        to be stopped by calling Stop Locating API

        Args:
            org_id (uuid|string): TODO: type description here.
            device_mac (string): TODO: type description here.
            body (object, optional): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/devices/{device_mac}/locate')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_mac')
                            .value(device_mac)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsDevicesLocate401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsDevicesLocate403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsDevicesLocate404ErrorException)
        ).execute()

    def stop_installer_locate_device(self,
                                     org_id,
                                     device_mac):
        """Does a POST request to /api/v1/installer/orgs/{org_id}/devices/{device_mac}/unlocate.

        Stop it

        Args:
            org_id (uuid|string): TODO: type description here.
            device_mac (string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/devices/{device_mac}/unlocate')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_mac')
                            .value(device_mac)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsDevicesUnlocate401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsDevicesUnlocate403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsDevicesUnlocate404ErrorException)
        ).execute()

    def delete_installer_device_image(self,
                                      org_id,
                                      image_name,
                                      device_mac):
        """Does a DELETE request to /api/v1/installer/orgs/{org_id}/devices/{device_mac}/{image_name}.

        delete image

        Args:
            org_id (uuid|string): TODO: type description here.
            image_name (string): TODO: type description here.
            device_mac (string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/devices/{device_mac}/{image_name}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('image_name')
                            .value(image_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_mac')
                            .value(device_mac)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsDevicesImageName401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsDevicesImageName403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsDevicesImageName404ErrorException)
        ).execute()

    def add_installer_device_image(self,
                                   org_id,
                                   image_name,
                                   device_mac,
                                   file=None,
                                   json=None):
        """Does a POST request to /api/v1/installer/orgs/{org_id}/devices/{device_mac}/{image_name}.

        Add image

        Args:
            org_id (uuid|string): TODO: type description here.
            image_name (string): TODO: type description here.
            device_mac (string): TODO: type description here.
            file (string, optional): binary file
            json (string, optional): JSON string describing your upload

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/devices/{device_mac}/{image_name}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('image_name')
                            .value(image_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_mac')
                            .value(device_mac)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('file')
                        .value(file))
            .form_param(Parameter()
                        .key('json')
                        .value(json))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsDevicesImageName401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsDevicesImageName403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsDevicesImageName404ErrorException)
        ).execute()

    def list_installer_rf_templates_names(self,
                                          org_id):
        """Does a GET request to /api/v1/installer/orgs/{org_id}/rftemplates.

        Get List of RF Templates

        Args:
            org_id (uuid|string): TODO: type description here.

        Returns:
            list of ApiV1InstallerOrgsRftemplatesResponse: Response from the
                API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/rftemplates')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1InstallerOrgsRftemplatesResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsRftemplates401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsRftemplates403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsRftemplates404ErrorException)
        ).execute()

    def list_installer_sec_policies(self,
                                    org_id):
        """Does a GET request to /api/v1/installer/orgs/{org_id}/secpolicies.

        Get List of Secuity Policies

        Args:
            org_id (uuid|string): TODO: type description here.

        Returns:
            list of ApiV1InstallerOrgsSecpoliciesResponse: Response from the
                API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/secpolicies')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1InstallerOrgsSecpoliciesResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsSecpolicies401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsSecpolicies403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsSecpolicies404ErrorException)
        ).execute()

    def list_installer_site_groups(self,
                                   org_id):
        """Does a GET request to /api/v1/installer/orgs/{org_id}/sitegroups.

        Get List of Site Groups

        Args:
            org_id (uuid|string): TODO: type description here.

        Returns:
            list of ApiV1InstallerOrgsSitegroupsResponse: Response from the
                API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/sitegroups')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1InstallerOrgsSitegroupsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsSitegroups401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsSitegroups403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsSitegroups404ErrorException)
        ).execute()

    def list_installer_sites(self,
                             org_id):
        """Does a GET request to /api/v1/installer/orgs/{org_id}/sites.

        Get List of Sites

        Args:
            org_id (uuid|string): TODO: type description here.

        Returns:
            list of ApiV1InstallerOrgsSitesResponse: Response from the API.
                OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/sites')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1InstallerOrgsSitesResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsSites401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsSites403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsSites404ErrorException)
        ).execute()

    def create_or_update_installer_sites(self,
                                         org_id,
                                         site_name,
                                         body=None):
        """Does a PUT request to /api/v1/installer/orgs/{org_id}/sites/{site_name}.

        Often the Installers are asked to assign Devices to Sites. The Sites
        can either be pre-created or created/modified by the Installer. If
        this is an update, the same grace period also applies.

        Args:
            org_id (uuid|string): TODO: type description here.
            site_name (string): TODO: type description here.
            body (Site, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/sites/{site_name}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('site_name')
                            .value(site_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsSites401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsSites403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsSites404ErrorException)
        ).execute()

    def list_installer_maps(self,
                            org_id,
                            site_name):
        """Does a GET request to /api/v1/installer/orgs/{org_id}/sites/{site_name}/maps.

        Get List of Maps

        Args:
            org_id (uuid|string): TODO: type description here.
            site_name (string): TODO: type description here.

        Returns:
            list of Map: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/sites/{site_name}/maps')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('site_name')
                            .value(site_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Map.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsSitesMaps401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsSitesMaps403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsSitesMaps404ErrorException)
        ).execute()

    def import_installer_map(self,
                             org_id,
                             site_name,
                             csv=None,
                             file=None,
                             json=None):
        """Does a POST request to /api/v1/installer/orgs/{org_id}/sites/{site_name}/maps/import.

        Import data from files is a multipart POST which has an file, an
        optional json, and an optional csv, to create floorplan, assign &
        place ap if name or mac matches

        Args:
            org_id (uuid|string): TODO: type description here.
            site_name (string): TODO: type description here.
            csv (string, optional): TODO: type description here.
            file (string, optional): TODO: type description here.
            json (Json, optional): TODO: type description here.

        Returns:
            MapImport: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/sites/{site_name}/maps/import')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('site_name')
                            .value(site_name)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('csv')
                        .value(csv))
            .form_param(Parameter()
                        .key('file')
                        .value(file))
            .form_param(Parameter()
                        .key('json')
                        .value(json))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MapImport.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsSitesMapsImport401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsSitesMapsImport403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsSitesMapsImport404ErrorException)
        ).execute()

    def delete_installer_map(self,
                             org_id,
                             site_name,
                             map_id):
        """Does a DELETE request to /api/v1/installer/orgs/{org_id}/sites/{site_name}/maps/{map_id}.

        Delete Map

        Args:
            org_id (uuid|string): TODO: type description here.
            site_name (string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/sites/{site_name}/maps/{map_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('site_name')
                            .value(site_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsSitesMapsMapId401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsSitesMapsMapId403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsSitesMapsMapId404ErrorException)
        ).execute()

    def create_installer_map(self,
                             org_id,
                             site_name,
                             map_id,
                             body=None):
        """Does a POST request to /api/v1/installer/orgs/{org_id}/sites/{site_name}/maps/{map_id}.

        Create a MAP

        Args:
            org_id (uuid|string): TODO: type description here.
            site_name (string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.
            body (Map, optional): Request Body

        Returns:
            Map: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/sites/{site_name}/maps/{map_id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('site_name')
                            .value(site_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Map.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsSitesMapsMapId401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsSitesMapsMapId403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsSitesMapsMapId404ErrorException)
        ).execute()

    def update_installer_map(self,
                             org_id,
                             site_name,
                             map_id,
                             body=None):
        """Does a PUT request to /api/v1/installer/orgs/{org_id}/sites/{site_name}/maps/{map_id}.

        Update map

        Args:
            org_id (uuid|string): TODO: type description here.
            site_name (string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.
            body (Map, optional): Request Body

        Returns:
            Map: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/orgs/{org_id}/sites/{site_name}/maps/{map_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('site_name')
                            .value(site_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Map.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerOrgsSitesMapsMapId401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerOrgsSitesMapsMapId403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerOrgsSitesMapsMapId404ErrorException)
        ).execute()

    def optimize_installer_rrm(self,
                               site_name):
        """Does a GET request to /api/v1/installer/sites/{site_name}/optimize.

        After installation is considered complete (APs are placed on maps, all
        powered up), you can trigger an optimize operation where RRM will kick
        in (and maybe other things in the future) before it’s automatically
        scheduled.

        Args:
            site_name (string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/installer/sites/{site_name}/optimize')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_name')
                            .value(site_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1InstallerSitesOptimize401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1InstallerSitesOptimize403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1InstallerSitesOptimize404ErrorException)
        ).execute()
