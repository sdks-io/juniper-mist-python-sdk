# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.devices_array import DevicesArray
from mistapi.models.count import Count
from mistapi.models.configs_history_search import ConfigsHistorySearch
from mistapi.models.api_v_1_sites_devices_count_response import ApiV1SitesDevicesCountResponse
from mistapi.models.api_v_1_sites_devices_events_count_response import ApiV1SitesDevicesEventsCountResponse
from mistapi.models.api_v_1_sites_devices_events_search_response import ApiV1SitesDevicesEventsSearchResponse
from mistapi.models.api_v_1_sites_devices_last_config_count_response import ApiV1SitesDevicesLastConfigCountResponse
from mistapi.models.devices_search import DevicesSearch
from mistapi.models.device_config_cmd import DeviceConfigCmd
from mistapi.models.api_v_1_sites_devices_request_ztp_password_response import ApiV1SitesDevicesRequestZtpPasswordResponse
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_devices_401_error_exception import ApiV1SitesDevices401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_403_error_exception import ApiV1SitesDevices403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_404_error_exception import ApiV1SitesDevices404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_config_history_count_401_error_exception import ApiV1SitesDevicesConfigHistoryCount401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_config_history_count_403_error_exception import ApiV1SitesDevicesConfigHistoryCount403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_config_history_count_404_error_exception import ApiV1SitesDevicesConfigHistoryCount404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_config_history_search_401_error_exception import ApiV1SitesDevicesConfigHistorySearch401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_config_history_search_403_error_exception import ApiV1SitesDevicesConfigHistorySearch403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_config_history_search_404_error_exception import ApiV1SitesDevicesConfigHistorySearch404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_count_401_error_exception import ApiV1SitesDevicesCount401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_count_403_error_exception import ApiV1SitesDevicesCount403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_count_404_error_exception import ApiV1SitesDevicesCount404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_events_count_401_error_exception import ApiV1SitesDevicesEventsCount401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_events_count_403_error_exception import ApiV1SitesDevicesEventsCount403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_events_count_404_error_exception import ApiV1SitesDevicesEventsCount404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_events_search_401_error_exception import ApiV1SitesDevicesEventsSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_events_search_403_error_exception import ApiV1SitesDevicesEventsSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_events_search_404_error_exception import ApiV1SitesDevicesEventsSearch404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_export_401_error_exception import ApiV1SitesDevicesExport401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_export_403_error_exception import ApiV1SitesDevicesExport403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_export_404_error_exception import ApiV1SitesDevicesExport404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_import_401_error_exception import ApiV1SitesDevicesImport401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_import_403_error_exception import ApiV1SitesDevicesImport403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_import_404_error_exception import ApiV1SitesDevicesImport404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_last_config_count_401_error_exception import ApiV1SitesDevicesLastConfigCount401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_last_config_count_403_error_exception import ApiV1SitesDevicesLastConfigCount403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_last_config_count_404_error_exception import ApiV1SitesDevicesLastConfigCount404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_last_config_search_401_error_exception import ApiV1SitesDevicesLastConfigSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_last_config_search_403_error_exception import ApiV1SitesDevicesLastConfigSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_last_config_search_404_error_exception import ApiV1SitesDevicesLastConfigSearch404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_restart_401_error_exception import ApiV1SitesDevicesRestart401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_restart_403_error_exception import ApiV1SitesDevicesRestart403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_restart_404_error_exception import ApiV1SitesDevicesRestart404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_search_401_error_exception import ApiV1SitesDevicesSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_search_403_error_exception import ApiV1SitesDevicesSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_search_404_error_exception import ApiV1SitesDevicesSearch404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_config_cmd_401_error_exception import ApiV1SitesDevicesConfigCmd401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_config_cmd_403_error_exception import ApiV1SitesDevicesConfigCmd403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_config_cmd_404_error_exception import ApiV1SitesDevicesConfigCmd404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_image_image_number_401_error_exception import ApiV1SitesDevicesImageImageNumber401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_image_image_number_403_error_exception import ApiV1SitesDevicesImageImageNumber403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_image_image_number_404_error_exception import ApiV1SitesDevicesImageImageNumber404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_request_ztp_password_401_error_exception import ApiV1SitesDevicesRequestZtpPassword401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_request_ztp_password_403_error_exception import ApiV1SitesDevicesRequestZtpPassword403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_request_ztp_password_404_error_exception import ApiV1SitesDevicesRequestZtpPassword404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_support_401_error_exception import ApiV1SitesDevicesSupport401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_support_403_error_exception import ApiV1SitesDevicesSupport403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_support_404_error_exception import ApiV1SitesDevicesSupport404ErrorException


class SitesDevicesController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesDevicesController, self).__init__(config)

    def list_site_devices(self,
                          site_id,
                          mtype='ap',
                          name=None,
                          page=1,
                          limit=100):
        """Does a GET request to /api/v1/sites/{site_id}/devices.

        Get list of devices on the site.

        Args:
            site_id (uuid|string): TODO: type description here.
            mtype (Type47Enum, optional): device type
            name (string, optional): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100

        Returns:
            list of DevicesArray: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DevicesArray.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevices401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevices403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevices404ErrorException)
        ).execute()

    def count_site_device_config_history(self,
                                         site_id,
                                         distinct=None,
                                         mac=None,
                                         page=1,
                                         limit=100,
                                         start=0,
                                         end=0,
                                         duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/devices/config_history/count.

        Counts the number of entries in device config history for distinct
        field with given filters

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (string, optional): TODO: type description here.
            mac (string, optional): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            Count: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/config_history/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Count.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesConfigHistoryCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesConfigHistoryCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesConfigHistoryCount404ErrorException)
        ).execute()

    def search_site_device_config_history(self,
                                          site_id,
                                          device_type='ap',
                                          mac=None,
                                          limit=100,
                                          start=0,
                                          end=0,
                                          duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/devices/config_history/search.

        Search for entries in device config history

        Args:
            site_id (uuid|string): TODO: type description here.
            device_type (DeviceType2Enum, optional): TODO: type description
                here. Example: ap
            mac (string, optional): Device MAC Address
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ConfigsHistorySearch: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/config_history/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('device_type')
                         .value(device_type))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ConfigsHistorySearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesConfigHistorySearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesConfigHistorySearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesConfigHistorySearch404ErrorException)
        ).execute()

    def count_site_devices(self,
                           site_id,
                           distinct='model',
                           hostname=None,
                           model=None,
                           mac=None,
                           version=None,
                           mxtunnel_status=None,
                           mxedge_id=None,
                           lldp_system_name=None,
                           lldp_system_desc=None,
                           lldp_port_id=None,
                           lldp_mgmt_addr=None,
                           map_id=None,
                           page=1,
                           limit=100,
                           start=0,
                           end=0,
                           duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/devices/count.

        Counts the number of entries in ap events history for distinct field
        with given filters

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct8Enum, optional): TODO: type description here.
                Example: model
            hostname (string, optional): TODO: type description here.
            model (string, optional): TODO: type description here.
            mac (string, optional): TODO: type description here.
            version (string, optional): TODO: type description here.
            mxtunnel_status (string, optional): TODO: type description here.
            mxedge_id (string, optional): TODO: type description here.
            lldp_system_name (string, optional): TODO: type description here.
            lldp_system_desc (string, optional): TODO: type description here.
            lldp_port_id (string, optional): TODO: type description here.
            lldp_mgmt_addr (string, optional): TODO: type description here.
            map_id (string, optional): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ApiV1SitesDevicesCountResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .query_param(Parameter()
                         .key('hostname')
                         .value(hostname))
            .query_param(Parameter()
                         .key('model')
                         .value(model))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('version')
                         .value(version))
            .query_param(Parameter()
                         .key('mxtunnel_status')
                         .value(mxtunnel_status))
            .query_param(Parameter()
                         .key('mxedge_id')
                         .value(mxedge_id))
            .query_param(Parameter()
                         .key('lldp_system_name')
                         .value(lldp_system_name))
            .query_param(Parameter()
                         .key('lldp_system_desc')
                         .value(lldp_system_desc))
            .query_param(Parameter()
                         .key('lldp_port_id')
                         .value(lldp_port_id))
            .query_param(Parameter()
                         .key('lldp_mgmt_addr')
                         .value(lldp_mgmt_addr))
            .query_param(Parameter()
                         .key('map_id')
                         .value(map_id))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesDevicesCountResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesCount404ErrorException)
        ).execute()

    def count_site_device_events(self,
                                 site_id,
                                 distinct='model',
                                 model=None,
                                 mtype=None,
                                 type_code=None,
                                 page=1,
                                 limit=100,
                                 start=0,
                                 end=0,
                                 duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/devices/events/count.

        Counts the number of entries in ap events history for distinct field
        with given filters

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct9Enum, optional): TODO: type description here.
                Example: model
            model (string, optional): TODO: type description here.
            mtype (string, optional): TODO: type description here.
            type_code (string, optional): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ApiV1SitesDevicesEventsCountResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/events/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .query_param(Parameter()
                         .key('model')
                         .value(model))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('type_code')
                         .value(type_code))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesDevicesEventsCountResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesEventsCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesEventsCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesEventsCount404ErrorException)
        ).execute()

    def search_site_devices_events(self,
                                   site_id,
                                   device_type=None,
                                   mac=None,
                                   model=None,
                                   text=None,
                                   timestamp=None,
                                   mtype=None,
                                   limit=100,
                                   start=0,
                                   end=0,
                                   duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/devices/events/search.

        Search Devices Events

        Args:
            site_id (uuid|string): TODO: type description here.
            device_type (DeviceType2Enum, optional): TODO: type description
                here.
            mac (string, optional): device mac
            model (string, optional): device model
            text (string, optional): event message
            timestamp (string, optional): event time
            mtype (string, optional): see [Event Types
                Definition](/#operation/listDeviceEventsDefinitions)
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ApiV1SitesDevicesEventsSearchResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/events/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('device_type')
                         .value(device_type))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('model')
                         .value(model))
            .query_param(Parameter()
                         .key('text')
                         .value(text))
            .query_param(Parameter()
                         .key('timestamp')
                         .value(timestamp))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesDevicesEventsSearchResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesEventsSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesEventsSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesEventsSearch404ErrorException)
        ).execute()

    def export_site_devices(self,
                            site_id):
        """Does a GET request to /api/v1/sites/{site_id}/devices/export.

        To download the exported device information

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            string: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/export')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesExport401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesExport403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesExport404ErrorException)
        ).execute()

    def import_site_devices(self,
                            site_id,
                            body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/import.

        Import Information for Multiple Devices
        CSV format:
        ```csv
        mac,name,map_id,x,y,height,orientation,labels,band_24.power,band_24.ban
        dwidth,band_24.channel,band_24.disabled,band_5.power,band_5.bandwidth,b
        and_5.channel,band_5.disabled,band_6.power,band_6.bandwidth,band_6.chan
        nel,band_6.disabled
        5c5b53010101,"AP
        1",845a23bf-bed9-e43c-4c86-6fa474be7ae5,30,10,2.3,45,"guest, campus,
        vip",1,20,0,false,0,40,0,false,17,80,0,false
        ```

        Args:
            site_id (uuid|string): TODO: type description here.
            body (list of DeviceAp, optional): TODO: type description here.

        Returns:
            list of DevicesArray: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/import')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DevicesArray.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesImport401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesImport403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesImport404ErrorException)
        ).execute()

    def count_site_device_last_config(self,
                                      site_id,
                                      distinct='mac',
                                      page=1,
                                      limit=100,
                                      start=0,
                                      end=0,
                                      duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/devices/last_config/count.

        Counts the number of entries in device config history for distinct
        field with given filters

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct10Enum, optional): TODO: type description here.
                Example: mac
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ApiV1SitesDevicesLastConfigCountResponse: Response from the API.
                OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/last_config/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesDevicesLastConfigCountResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesLastConfigCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesLastConfigCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesLastConfigCount404ErrorException)
        ).execute()

    def search_site_device_last_configs(self,
                                        site_id,
                                        device_type='ap',
                                        mac=None,
                                        version=None,
                                        name=None,
                                        limit=100,
                                        start=0,
                                        end=0,
                                        duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/devices/last_config/search.

        Search Device Last Configs

        Args:
            site_id (uuid|string): TODO: type description here.
            device_type (DeviceType2Enum, optional): TODO: type description
                here. Example: ap
            mac (string, optional): TODO: type description here.
            version (string, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ConfigsHistorySearch: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/last_config/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('device_type')
                         .value(device_type))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('version')
                         .value(version))
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ConfigsHistorySearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesLastConfigSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesLastConfigSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesLastConfigSearch404ErrorException)
        ).execute()

    def multi_restart_site_devices(self,
                                   site_id,
                                   body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/restart.

        Note that only the devices that are connected will be restarted.

        Args:
            site_id (uuid|string): TODO: type description here.
            body (ApiV1SitesDevicesRestartRequest, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/restart')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesRestart401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesRestart403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesRestart404ErrorException)
        ).execute()

    def search_site_devices(self,
                            site_id,
                            hostname=None,
                            mtype='ap',
                            model=None,
                            mac=None,
                            version=None,
                            power_constrained=None,
                            ip_address=None,
                            mxtunnel_status=None,
                            mxedge_id=None,
                            lldp_system_name=None,
                            lldp_system_desc=None,
                            lldp_port_id=None,
                            lldp_mgmt_addr=None,
                            band_24_channel=None,
                            band_5_channel=None,
                            band_6_channel=None,
                            band_24_bandwith=None,
                            band_5_bandwith=None,
                            band_6_bandwith=None,
                            eth_0_port_speed=None,
                            sort='timestamp',
                            desc_sort=None,
                            stats=False,
                            limit=100,
                            start=0,
                            end=0,
                            duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/devices/search.

        Search Device

        Args:
            site_id (uuid|string): TODO: type description here.
            hostname (string, optional): partial / full hostname
            mtype (Type16Enum, optional): device type
            model (string, optional): device model
            mac (string, optional): device MAC
            version (string, optional): version
            power_constrained (bool, optional): power_constrained
            ip_address (string, optional): TODO: type description here.
            mxtunnel_status (MxtunnelStatusEnum, optional): MxTunnel status,
                up / down
            mxedge_id (uuid|string, optional): Mist Edge id, if AP is
                connecting to a Mist Edge
            lldp_system_name (string, optional): LLDP system name
            lldp_system_desc (string, optional): LLDP system description
            lldp_port_id (string, optional): LLDP port id
            lldp_mgmt_addr (string, optional): LLDP management ip address
            band_24_channel (int, optional): Channel of band_24
            band_5_channel (int, optional): Channel of band_5
            band_6_channel (int, optional): Channel of band_6
            band_24_bandwith (int, optional): Bandwidth of band_24
            band_5_bandwith (int, optional): Bandwidth of band_5
            band_6_bandwith (int, optional): Bandwidth of band_6
            eth_0_port_speed (int, optional): Port speed of eth0
            sort (Sort1Enum, optional): sort options
            desc_sort (DescSortEnum, optional): sort options in reverse order
            stats (bool, optional): whether to return device stats
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            DevicesSearch: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('hostname')
                         .value(hostname))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('model')
                         .value(model))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('version')
                         .value(version))
            .query_param(Parameter()
                         .key('power_constrained')
                         .value(power_constrained))
            .query_param(Parameter()
                         .key('ip address')
                         .value(ip_address))
            .query_param(Parameter()
                         .key('mxtunnel_status')
                         .value(mxtunnel_status))
            .query_param(Parameter()
                         .key('mxedge_id')
                         .value(mxedge_id))
            .query_param(Parameter()
                         .key('lldp_system_name')
                         .value(lldp_system_name))
            .query_param(Parameter()
                         .key('lldp_system_desc')
                         .value(lldp_system_desc))
            .query_param(Parameter()
                         .key('lldp_port_id')
                         .value(lldp_port_id))
            .query_param(Parameter()
                         .key('lldp_mgmt_addr')
                         .value(lldp_mgmt_addr))
            .query_param(Parameter()
                         .key('band_24_channel')
                         .value(band_24_channel))
            .query_param(Parameter()
                         .key('band_5_channel')
                         .value(band_5_channel))
            .query_param(Parameter()
                         .key('band_6_channel')
                         .value(band_6_channel))
            .query_param(Parameter()
                         .key('band_24_bandwith')
                         .value(band_24_bandwith))
            .query_param(Parameter()
                         .key('band_5_bandwith')
                         .value(band_5_bandwith))
            .query_param(Parameter()
                         .key('band_6_bandwith')
                         .value(band_6_bandwith))
            .query_param(Parameter()
                         .key('eth0_port_speed')
                         .value(eth_0_port_speed))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('desc-sort')
                         .value(desc_sort))
            .query_param(Parameter()
                         .key('stats')
                         .value(stats))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DevicesSearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesSearch404ErrorException)
        ).execute()

    def delete_site_device(self,
                           site_id,
                           device_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/devices/{device_id}.

        Delete Site Device

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevices401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevices403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevices404ErrorException)
        ).execute()

    def get_site_device(self,
                        site_id,
                        device_id):
        """Does a GET request to /api/v1/sites/{site_id}/devices/{device_id}.

        Get Device Configuration

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.

        Returns:
            mixed: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevices401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevices403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevices404ErrorException)
        ).execute()

    def update_site_device(self,
                           site_id,
                           device_id,
                           body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/devices/{device_id}.

        Update Device Configuration

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (object, optional): Request Body

        Returns:
            mixed: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevices401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevices403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevices404ErrorException)
        ).execute()

    def get_site_device_config_cmd(self,
                                   site_id,
                                   device_id,
                                   sort='false'):
        """Does a GET request to /api/v1/sites/{site_id}/devices/{device_id}/config_cmd.

        Get Config CLI Commands
        For a brown-field switch deployment where we adopted the switch
        through Adoption Command, we do not wipe out / overwrite the existing
        config automatically. Instead, we generate CLI commands that we would
        have generated. The user can inspect, modify, and incorporate this
        into their existing config manually.
        Once they feel comfortable about the config we generate, they can
        enable allow_mist_config where we will take full control of their
        config like a claimed switch

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            sort (Sort2Enum, optional): Make output cmds sorted (for better
                readability) or not.

        Returns:
            DeviceConfigCmd: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/config_cmd')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceConfigCmd.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesConfigCmd401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesConfigCmd403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesConfigCmd404ErrorException)
        ).execute()

    def delete_site_device_image(self,
                                 site_id,
                                 device_id,
                                 image_number):
        """Does a DELETE request to /api/v1/sites/{site_id}/devices/{device_id}/image{image_number}.

        Delete image from a device

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            image_number (int): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/image{image_number}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('image_number')
                            .value(image_number)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesImageImageNumber401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesImageImageNumber403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesImageImageNumber404ErrorException)
        ).execute()

    def add_site_device_image(self,
                              site_id,
                              device_id,
                              image_number,
                              file=None,
                              json=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/image{image_number}.

        Attach up to 3 images to a device

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            image_number (int): TODO: type description here.
            file (string, optional): binary file
            json (string, optional): JSON string describing your upload

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/image{image_number}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('image_number')
                            .value(image_number)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('file')
                        .value(file))
            .form_param(Parameter()
                        .key('json')
                        .value(json))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesImageImageNumber401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesImageImageNumber403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesImageImageNumber404ErrorException)
        ).execute()

    def get_site_device_ztp_password(self,
                                     site_id,
                                     device_id):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/request_ztp_password.

        In the case where soemthing happens during/after ZTP, the
        root-password is modified (required for ZTP to set up outbound-ssh)
        but the user-defined password config has not be configured. This API
        can be used to retrieve the temporary password.

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.

        Returns:
            ApiV1SitesDevicesRequestZtpPasswordResponse: Response from the
                API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/request_ztp_password')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesDevicesRequestZtpPasswordResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesRequestZtpPassword401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesRequestZtpPassword403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesRequestZtpPassword404ErrorException)
        ).execute()

    def restart_site_device(self,
                            site_id,
                            device_id,
                            body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/restart.

        Restart / Reboot a device

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (ApiV1SitesDevicesRestartRequest1, optional): TODO: type
                description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/restart')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesRestart401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesRestart403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesRestart404ErrorException)
        ).execute()

    def upload_site_device_support_file(self,
                                        site_id,
                                        device_id,
                                        body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/support.

        Support / Upload device support files
        #### Info Param
        **Parameter**|**Description** 
         :-------------: |:-------------: |:-------------: 
        process|Upload 1 file with output of show system processes extensive
        outbound-ssh|Upload 1 file that concatenates all
        /var/log/outbound-ssh.log* files
        messages|Upload 1 to 10 /var/log/messages* files
        core-dumps|Upload all core dump files, if any
        full|string|Upload 1 file with output of request support information,
        1 file that concatenates all /var/log/outbound-ssh.log files, all core
        dump files, the 3 most recent /var/log/messages files, and Mist agent
        logs (for Junos devices running the Mist agent)
        var-logs|Upload all non-empty files in the /var/log/ directory
        jma-logs|Upload Mist agent logs (for Junos devices running the Mist
        agent only)

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (ApiV1SitesDevicesSupportRequest, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/support')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Device not online', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesSupport401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesSupport403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesSupport404ErrorException)
        ).execute()
