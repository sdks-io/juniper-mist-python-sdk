# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.api_v_1_sites_maps_auto_orient_response import ApiV1SitesMapsAutoOrientResponse
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_maps_auto_orient_401_error_exception import ApiV1SitesMapsAutoOrient401ErrorException
from mistapi.exceptions.api_v_1_sites_maps_auto_orient_403_error_exception import ApiV1SitesMapsAutoOrient403ErrorException
from mistapi.exceptions.api_v_1_sites_maps_auto_orient_404_error_exception import ApiV1SitesMapsAutoOrient404ErrorException
from mistapi.exceptions.api_v_1_sites_maps_clear_auto_orient_401_error_exception import ApiV1SitesMapsClearAutoOrient401ErrorException
from mistapi.exceptions.api_v_1_sites_maps_clear_auto_orient_403_error_exception import ApiV1SitesMapsClearAutoOrient403ErrorException
from mistapi.exceptions.api_v_1_sites_maps_clear_auto_orient_404_error_exception import ApiV1SitesMapsClearAutoOrient404ErrorException


class SitesMapsAutoOrientationController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesMapsAutoOrientationController, self).__init__(config)

    def delete_site_ap_auto_orientation(self,
                                        map_id,
                                        site_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/maps/{map_id}/auto_orient.

        This API is called to force stop auto placement for a given map

        Args:
            map_id (uuid|string): TODO: type description here.
            site_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/maps/{map_id}/auto_orient')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Autoplacement was not triggered', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesMapsAutoOrient401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesMapsAutoOrient403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesMapsAutoOrient404ErrorException)
        ).execute()

    def start_site_ap_auto_orientation(self,
                                       map_id,
                                       site_id):
        """Does a POST request to /api/v1/sites/{site_id}/maps/{map_id}/auto_orient.

        This API is used to trigger a map for Auto orientation

        Args:
            map_id (uuid|string): TODO: type description here.
            site_id (uuid|string): TODO: type description here.

        Returns:
            ApiV1SitesMapsAutoOrientResponse: Response from the API. Map
                queued for auto orientation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/maps/{map_id}/auto_orient')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesMapsAutoOrientResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesMapsAutoOrient401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesMapsAutoOrient403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesMapsAutoOrient404ErrorException)
        ).execute()

    def clear_site_ap_auto_orient(self,
                                  site_id,
                                  map_id,
                                  body=None):
        """Does a POST request to /api/v1/sites/{site_id}/maps/{map_id}/clear_auto_orient.

        This API is used to destroy the autoorientations of a map or subset of
        APs on a map.

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.
            body (ApiV1SitesMapsClearAutoOrientRequest, optional): TODO: type
                description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/maps/{map_id}/clear_auto_orient')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesMapsClearAutoOrient401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesMapsClearAutoOrient403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesMapsClearAutoOrient404ErrorException)
        ).execute()
