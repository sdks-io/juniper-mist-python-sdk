# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.count import Count
from mistapi.models.events_search import EventsSearch
from mistapi.models.clients_search import ClientsSearch
from mistapi.models.client_sessions_search import ClientSessionsSearch
from mistapi.models.client_events_search import ClientEventsSearch
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_clients_count_401_error_exception import ApiV1SitesClientsCount401ErrorException
from mistapi.exceptions.api_v_1_sites_clients_count_403_error_exception import ApiV1SitesClientsCount403ErrorException
from mistapi.exceptions.api_v_1_sites_clients_count_404_error_exception import ApiV1SitesClientsCount404ErrorException
from mistapi.exceptions.api_v_1_sites_clients_disconnect_401_error_exception import ApiV1SitesClientsDisconnect401ErrorException
from mistapi.exceptions.api_v_1_sites_clients_disconnect_403_error_exception import ApiV1SitesClientsDisconnect403ErrorException
from mistapi.exceptions.api_v_1_sites_clients_disconnect_404_error_exception import ApiV1SitesClientsDisconnect404ErrorException
from mistapi.exceptions.api_v_1_sites_clients_events_count_401_error_exception import ApiV1SitesClientsEventsCount401ErrorException
from mistapi.exceptions.api_v_1_sites_clients_events_count_403_error_exception import ApiV1SitesClientsEventsCount403ErrorException
from mistapi.exceptions.api_v_1_sites_clients_events_count_404_error_exception import ApiV1SitesClientsEventsCount404ErrorException
from mistapi.exceptions.api_v_1_sites_clients_events_search_401_error_exception import ApiV1SitesClientsEventsSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_clients_events_search_403_error_exception import ApiV1SitesClientsEventsSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_clients_events_search_404_error_exception import ApiV1SitesClientsEventsSearch404ErrorException
from mistapi.exceptions.api_v_1_sites_clients_search_401_error_exception import ApiV1SitesClientsSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_clients_search_403_error_exception import ApiV1SitesClientsSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_clients_search_404_error_exception import ApiV1SitesClientsSearch404ErrorException
from mistapi.exceptions.api_v_1_sites_clients_sessions_count_401_error_exception import ApiV1SitesClientsSessionsCount401ErrorException
from mistapi.exceptions.api_v_1_sites_clients_sessions_count_403_error_exception import ApiV1SitesClientsSessionsCount403ErrorException
from mistapi.exceptions.api_v_1_sites_clients_sessions_count_404_error_exception import ApiV1SitesClientsSessionsCount404ErrorException
from mistapi.exceptions.api_v_1_sites_clients_sessions_search_401_error_exception import ApiV1SitesClientsSessionsSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_clients_sessions_search_403_error_exception import ApiV1SitesClientsSessionsSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_clients_sessions_search_404_error_exception import ApiV1SitesClientsSessionsSearch404ErrorException
from mistapi.exceptions.api_v_1_sites_clients_unauthorize_401_error_exception import ApiV1SitesClientsUnauthorize401ErrorException
from mistapi.exceptions.api_v_1_sites_clients_unauthorize_403_error_exception import ApiV1SitesClientsUnauthorize403ErrorException
from mistapi.exceptions.api_v_1_sites_clients_unauthorize_404_error_exception import ApiV1SitesClientsUnauthorize404ErrorException
from mistapi.exceptions.api_v_1_sites_clients_events_401_error_exception import ApiV1SitesClientsEvents401ErrorException
from mistapi.exceptions.api_v_1_sites_clients_events_403_error_exception import ApiV1SitesClientsEvents403ErrorException
from mistapi.exceptions.api_v_1_sites_clients_events_404_error_exception import ApiV1SitesClientsEvents404ErrorException


class SitesClientsWirelessController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesClientsWirelessController, self).__init__(config)

    def count_site_wireless_clients(self,
                                    site_id,
                                    distinct,
                                    ssid=None,
                                    ap=None,
                                    ip_address=None,
                                    vlan=None,
                                    hostname=None,
                                    os=None,
                                    model=None,
                                    device=None,
                                    page=1,
                                    limit=100,
                                    start=0,
                                    end=0,
                                    duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/clients/count.

        Count by Distinct Attributes of Clients

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct5Enum): TODO: type description here. Example:
                device
            ssid (string, optional): TODO: type description here.
            ap (string, optional): TODO: type description here.
            ip_address (string, optional): TODO: type description here.
            vlan (string, optional): TODO: type description here.
            hostname (string, optional): TODO: type description here.
            os (string, optional): TODO: type description here.
            model (string, optional): TODO: type description here.
            device (string, optional): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            Count: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/clients/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .query_param(Parameter()
                         .key('ssid')
                         .value(ssid))
            .query_param(Parameter()
                         .key('ap')
                         .value(ap))
            .query_param(Parameter()
                         .key('ip address')
                         .value(ip_address))
            .query_param(Parameter()
                         .key('vlan')
                         .value(vlan))
            .query_param(Parameter()
                         .key('hostname')
                         .value(hostname))
            .query_param(Parameter()
                         .key('os')
                         .value(os))
            .query_param(Parameter()
                         .key('model')
                         .value(model))
            .query_param(Parameter()
                         .key('device')
                         .value(device))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Count.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesClientsCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesClientsCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesClientsCount404ErrorException)
        ).execute()

    def disconnect_site_multiple_clients(self,
                                         site_id,
                                         body=None):
        """Does a POST request to /api/v1/sites/{site_id}/clients/disconnect.

        To unauthorize multiple clients

        Args:
            site_id (uuid|string): TODO: type description here.
            body (list of string, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/clients/disconnect')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesClientsDisconnect401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesClientsDisconnect403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesClientsDisconnect404ErrorException)
        ).execute()

    def count_site_wireless_clients_events(self,
                                           site_id,
                                           distinct=None,
                                           mtype=None,
                                           reason_code=None,
                                           ssid=None,
                                           ap=None,
                                           proto=None,
                                           band=None,
                                           wlan_id=None,
                                           page=1,
                                           limit=100,
                                           start=0,
                                           end=0,
                                           duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/clients/events/count.

        Count by Distinct Attributes of Client-Events

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct6Enum, optional): type / proto / band / channel
                / wlan_id / ssid
            mtype (string, optional): event type, e.g.
                MARVIS_EVENT_CLIENT_FBT_FAILURE
            reason_code (int, optional): for assoc/disassoc events
            ssid (string, optional): SSID Name
            ap (string, optional): AP MAC
            proto (Proto1Enum, optional): 802.11 standard
            band (Band7Enum, optional): 24 / 5
            wlan_id (string, optional): wlan_id
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            Count: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/clients/events/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('reason_code')
                         .value(reason_code))
            .query_param(Parameter()
                         .key('ssid')
                         .value(ssid))
            .query_param(Parameter()
                         .key('ap')
                         .value(ap))
            .query_param(Parameter()
                         .key('proto')
                         .value(proto))
            .query_param(Parameter()
                         .key('band')
                         .value(band))
            .query_param(Parameter()
                         .key('wlan_id')
                         .value(wlan_id))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Count.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesClientsEventsCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesClientsEventsCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesClientsEventsCount404ErrorException)
        ).execute()

    def search_site_wireless_clients_events(self,
                                            site_id,
                                            mtype=None,
                                            reason_code=None,
                                            ssid=None,
                                            ap=None,
                                            proto=None,
                                            band=None,
                                            wlan_id=None,
                                            limit=100,
                                            start=0,
                                            end=0,
                                            duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/clients/events/search.

        Get Site Clients Events

        Args:
            site_id (uuid|string): TODO: type description here.
            mtype (string, optional): event type, e.g.
                MARVIS_EVENT_CLIENT_FBT_FAILURE
            reason_code (int, optional): for assoc/disassoc events
            ssid (string, optional): SSID Name
            ap (string, optional): AP MAC
            proto (Proto1Enum, optional): 802.11 standard
            band (Band7Enum, optional): 24 / 5
            wlan_id (string, optional): wlan_id
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            EventsSearch: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/clients/events/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('reason_code')
                         .value(reason_code))
            .query_param(Parameter()
                         .key('ssid')
                         .value(ssid))
            .query_param(Parameter()
                         .key('ap')
                         .value(ap))
            .query_param(Parameter()
                         .key('proto')
                         .value(proto))
            .query_param(Parameter()
                         .key('band')
                         .value(band))
            .query_param(Parameter()
                         .key('wlan_id')
                         .value(wlan_id))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(EventsSearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesClientsEventsSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesClientsEventsSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesClientsEventsSearch404ErrorException)
        ).execute()

    def search_site_wireless_clients(self,
                                     site_id,
                                     mac=None,
                                     ip_address=None,
                                     hostname=None,
                                     device=None,
                                     os=None,
                                     model=None,
                                     ap=None,
                                     ssid=None,
                                     text=None,
                                     limit=100,
                                     start=0,
                                     end=0,
                                     duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/clients/search.

        Search Wireless Clients
        **NOTE**: fuzzy logic can be used with ‘*’, supported filters: mac,
        hostname, device, os, model. E.g.
        /clients/search?device=Mac*&hostname=jerry

        Args:
            site_id (uuid|string): TODO: type description here.
            mac (string, optional): partial / full MAC address
            ip_address (string, optional): TODO: type description here.
            hostname (string, optional): partial / full hostname
            device (string, optional): device type, e.g. Mac, Nvidia, iPhone
            os (string, optional): os, e.g. Sierra, Yosemite, Windows 10
            model (string, optional): model, e.g. “MBP 15 late 2013”, 6, 6s,
                “8+ GSM”
            ap (string, optional): AP mac where the client has connected to
            ssid (string, optional): TODO: type description here.
            text (string, optional): partial / full MAC address, hostname,
                username or ip
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ClientsSearch: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/clients/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('ip address')
                         .value(ip_address))
            .query_param(Parameter()
                         .key('hostname')
                         .value(hostname))
            .query_param(Parameter()
                         .key('device')
                         .value(device))
            .query_param(Parameter()
                         .key('os')
                         .value(os))
            .query_param(Parameter()
                         .key('model')
                         .value(model))
            .query_param(Parameter()
                         .key('ap')
                         .value(ap))
            .query_param(Parameter()
                         .key('ssid')
                         .value(ssid))
            .query_param(Parameter()
                         .key('text')
                         .value(text))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClientsSearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesClientsSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesClientsSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesClientsSearch404ErrorException)
        ).execute()

    def count_site_wireless_client_sessions(self,
                                            site_id,
                                            distinct='mac',
                                            ap=None,
                                            band=None,
                                            client_family=None,
                                            client_manufacture=None,
                                            client_model=None,
                                            client_os=None,
                                            ssid=None,
                                            wlan_id=None,
                                            page=1,
                                            limit=100,
                                            start=0,
                                            end=0,
                                            duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/clients/sessions/count.

        Count by Distinct Attributes of Client Sessions

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct7Enum, optional): TODO: type description here.
                Example: mac
            ap (string, optional): AP MAC
            band (string, optional): 24 /5
            client_family (string, optional): E.g. “Mac”, “iPhone”, “Apple
                watch”
            client_manufacture (string, optional): E.g. “Apple”
            client_model (string, optional): E.g. “8+”, “XS”
            client_os (string, optional): E.g. “Mojave”, “Windows 10”,
                “Linux”
            ssid (string, optional): SSID
            wlan_id (string, optional): wlan_id
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            Count: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/clients/sessions/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .query_param(Parameter()
                         .key('ap')
                         .value(ap))
            .query_param(Parameter()
                         .key('band')
                         .value(band))
            .query_param(Parameter()
                         .key('client_family')
                         .value(client_family))
            .query_param(Parameter()
                         .key('client_manufacture')
                         .value(client_manufacture))
            .query_param(Parameter()
                         .key('client_model')
                         .value(client_model))
            .query_param(Parameter()
                         .key('client_os')
                         .value(client_os))
            .query_param(Parameter()
                         .key('ssid')
                         .value(ssid))
            .query_param(Parameter()
                         .key('wlan_id')
                         .value(wlan_id))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Count.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesClientsSessionsCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesClientsSessionsCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesClientsSessionsCount404ErrorException)
        ).execute()

    def search_site_wireless_client_sessions(self,
                                             site_id,
                                             ap=None,
                                             band=None,
                                             client_family=None,
                                             client_manufacture=None,
                                             client_model=None,
                                             client_username=None,
                                             client_os=None,
                                             ssid=None,
                                             wlan_id=None,
                                             psk_id=None,
                                             psk_name=None,
                                             limit=100,
                                             start=0,
                                             end=0,
                                             duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/clients/sessions/search.

        Search Client Sessions

        Args:
            site_id (uuid|string): TODO: type description here.
            ap (string, optional): AP MAC
            band (Band7Enum, optional): 5 / 24
            client_family (string, optional): E.g. “Mac”, “iPhone”, “Apple
                watch”
            client_manufacture (string, optional): E.g. “Apple”
            client_model (string, optional): E.g. “8+”, “XS”
            client_username (string, optional): Username
            client_os (string, optional): E.g. “Mojave”, “Windows 10”,
                “Linux”
            ssid (string, optional): SSID
            wlan_id (string, optional): wlan_id
            psk_id (uuid|string, optional): PSK ID
            psk_name (string, optional): PSK Name
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ClientSessionsSearch: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/clients/sessions/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('ap')
                         .value(ap))
            .query_param(Parameter()
                         .key('band')
                         .value(band))
            .query_param(Parameter()
                         .key('client_family')
                         .value(client_family))
            .query_param(Parameter()
                         .key('client_manufacture')
                         .value(client_manufacture))
            .query_param(Parameter()
                         .key('client_model')
                         .value(client_model))
            .query_param(Parameter()
                         .key('client_username')
                         .value(client_username))
            .query_param(Parameter()
                         .key('client_os')
                         .value(client_os))
            .query_param(Parameter()
                         .key('ssid')
                         .value(ssid))
            .query_param(Parameter()
                         .key('wlan_id')
                         .value(wlan_id))
            .query_param(Parameter()
                         .key('psk_id')
                         .value(psk_id))
            .query_param(Parameter()
                         .key('psk_name')
                         .value(psk_name))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClientSessionsSearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesClientsSessionsSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesClientsSessionsSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesClientsSessionsSearch404ErrorException)
        ).execute()

    def unauthorize_site_multiple_clients(self,
                                          site_id,
                                          body=None):
        """Does a POST request to /api/v1/sites/{site_id}/clients/unauthorize.

        This unauthorize clients (if they are guest) and disconnect them. From
        the guest’s perspective, they will see the splash page again and go
        through the flow (e.g. Terms of Use) again.

        Args:
            site_id (uuid|string): TODO: type description here.
            body (list of string, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/clients/unauthorize')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesClientsUnauthorize401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesClientsUnauthorize403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesClientsUnauthorize404ErrorException)
        ).execute()

    def disconnect_site_wireless_client(self,
                                        site_id,
                                        client_mac):
        """Does a POST request to /api/v1/sites/{site_id}/clients/{client_mac}/disconnect.

        This disconnect a client (and it’s likely to connect back)

        Args:
            site_id (uuid|string): TODO: type description here.
            client_mac (string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/clients/{client_mac}/disconnect')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('client_mac')
                            .value(client_mac)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesClientsDisconnect401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesClientsDisconnect403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesClientsDisconnect404ErrorException)
        ).execute()

    def get_site_events_for_client(self,
                                   site_id,
                                   client_mac,
                                   mtype=None,
                                   proto=None,
                                   band=None,
                                   channel=None,
                                   wlan_id=None,
                                   ssid=None,
                                   start=0,
                                   end=0,
                                   page=1,
                                   limit=100,
                                   duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/clients/{client_mac}/events.

        Get the list of events for a specific client

        Args:
            site_id (uuid|string): TODO: type description here.
            client_mac (string): TODO: type description here.
            mtype (Type46Enum, optional): e.g. MARVIS_EVENT_CLIENT_DHCP_STUCK
            proto (Proto1Enum, optional): a / b / g / n / ac / ax
            band (string, optional): 24 / 5
            channel (string, optional): TODO: type description here.
            wlan_id (string, optional): TODO: type description here.
            ssid (string, optional): TODO: type description here.
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ClientEventsSearch: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/clients/{client_mac}/events')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('client_mac')
                            .value(client_mac)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('proto')
                         .value(proto))
            .query_param(Parameter()
                         .key('band')
                         .value(band))
            .query_param(Parameter()
                         .key('channel')
                         .value(channel))
            .query_param(Parameter()
                         .key('wlan_id')
                         .value(wlan_id))
            .query_param(Parameter()
                         .key('ssid')
                         .value(ssid))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClientEventsSearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesClientsEvents401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesClientsEvents403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesClientsEvents404ErrorException)
        ).execute()

    def unauthorize_site_wireless_client(self,
                                         site_id,
                                         client_mac):
        """Does a POST request to /api/v1/sites/{site_id}/clients/{client_mac}/unauthorize.

        This unauthorize a client (if it’s a guest) and disconnect it. From
        the guest’s perspective, s/he will see the splash page again and go
        through the flow (e.g. Terms of Use) again.

        Args:
            site_id (uuid|string): TODO: type description here.
            client_mac (string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/clients/{client_mac}/unauthorize')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('client_mac')
                            .value(client_mac)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesClientsUnauthorize401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesClientsUnauthorize403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesClientsUnauthorize404ErrorException)
        ).execute()
