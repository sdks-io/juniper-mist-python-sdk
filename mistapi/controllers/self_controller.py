# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.admin import Admin
from mistapi.models.api_v_1_self_logs_response import ApiV1SelfLogsResponse
from mistapi.models.api_v_1_self_subscriptions_response import ApiV1SelfSubscriptionsResponse
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_recover_401_error_exception import ApiV1Recover401ErrorException
from mistapi.exceptions.api_v_1_recover_403_error_exception import ApiV1Recover403ErrorException
from mistapi.exceptions.api_v_1_recover_404_error_exception import ApiV1Recover404ErrorException
from mistapi.exceptions.api_v_1_recover_verify_401_error_exception import ApiV1RecoverVerify401ErrorException
from mistapi.exceptions.api_v_1_recover_verify_403_error_exception import ApiV1RecoverVerify403ErrorException
from mistapi.exceptions.api_v_1_recover_verify_404_error_exception import ApiV1RecoverVerify404ErrorException
from mistapi.exceptions.api_v_1_self_400_error_exception import ApiV1Self400ErrorException
from mistapi.exceptions.api_v_1_self_401_error_exception import ApiV1Self401ErrorException
from mistapi.exceptions.api_v_1_self_403_error_exception import ApiV1Self403ErrorException
from mistapi.exceptions.api_v_1_self_404_error_exception import ApiV1Self404ErrorException
from mistapi.exceptions.api_v_1_self_logs_401_error_exception import ApiV1SelfLogs401ErrorException
from mistapi.exceptions.api_v_1_self_logs_403_error_exception import ApiV1SelfLogs403ErrorException
from mistapi.exceptions.api_v_1_self_logs_404_error_exception import ApiV1SelfLogs404ErrorException
from mistapi.exceptions.api_v_1_self_subscriptions_401_error_exception import ApiV1SelfSubscriptions401ErrorException
from mistapi.exceptions.api_v_1_self_subscriptions_403_error_exception import ApiV1SelfSubscriptions403ErrorException
from mistapi.exceptions.api_v_1_self_subscriptions_404_error_exception import ApiV1SelfSubscriptions404ErrorException
from mistapi.exceptions.api_v_1_self_two_factor_token_401_error_exception import ApiV1SelfTwoFactorToken401ErrorException
from mistapi.exceptions.api_v_1_self_two_factor_token_403_error_exception import ApiV1SelfTwoFactorToken403ErrorException
from mistapi.exceptions.api_v_1_self_two_factor_token_404_error_exception import ApiV1SelfTwoFactorToken404ErrorException
from mistapi.exceptions.api_v_1_self_two_factor_verify_401_error_exception import ApiV1SelfTwoFactorVerify401ErrorException
from mistapi.exceptions.api_v_1_self_two_factor_verify_403_error_exception import ApiV1SelfTwoFactorVerify403ErrorException
from mistapi.exceptions.api_v_1_self_two_factor_verify_404_error_exception import ApiV1SelfTwoFactorVerify404ErrorException
from mistapi.exceptions.api_v_1_self_update_400_error_exception import ApiV1SelfUpdate400ErrorException
from mistapi.exceptions.api_v_1_self_update_401_error_exception import ApiV1SelfUpdate401ErrorException
from mistapi.exceptions.api_v_1_self_update_403_error_exception import ApiV1SelfUpdate403ErrorException
from mistapi.exceptions.api_v_1_self_update_404_error_exception import ApiV1SelfUpdate404ErrorException
from mistapi.exceptions.api_v_1_self_update_verify_400_error_exception import ApiV1SelfUpdateVerify400ErrorException
from mistapi.exceptions.api_v_1_self_update_verify_401_error_exception import ApiV1SelfUpdateVerify401ErrorException
from mistapi.exceptions.api_v_1_self_update_verify_403_error_exception import ApiV1SelfUpdateVerify403ErrorException
from mistapi.exceptions.api_v_1_self_update_verify_404_error_exception import ApiV1SelfUpdateVerify404ErrorException


class SelfController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SelfController, self).__init__(config)

    def recover_password(self,
                         body=None):
        """Does a POST request to /api/v1/recover.

        Recover Password
        An email will also be sent to the user with a link to
        https://manage.mist.com/verify/recover?token=:token

        Args:
            body (ApiV1RecoverRequest, optional): TODO: type description
                here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/recover')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1Recover401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1Recover403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1Recover404ErrorException)
        ).execute()

    def verify_recover_passsword(self,
                                 token):
        """Does a POST request to /api/v1/recover/verify/{token}.

        Verify Recover Password
        With correct verification, the user will be authenticated. UI can then
        prompt for new password

        Args:
            token (string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/recover/verify/{token}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('token')
                            .value(token)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1RecoverVerify401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1RecoverVerify403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1RecoverVerify404ErrorException)
        ).execute()

    def delete_self(self):
        """Does a DELETE request to /api/v1/self.

        To delete ones account and every associated with it. The effects:
        the account would be deleted
        any orphaned Org (that only has this account as admin) will be
        deleted
        along with all data with Org (sites, wlans, devices) will be gone.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', ApiV1Self400ErrorException)
            .local_error('401', 'Unauthorized', ApiV1Self401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1Self403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1Self404ErrorException)
        ).execute()

    def get_self(self):
        """Does a GET request to /api/v1/self.

        Get ‘whoami’ and privileges (which org and which sites I have access
        to)

        Returns:
            Admin: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Admin.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1Self401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1Self403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1Self404ErrorException)
        ).execute()

    def update_self(self,
                    body=None):
        """Does a PUT request to /api/v1/self.

        update Account Information

        Args:
            body (Admin, optional): Request Body

        Returns:
            Admin: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Admin.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1Self401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1Self403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1Self404ErrorException)
        ).execute()

    def list_self_audit_logs(self,
                             page=1,
                             limit=100,
                             start=0,
                             end=0,
                             duration='1d'):
        """Does a GET request to /api/v1/self/logs.

        Get List of change logs across all Orgs for current admin
        Audit logs records all administrative activities done by current admin
        across all orgs

        Args:
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ApiV1SelfLogsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self/logs')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SelfLogsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SelfLogs401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SelfLogs403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SelfLogs404ErrorException)
        ).execute()

    def list_alarm_subscriptions(self):
        """Does a GET request to /api/v1/self/subscriptions.

        Get List of all the subscriptions

        Returns:
            list of ApiV1SelfSubscriptionsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self/subscriptions')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SelfSubscriptionsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SelfSubscriptions401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SelfSubscriptions403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SelfSubscriptions404ErrorException)
        ).execute()

    def generate_qr_code_for_verification(self,
                                          by='qrcode'):
        """Does a GET request to /api/v1/self/two_factor/token.

        Generate QR code for verification

        Args:
            by (ByEnum, optional): TODO: type description here. Example:
                qrcode

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self/two_factor/token')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('by')
                         .value(by))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SelfTwoFactorToken401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SelfTwoFactorToken403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SelfTwoFactorToken404ErrorException)
        ).execute()

    def verify_two_factor(self,
                          body=None):
        """Does a POST request to /api/v1/self/two_factor/verify.

        Verify Two-factor (OTP)
        To verify two-factor authentication by using a code generated by app
        (e.g. Google Authenticator, Authy) or by SMS. Upon successful
        verification, the otp_verified will be set to true if it hasn’t
        already been.

        Args:
            body (ApiV1SelfTwoFactorVerifyRequest, optional): Request Body

        Returns:
            object: Response from the API. Response when 2FA verification is
                successful

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self/two_factor/verify')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SelfTwoFactorVerify401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SelfTwoFactorVerify403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SelfTwoFactorVerify404ErrorException)
        ).execute()

    def update_self_email(self,
                          body=None):
        """Does a POST request to /api/v1/self/update.

        Change Email
        We require the user to verify that they actually own the email address
        they intend to change it to.
        After the API call, the user will receive an email to the new email
        address with a link like
        https://manage.mist.com/verify/update?expire=:exp_time&email=:admin_ema
        il&token=:token
        Upon clicking the link, the user is provided with a login page to
        authenticate using existing credentials. After successful login, the
        email address of the user gets updated
        **Note**: The request parameter email can be used by UI to validate
        that the current session (if any) belongs to the admin or provide a
        login page (by pre-populating the email on login screen). UI can also
        use the request parameter expire to validate token expiry.

        Args:
            body (ModelObjectEmail, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self/update')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'invalid email address or new email address already exists', ApiV1SelfUpdate400ErrorException)
            .local_error('401', 'Unauthorized', ApiV1SelfUpdate401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SelfUpdate403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SelfUpdate404ErrorException)
        ).execute()

    def verify_self_email(self,
                          token):
        """Does a GET request to /api/v1/self/update/verify/{token}.

        Verify Email change

        Args:
            token (string): TODO: type description here.

        Returns:
            object: Response from the API. With correct verification, the
                email address of the user will be updated

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self/update/verify/{token}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('token')
                            .value(token)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Bad Request', ApiV1SelfUpdateVerify400ErrorException)
            .local_error('401', 'Unauthorized', ApiV1SelfUpdateVerify401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SelfUpdateVerify403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SelfUpdateVerify404ErrorException)
        ).execute()
