# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.api_v_1_login_oauth_response import ApiV1LoginOauthResponse
from mistapi.models.api_v_1_self_oauth_response import ApiV1SelfOauthResponse
from mistapi.models.api_v_1_self_oauth_response_1 import ApiV1SelfOauthResponse1
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_login_oauth_401_error_exception import ApiV1LoginOauth401ErrorException
from mistapi.exceptions.api_v_1_login_oauth_403_error_exception import ApiV1LoginOauth403ErrorException
from mistapi.exceptions.api_v_1_login_oauth_404_error_exception import ApiV1LoginOauth404ErrorException
from mistapi.exceptions.api_v_1_login_two_factor_403_error_exception import ApiV1LoginTwoFactor403ErrorException
from mistapi.exceptions.api_v_1_self_oauth_401_error_exception import ApiV1SelfOauth401ErrorException
from mistapi.exceptions.api_v_1_self_oauth_403_error_exception import ApiV1SelfOauth403ErrorException
from mistapi.exceptions.api_v_1_self_oauth_404_error_exception import ApiV1SelfOauth404ErrorException
from mistapi.exceptions.api_v_1_self_oauth_400_error_exception import ApiV1SelfOauth400ErrorException


class LoginWithOAuth2Controller(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(LoginWithOAuth2Controller, self).__init__(config)

    def unlink_o_auth_2_provider(self,
                                 provider):
        """Does a DELETE request to /api/v1/login/oauth/{provider}.

        Unlink OAuth2 Provider

        Args:
            provider (string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/login/oauth/{provider}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('provider')
                            .value(provider)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1LoginOauth401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1LoginOauth403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1LoginOauth404ErrorException)
        ).execute()

    def get_o_auth_2_authorization_url_for_login(self,
                                                 provider,
                                                 forward=None):
        """Does a GET request to /api/v1/login/oauth/{provider}.

        Obtain Authorization URL for Login

        Args:
            provider (string): TODO: type description here.
            forward (string, optional): TODO: type description here.

        Returns:
            ApiV1LoginOauthResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/login/oauth/{provider}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('provider')
                            .value(provider)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('forward')
                         .value(forward))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1LoginOauthResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1LoginOauth401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1LoginOauth403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1LoginOauth404ErrorException)
        ).execute()

    def login_o_auth_2(self,
                       provider,
                       body=None):
        """Does a POST request to /api/v1/login/oauth/{provider}.

        Login via OAuth2

        Args:
            provider (string): TODO: type description here.
            body (ApiV1LoginOauthRequest, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/login/oauth/{provider}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('provider')
                            .value(provider)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1LoginOauth401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1LoginOauth403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1LoginOauth404ErrorException)
        ).execute()

    def two_factor(self,
                   body=None):
        """Does a POST request to /api/v1/login/two_factor.

        Send 2FA Code

        Args:
            body (ApiV1LoginTwoFactorRequest, optional): TODO: type
                description here.

        Returns:
            object: Response from the API. two_factor code is correct

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/login/two_factor')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'two_factor code is incorrect or the user hasn’t login yet', APIException)
            .local_error('403', 'Permission Denied', ApiV1LoginTwoFactor403ErrorException)
            .local_error('404', 'the user doesn’t have 2FA enabled', APIException)
        ).execute()

    def get_o_auth_2_url_for_linking(self,
                                     provider,
                                     forward=None):
        """Does a GET request to /api/v1/self/oauth/{provider}.

        Obtain Authorization URL for Linking

        Args:
            provider (string): TODO: type description here.
            forward (string, optional): TODO: type description here.

        Returns:
            ApiV1SelfOauthResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self/oauth/{provider}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('provider')
                            .value(provider)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('forward')
                         .value(forward))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SelfOauthResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SelfOauth401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SelfOauth403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SelfOauth404ErrorException)
        ).execute()

    def link_o_auth_2_mist_account(self,
                                   provider,
                                   body=None):
        """Does a POST request to /api/v1/self/oauth/{provider}.

        Link Mist account with an OAuth2 Provider

        Args:
            provider (string): TODO: type description here.
            body (ApiV1SelfOauthRequest, optional): Request Body

        Returns:
            ApiV1SelfOauthResponse1: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self/oauth/{provider}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('provider')
                            .value(provider)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SelfOauthResponse1.from_dictionary)
            .local_error('400', 'Authorization Error', ApiV1SelfOauth400ErrorException)
            .local_error('401', 'Unauthorized', ApiV1SelfOauth401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SelfOauth403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SelfOauth404ErrorException)
        ).execute()
