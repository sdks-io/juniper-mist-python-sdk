# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.session_1 import Session1
from mistapi.models.api_v_1_sites_stats_switches_metrics_response import ApiV1SitesStatsSwitchesMetricsResponse
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_devices_bounce_port_401_error_exception import ApiV1SitesDevicesBouncePort401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_bounce_port_403_error_exception import ApiV1SitesDevicesBouncePort403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_bounce_port_404_error_exception import ApiV1SitesDevicesBouncePort404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_cable_test_401_error_exception import ApiV1SitesDevicesCableTest401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_cable_test_403_error_exception import ApiV1SitesDevicesCableTest403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_cable_test_404_error_exception import ApiV1SitesDevicesCableTest404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_clear_bpdu_error_401_error_exception import ApiV1SitesDevicesClearBpduError401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_clear_bpdu_error_403_error_exception import ApiV1SitesDevicesClearBpduError403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_clear_bpdu_error_404_error_exception import ApiV1SitesDevicesClearBpduError404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_clear_macs_401_error_exception import ApiV1SitesDevicesClearMacs401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_clear_macs_403_error_exception import ApiV1SitesDevicesClearMacs403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_clear_macs_404_error_exception import ApiV1SitesDevicesClearMacs404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_local_port_config_401_error_exception import ApiV1SitesDevicesLocalPortConfig401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_local_port_config_403_error_exception import ApiV1SitesDevicesLocalPortConfig403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_local_port_config_404_error_exception import ApiV1SitesDevicesLocalPortConfig404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_poll_stats_401_error_exception import ApiV1SitesDevicesPollStats401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_poll_stats_403_error_exception import ApiV1SitesDevicesPollStats403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_poll_stats_404_error_exception import ApiV1SitesDevicesPollStats404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_switches_metrics_401_error_exception import ApiV1SitesStatsSwitchesMetrics401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_switches_metrics_403_error_exception import ApiV1SitesStatsSwitchesMetrics403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_switches_metrics_404_error_exception import ApiV1SitesStatsSwitchesMetrics404ErrorException


class SitesDevicesWiredController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesDevicesWiredController, self).__init__(config)

    def ports_bounce_from_switch(self,
                                 site_id,
                                 device_id,
                                 body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/bounce_port.

        Port Bounce can be performed from the Switch.The output will be
        available through websocket. As there can be multiple command issued
        against the same AP at the same time and the output all goes through
        the same websocket stream, session is introduced for demux.
        #### Subscribe to Device Command outputs
        `WS /api-ws/v1/stream`
        ```json
        {
            "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
        }
        ```
        ##### Example output from ws stream
        ```json
        {
            "event": "data",
            "channel":
            "/sites/4ac1dcf4-9d8b-7211-65c4-057819f0862b/devices/00000000-0000-
            0000-1000-5c5b350e0060/cmd",
            "data": {
                "session": "session_id",
                "raw": "Port bounce complete."
            }
        }
        ```

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (ApiV1SitesDevicesBouncePortRequest, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/bounce_port')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesBouncePort401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesBouncePort403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesBouncePort404ErrorException)
        ).execute()

    def cable_test_from_switch(self,
                               site_id,
                               device_id,
                               body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/cable_test.

        TDR can be performed from the Switch. The output will be available
        through websocket. As there can be multiple command issued against the
        same Switch at the same time and the output all goes through the same
        websocket stream, session is introduced for demux.
        #### Subscribe to Device Command outputs
        `WS /api-ws/v1/stream`
        ```json
        {
            "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
        }
        ```
        ##### Example output from ws stream
        ```json
        {
            "event": "data",
            "channel":
            "/sites/4ac1dcf4-9d8b-7211-65c4-057819f0862b/devices/00000000-0000-
            0000-1000-5c5b350e0060/cmd",
            "data": {
                "session": "session_id",
                "raw": "Interface TDR detail:\nTest status : Test successfully
                executed  ge-0/0/0\n"
            }
        }
        ```

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (ApiV1SitesDevicesCableTestRequest, optional): TODO: type
                description here.

        Returns:
            Session1: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/cable_test')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Session1.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesCableTest401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesCableTest403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesCableTest404ErrorException)
        ).execute()

    def clear_bpdu_erros_from_ports_on_switch(self,
                                              site_id,
                                              device_id,
                                              body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/clear_bpdu_error.

        Clear bridge protocol data unit (BPDU) error condition caused by the
        detection of a possible bridging loop from Spanning Tree Protocol
        (STP) operation that renders the port unoperational.

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (ApiV1SitesDevicesClearBpduErrorRequest, optional): TODO:
                type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/clear_bpdu_error')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Port not specified', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesClearBpduError401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesClearBpduError403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesClearBpduError404ErrorException)
        ).execute()

    def clear_all_learned_macs_from_port_on_switch(self,
                                                   site_id,
                                                   device_id,
                                                   body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/clear_macs.

        Clear all learned MAC addresses, including persistent MAC addresses,
        on a port.

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (ApiV1SitesDevicesClearMacsRequest, optional): TODO: type
                description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/clear_macs')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesClearMacs401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesClearMacs403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesClearMacs404ErrorException)
        ).execute()

    def delete_site_local_switch_port_config(self,
                                             site_id,
                                             device_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/devices/{device_id}/local_port_config.

        Sometimes HelpDesk Admin needs to change port configs

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/local_port_config')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesLocalPortConfig401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesLocalPortConfig403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesLocalPortConfig404ErrorException)
        ).execute()

    def update_site_local_switch_port_config(self,
                                             site_id,
                                             device_id,
                                             body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/devices/{device_id}/local_port_config.

        Sometimes HelpDesk Admin needs to change port configs

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (JunosPortConfig, optional): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/local_port_config')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesLocalPortConfig401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesLocalPortConfig403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesLocalPortConfig404ErrorException)
        ).execute()

    def poll_site_switch_stats(self,
                               site_id,
                               device_id):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/poll_stats.

        This API can be used to poll statistics from the Switch proactively
        once. After it is called, the statistics will be pushed back to the
        cloud within the statistics interval.

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/poll_stats')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesPollStats401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesPollStats403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesPollStats404ErrorException)
        ).execute()

    def get_site_switches_metrics(self,
                                  site_id,
                                  mtype=None,
                                  scope=None,
                                  switch_mac=None):
        """Does a GET request to /api/v1/sites/{site_id}/stats/switches/metrics.

        Get version compliance metrics for managed or monitored switches

        Args:
            site_id (uuid|string): TODO: type description here.
            mtype (Type64Enum, optional): TODO: type description here.
            scope (Scope17Enum, optional): TODO: type description here.
            switch_mac (string, optional): switch mac, used only with metric
                `type`==`active_ports_summary`

        Returns:
            ApiV1SitesStatsSwitchesMetricsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/switches/metrics')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('scope')
                         .value(scope))
            .query_param(Parameter()
                         .key('switch_mac')
                         .value(switch_mac))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesStatsSwitchesMetricsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsSwitchesMetrics401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsSwitchesMetrics403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsSwitchesMetrics404ErrorException)
        ).execute()
