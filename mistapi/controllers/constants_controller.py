# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.api_v_1_const_alarm_defs_response import ApiV1ConstAlarmDefsResponse
from mistapi.models.api_v_1_const_ap_channels_response import ApiV1ConstApChannelsResponse
from mistapi.models.api_v_1_const_ap_led_status_response import ApiV1ConstApLedStatusResponse
from mistapi.models.const_application import ConstApplication
from mistapi.models.api_v_1_const_call_events_response import ApiV1ConstCallEventsResponse
from mistapi.models.api_v_1_const_client_events_response import ApiV1ConstClientEventsResponse
from mistapi.models.api_v_1_const_countries_response import ApiV1ConstCountriesResponse
from mistapi.models.api_v_1_const_device_events_response import ApiV1ConstDeviceEventsResponse
from mistapi.models.const_device_model import ConstDeviceModel
from mistapi.models.api_v_1_const_insight_metrics_response import ApiV1ConstInsightMetricsResponse
from mistapi.models.api_v_1_const_languages_response import ApiV1ConstLanguagesResponse
from mistapi.models.api_v_1_const_license_types_response import ApiV1ConstLicenseTypesResponse
from mistapi.models.api_v_1_const_mxedge_events_response import ApiV1ConstMxedgeEventsResponse
from mistapi.models.api_v_1_const_mxedge_models_response import ApiV1ConstMxedgeModelsResponse
from mistapi.models.api_v_1_const_other_device_events_response import ApiV1ConstOtherDeviceEventsResponse
from mistapi.models.api_v_1_const_traffic_types_response import ApiV1ConstTrafficTypesResponse
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_const_alarm_defs_401_error_exception import ApiV1ConstAlarmDefs401ErrorException
from mistapi.exceptions.api_v_1_const_alarm_defs_403_error_exception import ApiV1ConstAlarmDefs403ErrorException
from mistapi.exceptions.api_v_1_const_alarm_defs_404_error_exception import ApiV1ConstAlarmDefs404ErrorException
from mistapi.exceptions.api_v_1_const_ap_channels_401_error_exception import ApiV1ConstApChannels401ErrorException
from mistapi.exceptions.api_v_1_const_ap_channels_403_error_exception import ApiV1ConstApChannels403ErrorException
from mistapi.exceptions.api_v_1_const_ap_channels_404_error_exception import ApiV1ConstApChannels404ErrorException
from mistapi.exceptions.api_v_1_const_ap_led_status_401_error_exception import ApiV1ConstApLedStatus401ErrorException
from mistapi.exceptions.api_v_1_const_ap_led_status_403_error_exception import ApiV1ConstApLedStatus403ErrorException
from mistapi.exceptions.api_v_1_const_ap_led_status_404_error_exception import ApiV1ConstApLedStatus404ErrorException
from mistapi.exceptions.api_v_1_const_applications_401_error_exception import ApiV1ConstApplications401ErrorException
from mistapi.exceptions.api_v_1_const_applications_403_error_exception import ApiV1ConstApplications403ErrorException
from mistapi.exceptions.api_v_1_const_applications_404_error_exception import ApiV1ConstApplications404ErrorException
from mistapi.exceptions.api_v_1_const_call_events_401_error_exception import ApiV1ConstCallEvents401ErrorException
from mistapi.exceptions.api_v_1_const_call_events_403_error_exception import ApiV1ConstCallEvents403ErrorException
from mistapi.exceptions.api_v_1_const_call_events_404_error_exception import ApiV1ConstCallEvents404ErrorException
from mistapi.exceptions.api_v_1_const_client_events_401_error_exception import ApiV1ConstClientEvents401ErrorException
from mistapi.exceptions.api_v_1_const_client_events_403_error_exception import ApiV1ConstClientEvents403ErrorException
from mistapi.exceptions.api_v_1_const_client_events_404_error_exception import ApiV1ConstClientEvents404ErrorException
from mistapi.exceptions.api_v_1_const_countries_401_error_exception import ApiV1ConstCountries401ErrorException
from mistapi.exceptions.api_v_1_const_countries_403_error_exception import ApiV1ConstCountries403ErrorException
from mistapi.exceptions.api_v_1_const_countries_404_error_exception import ApiV1ConstCountries404ErrorException
from mistapi.exceptions.api_v_1_const_default_gateway_config_401_error_exception import ApiV1ConstDefaultGatewayConfig401ErrorException
from mistapi.exceptions.api_v_1_const_default_gateway_config_403_error_exception import ApiV1ConstDefaultGatewayConfig403ErrorException
from mistapi.exceptions.api_v_1_const_default_gateway_config_404_error_exception import ApiV1ConstDefaultGatewayConfig404ErrorException
from mistapi.exceptions.api_v_1_const_device_events_401_error_exception import ApiV1ConstDeviceEvents401ErrorException
from mistapi.exceptions.api_v_1_const_device_events_403_error_exception import ApiV1ConstDeviceEvents403ErrorException
from mistapi.exceptions.api_v_1_const_device_events_404_error_exception import ApiV1ConstDeviceEvents404ErrorException
from mistapi.exceptions.api_v_1_const_device_models_401_error_exception import ApiV1ConstDeviceModels401ErrorException
from mistapi.exceptions.api_v_1_const_device_models_403_error_exception import ApiV1ConstDeviceModels403ErrorException
from mistapi.exceptions.api_v_1_const_device_models_404_error_exception import ApiV1ConstDeviceModels404ErrorException
from mistapi.exceptions.api_v_1_const_insight_metrics_401_error_exception import ApiV1ConstInsightMetrics401ErrorException
from mistapi.exceptions.api_v_1_const_insight_metrics_403_error_exception import ApiV1ConstInsightMetrics403ErrorException
from mistapi.exceptions.api_v_1_const_insight_metrics_404_error_exception import ApiV1ConstInsightMetrics404ErrorException
from mistapi.exceptions.api_v_1_const_languages_401_error_exception import ApiV1ConstLanguages401ErrorException
from mistapi.exceptions.api_v_1_const_languages_403_error_exception import ApiV1ConstLanguages403ErrorException
from mistapi.exceptions.api_v_1_const_languages_404_error_exception import ApiV1ConstLanguages404ErrorException
from mistapi.exceptions.api_v_1_const_license_types_401_error_exception import ApiV1ConstLicenseTypes401ErrorException
from mistapi.exceptions.api_v_1_const_license_types_403_error_exception import ApiV1ConstLicenseTypes403ErrorException
from mistapi.exceptions.api_v_1_const_license_types_404_error_exception import ApiV1ConstLicenseTypes404ErrorException
from mistapi.exceptions.api_v_1_const_mxedge_events_401_error_exception import ApiV1ConstMxedgeEvents401ErrorException
from mistapi.exceptions.api_v_1_const_mxedge_events_403_error_exception import ApiV1ConstMxedgeEvents403ErrorException
from mistapi.exceptions.api_v_1_const_mxedge_events_404_error_exception import ApiV1ConstMxedgeEvents404ErrorException
from mistapi.exceptions.api_v_1_const_mxedge_models_401_error_exception import ApiV1ConstMxedgeModels401ErrorException
from mistapi.exceptions.api_v_1_const_mxedge_models_403_error_exception import ApiV1ConstMxedgeModels403ErrorException
from mistapi.exceptions.api_v_1_const_mxedge_models_404_error_exception import ApiV1ConstMxedgeModels404ErrorException
from mistapi.exceptions.api_v_1_const_other_device_events_401_error_exception import ApiV1ConstOtherDeviceEvents401ErrorException
from mistapi.exceptions.api_v_1_const_other_device_events_403_error_exception import ApiV1ConstOtherDeviceEvents403ErrorException
from mistapi.exceptions.api_v_1_const_other_device_events_404_error_exception import ApiV1ConstOtherDeviceEvents404ErrorException
from mistapi.exceptions.api_v_1_const_traffic_types_401_error_exception import ApiV1ConstTrafficTypes401ErrorException
from mistapi.exceptions.api_v_1_const_traffic_types_403_error_exception import ApiV1ConstTrafficTypes403ErrorException
from mistapi.exceptions.api_v_1_const_traffic_types_404_error_exception import ApiV1ConstTrafficTypes404ErrorException


class ConstantsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(ConstantsController, self).__init__(config)

    def list_alarm_definitions(self):
        """Does a GET request to /api/v1/const/alarm_defs.

        Get List of brief definitions of all the supported alarm types.  The
        example field contains an example payload as you would recieve in the
        alarm webhook output.

        Returns:
            list of ApiV1ConstAlarmDefsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/alarm_defs')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstAlarmDefsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstAlarmDefs401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstAlarmDefs403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstAlarmDefs404ErrorException)
        ).execute()

    def list_ap_channels(self,
                         country_code=None):
        """Does a GET request to /api/v1/const/ap_channels.

        Get List of List of Available channels per country code

        Args:
            country_code (string, optional): country code, in two-character

        Returns:
            ApiV1ConstApChannelsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/ap_channels')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('country_code')
                         .value(country_code))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstApChannelsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstApChannels401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstApChannels403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstApChannels404ErrorException)
        ).execute()

    def list_ap_led_definition(self):
        """Does a GET request to /api/v1/const/ap_led_status.

        Get List of AP LED definition

        Returns:
            list of ApiV1ConstApLedStatusResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/ap_led_status')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstApLedStatusResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstApLedStatus401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstApLedStatus403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstApLedStatus404ErrorException)
        ).execute()

    def list_applications(self):
        """Does a GET request to /api/v1/const/applications.

        Get List of a list of applications that Juniper-Mist APs recognize

        Returns:
            list of ConstApplication: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/applications')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ConstApplication.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstApplications401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstApplications403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstApplications404ErrorException)
        ).execute()

    def list_call_events_definitions(self):
        """Does a GET request to /api/v1/const/call_events.

        Get List of Call Event Definitions

        Returns:
            list of ApiV1ConstCallEventsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/call_events')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstCallEventsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstCallEvents401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstCallEvents403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstCallEvents404ErrorException)
        ).execute()

    def list_client_events_definitions(self):
        """Does a GET request to /api/v1/const/client_events.

        Get List of List of available Client Events

        Returns:
            list of ApiV1ConstClientEventsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/client_events')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstClientEventsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstClientEvents401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstClientEvents403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstClientEvents404ErrorException)
        ).execute()

    def list_country_codes(self):
        """Does a GET request to /api/v1/const/countries.

        Get List of List of available Country Codes

        Returns:
            list of ApiV1ConstCountriesResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/countries')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstCountriesResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstCountries401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstCountries403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstCountries404ErrorException)
        ).execute()

    def get_gataway_default_config(self,
                                   model=None,
                                   ha=None):
        """Does a GET request to /api/v1/const/default_gateway_config.

        Generate Default Gateway Config

        Args:
            model (string, optional): model the default gateway config is
                intended (as the default LAN/WAN port can differ)
            ha (string, optional): whether the config is intended for HA

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/default_gateway_config')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('model')
                         .value(model))
            .query_param(Parameter()
                         .key('ha')
                         .value(ha))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstDefaultGatewayConfig401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstDefaultGatewayConfig403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstDefaultGatewayConfig404ErrorException)
        ).execute()

    def list_device_events_definitions(self):
        """Does a GET request to /api/v1/const/device_events.

        Get list of available Device Events

        Returns:
            list of ApiV1ConstDeviceEventsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/device_events')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstDeviceEventsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstDeviceEvents401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstDeviceEvents403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstDeviceEvents404ErrorException)
        ).execute()

    def list_device_models(self):
        """Does a GET request to /api/v1/const/device_models.

        Get list of AP device models for the Mist Site

        Returns:
            list of ConstDeviceModel: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/device_models')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ConstDeviceModel.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstDeviceModels401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstDeviceModels403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstDeviceModels404ErrorException)
        ).execute()

    def list_insight_metrics(self):
        """Does a GET request to /api/v1/const/insight_metrics.

        List Insight Metrics

        Returns:
            dict: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/insight_metrics')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstInsightMetricsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstInsightMetrics401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstInsightMetrics403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstInsightMetrics404ErrorException)
        ).execute()

    def list_site_languages(self):
        """Does a GET request to /api/v1/const/languages.

        Get List of Languages

        Returns:
            list of ApiV1ConstLanguagesResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/languages')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstLanguagesResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstLanguages401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstLanguages403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstLanguages404ErrorException)
        ).execute()

    def get_license_types(self):
        """Does a GET request to /api/v1/const/license_types.

        Get License Types

        Returns:
            list of ApiV1ConstLicenseTypesResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/license_types')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstLicenseTypesResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstLicenseTypes401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstLicenseTypes403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstLicenseTypes404ErrorException)
        ).execute()

    def list_mx_edge_events_definitions(self):
        """Does a GET request to /api/v1/const/mxedge_events.

        Get List of available MX Edge Events

        Returns:
            list of ApiV1ConstMxedgeEventsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/mxedge_events')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstMxedgeEventsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstMxedgeEvents401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstMxedgeEvents403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstMxedgeEvents404ErrorException)
        ).execute()

    def list_mx_edge_models(self):
        """Does a GET request to /api/v1/const/mxedge_models.

        Get List of available Mx Edge models

        Returns:
            list of ApiV1ConstMxedgeModelsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/mxedge_models')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstMxedgeModelsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstMxedgeModels401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstMxedgeModels403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstMxedgeModels404ErrorException)
        ).execute()

    def list_other_device_events_definitions(self):
        """Does a GET request to /api/v1/const/other_device_events.

        Supported Events Type

        Returns:
            list of ApiV1ConstOtherDeviceEventsResponse: Response from the
                API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/other_device_events')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstOtherDeviceEventsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstOtherDeviceEvents401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstOtherDeviceEvents403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstOtherDeviceEvents404ErrorException)
        ).execute()

    def list_traffic_types(self):
        """Does a GET request to /api/v1/const/traffic_types.

        Get List of identified traffic

        Returns:
            list of ApiV1ConstTrafficTypesResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/const/traffic_types')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1ConstTrafficTypesResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1ConstTrafficTypes401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1ConstTrafficTypes403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1ConstTrafficTypes404ErrorException)
        ).execute()
