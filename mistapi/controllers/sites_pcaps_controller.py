# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.pcaps_search import PcapsSearch
from mistapi.models.pcap_status import PcapStatus
from mistapi.models.pcap_start import PcapStart
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_pcaps_401_error_exception import ApiV1SitesPcaps401ErrorException
from mistapi.exceptions.api_v_1_sites_pcaps_403_error_exception import ApiV1SitesPcaps403ErrorException
from mistapi.exceptions.api_v_1_sites_pcaps_404_error_exception import ApiV1SitesPcaps404ErrorException
from mistapi.exceptions.api_v_1_sites_pcaps_capture_401_error_exception import ApiV1SitesPcapsCapture401ErrorException
from mistapi.exceptions.api_v_1_sites_pcaps_capture_403_error_exception import ApiV1SitesPcapsCapture403ErrorException
from mistapi.exceptions.api_v_1_sites_pcaps_capture_404_error_exception import ApiV1SitesPcapsCapture404ErrorException


class SitesPcapsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesPcapsController, self).__init__(config)

    def list_site_packet_captures(self,
                                  site_id,
                                  page=1,
                                  limit=100,
                                  start=0,
                                  end=0,
                                  duration='1d',
                                  client_mac=None):
        """Does a GET request to /api/v1/sites/{site_id}/pcaps.

        Get List of Site Packet Captures

        Args:
            site_id (uuid|string): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            client_mac (string, optional): optional client mac filter

        Returns:
            PcapsSearch: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/pcaps')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('client_mac')
                         .value(client_mac))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PcapsSearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesPcaps401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesPcaps403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesPcaps404ErrorException)
        ).execute()

    def stop_site_packet_capture(self,
                                 site_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/pcaps/capture.

        Stop current capture

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/pcaps/capture')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesPcapsCapture401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesPcapsCapture403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesPcapsCapture404ErrorException)
        ).execute()

    def get_site_capturing_status(self,
                                  site_id):
        """Does a GET request to /api/v1/sites/{site_id}/pcaps/capture.

        Get Capturing status

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            PcapStatus: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/pcaps/capture')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PcapStatus.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesPcapsCapture401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesPcapsCapture403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesPcapsCapture404ErrorException)
        ).execute()

    def start_site_packet_capture(self,
                                  site_id,
                                  body=None):
        """Does a POST request to /api/v1/sites/{site_id}/pcaps/capture.

        Initiate a Packet Capture
        The output will be available through websocket. As there can be
        multiple command issued against the same AP at the same time and the
        output all goes through the same websocket stream, session is
        introduced for demux.
        #### Subscribe to Device Command outputs
        `WS /api-ws/v1/stream`
        ```json
        {
            subscribe: "/sites/{site_id}/pcaps"
        }
        ```
        #### Response (Wireless/RadioTap)
        ```json
        {
            "event": "data"
            "channel": "/sites/:site_id/pcaps"
            "data": {
                 "capture_id": "6b1be4fb-b239-44d9-9d3b-cb1ff3af1721",
             "lost_messages": 0
                 "pcap_dict": {
                     "channel_frequency": 2412,
                     "channel": "1",
                     "datarate": "1.0 Mbps",
                     "rssi": -75, 
                     "dst": "78:bd:bc:ca:0b:0a",
                     "src": "18:b8:1f:4c:91:c0",
                     "bssid": "18:b8:1f:4c:91:c0",
                     "frame_type": "Management", 
                     "frame_subtype": "Probe Response", 
                 "proto": "802.11", 
                     "ap_mac": "d4:20:b0:81:99:2e", 
                     "direction": "tx", 
                     "timestamp": 1652246543, 
                     "length": 416.0,
                     "interface": "radiotap",
                     "info": "1652246544.467733 1683216786us tsft 1.0 Mb/s
                     2412 MHz 11g -75dBm signal -82dBm noise antenna 0 Probe
                     Response (ATTKmsWiVS) [1.0* 2.0* 5.5* 11.0* 18.0 24.0
                     36.0 54.0 Mbit] CH: 2, PRIVACY\\n",
                 }, 
                "pcap_raw":
                "1MOyoQIABAAAAAAAAAAAAP//AAABAAAAEEh7Yh5VBwCgAQAAoAEAAAAAKwBvCA
                DAAQAAAIw7reCS2VNkAAAAABACbAmABLWuAAEAEBgAAwACAABQADoBeL28ygsKG
                LgfTJHAGLgfTJHAcIZ2WDlBJQAAAGQAERUACkFUVEttc1dpVlMBCIKEi5YkMEhs
                AwECBwZVUyABCx4gAQAjAhkAKgEEMgQMEhhgMBQBAAAPrAQBAAAPrAQBAAAPrAI
                MAAsFAQAbAABGBTIIAQAALRqtCR////8AAAAAAAAAAAAAAAAAAAAAAAAAAD0WAg
                gVAAAAAAAAAAAAAAAAAAAAAAAAAH8IBAAIAAAAAEDdkwBQ8gQQSgABEBBEAAECE
                DsAAQMQRwAQn2481frn3KT+uGod2ERx+RAhAAtBcnJpcywgSW5jLhAjAApCR1cy
                MTAtNzAwECQACkJHVzIxMC03MDAQQgAKQkdXMjEwLTcwMBBUAAgABgBQ8gQAARA
                RAA5BcnJpcyBXaXJlbGVzcxAIAAIgCBA8AAEBEEkABgA3KgABIN0JABAYAgEQHA
                AA3RgAUPICAQGEAAOkAAAnpAAAQkNeAGIyLwAzjakr"
        }
        ```
        #### vResponse (Wired)
        ```json
        {
            "event": "data"
            "channel": "/sites/67970e46-4e12-11e6-9188-0242ac110007/pcaps"
            "data": {
                "capture_id": "f039b1b4-a23e-48b2-906a-0da40524de73", 
                "pcap_dict": {
                     "dst_mac": "68:ec:c5:09:2e:87",
                     "src_mac": "8c:3b:ad:e0:47:40", 
                     "vlan": 1, 
                     "src_ip": "34.224.147.117", 
                     "dst_ip": "192.168.1.55",
                     "dst_port": 51635, 
                     "src_port": 443,
                     "proto": "TCP", 
                     "ap_mac": "d4:20:b0:81:99:2e",
                     "direction": "tx", 
                     "timestamp": 1652247615, 
                     "length": 159.0, 
                     "interface": "wired",
                     "info": "1652247616.007409 IP
                     ec2-34-224-147-117.compute-1.amazonaws.com.https >
                     ip-192-168-1-55.ec2.internal.51635: Flags [P.], seq
                     2192123968:2192124057, ack 4035166782, win 12, options
                     [nop,nop,TS val 597467050 ecr 740580660], length 89\\n",
                     }, 
                "pcap_raw":
                "1MOyoQIABAAAAAAAAAAAAP//AAABAAAAQEx7YhMzAACfAAAAnwAAAGjsxQkuh4
                w7reBHQIEAAAEIAEUAAI1bLEAAKAZ/CiLgk3XAqAE3AbvJs4KpKEDwg8I+gBgAD
                Ff9AAABAQgKI5yfqiwkXTQXAwMAVKY5JopoKQrVEn0/3ld4YntctGEH/rTZuwtC
                vzSncFw71QJveJi9uxHs57KC8w9Apph3YvXJrmWg7M37+o+YV0KH/xmr626s5Bk
                hb3QhKOu+NoNEmA=="
            }
        }
        ```
        #### Stop Response (Wired/Wireless)
        ```json
        {
            "event": "data"
            "channel": "/sites/67970e46-4e12-11e6-9188-0242ac110007/pcaps"
            "data": {
              "capture_id": "a2f7374d-6a70-41fd-8a3f-71e42573baaf", 
              "lost_messages": 0,
              "pcap_dict": null
            }
        }
        ```

        Args:
            site_id (uuid|string): TODO: type description here.
            body (Capture, optional): Request Body

        Returns:
            PcapStart: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/pcaps/capture')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PcapStart.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesPcapsCapture401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesPcapsCapture403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesPcapsCapture404ErrorException)
        ).execute()

    def update_site_packet_capture(self,
                                   site_id,
                                   pcap_id,
                                   body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/pcaps/{pcap_id}.

        Update or add notes to a completed packet capture

        Args:
            site_id (uuid|string): TODO: type description here.
            pcap_id (uuid|string): TODO: type description here.
            body (ApiV1SitesPcapsRequest, optional): TODO: type description
                here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/pcaps/{pcap_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('pcap_id')
                            .value(pcap_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesPcaps401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesPcaps403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesPcaps404ErrorException)
        ).execute()
