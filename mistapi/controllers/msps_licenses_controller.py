# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.claim_license import ClaimLicense
from mistapi.models.license import License
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_msps_claim_401_error_exception import ApiV1MspsClaim401ErrorException
from mistapi.exceptions.api_v_1_msps_claim_403_error_exception import ApiV1MspsClaim403ErrorException
from mistapi.exceptions.api_v_1_msps_claim_404_error_exception import ApiV1MspsClaim404ErrorException
from mistapi.exceptions.api_v_1_msps_licenses_401_error_exception import ApiV1MspsLicenses401ErrorException
from mistapi.exceptions.api_v_1_msps_licenses_403_error_exception import ApiV1MspsLicenses403ErrorException
from mistapi.exceptions.api_v_1_msps_licenses_404_error_exception import ApiV1MspsLicenses404ErrorException


class MspsLicensesController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(MspsLicensesController, self).__init__(config)

    def claim_msp_licence(self,
                          msp_id,
                          body=None):
        """Does a POST request to /api/v1/msps/{msp_id}/claim.

        Claim an Order by Activation Code

        Args:
            msp_id (uuid|string): TODO: type description here.
            body (ApiV1MspsClaimRequest, optional): TODO: type description
                here.

        Returns:
            ClaimLicense: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/claim')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClaimLicense.from_dictionary)
            .local_error('400', 'Response when the key is invalid (or already used)', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsClaim401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsClaim403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsClaim404ErrorException)
        ).execute()

    def list_msp_licenses(self,
                          msp_id):
        """Does a GET request to /api/v1/msps/{msp_id}/licenses.

        Get List of Msp Licenses

        Args:
            msp_id (uuid|string): TODO: type description here.

        Returns:
            License: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/licenses')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(License.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsLicenses401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsLicenses403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsLicenses404ErrorException)
        ).execute()

    def move_or_delete_msp_license_to_another_org(self,
                                                  msp_id,
                                                  body=None):
        """Does a PUT request to /api/v1/msps/{msp_id}/licenses.

        Move or Delete MSP Licenses

        Args:
            msp_id (uuid|string): TODO: type description here.
            body (ApiV1MspsLicensesRequest, optional): TODO: type description
                here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/licenses')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsLicenses401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsLicenses403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsLicenses404ErrorException)
        ).execute()
