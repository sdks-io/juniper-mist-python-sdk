# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.sso import Sso
from mistapi.models.sso_latest_failures import SsoLatestFailures
from mistapi.models.sso_saml_metadata import SsoSamlMetadata
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_msps_ssos_401_error_exception import ApiV1MspsSsos401ErrorException
from mistapi.exceptions.api_v_1_msps_ssos_403_error_exception import ApiV1MspsSsos403ErrorException
from mistapi.exceptions.api_v_1_msps_ssos_404_error_exception import ApiV1MspsSsos404ErrorException
from mistapi.exceptions.api_v_1_msps_ssos_failures_401_error_exception import ApiV1MspsSsosFailures401ErrorException
from mistapi.exceptions.api_v_1_msps_ssos_failures_403_error_exception import ApiV1MspsSsosFailures403ErrorException
from mistapi.exceptions.api_v_1_msps_ssos_failures_404_error_exception import ApiV1MspsSsosFailures404ErrorException
from mistapi.exceptions.api_v_1_msps_ssos_metadata_401_error_exception import ApiV1MspsSsosMetadata401ErrorException
from mistapi.exceptions.api_v_1_msps_ssos_metadata_403_error_exception import ApiV1MspsSsosMetadata403ErrorException
from mistapi.exceptions.api_v_1_msps_ssos_metadata_404_error_exception import ApiV1MspsSsosMetadata404ErrorException
from mistapi.exceptions.api_v_1_msps_ssos_metadata_xml_401_error_exception import ApiV1MspsSsosMetadataXml401ErrorException
from mistapi.exceptions.api_v_1_msps_ssos_metadata_xml_403_error_exception import ApiV1MspsSsosMetadataXml403ErrorException
from mistapi.exceptions.api_v_1_msps_ssos_metadata_xml_404_error_exception import ApiV1MspsSsosMetadataXml404ErrorException


class MspsSSOController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(MspsSSOController, self).__init__(config)

    def list_msp_ssos(self,
                      msp_id):
        """Does a GET request to /api/v1/msps/{msp_id}/ssos.

        List MSP SSO Configs

        Args:
            msp_id (uuid|string): TODO: type description here.

        Returns:
            list of Sso: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/ssos')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Sso.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsSsos401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsSsos403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsSsos404ErrorException)
        ).execute()

    def create_msp_sso(self,
                       msp_id,
                       body=None):
        """Does a POST request to /api/v1/msps/{msp_id}/ssos.

        Create MSP SSO profile

        Args:
            msp_id (uuid|string): TODO: type description here.
            body (Sso, optional): Request Body

        Returns:
            Sso: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/ssos')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Sso.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsSsos401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsSsos403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsSsos404ErrorException)
        ).execute()

    def delete_msp_sso(self,
                       msp_id,
                       sso_id):
        """Does a DELETE request to /api/v1/msps/{msp_id}/ssos/{sso_id}.

        Delete MSP SSO Config

        Args:
            msp_id (uuid|string): TODO: type description here.
            sso_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/ssos/{sso_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('sso_id')
                            .value(sso_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsSsos401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsSsos403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsSsos404ErrorException)
        ).execute()

    def get_msp_sso(self,
                    msp_id,
                    sso_id):
        """Does a GET request to /api/v1/msps/{msp_id}/ssos/{sso_id}.

        Get MSP SSO Config

        Args:
            msp_id (uuid|string): TODO: type description here.
            sso_id (uuid|string): TODO: type description here.

        Returns:
            Sso: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/ssos/{sso_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('sso_id')
                            .value(sso_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Sso.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsSsos401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsSsos403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsSsos404ErrorException)
        ).execute()

    def update_msp_sso(self,
                       msp_id,
                       sso_id,
                       body=None):
        """Does a PUT request to /api/v1/msps/{msp_id}/ssos/{sso_id}.

        Update MSP SSO config

        Args:
            msp_id (uuid|string): TODO: type description here.
            sso_id (uuid|string): TODO: type description here.
            body (Sso, optional): Request Body

        Returns:
            Sso: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/ssos/{sso_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('sso_id')
                            .value(sso_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Sso.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsSsos401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsSsos403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsSsos404ErrorException)
        ).execute()

    def list_msp_sso_latest_failures(self,
                                     msp_id,
                                     sso_id):
        """Does a GET request to /api/v1/msps/{msp_id}/ssos/{sso_id}/failures.

        Get List of MSP SSO Latest Failures

        Args:
            msp_id (uuid|string): TODO: type description here.
            sso_id (uuid|string): TODO: type description here.

        Returns:
            SsoLatestFailures: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/ssos/{sso_id}/failures')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('sso_id')
                            .value(sso_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SsoLatestFailures.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsSsosFailures401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsSsosFailures403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsSsosFailures404ErrorException)
        ).execute()

    def get_msp_sso_saml_metadata(self,
                                  msp_id,
                                  sso_id):
        """Does a GET request to /api/v1/msps/{msp_id}/ssos/{sso_id}/metadata.

        Get MSP SSO SAML Metadata

        Args:
            msp_id (uuid|string): TODO: type description here.
            sso_id (uuid|string): TODO: type description here.

        Returns:
            SsoSamlMetadata: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/ssos/{sso_id}/metadata')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('sso_id')
                            .value(sso_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SsoSamlMetadata.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsSsosMetadata401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsSsosMetadata403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsSsosMetadata404ErrorException)
        ).execute()

    def download_msp_sso_saml_metadata(self,
                                       msp_id,
                                       sso_id):
        """Does a GET request to /api/v1/msps/{msp_id}/ssos/{sso_id}/metadata.xml.

        Download MSP SSO SAML Metadata
        Example of metadata.xml:
        ```xml
        <?xml version="1.0" encoding="UTF-8"?><md:EntityDescriptor
        xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata"
        entityID="https://api.mist.com/api/v1/saml/5hdF5g/login"
        validUntil="2027-10-12T21:59:01Z"
        xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
            <md:SPSSODescriptor AuthnRequestsSigned="false"
            WantAssertionsSigned="true"
            protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
                            <md:SingleLogoutService
                Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
                Location="https://api.mist.com/api/v1/saml/5hdF5g/logout" />
                <md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unsp
                ecified</md:NameIDFormat>
                <md:AssertionConsumerService
                Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
                Location="https://api.mist.com/api/v1/saml/5hdF5g/login"
                index="0" isDefault="true"/>
                <md:AttributeConsumingService index="0">
                    <md:ServiceName xml:lang="en-US">Mist</md:ServiceName>
                    <md:RequestedAttribute Name="Role"
                    NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:bas
                    ic" isRequired="true"/>
                    <md:RequestedAttribute Name="FirstName"
                    NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:bas
                    ic" isRequired="false"/>
                    <md:RequestedAttribute Name="LastName"
                    NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:bas
                    ic" isRequired="false"/>
                </md:AttributeConsumingService>
            </md:SPSSODescriptor>
        </md:EntityDescriptor>
        ```

        Args:
            msp_id (uuid|string): TODO: type description here.
            sso_id (uuid|string): TODO: type description here.

        Returns:
            string: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/ssos/{sso_id}/metadata.xml')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('sso_id')
                            .value(sso_id)
                            .should_encode(True))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsSsosMetadataXml401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsSsosMetadataXml403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsSsosMetadataXml404ErrorException)
        ).execute()
