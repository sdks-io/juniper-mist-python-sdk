# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.events_fastroam import EventsFastroam
from mistapi.models.events_interference import EventsInterference
from mistapi.models.count import Count
from mistapi.models.devices_events_search import DevicesEventsSearch
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_events_fast_roam_401_error_exception import ApiV1SitesEventsFastRoam401ErrorException
from mistapi.exceptions.api_v_1_sites_events_fast_roam_403_error_exception import ApiV1SitesEventsFastRoam403ErrorException
from mistapi.exceptions.api_v_1_sites_events_fast_roam_404_error_exception import ApiV1SitesEventsFastRoam404ErrorException
from mistapi.exceptions.api_v_1_sites_events_interference_401_error_exception import ApiV1SitesEventsInterference401ErrorException
from mistapi.exceptions.api_v_1_sites_events_interference_403_error_exception import ApiV1SitesEventsInterference403ErrorException
from mistapi.exceptions.api_v_1_sites_events_interference_404_error_exception import ApiV1SitesEventsInterference404ErrorException
from mistapi.exceptions.api_v_1_sites_events_system_count_401_error_exception import ApiV1SitesEventsSystemCount401ErrorException
from mistapi.exceptions.api_v_1_sites_events_system_count_403_error_exception import ApiV1SitesEventsSystemCount403ErrorException
from mistapi.exceptions.api_v_1_sites_events_system_count_404_error_exception import ApiV1SitesEventsSystemCount404ErrorException
from mistapi.exceptions.api_v_1_sites_events_system_search_401_error_exception import ApiV1SitesEventsSystemSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_events_system_search_403_error_exception import ApiV1SitesEventsSystemSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_events_system_search_404_error_exception import ApiV1SitesEventsSystemSearch404ErrorException


class SitesEventsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesEventsController, self).__init__(config)

    def get_site_roaming_events(self,
                                site_id,
                                mtype=None,
                                page=1,
                                limit=100,
                                start=0,
                                end=0,
                                duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/events/fast_roam.

        Get Roaming Events data

        Args:
            site_id (uuid|string): TODO: type description here.
            mtype (Type55Enum, optional): event type
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            EventsFastroam: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/events/fast_roam')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(EventsFastroam.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesEventsFastRoam401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesEventsFastRoam403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesEventsFastRoam404ErrorException)
        ).execute()

    def get_site_interference_events(self,
                                     site_id,
                                     page=1,
                                     limit=100,
                                     start=0,
                                     end=0,
                                     duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/events/interference.

        Get Interference Events

        Args:
            site_id (uuid|string): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            EventsInterference: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/events/interference')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(EventsInterference.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesEventsInterference401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesEventsInterference403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesEventsInterference404ErrorException)
        ).execute()

    def count_site_system_events(self,
                                 site_id,
                                 distinct='type',
                                 page=1,
                                 limit=100,
                                 start=0,
                                 end=0,
                                 duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/events/system/count.

        Count System Events

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct11Enum, optional): TODO: type description here.
                Example: type
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            Count: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/events/system/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Count.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesEventsSystemCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesEventsSystemCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesEventsSystemCount404ErrorException)
        ).execute()

    def search_site_system_events(self,
                                  site_id,
                                  mtype=None,
                                  limit=100,
                                  start=0,
                                  end=0,
                                  duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/events/system/search.

        Search System Events

        Args:
            site_id (uuid|string): TODO: type description here.
            mtype (string, optional): TODO: type description here.
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            DevicesEventsSearch: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/events/system/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DevicesEventsSearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesEventsSystemSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesEventsSystemSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesEventsSystemSearch404ErrorException)
        ).execute()
