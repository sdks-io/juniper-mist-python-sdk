# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.sle_classifier_summary import SleClassifierSummary
from mistapi.models.sle_histogram import SleHistogram
from mistapi.models.sle_impact_summary import SleImpactSummary
from mistapi.models.sle_impacted_applications import SleImpactedApplications
from mistapi.models.sle_impacted_aps import SleImpactedAps
from mistapi.models.sle_impacted_chassis import SleImpactedChassis
from mistapi.models.sle_impacted_clients import SleImpactedClients
from mistapi.models.sle_impacted_gateways import SleImpactedGateways
from mistapi.models.sle_impacted_interfaces import SleImpactedInterfaces
from mistapi.models.sle_impacted_switches import SleImpactedSwitches
from mistapi.models.sle_impacted_users import SleImpactedUsers
from mistapi.models.sle_summary import SleSummary
from mistapi.models.sle_threshold import SleThreshold
from mistapi.models.api_v_1_sites_sle_scope_id_metrics_response import ApiV1SitesSleScopeIdMetricsResponse
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_classifier_classifier_summary_401_error_exception import ApiV1SitesSleScopeIdMetricMetricClassifierClassifierSummary401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_classifier_classifier_summary_403_error_exception import ApiV1SitesSleScopeIdMetricMetricClassifierClassifierSummary403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_classifier_classifier_summary_404_error_exception import ApiV1SitesSleScopeIdMetricMetricClassifierClassifierSummary404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_classifiers_401_error_exception import ApiV1SitesSleScopeIdMetricMetricClassifiers401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_classifiers_403_error_exception import ApiV1SitesSleScopeIdMetricMetricClassifiers403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_classifiers_404_error_exception import ApiV1SitesSleScopeIdMetricMetricClassifiers404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_histogram_401_error_exception import ApiV1SitesSleScopeIdMetricMetricHistogram401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_histogram_403_error_exception import ApiV1SitesSleScopeIdMetricMetricHistogram403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_histogram_404_error_exception import ApiV1SitesSleScopeIdMetricMetricHistogram404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impact_summary_401_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactSummary401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impact_summary_403_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactSummary403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impact_summary_404_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactSummary404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_applications_401_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedApplications401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_applications_403_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedApplications403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_applications_404_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedApplications404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_aps_401_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedAps401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_aps_403_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedAps403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_aps_404_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedAps404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_chassis_401_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedChassis401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_chassis_403_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedChassis403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_chassis_404_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedChassis404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_clients_401_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedClients401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_clients_403_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedClients403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_clients_404_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedClients404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_gateways_401_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedGateways401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_gateways_403_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedGateways403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_gateways_404_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedGateways404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_interfaces_401_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedInterfaces401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_interfaces_403_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedInterfaces403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_interfaces_404_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedInterfaces404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_switches_401_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedSwitches401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_switches_403_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedSwitches403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_switches_404_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedSwitches404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_users_401_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedUsers401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_users_403_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedUsers403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_impacted_users_404_error_exception import ApiV1SitesSleScopeIdMetricMetricImpactedUsers404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_summary_401_error_exception import ApiV1SitesSleScopeIdMetricMetricSummary401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_summary_403_error_exception import ApiV1SitesSleScopeIdMetricMetricSummary403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_summary_404_error_exception import ApiV1SitesSleScopeIdMetricMetricSummary404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_threshold_401_error_exception import ApiV1SitesSleScopeIdMetricMetricThreshold401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_threshold_403_error_exception import ApiV1SitesSleScopeIdMetricMetricThreshold403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metric_metric_threshold_404_error_exception import ApiV1SitesSleScopeIdMetricMetricThreshold404ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metrics_401_error_exception import ApiV1SitesSleScopeIdMetrics401ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metrics_403_error_exception import ApiV1SitesSleScopeIdMetrics403ErrorException
from mistapi.exceptions.api_v_1_sites_sle_scope_id_metrics_404_error_exception import ApiV1SitesSleScopeIdMetrics404ErrorException


class SitesSLEsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesSLEsController, self).__init__(config)

    def get_site_sle_classifier_details(self,
                                        site_id,
                                        scope,
                                        scope_id,
                                        metric,
                                        classifier,
                                        start=0,
                                        end=0,
                                        duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/classifier/{classifier}/summary.

        Get SLE classifier details

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope2Enum): TODO: type description here.
            scope_id (string): * site_id if `scope`==`site` * device_id if
                `scope`==`ap`, `scope`==`switch` or `scope`==`gateway` * mac
                if `scope`==`client`
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            classifier (string): TODO: type description here.
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            SleClassifierSummary: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/classifier/{classifier}/summary')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('classifier')
                            .value(classifier)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleClassifierSummary.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricClassifierClassifierSummary401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricClassifierClassifierSummary403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricClassifierClassifierSummary404ErrorException)
        ).execute()

    def get_site_sle_metric_classifiers(self,
                                        site_id,
                                        scope,
                                        scope_id,
                                        metric):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/classifiers.

        Get the list of classifiers for a specific metric

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope2Enum): TODO: type description here.
            scope_id (string): * site_id if `scope`==`site` * device_id if
                `scope`==`ap`, `scope`==`switch` or `scope`==`gateway` * mac
                if `scope`==`client`
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics

        Returns:
            list of string: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/classifiers')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricClassifiers401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricClassifiers403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricClassifiers404ErrorException)
        ).execute()

    def get_site_sle_histogram(self,
                               site_id,
                               scope,
                               scope_id,
                               metric,
                               start=0,
                               end=0,
                               duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/histogram.

        Get the histogram for the SLE metric

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope2Enum): TODO: type description here.
            scope_id (string): * site_id if `scope`==`site` * device_id if
                `scope`==`ap`, `scope`==`switch` or `scope`==`gateway` * mac
                if `scope`==`client`
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            SleHistogram: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/histogram')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleHistogram.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricHistogram401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricHistogram403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricHistogram404ErrorException)
        ).execute()

    def get_site_sle_impact_summary(self,
                                    site_id,
                                    scope,
                                    scope_id,
                                    metric,
                                    start=0,
                                    end=0,
                                    duration='1d',
                                    fields=None,
                                    classifier=None):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impact-summary.

        Get impact summary counts optionally filtered by classifier and
        failure type
         
        * Wireless SLE Fields: `wlan`, `device_type`, `device_os` ,`band`,
        `ap`, `server`, `mxedge`
        * Wired SLE Fields: `switch`, `client`, `vlan`, `interface`,
        `chassis`
        * WAN SLE Fields: `gateway`, `client`, `interface`, `chassis`,
        `peer_path`, `gateway_zones`

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope2Enum): TODO: type description here.
            scope_id (string): * site_id if `scope`==`site` * device_id if
                `scope`==`ap`, `scope`==`switch` or `scope`==`gateway` * mac
                if `scope`==`client`
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            fields (FieldsEnum, optional): TODO: type description here.
            classifier (string, optional): TODO: type description here.

        Returns:
            SleImpactSummary: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impact-summary')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('classifier')
                         .value(classifier))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleImpactSummary.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricImpactSummary401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricImpactSummary403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricImpactSummary404ErrorException)
        ).execute()

    def get_site_sle_impacted_applications(self,
                                           site_id,
                                           scope,
                                           scope_id,
                                           metric,
                                           start=0,
                                           end=0,
                                           duration='1d',
                                           classifier=None):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-applications.

        For WAN SLEs. Get list of impacted interfaces optionally filtered by
        classifier and failure type

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope6Enum): TODO: type description here.
            scope_id (uuid|string): TODO: type description here.
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            classifier (string, optional): TODO: type description here.

        Returns:
            SleImpactedApplications: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-applications')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('classifier')
                         .value(classifier))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleImpactedApplications.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricImpactedApplications401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricImpactedApplications403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricImpactedApplications404ErrorException)
        ).execute()

    def get_site_sle_impacted_aps(self,
                                  site_id,
                                  scope,
                                  scope_id,
                                  metric,
                                  start=0,
                                  end=0,
                                  duration='1d',
                                  classifier=None):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-aps.

        For Wireless SLEs. Get list of impacted APs optionally filtered by
        classifier and failure type

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope7Enum): TODO: type description here.
            scope_id (uuid|string): TODO: type description here.
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            classifier (string, optional): TODO: type description here.

        Returns:
            SleImpactedAps: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-aps')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('classifier')
                         .value(classifier))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleImpactedAps.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricImpactedAps401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricImpactedAps403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricImpactedAps404ErrorException)
        ).execute()

    def get_site_sle_impacted_chassis(self,
                                      site_id,
                                      scope,
                                      scope_id,
                                      metric,
                                      start=0,
                                      end=0,
                                      duration='1d',
                                      classifier=None):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-chassis.

        For Wired and WAN SLEs. Get list of impacted interfaces optionally
        filtered by classifier and failure type

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope6Enum): TODO: type description here.
            scope_id (uuid|string): TODO: type description here.
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            classifier (string, optional): TODO: type description here.

        Returns:
            SleImpactedChassis: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-chassis')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('classifier')
                         .value(classifier))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleImpactedChassis.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricImpactedChassis401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricImpactedChassis403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricImpactedChassis404ErrorException)
        ).execute()

    def get_site_sle_impacted_wired_clients(self,
                                            site_id,
                                            scope,
                                            scope_id,
                                            metric,
                                            start=0,
                                            end=0,
                                            duration='1d',
                                            classifier=None):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-clients.

        For Wired SLEs. Get list of impacted interfaces optionally filtered by
        classifier and failure type

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope6Enum): TODO: type description here.
            scope_id (uuid|string): TODO: type description here.
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            classifier (string, optional): TODO: type description here.

        Returns:
            SleImpactedClients: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-clients')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('classifier')
                         .value(classifier))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleImpactedClients.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricImpactedClients401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricImpactedClients403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricImpactedClients404ErrorException)
        ).execute()

    def get_site_sle_impacted_gateways(self,
                                       site_id,
                                       scope,
                                       scope_id,
                                       metric,
                                       start=0,
                                       end=0,
                                       duration='1d',
                                       classifier=None):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-gateways.

        For WAN SLEs. Get list of impacted interfaces optionally filtered by
        classifier and failure type

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope7Enum): TODO: type description here.
            scope_id (uuid|string): TODO: type description here.
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            classifier (string, optional): TODO: type description here.

        Returns:
            SleImpactedGateways: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-gateways')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('classifier')
                         .value(classifier))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleImpactedGateways.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricImpactedGateways401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricImpactedGateways403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricImpactedGateways404ErrorException)
        ).execute()

    def get_site_sle_impacted_interfaces(self,
                                         site_id,
                                         scope,
                                         scope_id,
                                         metric,
                                         start=0,
                                         end=0,
                                         duration='1d',
                                         classifier=None):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-interfaces.

        For Wired and WAN SLEs. Get list of impacted interfaces optionally
        filtered by classifier and failure type

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope6Enum): TODO: type description here.
            scope_id (uuid|string): TODO: type description here.
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            classifier (string, optional): TODO: type description here.

        Returns:
            SleImpactedInterfaces: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-interfaces')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('classifier')
                         .value(classifier))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleImpactedInterfaces.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricImpactedInterfaces401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricImpactedInterfaces403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricImpactedInterfaces404ErrorException)
        ).execute()

    def get_site_sle_impacted_switches(self,
                                       site_id,
                                       scope,
                                       scope_id,
                                       metric,
                                       start=0,
                                       end=0,
                                       duration='1d',
                                       classifier=None):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-switches.

        For Wired SLEs. Get list of impacted switches optionally filtered by
        classifier and failure type

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope7Enum): TODO: type description here.
            scope_id (uuid|string): TODO: type description here.
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            classifier (string, optional): TODO: type description here.

        Returns:
            SleImpactedSwitches: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-switches')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('classifier')
                         .value(classifier))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleImpactedSwitches.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricImpactedSwitches401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricImpactedSwitches403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricImpactedSwitches404ErrorException)
        ).execute()

    def get_site_sle_impacted_wireless_clients(self,
                                               site_id,
                                               scope,
                                               scope_id,
                                               metric,
                                               start=0,
                                               end=0,
                                               duration='1d',
                                               classifier=None):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-users.

        For Wireless SLEs. Get list of impacted wireless users optionally
        filtered by classifier and failure type

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope13Enum): TODO: type description here.
            scope_id (uuid|string): TODO: type description here.
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            classifier (string, optional): TODO: type description here.

        Returns:
            SleImpactedUsers: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/impacted-users')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('classifier')
                         .value(classifier))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleImpactedUsers.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricImpactedUsers401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricImpactedUsers403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricImpactedUsers404ErrorException)
        ).execute()

    def get_site_sle_summary(self,
                             site_id,
                             scope,
                             scope_id,
                             metric,
                             start=0,
                             end=0,
                             duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/summary.

         Get the summary for the SLE metric

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope2Enum): TODO: type description here.
            scope_id (string): * site_id if `scope`==`site` * device_id if
                `scope`==`ap`, `scope`==`switch` or `scope`==`gateway` * mac
                if `scope`==`client`
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            SleSummary: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/summary')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleSummary.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricSummary401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricSummary403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricSummary404ErrorException)
        ).execute()

    def get_site_sle_threshold(self,
                               site_id,
                               scope,
                               scope_id,
                               metric):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/threshold.

        Get the SLE threshold

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope2Enum): TODO: type description here.
            scope_id (string): * site_id if `scope`==`site` * device_id if
                `scope`==`ap`, `scope`==`switch` or `scope`==`gateway` * mac
                if `scope`==`client`
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics

        Returns:
            SleThreshold: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/threshold')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleThreshold.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricThreshold401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricThreshold403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricThreshold404ErrorException)
        ).execute()

    def replace_site_sle_threshold(self,
                                   site_id,
                                   scope,
                                   scope_id,
                                   metric,
                                   body=None):
        """Does a POST request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/threshold.

        Replace the SLE threshold

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope2Enum): TODO: type description here.
            scope_id (string): * site_id if `scope`==`site` * device_id if
                `scope`==`ap`, `scope`==`switch` or `scope`==`gateway` * mac
                if `scope`==`client`
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            body (SleThreshold, optional): TODO: type description here.

        Returns:
            SleThreshold: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/threshold')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleThreshold.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricThreshold401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricThreshold403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricThreshold404ErrorException)
        ).execute()

    def update_site_sle_threshold(self,
                                  site_id,
                                  scope,
                                  scope_id,
                                  metric,
                                  body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/threshold.

        Update the SLE threshold

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope2Enum): TODO: type description here.
            scope_id (string): * site_id if `scope`==`site` * device_id if
                `scope`==`ap`, `scope`==`switch` or `scope`==`gateway` * mac
                if `scope`==`client`
            metric (string): values from
                /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics
            body (SleThreshold, optional): TODO: type description here.

        Returns:
            SleThreshold: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metric/{metric}/threshold')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('metric')
                            .value(metric)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SleThreshold.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetricMetricThreshold401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetricMetricThreshold403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetricMetricThreshold404ErrorException)
        ).execute()

    def get_site_sles_metrics(self,
                              site_id,
                              scope,
                              scope_id):
        """Does a GET request to /api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics.

        Get the list of metrics for the given scope

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope2Enum): TODO: type description here.
            scope_id (string): * site_id if `scope`==`site` * device_id if
                `scope`==`ap`, `scope`==`switch` or `scope`==`gateway` * mac
                if `scope`==`client`

        Returns:
            ApiV1SitesSleScopeIdMetricsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/sle/{scope}/{scope_id}/metrics')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope')
                            .value(scope)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scope_id')
                            .value(scope_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesSleScopeIdMetricsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSleScopeIdMetrics401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSleScopeIdMetrics403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSleScopeIdMetrics404ErrorException)
        ).execute()
