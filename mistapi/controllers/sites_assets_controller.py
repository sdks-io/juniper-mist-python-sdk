# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.asset import Asset
from mistapi.models.count import Count
from mistapi.models.assets_array_stats_search import AssetsArrayStatsSearch
from mistapi.models.asset_of_interest import AssetOfInterest
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_assets_401_error_exception import ApiV1SitesAssets401ErrorException
from mistapi.exceptions.api_v_1_sites_assets_403_error_exception import ApiV1SitesAssets403ErrorException
from mistapi.exceptions.api_v_1_sites_assets_404_error_exception import ApiV1SitesAssets404ErrorException
from mistapi.exceptions.api_v_1_sites_assets_import_401_error_exception import ApiV1SitesAssetsImport401ErrorException
from mistapi.exceptions.api_v_1_sites_assets_import_403_error_exception import ApiV1SitesAssetsImport403ErrorException
from mistapi.exceptions.api_v_1_sites_assets_import_404_error_exception import ApiV1SitesAssetsImport404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_assets_count_401_error_exception import ApiV1SitesStatsAssetsCount401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_assets_count_403_error_exception import ApiV1SitesStatsAssetsCount403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_assets_count_404_error_exception import ApiV1SitesStatsAssetsCount404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_assets_search_401_error_exception import ApiV1SitesStatsAssetsSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_assets_search_403_error_exception import ApiV1SitesStatsAssetsSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_assets_search_404_error_exception import ApiV1SitesStatsAssetsSearch404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_filtered_assets_401_error_exception import ApiV1SitesStatsFilteredAssets401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_filtered_assets_403_error_exception import ApiV1SitesStatsFilteredAssets403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_filtered_assets_404_error_exception import ApiV1SitesStatsFilteredAssets404ErrorException


class SitesAssetsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesAssetsController, self).__init__(config)

    def list_site_assets(self,
                         site_id):
        """Does a GET request to /api/v1/sites/{site_id}/assets.

        Get List of Site Assets

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            list of Asset: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/assets')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Asset.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAssets401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAssets403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAssets404ErrorException)
        ).execute()

    def create_site_asset(self,
                          site_id,
                          body=None):
        """Does a POST request to /api/v1/sites/{site_id}/assets.

        Create Site Asset

        Args:
            site_id (uuid|string): TODO: type description here.
            body (Asset, optional): Request Body

        Returns:
            Asset: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/assets')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Asset.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAssets401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAssets403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAssets404ErrorException)
        ).execute()

    def import_site_assets(self,
                           site_id,
                           upsert='False',
                           file=None):
        """Does a POST request to /api/v1/sites/{site_id}/assets/import.

        Impert Site Assets. 
        It can be done via a CSV file or a JSON payload.
        ## CSV File Format
        ```csv
        name,mac
        "asset_name",5c5b53010101
        ``` 

        Args:
            site_id (uuid|string): TODO: type description here.
            upsert (UpsertEnum, optional): API will replace the assets with
                same mac if provided `upsert`==`True`, otherwise will report
                in errors in response.
            file (string, optional): CSV file

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/assets/import')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('upsert')
                         .value(upsert))
            .form_param(Parameter()
                        .key('file')
                        .value(file))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAssetsImport401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAssetsImport403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAssetsImport404ErrorException)
        ).execute()

    def delete_site_asset(self,
                          site_id,
                          asset_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/assets/{asset_id}.

        Delete Site Asset

        Args:
            site_id (uuid|string): TODO: type description here.
            asset_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/assets/{asset_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('asset_id')
                            .value(asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAssets401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAssets403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAssets404ErrorException)
        ).execute()

    def get_site_asset(self,
                       site_id,
                       asset_id):
        """Does a GET request to /api/v1/sites/{site_id}/assets/{asset_id}.

        Get Site Asset Details

        Args:
            site_id (uuid|string): TODO: type description here.
            asset_id (uuid|string): TODO: type description here.

        Returns:
            Asset: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/assets/{asset_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('asset_id')
                            .value(asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Asset.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAssets401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAssets403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAssets404ErrorException)
        ).execute()

    def update_site_asset(self,
                          site_id,
                          asset_id,
                          body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/assets/{asset_id}.

        Update Site Asset

        Args:
            site_id (uuid|string): TODO: type description here.
            asset_id (uuid|string): TODO: type description here.
            body (Asset, optional): Request Body

        Returns:
            Asset: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/assets/{asset_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('asset_id')
                            .value(asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Asset.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAssets401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAssets403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAssets404ErrorException)
        ).execute()

    def count_site_assets(self,
                          site_id,
                          distinct='map_id'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/assets/count.

        Count Asset by distinct field

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct17Enum, optional): TODO: type description here.
                Example: map_id

        Returns:
            Count: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/assets/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Count.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsAssetsCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsAssetsCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsAssetsCount404ErrorException)
        ).execute()

    def search_site_assets(self,
                           site_id,
                           mac=None,
                           map_id=None,
                           ibeacon_uuid=None,
                           ibeacon_major=None,
                           ibeacon_minor=None,
                           eddystone_uid_namespace=None,
                           eddystone_uid_instance=None,
                           eddystone_url=None,
                           device_name=None,
                           by=None,
                           name=None,
                           ap_mac=None,
                           beam=None,
                           rssi=None,
                           limit=100,
                           start=0,
                           end=0,
                           duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/assets/search.

        Assets Search

        Args:
            site_id (uuid|string): TODO: type description here.
            mac (string, optional): TODO: type description here.
            map_id (uuid|string, optional): TODO: type description here.
            ibeacon_uuid (uuid|string, optional): TODO: type description
                here.
            ibeacon_major (int, optional): TODO: type description here.
            ibeacon_minor (int, optional): TODO: type description here.
            eddystone_uid_namespace (string, optional): TODO: type description
                here.
            eddystone_uid_instance (string, optional): TODO: type description
                here.
            eddystone_url (string, optional): TODO: type description here.
            device_name (string, optional): TODO: type description here.
            by (string, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            ap_mac (string, optional): TODO: type description here.
            beam (string, optional): TODO: type description here.
            rssi (string, optional): TODO: type description here.
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            AssetsArrayStatsSearch: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/assets/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('map_id')
                         .value(map_id))
            .query_param(Parameter()
                         .key('ibeacon_uuid')
                         .value(ibeacon_uuid))
            .query_param(Parameter()
                         .key('ibeacon_major')
                         .value(ibeacon_major))
            .query_param(Parameter()
                         .key('ibeacon_minor')
                         .value(ibeacon_minor))
            .query_param(Parameter()
                         .key('eddystone_uid_namespace')
                         .value(eddystone_uid_namespace))
            .query_param(Parameter()
                         .key('eddystone_uid_instance')
                         .value(eddystone_uid_instance))
            .query_param(Parameter()
                         .key('eddystone_url')
                         .value(eddystone_url))
            .query_param(Parameter()
                         .key('device_name')
                         .value(device_name))
            .query_param(Parameter()
                         .key('by')
                         .value(by))
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('ap_mac')
                         .value(ap_mac))
            .query_param(Parameter()
                         .key('beam')
                         .value(beam))
            .query_param(Parameter()
                         .key('rssi')
                         .value(rssi))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AssetsArrayStatsSearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsAssetsSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsAssetsSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsAssetsSearch404ErrorException)
        ).execute()

    def get_site_assets_of_interest(self,
                                    site_id,
                                    duration='1d',
                                    start=0,
                                    end=0,
                                    page=1,
                                    limit=100):
        """Does a GET request to /api/v1/sites/{site_id}/stats/filtered_assets.

        Get a list of BLE beacons that matches Asset or AssetFilter

        Args:
            site_id (uuid|string): TODO: type description here.
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100

        Returns:
            list of AssetOfInterest: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/filtered_assets')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AssetOfInterest.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsFilteredAssets401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsFilteredAssets403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsFilteredAssets404ErrorException)
        ).execute()
