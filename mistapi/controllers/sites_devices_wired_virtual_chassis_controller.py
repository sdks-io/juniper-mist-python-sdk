# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.vc import Vc
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_devices_vc_401_error_exception import ApiV1SitesDevicesVc401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_vc_403_error_exception import ApiV1SitesDevicesVc403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_vc_404_error_exception import ApiV1SitesDevicesVc404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_vc_vc_port_401_error_exception import ApiV1SitesDevicesVcVcPort401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_vc_vc_port_403_error_exception import ApiV1SitesDevicesVcVcPort403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_vc_vc_port_404_error_exception import ApiV1SitesDevicesVcVcPort404ErrorException


class SitesDevicesWiredVirtualChassisController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesDevicesWiredVirtualChassisController, self).__init__(config)

    def delete_site_virtual_chassis(self,
                                    site_id,
                                    device_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/devices/{device_id}/vc.

        When all the member switches of VC are removed and only member ID 0 is
        left, the cloud would detect this situation and automatically changes
        the single switch to non-VC role.
        For some unexpected cases that the VC is gone and disconncted, the API
        below could be used to change the state of VC’s switches to be
        standalone. After it is executed, all the switches will be shown as
        standalone switches under Inventory.

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/vc')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesVc401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesVc403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesVc404ErrorException)
        ).execute()

    def get_site_device_virtual_chassis(self,
                                        site_id,
                                        device_id):
        """Does a GET request to /api/v1/sites/{site_id}/devices/{device_id}/vc.

        Get VC Status
        The API returns a combined view of the VC status which includes
        topology and stats_

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.

        Returns:
            Vc: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/vc')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Vc.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesVc401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesVc403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesVc404ErrorException)
        ).execute()

    def create_site_virtual_chassis(self,
                                    site_id,
                                    device_id,
                                    body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/vc.

        For models (e.g. EX3400 and up) having dedicated VC ports, it is
        easier to form a VC by just connecting cables with the dedicated VC
        ports. Cloud will detect the new VC and update the inventory.
        In case that the user would like to choose the dedicated switch as a
        VC master. Or for EX2300-C-12P and EX2300-C-12T which doesn’t have
        dedicated VC ports, below are procedures to automate the VC creation:
        1. Power on the switch that is choosen as the VC master first. And the
        powering on the other member switches.
        2. Claim or adopt all these switches under the same organization’s
        Inventory
        3. Assign these switches into the same Site
        4. Invoke vc command on the switch choosen to be the VC master. For
        EX2300-C-12P, VC ports will be created automatically.
        5. Connect the cables to the VC ports for these switches
        6. Wait for the VC to be formed. The Org’s inventory will be updated
        for the new VC.

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (DeviceSwitchVc, optional): Request Body

        Returns:
            Vc: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/vc')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Vc.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesVc401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesVc403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesVc404ErrorException)
        ).execute()

    def update_site_virtual_chassis_member(self,
                                           site_id,
                                           device_id,
                                           body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/devices/{device_id}/vc.

        The VC creation and adding member switch API will update the device’s
        virtual chassis config which is applied after VC is formed to create
        JUNOS pre-provisioned virtual chassis configuration.
        ## Change to use preprovisioned VC
        To switch the VC to use preprovisioned VC, enable preprovisioned in
        virtual_chassis config. Both vc_role master and backup will be matched
        to routing-engine role in Junos preprovisioned VC config.
        In this config, fpc0 has to be the same as the mac of device_id. Use
        renumber if you want to replace fpc0 which involves device_id change.
        Notice: to configure preprovisioned VC, every member of the VC must be
        in the inventory.
        ## Add new members
        For models (e.g. EX4300 and up) having dedicated VC ports, it is
        easier to add new member switches into a VC by just connecting cables
        with the dedicated VC ports. Cloud will detect the new members and
        update the inventory.
        For EX2300 VC, adding new members requires to follow the procedures
        below:
        1. Powering on the new member switches and ensuring cables are not
        connected to any VC ports.
        2. Claim or adopt all new member switches under the VC’s organization
        Inventory
        3. Assign all new member switches to the same Site as the VC
        4. Invoke vc command to add switches to the VC.
        5. Connect the cables to the VC ports for these switches
        6. After a while, the Org’s Inventory shows this new switches has been
        added into the VC.
        ## Removing member switch
        To remove a member switch from the VC, following the procedures
        below:
        1. Ensuring the VC is connected to the cloud first
        2. Unplug the cable from the VC port of the switch
        3. Waiting for the VC state (vc_state) of this switch is changed to
        not-present
        4. Invoke update_vc with remove to remove this switch from the VC
        5. The Org’s Inventory shows the switch is removed.
        Please notice that member ID 0 (fpc0) cannot be removed. When a VC has
        two switches left, unpluging the cable may result in the situation
        that fpc0 becomes a line card (LC). When this situation is happened,
        please re-plug in the cable, wait for both switches becoming present
        (show virtual-chassis) and then removing the cable again.
        ## Renumber a member switch
        When a member switch doesn’t work properly and needed to be replaced,
        the renumber API could be used. The following two types of renumber
        are supported:
        1. Replace a non-fpc0 member switch
        2. Replace fpc0. When fpc0 is relaced, PAPI device config and JUNOS
        config will be both updated.
        For renumber to work, the following procedures are needed: 
        1. Ensuring the VC is connected to the cloud and the state of the
        member switch to be replaced must be non present. 
        2. Adding the new member switch to the VC 
        3. Waiting for the VC state (vc_state) of this VC to be updated to API
        server 
        4. Invoke vc with renumber to replace the new member switch from fpc X
        to

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (DeviceSwitchVc, optional): Request Body

        Returns:
            Vc: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/vc')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Vc.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesVc401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesVc403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesVc404ErrorException)
        ).execute()

    def set_site_vc_port(self,
                         site_id,
                         device_id,
                         body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/vc/vc_port.

        Set VC port

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (ApiV1SitesDevicesVcVcPortRequest, optional): TODO: type
                description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/vc/vc_port')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesVcVcPort401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesVcVcPort403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesVcVcPort404ErrorException)
        ).execute()
