# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.wlan import Wlan
from mistapi.models.portal_template import PortalTemplate
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_wlans_401_error_exception import ApiV1SitesWlans401ErrorException
from mistapi.exceptions.api_v_1_sites_wlans_403_error_exception import ApiV1SitesWlans403ErrorException
from mistapi.exceptions.api_v_1_sites_wlans_404_error_exception import ApiV1SitesWlans404ErrorException
from mistapi.exceptions.api_v_1_sites_wlans_derived_401_error_exception import ApiV1SitesWlansDerived401ErrorException
from mistapi.exceptions.api_v_1_sites_wlans_derived_403_error_exception import ApiV1SitesWlansDerived403ErrorException
from mistapi.exceptions.api_v_1_sites_wlans_derived_404_error_exception import ApiV1SitesWlansDerived404ErrorException
from mistapi.exceptions.api_v_1_sites_wlans_portal_image_401_error_exception import ApiV1SitesWlansPortalImage401ErrorException
from mistapi.exceptions.api_v_1_sites_wlans_portal_image_403_error_exception import ApiV1SitesWlansPortalImage403ErrorException
from mistapi.exceptions.api_v_1_sites_wlans_portal_image_404_error_exception import ApiV1SitesWlansPortalImage404ErrorException
from mistapi.exceptions.api_v_1_sites_wlans_portal_template_401_error_exception import ApiV1SitesWlansPortalTemplate401ErrorException
from mistapi.exceptions.api_v_1_sites_wlans_portal_template_403_error_exception import ApiV1SitesWlansPortalTemplate403ErrorException
from mistapi.exceptions.api_v_1_sites_wlans_portal_template_404_error_exception import ApiV1SitesWlansPortalTemplate404ErrorException
from mistapi.exceptions.api_v_1_utils_test_telstra_401_error_exception import ApiV1UtilsTestTelstra401ErrorException
from mistapi.exceptions.api_v_1_utils_test_telstra_403_error_exception import ApiV1UtilsTestTelstra403ErrorException
from mistapi.exceptions.api_v_1_utils_test_telstra_404_error_exception import ApiV1UtilsTestTelstra404ErrorException
from mistapi.exceptions.api_v_1_utils_test_twilio_401_error_exception import ApiV1UtilsTestTwilio401ErrorException
from mistapi.exceptions.api_v_1_utils_test_twilio_403_error_exception import ApiV1UtilsTestTwilio403ErrorException
from mistapi.exceptions.api_v_1_utils_test_twilio_404_error_exception import ApiV1UtilsTestTwilio404ErrorException


class SitesWlansController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesWlansController, self).__init__(config)

    def list_site_wlans(self,
                        site_id):
        """Does a GET request to /api/v1/sites/{site_id}/wlans.

        Get List of Site WLANs

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            list of Wlan: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wlans')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Wlan.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWlans401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWlans403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWlans404ErrorException)
        ).execute()

    def create_site_wlan(self,
                         site_id,
                         body=None):
        """Does a POST request to /api/v1/sites/{site_id}/wlans.

        Create Site WLAN

        Args:
            site_id (uuid|string): TODO: type description here.
            body (Wlan, optional): Request Body

        Returns:
            Wlan: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wlans')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Wlan.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWlans401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWlans403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWlans404ErrorException)
        ).execute()

    def list_site_wlan_derived(self,
                               site_id,
                               resolve=False):
        """Does a GET request to /api/v1/sites/{site_id}/wlans/derived.

        Get Wlans Derived

        Args:
            site_id (uuid|string): TODO: type description here.
            resolve (bool, optional): whether to resolve SITE_VARS

        Returns:
            list of Wlan: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wlans/derived')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('resolve')
                         .value(resolve))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Wlan.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWlansDerived401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWlansDerived403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWlansDerived404ErrorException)
        ).execute()

    def delete_site_wlan(self,
                         site_id,
                         wlan_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/wlans/{wlan_id}.

        Delete Site WLAN

        Args:
            site_id (uuid|string): TODO: type description here.
            wlan_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wlans/{wlan_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('wlan_id')
                            .value(wlan_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWlans401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWlans403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWlans404ErrorException)
        ).execute()

    def get_site_wlan(self,
                      site_id,
                      wlan_id):
        """Does a GET request to /api/v1/sites/{site_id}/wlans/{wlan_id}.

        Get Site WLAN

        Args:
            site_id (uuid|string): TODO: type description here.
            wlan_id (uuid|string): TODO: type description here.

        Returns:
            Wlan: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wlans/{wlan_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('wlan_id')
                            .value(wlan_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Wlan.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWlans401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWlans403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWlans404ErrorException)
        ).execute()

    def update_site_wlan(self,
                         site_id,
                         wlan_id,
                         body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/wlans/{wlan_id}.

        Update Site WLAN

        Args:
            site_id (uuid|string): TODO: type description here.
            wlan_id (uuid|string): TODO: type description here.
            body (Wlan, optional): Request Body

        Returns:
            Wlan: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wlans/{wlan_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('wlan_id')
                            .value(wlan_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Wlan.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWlans401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWlans403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWlans404ErrorException)
        ).execute()

    def upload_site_wlan_portal_image(self,
                                      site_id,
                                      wlan_id,
                                      file=None,
                                      json=None):
        """Does a POST request to /api/v1/sites/{site_id}/wlans/{wlan_id}/portal_image.

        Wlan Portal Image Upload

        Args:
            site_id (uuid|string): TODO: type description here.
            wlan_id (uuid|string): TODO: type description here.
            file (string, optional): binary file
            json (string, optional): JSON string describing your upload

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wlans/{wlan_id}/portal_image')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('wlan_id')
                            .value(wlan_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('file')
                        .value(file))
            .form_param(Parameter()
                        .key('json')
                        .value(json))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWlansPortalImage401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWlansPortalImage403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWlansPortalImage404ErrorException)
        ).execute()

    def update_site_wlan_portal_template(self,
                                         site_id,
                                         wlan_id,
                                         body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/wlans/{wlan_id}/portal_template.

        Update a Portal Template
        #### Sponsor Email Template
        Sponsor Email Template supports following template variables:
        | **Name** | **Description** |
        | --- | --- |
        | approve_url | Renders URL to approve the request; optionally
        &minutes=N query param can be appended to change the Authorization
        period of the guest, where N is a valid integer denoting number of
        minutes a guest remains authorized |
        | deny_url | Renders URL to reject the request |
        | guest_email | Renders Email ID of the guest |
        | guest_name | Renders Name of the guest |
        | field1 | Renders value of the Custom Field 1 |
        | field2 | Renders value of the Custom Field 2 |
        | company | Renders value of the Company field |
        | sponsor_link_validity_duration | Renders validity time of the
        request (i.e. Approve/Deny URL) |
        | auth_expire_minutes | Renders Wlan-level configured Guest
        Authorization Expiration time period (in minutes), If not configured
        then default (1 day in minutes) |

        Args:
            site_id (uuid|string): TODO: type description here.
            wlan_id (uuid|string): TODO: type description here.
            body (WlanPortalTemplate, optional): Request Body

        Returns:
            PortalTemplate: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wlans/{wlan_id}/portal_template')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('wlan_id')
                            .value(wlan_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PortalTemplate.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWlansPortalTemplate401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWlansPortalTemplate403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWlansPortalTemplate404ErrorException)
        ).execute()

    def test_site_wlan_telstra_setup(self):
        """Does a GET request to /api/v1/utils/test_telstra.

        Allows validation of Telstra sms gateway credentials.
        In case of success, a text message confirming successful setup should
        be received. In case of error, telstra error message are returned.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/utils/test_telstra')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1UtilsTestTelstra401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1UtilsTestTelstra403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1UtilsTestTelstra404ErrorException)
        ).execute()

    def test_site_wlan_twilio_setup(self,
                                    body=None):
        """Does a POST request to /api/v1/utils/test_twilio.

        Allows validation of twilio setup
        In case of success, a text message confirming successful setup should
        be received. In case of error, twilio error code and message are
        returned.

        Args:
            body (ApiV1UtilsTestTwilioRequest, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/utils/test_twilio')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1UtilsTestTwilio401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1UtilsTestTwilio403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1UtilsTestTwilio404ErrorException)
        ).execute()
