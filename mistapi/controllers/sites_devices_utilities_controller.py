# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.session_1 import Session1
from mistapi.models.api_v_1_sites_devices_snapshot_response import ApiV1SitesDevicesSnapshotResponse
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_devices_arp_401_error_exception import ApiV1SitesDevicesArp401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_arp_403_error_exception import ApiV1SitesDevicesArp403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_arp_404_error_exception import ApiV1SitesDevicesArp404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_ping_401_error_exception import ApiV1SitesDevicesPing401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_ping_403_error_exception import ApiV1SitesDevicesPing403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_ping_404_error_exception import ApiV1SitesDevicesPing404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_snapshot_401_error_exception import ApiV1SitesDevicesSnapshot401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_snapshot_403_error_exception import ApiV1SitesDevicesSnapshot403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_snapshot_404_error_exception import ApiV1SitesDevicesSnapshot404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_traceroute_401_error_exception import ApiV1SitesDevicesTraceroute401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_traceroute_403_error_exception import ApiV1SitesDevicesTraceroute403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_traceroute_404_error_exception import ApiV1SitesDevicesTraceroute404ErrorException


class SitesDevicesUtilitiesController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesDevicesUtilitiesController, self).__init__(config)

    def arp_from_device(self,
                        site_id,
                        device_id,
                        body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/arp.

        ARP can be performed on the Device. The output will be available
        through websocket. As there can be multiple command issued against the
        same AP at the same time and the output all goes through the same
        websocket stream, session is introduced for demux.
        #### Subscribe to Device Command outputs
        `WS /api-ws/v1/stream`
        ```json
        {
            "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
        }
        ```
        ##### Example output from ws stream
        ```json
        { 
         "event": "data", 
         "channel":
         "/sites/4ac1dcf4-9d8b-7211-65c4-057819f0862b/devices/00000000-0000-000
         0-1000-5c5b350e0060/cmd", 
         "data": { 
           "session": "session_id", 
           "raw": 
           "Output": "\tMAC\t\tDEV\tVLAN\tRx Packets\t\t Rx Bytes\t\tTx
           Packets\t\t Tx Bytes\tFlows\tIdle
           sec\n---------------------------------------------------------------
           --------------------------------------------------------"
          } 
        }
        ```

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (ApiV1SitesDevicesArpRequest, optional): TODO: type
                description here.

        Returns:
            Session1: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/arp')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Session1.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesArp401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesArp403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesArp404ErrorException)
        ).execute()

    def ping_from_device(self,
                         site_id,
                         device_id,
                         body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/ping.

        Ping from AP, Switch and SSR
        Ping can be performed from the Device. The output will be available
        through websocket. As there can be multiple command issued against the
        same AP at the same time and the output all goes through the same
        websocket stream, session is introduced for demux.
        #### Subscribe to Device Command outputs
        `WS /api-ws/v1/stream`
        ```json
        {
            "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
        }
        ```
        ##### Example output from ws stream
        ```json
        {
            "event": "data",
            "channel":
            "/sites/4ac1dcf4-9d8b-7211-65c4-057819f0862b/devices/00000000-0000-
            0000-1000-5c5b350e0060/cmd",
            "data": {
                "session": "session_id",
                "raw": "64 bytes from 23.211.0.110: seq=8 ttl=58 time=12.323
                ms\n"
            }
        }
        ```

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (ApiV1SitesDevicesPingRequest, optional): Request Body

        Returns:
            Session1: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/ping')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Session1.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesPing401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesPing403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesPing404ErrorException)
        ).execute()

    def create_site_device_snapshot(self,
                                    site_id,
                                    device_id):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/snapshot.

        Create recovery device snapshot (Available on Junos OS EX2300-,
        EX3400-, EX4400- devices)

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.

        Returns:
            ApiV1SitesDevicesSnapshotResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/snapshot')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesDevicesSnapshotResponse.from_dictionary)
            .local_error('400', 'Bad Request', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesSnapshot401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesSnapshot403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesSnapshot404ErrorException)
        ).execute()

    def traceroute_from_device(self,
                               site_id,
                               device_id,
                               body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/traceroute.

        Traceroute can be performed from the Device. The output will be
        available through websocket. As there can be multiple command issued
        against the same AP at the same time and the output all goes through
        the same websocket stream, session is introduced for demux.
        #### Subscribe to Device Command outputs
        `WS /api-ws/v1/stream`
        ```json
        {
            "subscribe": "/sites/{site_id}/devices/{device_id}/cmd"
        }
        ```

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (ApiV1SitesDevicesTracerouteRequest, optional): Request Body

        Returns:
            Session1: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/traceroute')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Session1.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesTraceroute401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesTraceroute403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesTraceroute404ErrorException)
        ).execute()
