# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.device_upgrade_response import DeviceUpgradeResponse
from mistapi.models.device_version import DeviceVersion
from mistapi.models.upgrade_status import UpgradeStatus
from mistapi.models.api_v_1_sites_ssr_upgrade_response import ApiV1SitesSsrUpgradeResponse
from mistapi.models.ssr_upgrade_response import SsrUpgradeResponse
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_devices_upgrade_401_error_exception import ApiV1SitesDevicesUpgrade401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_upgrade_403_error_exception import ApiV1SitesDevicesUpgrade403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_upgrade_404_error_exception import ApiV1SitesDevicesUpgrade404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_upgrade_cancel_401_error_exception import ApiV1SitesDevicesUpgradeCancel401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_upgrade_cancel_403_error_exception import ApiV1SitesDevicesUpgradeCancel403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_upgrade_cancel_404_error_exception import ApiV1SitesDevicesUpgradeCancel404ErrorException
from mistapi.exceptions.api_v_1_sites_devices_versions_401_error_exception import ApiV1SitesDevicesVersions401ErrorException
from mistapi.exceptions.api_v_1_sites_devices_versions_403_error_exception import ApiV1SitesDevicesVersions403ErrorException
from mistapi.exceptions.api_v_1_sites_devices_versions_404_error_exception import ApiV1SitesDevicesVersions404ErrorException
from mistapi.exceptions.api_v_1_sites_ssr_upgrade_401_error_exception import ApiV1SitesSsrUpgrade401ErrorException
from mistapi.exceptions.api_v_1_sites_ssr_upgrade_403_error_exception import ApiV1SitesSsrUpgrade403ErrorException
from mistapi.exceptions.api_v_1_sites_ssr_upgrade_404_error_exception import ApiV1SitesSsrUpgrade404ErrorException


class SitesDevicesUpgradesController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesDevicesUpgradesController, self).__init__(config)

    def list_site_devices_upgrade(self,
                                  site_id,
                                  status=None):
        """Does a GET request to /api/v1/sites/{site_id}/devices/upgrade.

        Get all upgrades for site

        Args:
            site_id (uuid|string): TODO: type description here.
            status (Status6Enum, optional): TODO: type description here.

        Returns:
            list of DeviceUpgradeResponse: Response from the API. Example
                response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/upgrade')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceUpgradeResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesUpgrade401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesUpgrade403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesUpgrade404ErrorException)
        ).execute()

    def multi_upgrade_site_devices(self,
                                   site_id,
                                   body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/upgrade.

        Upgrade Multiple Device
        **Note**: this call doesnâ€™t guarantee the devices to be upgraded right
        away (they may be offline)

        Args:
            site_id (uuid|string): TODO: type description here.
            body (DeviceUpgrade, optional): Request Body

        Returns:
            DeviceUpgradeResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/upgrade')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceUpgradeResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesUpgrade401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesUpgrade403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesUpgrade404ErrorException)
        ).execute()

    def get_site_upgrade(self,
                         site_id,
                         upgrade_id):
        """Does a GET request to /api/v1/sites/{site_id}/devices/upgrade/{upgrade_id}.

        Get Site Device Upgrade

        Args:
            site_id (uuid|string): TODO: type description here.
            upgrade_id (uuid|string): TODO: type description here.

        Returns:
            DeviceUpgradeResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/upgrade/{upgrade_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('upgrade_id')
                            .value(upgrade_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceUpgradeResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesUpgrade401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesUpgrade403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesUpgrade404ErrorException)
        ).execute()

    def cancel_site_device_upgrade(self,
                                   site_id,
                                   upgrade_id):
        """Does a POST request to /api/v1/sites/{site_id}/devices/upgrade/{upgrade_id}/cancel.

        Best effort to cancel an upgrade. Devices which are already upgraded
        wont be touched

        Args:
            site_id (uuid|string): TODO: type description here.
            upgrade_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/upgrade/{upgrade_id}/cancel')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('upgrade_id')
                            .value(upgrade_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesUpgradeCancel401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesUpgradeCancel403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesUpgradeCancel404ErrorException)
        ).execute()

    def list_site_available_device_versions(self,
                                            site_id,
                                            mtype='ap',
                                            model=None):
        """Does a GET request to /api/v1/sites/{site_id}/devices/versions.

        Get List of Available Device Versions

        Args:
            site_id (uuid|string): TODO: type description here.
            mtype (Type16Enum, optional): fetch version for device type (E.g.
                switch)
            model (string, optional): fetch version for device model,
                use/combine with `type` as needed (for switch and gateway
                devices)

        Returns:
            list of DeviceVersion: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/versions')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('model')
                         .value(model))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceVersion.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesVersions401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesVersions403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesVersions404ErrorException)
        ).execute()

    def upgrade_site_device(self,
                            site_id,
                            device_id,
                            body=None):
        """Does a POST request to /api/v1/sites/{site_id}/devices/{device_id}/upgrade.

        Device Upgrade

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (ApiV1SitesDevicesUpgradeRequest, optional): TODO: type
                description here.

        Returns:
            UpgradeStatus: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/devices/{device_id}/upgrade')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UpgradeStatus.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesDevicesUpgrade401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesDevicesUpgrade403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesDevicesUpgrade404ErrorException)
        ).execute()

    def get_site_ssr_upgrade(self,
                             site_id,
                             upgrade_id):
        """Does a GET request to /api/v1/sites/{site_id}/ssr/upgrade/{upgrade_id}.

        Get Specific Site SSR Upgrade

        Args:
            site_id (uuid|string): TODO: type description here.
            upgrade_id (uuid|string): TODO: type description here.

        Returns:
            ApiV1SitesSsrUpgradeResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/ssr/upgrade/{upgrade_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('upgrade_id')
                            .value(upgrade_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesSsrUpgradeResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSsrUpgrade401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSsrUpgrade403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSsrUpgrade404ErrorException)
        ).execute()

    def upgrade_site_ssr(self,
                         site_id,
                         device_id,
                         body=None):
        """Does a POST request to /api/v1/sites/{site_id}/ssr/{device_id}/upgrade.

        Upgrade Site SSR device

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (ApiV1SitesSsrUpgradeRequest, optional): TODO: type
                description here.

        Returns:
            SsrUpgradeResponse: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/ssr/{device_id}/upgrade')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SsrUpgradeResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSsrUpgrade401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSsrUpgrade403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSsrUpgrade404ErrorException)
        ).execute()
