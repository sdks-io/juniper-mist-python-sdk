# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.rfdiag_response import RfdiagResponse
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_rfdiags_401_error_exception import ApiV1SitesRfdiags401ErrorException
from mistapi.exceptions.api_v_1_sites_rfdiags_403_error_exception import ApiV1SitesRfdiags403ErrorException
from mistapi.exceptions.api_v_1_sites_rfdiags_404_error_exception import ApiV1SitesRfdiags404ErrorException
from mistapi.exceptions.api_v_1_sites_rfdiags_download_401_error_exception import ApiV1SitesRfdiagsDownload401ErrorException
from mistapi.exceptions.api_v_1_sites_rfdiags_download_403_error_exception import ApiV1SitesRfdiagsDownload403ErrorException
from mistapi.exceptions.api_v_1_sites_rfdiags_download_404_error_exception import ApiV1SitesRfdiagsDownload404ErrorException
from mistapi.exceptions.api_v_1_sites_rfdiags_stop_401_error_exception import ApiV1SitesRfdiagsStop401ErrorException
from mistapi.exceptions.api_v_1_sites_rfdiags_stop_403_error_exception import ApiV1SitesRfdiagsStop403ErrorException
from mistapi.exceptions.api_v_1_sites_rfdiags_stop_404_error_exception import ApiV1SitesRfdiagsStop404ErrorException


class SitesRfdiagsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesRfdiagsController, self).__init__(config)

    def get_site_site_rfdiag_recording(self,
                                       site_id,
                                       page=1,
                                       limit=100,
                                       start=0,
                                       end=0,
                                       duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/rfdiags.

        List RF Glass Recording

        Args:
            site_id (uuid|string): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            list of RfdiagResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/rfdiags')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RfdiagResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesRfdiags401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesRfdiags403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesRfdiags404ErrorException)
        ).execute()

    def start_site_recording(self,
                             site_id,
                             body=None):
        """Does a POST request to /api/v1/sites/{site_id}/rfdiags.

        Start RF Glass Recording

        Args:
            site_id (uuid|string): TODO: type description here.
            body (Rfdiag, optional): Request Body

        Returns:
            list of RfdiagResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/rfdiags')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RfdiagResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesRfdiags401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesRfdiags403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesRfdiags404ErrorException)
        ).execute()

    def delete_site_rfdiag_recording(self,
                                     site_id,
                                     rfdiag_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/rfdiags/{rfdiag_id}.

        Delete Recording

        Args:
            site_id (uuid|string): TODO: type description here.
            rfdiag_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/rfdiags/{rfdiag_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('rfdiag_id')
                            .value(rfdiag_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesRfdiags401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesRfdiags403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesRfdiags404ErrorException)
        ).execute()

    def get_site_rfdiag_recording(self,
                                  site_id,
                                  rfdiag_id):
        """Does a GET request to /api/v1/sites/{site_id}/rfdiags/{rfdiag_id}.

        Get RF Diage Recording Details

        Args:
            site_id (uuid|string): TODO: type description here.
            rfdiag_id (uuid|string): TODO: type description here.

        Returns:
            list of RfdiagResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/rfdiags/{rfdiag_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('rfdiag_id')
                            .value(rfdiag_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RfdiagResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesRfdiags401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesRfdiags403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesRfdiags404ErrorException)
        ).execute()

    def update_site_rfdiag_recording(self,
                                     site_id,
                                     rfdiag_id,
                                     body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/rfdiags/{rfdiag_id}.

        Update Recording

        Args:
            site_id (uuid|string): TODO: type description here.
            rfdiag_id (uuid|string): TODO: type description here.
            body (Rfdiag, optional): Request Body

        Returns:
            list of RfdiagResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/rfdiags/{rfdiag_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('rfdiag_id')
                            .value(rfdiag_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RfdiagResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesRfdiags401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesRfdiags403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesRfdiags404ErrorException)
        ).execute()

    def download_site_rfdiag_recording(self,
                                       site_id,
                                       rfdiag_id):
        """Does a GET request to /api/v1/sites/{site_id}/rfdiags/{rfdiag_id}/download.

        Download Recording
        Download raw_events blob

        Args:
            site_id (uuid|string): TODO: type description here.
            rfdiag_id (uuid|string): TODO: type description here.

        Returns:
            string: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/rfdiags/{rfdiag_id}/download')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('rfdiag_id')
                            .value(rfdiag_id)
                            .should_encode(True))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesRfdiagsDownload401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesRfdiagsDownload403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesRfdiagsDownload404ErrorException)
        ).execute()

    def stop_site_rfdiag_recording(self,
                                   site_id,
                                   rfdiag_id):
        """Does a POST request to /api/v1/sites/{site_id}/rfdiags/{rfdiag_id}/stop.

        If the recording session is active for the given rfdiag_id, it will
        finish the recording. duration and end_time will be updated to reflect
        the correct values.

        Args:
            site_id (uuid|string): TODO: type description here.
            rfdiag_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/rfdiags/{rfdiag_id}/stop')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('rfdiag_id')
                            .value(rfdiag_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesRfdiagsStop401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesRfdiagsStop403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesRfdiagsStop404ErrorException)
        ).execute()
