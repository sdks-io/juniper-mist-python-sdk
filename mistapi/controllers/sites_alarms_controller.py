# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.count import Count
from mistapi.models.alarms_search import AlarmsSearch
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_alarms_ack_401_error_exception import ApiV1SitesAlarmsAck401ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_ack_403_error_exception import ApiV1SitesAlarmsAck403ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_ack_404_error_exception import ApiV1SitesAlarmsAck404ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_ack_all_401_error_exception import ApiV1SitesAlarmsAckAll401ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_ack_all_403_error_exception import ApiV1SitesAlarmsAckAll403ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_ack_all_404_error_exception import ApiV1SitesAlarmsAckAll404ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_count_401_error_exception import ApiV1SitesAlarmsCount401ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_count_403_error_exception import ApiV1SitesAlarmsCount403ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_count_404_error_exception import ApiV1SitesAlarmsCount404ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_search_401_error_exception import ApiV1SitesAlarmsSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_search_403_error_exception import ApiV1SitesAlarmsSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_search_404_error_exception import ApiV1SitesAlarmsSearch404ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_unack_401_error_exception import ApiV1SitesAlarmsUnack401ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_unack_403_error_exception import ApiV1SitesAlarmsUnack403ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_unack_404_error_exception import ApiV1SitesAlarmsUnack404ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_unack_all_401_error_exception import ApiV1SitesAlarmsUnackAll401ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_unack_all_403_error_exception import ApiV1SitesAlarmsUnackAll403ErrorException
from mistapi.exceptions.api_v_1_sites_alarms_unack_all_404_error_exception import ApiV1SitesAlarmsUnackAll404ErrorException


class SitesAlarmsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesAlarmsController, self).__init__(config)

    def multi_ack_site_alarms(self,
                              site_id,
                              body=None):
        """Does a POST request to /api/v1/sites/{site_id}/alarms/ack.

        Ack multiple Site Alarms

        Args:
            site_id (uuid|string): TODO: type description here.
            body (ApiV1SitesAlarmsAckRequest, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/alarms/ack')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAlarmsAck401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAlarmsAck403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAlarmsAck404ErrorException)
        ).execute()

    def ack_site_all_alarms(self,
                            site_id,
                            body=None):
        """Does a POST request to /api/v1/sites/{site_id}/alarms/ack_all.

        Ack all Site Alarms
        **N.B.**: Batch size for multiple alarm ack and unack has to be less
        or or equal to 1000.

        Args:
            site_id (uuid|string): TODO: type description here.
            body (Note, optional): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/alarms/ack_all')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAlarmsAckAll401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAlarmsAckAll403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAlarmsAckAll404ErrorException)
        ).execute()

    def count_site_alarms(self,
                          site_id,
                          distinct='type',
                          ack_admin_name=None,
                          acked=None,
                          mtype=None,
                          severity=None,
                          group=None,
                          page=1,
                          limit=100,
                          start=0,
                          end=0,
                          duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/alarms/count.

        Count Site Alarms

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct3Enum, optional): Group by and count the alarms
                by some distinct field
            ack_admin_name (string, optional): Name of the admins who have
                acked the alarms; accepts multiple values separated by comma
            acked (bool, optional): TODO: type description here.
            mtype (string, optional): Key-name of the alarms; accepts multiple
                values separated by comma
            severity (string, optional): Alarm severity; accepts multiple
                values separated by comma
            group (string, optional): Alarm group name; accepts multiple
                values separated by comma
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            Count: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/alarms/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .query_param(Parameter()
                         .key('ack_admin_name')
                         .value(ack_admin_name))
            .query_param(Parameter()
                         .key('acked')
                         .value(acked))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('severity')
                         .value(severity))
            .query_param(Parameter()
                         .key('group')
                         .value(group))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Count.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAlarmsCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAlarmsCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAlarmsCount404ErrorException)
        ).execute()

    def search_site_alarms(self,
                           site_id,
                           mtype=None,
                           ack_admin_name=None,
                           acked=None,
                           severity=None,
                           group=None,
                           limit=100,
                           start=0,
                           end=0,
                           duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/alarms/search.

        Search Site Alarms

        Args:
            site_id (uuid|string): TODO: type description here.
            mtype (string, optional): Key-name of the alarms; accepts multiple
                values separated by comma
            ack_admin_name (string, optional): Name of the admins who have
                acked the alarms; accepts multiple values separated by comma
            acked (bool, optional): TODO: type description here.
            severity (string, optional): Alarm severity; accepts multiple
                values separated by comma
            group (string, optional): Alarm group name; accepts multiple
                values separated by comma
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            AlarmsSearch: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/alarms/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('ack_admin_name')
                         .value(ack_admin_name))
            .query_param(Parameter()
                         .key('acked')
                         .value(acked))
            .query_param(Parameter()
                         .key('severity')
                         .value(severity))
            .query_param(Parameter()
                         .key('group')
                         .value(group))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AlarmsSearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAlarmsSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAlarmsSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAlarmsSearch404ErrorException)
        ).execute()

    def multi_unack_site_alarms(self,
                                site_id,
                                body=None):
        """Does a POST request to /api/v1/sites/{site_id}/alarms/unack.

        Unack multiple Site Alarms

        Args:
            site_id (uuid|string): TODO: type description here.
            body (ApiV1SitesAlarmsUnackRequest, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/alarms/unack')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAlarmsUnack401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAlarmsUnack403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAlarmsUnack404ErrorException)
        ).execute()

    def unack_site_all_arlarms(self,
                               site_id,
                               body=None):
        """Does a POST request to /api/v1/sites/{site_id}/alarms/unack_all.

        Unack all Site Alarms
        **N.B.**: Batch size for multiple alarm ack and unack has to be less
        or or equal to 1000.

        Args:
            site_id (uuid|string): TODO: type description here.
            body (Note, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/alarms/unack_all')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAlarmsUnackAll401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAlarmsUnackAll403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAlarmsUnackAll404ErrorException)
        ).execute()

    def ack_site_alarm(self,
                       site_id,
                       alarm_id,
                       body=None):
        """Does a POST request to /api/v1/sites/{site_id}/alarms/{alarm_id}/ack.

        Ack Site Alarm

        Args:
            site_id (uuid|string): TODO: type description here.
            alarm_id (uuid|string): TODO: type description here.
            body (Note, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/alarms/{alarm_id}/ack')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('alarm_id')
                            .value(alarm_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAlarmsAck401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAlarmsAck403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAlarmsAck404ErrorException)
        ).execute()

    def unack_site_alarm(self,
                         site_id,
                         alarm_id,
                         body=None):
        """Does a POST request to /api/v1/sites/{site_id}/alarms/{alarm_id}/unack.

        Unack Site Alarm

        Args:
            site_id (uuid|string): TODO: type description here.
            alarm_id (uuid|string): TODO: type description here.
            body (Note, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/alarms/{alarm_id}/unack')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('alarm_id')
                            .value(alarm_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesAlarmsUnack401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesAlarmsUnack403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesAlarmsUnack404ErrorException)
        ).execute()
