# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.count import Count
from mistapi.models.wan_client_events_search import WanClientEventsSearch
from mistapi.models.wan_clients_search import WanClientsSearch
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_wan_client_events_count_401_error_exception import ApiV1SitesWanClientEventsCount401ErrorException
from mistapi.exceptions.api_v_1_sites_wan_client_events_count_403_error_exception import ApiV1SitesWanClientEventsCount403ErrorException
from mistapi.exceptions.api_v_1_sites_wan_client_events_count_404_error_exception import ApiV1SitesWanClientEventsCount404ErrorException
from mistapi.exceptions.api_v_1_sites_wan_clients_count_401_error_exception import ApiV1SitesWanClientsCount401ErrorException
from mistapi.exceptions.api_v_1_sites_wan_clients_count_403_error_exception import ApiV1SitesWanClientsCount403ErrorException
from mistapi.exceptions.api_v_1_sites_wan_clients_count_404_error_exception import ApiV1SitesWanClientsCount404ErrorException
from mistapi.exceptions.api_v_1_sites_wan_clients_events_search_401_error_exception import ApiV1SitesWanClientsEventsSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_wan_clients_events_search_403_error_exception import ApiV1SitesWanClientsEventsSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_wan_clients_events_search_404_error_exception import ApiV1SitesWanClientsEventsSearch404ErrorException
from mistapi.exceptions.api_v_1_sites_wan_clients_search_401_error_exception import ApiV1SitesWanClientsSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_wan_clients_search_403_error_exception import ApiV1SitesWanClientsSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_wan_clients_search_404_error_exception import ApiV1SitesWanClientsSearch404ErrorException


class SitesClientsWanController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesClientsWanController, self).__init__(config)

    def count_site_wan_client_events(self,
                                     site_id,
                                     distinct='type'):
        """Does a GET request to /api/v1/sites/{site_id}/wan_client/events/count.

        Count by Distinct Attributes of Site WAN Client-Events

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct21Enum, optional): TODO: type description here.
                Example: type

        Returns:
            Count: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wan_client/events/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Count.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWanClientEventsCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWanClientEventsCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWanClientEventsCount404ErrorException)
        ).execute()

    def count_site_wan_clients(self,
                               site_id,
                               distinct='mac',
                               start=0,
                               end=0,
                               duration='1d',
                               limit=100,
                               page=1):
        """Does a GET request to /api/v1/sites/{site_id}/wan_clients/count.

        Count Site WAN Clients

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct22Enum, optional): TODO: type description here.
                Example: mac
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            limit (int, optional): TODO: type description here. Example: 100
            page (int, optional): TODO: type description here. Example: 1

        Returns:
            Count: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wan_clients/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Count.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWanClientsCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWanClientsCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWanClientsCount404ErrorException)
        ).execute()

    def search_site_wan_clients_events(self,
                                       site_id,
                                       mtype=None,
                                       mac=None,
                                       hostname=None,
                                       ip=None,
                                       mfg=None,
                                       start=0,
                                       end=0,
                                       duration='1d',
                                       limit=100,
                                       page=1):
        """Does a GET request to /api/v1/sites/{site_id}/wan_clients/events/search.

        Search Site WAN Client Events

        Args:
            site_id (uuid|string): TODO: type description here.
            mtype (string, optional): Event type, e.g. CLIENT_IP_ASSIGNED,
                CLIENT_IP_RENEWED, CLIENT_IP_EXPIRED
            mac (string, optional): partial / full MAC address
            hostname (string, optional): partial / full hostname
            ip (string, optional): client IP
            mfg (string, optional): Manufacture
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            limit (int, optional): TODO: type description here. Example: 100
            page (int, optional): TODO: type description here. Example: 1

        Returns:
            WanClientEventsSearch: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wan_clients/events/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('hostname')
                         .value(hostname))
            .query_param(Parameter()
                         .key('ip')
                         .value(ip))
            .query_param(Parameter()
                         .key('mfg')
                         .value(mfg))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(WanClientEventsSearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWanClientsEventsSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWanClientsEventsSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWanClientsEventsSearch404ErrorException)
        ).execute()

    def search_site_wan_clients(self,
                                site_id,
                                mac=None,
                                hostname=None,
                                ip=None,
                                mfg=None,
                                start=0,
                                end=0,
                                duration='1d',
                                limit=100,
                                page=1):
        """Does a GET request to /api/v1/sites/{site_id}/wan_clients/search.

        Search Site WAN Clients

        Args:
            site_id (uuid|string): TODO: type description here.
            mac (string, optional): partial / full MAC address
            hostname (string, optional): partial / full hostname
            ip (string, optional): client IP
            mfg (string, optional): Manufacture
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds
            limit (int, optional): TODO: type description here. Example: 100
            page (int, optional): TODO: type description here. Example: 1

        Returns:
            WanClientsSearch: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/wan_clients/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('hostname')
                         .value(hostname))
            .query_param(Parameter()
                         .key('ip')
                         .value(ip))
            .query_param(Parameter()
                         .key('mfg')
                         .value(mfg))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(WanClientsSearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesWanClientsSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesWanClientsSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesWanClientsSearch404ErrorException)
        ).execute()
