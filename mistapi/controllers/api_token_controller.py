# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.apitoken import Apitoken
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_self_apitokens_401_error_exception import ApiV1SelfApitokens401ErrorException
from mistapi.exceptions.api_v_1_self_apitokens_403_error_exception import ApiV1SelfApitokens403ErrorException
from mistapi.exceptions.api_v_1_self_apitokens_404_error_exception import ApiV1SelfApitokens404ErrorException


class APITokenController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(APITokenController, self).__init__(config)

    def list_api_tokens(self):
        """Does a GET request to /api/v1/self/apitokens.

        Get List of Current User API Tokens

        Returns:
            list of Apitoken: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self/apitokens')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Apitoken.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SelfApitokens401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SelfApitokens403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SelfApitokens404ErrorException)
        ).execute()

    def create_api_token(self,
                         body=None):
        """Does a POST request to /api/v1/self/apitokens.

        Create API Token
        Note that the key is only available during creation time.

        Args:
            body (ApiV1SelfApitokensRequest, optional): TODO: type description
                here.

        Returns:
            Apitoken: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self/apitokens')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Apitoken.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SelfApitokens401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SelfApitokens403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SelfApitokens404ErrorException)
        ).execute()

    def delete_api_token(self,
                         apitoken_id):
        """Does a DELETE request to /api/v1/self/apitokens/{apitoken_id}.

        Delete an API Token

        Args:
            apitoken_id (string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/self/apitokens/{apitoken_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('apitoken_id')
                            .value(apitoken_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SelfApitokens401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SelfApitokens403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SelfApitokens404ErrorException)
        ).execute()
