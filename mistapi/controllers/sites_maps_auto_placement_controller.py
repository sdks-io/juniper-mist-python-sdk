# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.api_v_1_sites_maps_auto_placement_response import ApiV1SitesMapsAutoPlacementResponse
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_maps_auto_placement_401_error_exception import ApiV1SitesMapsAutoPlacement401ErrorException
from mistapi.exceptions.api_v_1_sites_maps_auto_placement_403_error_exception import ApiV1SitesMapsAutoPlacement403ErrorException
from mistapi.exceptions.api_v_1_sites_maps_auto_placement_404_error_exception import ApiV1SitesMapsAutoPlacement404ErrorException
from mistapi.exceptions.api_v_1_sites_maps_clear_autoplacement_401_error_exception import ApiV1SitesMapsClearAutoplacement401ErrorException
from mistapi.exceptions.api_v_1_sites_maps_clear_autoplacement_403_error_exception import ApiV1SitesMapsClearAutoplacement403ErrorException
from mistapi.exceptions.api_v_1_sites_maps_clear_autoplacement_404_error_exception import ApiV1SitesMapsClearAutoplacement404ErrorException
from mistapi.exceptions.api_v_1_sites_maps_use_auto_ap_values_401_error_exception import ApiV1SitesMapsUseAutoApValues401ErrorException
from mistapi.exceptions.api_v_1_sites_maps_use_auto_ap_values_403_error_exception import ApiV1SitesMapsUseAutoApValues403ErrorException
from mistapi.exceptions.api_v_1_sites_maps_use_auto_ap_values_404_error_exception import ApiV1SitesMapsUseAutoApValues404ErrorException


class SitesMapsAutoPlacementController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesMapsAutoPlacementController, self).__init__(config)

    def delete_site_ap_autoplacement(self,
                                     site_id,
                                     map_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/maps/{map_id}/auto_placement.

        This API is called to force stop auto placement for a given map

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. Autoplacement Process has stopped for
                this map

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/maps/{map_id}/auto_placement')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .auth(Single('global'))
        ).execute()

    def get_site_ap_auto_placement(self,
                                   site_id,
                                   map_id):
        """Does a GET request to /api/v1/sites/{site_id}/maps/{map_id}/auto_placement.

        This API is called to view the current status of auto placement for a
        given map.

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.

        Returns:
            ApiV1SitesMapsAutoPlacementResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/maps/{map_id}/auto_placement')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesMapsAutoPlacementResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesMapsAutoPlacement401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesMapsAutoPlacement403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesMapsAutoPlacement404ErrorException)
        ).execute()

    def run_site_ap_autoplacement(self,
                                  site_id,
                                  map_id,
                                  body=None):
        """Does a POST request to /api/v1/sites/{site_id}/maps/{map_id}/auto_placement.

        This API is called to trigger a map for auto placement. For auto
        placement feature to work, RTT-FTM data need to be collected from the
        APs on the map. This scan is disruptive and therefore the user must be
        notified of service disrution during the functioning of auto placement
        Repeated POST to this endpoint while a map is still running will be
        rejected.
        List of devices to provide suggestions for is an optional parameter
        that can be given to this API. This will provide autoplacement
        suggestions only for the devices specified. If no list of devices is
        provided, all APs asociated with that map are considered by default

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.
            body (ApiV1SitesMapsAutoPlacementRequest, optional): TODO: type
                description here.

        Returns:
            void: Response from the API. Autoplacement Process has begun for
                this map

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/maps/{map_id}/auto_placement')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).execute()

    def clear_site_ap_autoplacement(self,
                                    site_id,
                                    map_id,
                                    body=None):
        """Does a POST request to /api/v1/sites/{site_id}/maps/{map_id}/clear_autoplacement.

        This API is used to destroy the cached autoplacement locations of a
        map or subset of APs on a map.

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.
            body (ApiV1SitesMapsClearAutoplacementRequest, optional): TODO:
                type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/maps/{map_id}/clear_autoplacement')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesMapsClearAutoplacement401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesMapsClearAutoplacement403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesMapsClearAutoplacement404ErrorException)
        ).execute()

    def confirm_site_ap_localization_data(self,
                                          site_id,
                                          map_id,
                                          body=None):
        """Does a POST request to /api/v1/sites/{site_id}/maps/{map_id}/use_auto_ap_values.

        This API is used to accept or reject the cached autoplacement and auto
        orientation values of a map or subset of APs on a map. A rejected AP
        will retain its current X,Y and orientation until accpeted.

        Args:
            site_id (string): TODO: type description here.
            map_id (string): TODO: type description here.
            body (ApiV1SitesMapsUseAutoApValuesRequest, optional): TODO: type
                description here.

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/maps/{map_id}/use_auto_ap_values')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).execute()
