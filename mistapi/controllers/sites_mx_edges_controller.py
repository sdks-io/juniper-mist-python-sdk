# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.mxedge import Mxedge
from mistapi.models.api_v_1_sites_mxedges_support_response import ApiV1SitesMxedgesSupportResponse
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_mxedges_401_error_exception import ApiV1SitesMxedges401ErrorException
from mistapi.exceptions.api_v_1_sites_mxedges_403_error_exception import ApiV1SitesMxedges403ErrorException
from mistapi.exceptions.api_v_1_sites_mxedges_404_error_exception import ApiV1SitesMxedges404ErrorException
from mistapi.exceptions.api_v_1_sites_mxedges_support_401_error_exception import ApiV1SitesMxedgesSupport401ErrorException
from mistapi.exceptions.api_v_1_sites_mxedges_support_403_error_exception import ApiV1SitesMxedgesSupport403ErrorException
from mistapi.exceptions.api_v_1_sites_mxedges_support_404_error_exception import ApiV1SitesMxedgesSupport404ErrorException


class SitesMxEdgesController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesMxEdgesController, self).__init__(config)

    def list_site_mx_edges(self,
                           site_id):
        """Does a GET request to /api/v1/sites/{site_id}/mxedges.

        Get List of Site Mist Edges

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            list of Mxedge: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/mxedges')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Mxedge.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesMxedges401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesMxedges403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesMxedges404ErrorException)
        ).execute()

    def create_site_mx_edge(self,
                            site_id,
                            body=None):
        """Does a POST request to /api/v1/sites/{site_id}/mxedges.

        Create Site Mist Edge

        Args:
            site_id (uuid|string): TODO: type description here.
            body (Mxedge, optional): TODO: type description here.

        Returns:
            Mxedge: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/mxedges')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Mxedge.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesMxedges401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesMxedges403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesMxedges404ErrorException)
        ).execute()

    def delete_site_mx_edge(self,
                            site_id,
                            mxedge_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/mxedges/{mxedge_id}.

        Delete Site Mist Edge

        Args:
            site_id (uuid|string): TODO: type description here.
            mxedge_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/mxedges/{mxedge_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('mxedge_id')
                            .value(mxedge_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesMxedges401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesMxedges403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesMxedges404ErrorException)
        ).execute()

    def get_site_mx_edge(self,
                         site_id,
                         mxedge_id):
        """Does a GET request to /api/v1/sites/{site_id}/mxedges/{mxedge_id}.

        get Site Mist Edge

        Args:
            site_id (uuid|string): TODO: type description here.
            mxedge_id (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/mxedges/{mxedge_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('mxedge_id')
                            .value(mxedge_id)
                            .should_encode(True))
            .auth(Single('global'))
        ).execute()

    def update_site_mx_edge(self,
                            site_id,
                            mxedge_id,
                            body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/mxedges/{mxedge_id}.

        Update Site Mist Edge settings

        Args:
            site_id (uuid|string): TODO: type description here.
            mxedge_id (uuid|string): TODO: type description here.
            body (Mxedge, optional): TODO: type description here.

        Returns:
            Mxedge: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/mxedges/{mxedge_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('mxedge_id')
                            .value(mxedge_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Mxedge.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesMxedges401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesMxedges403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesMxedges404ErrorException)
        ).execute()

    def upload_site_mx_edge_support_files(self,
                                          site_id,
                                          mxedge_id):
        """Does a POST request to /api/v1/sites/{site_id}/mxedges/{mxedge_id}/support.

        Support / Upload Mist Edge support files

        Args:
            site_id (string): TODO: type description here.
            mxedge_id (string): TODO: type description here.

        Returns:
            ApiV1SitesMxedgesSupportResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/mxedges/{mxedge_id}/support')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('mxedge_id')
                            .value(mxedge_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesMxedgesSupportResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesMxedgesSupport401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesMxedgesSupport403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesMxedgesSupport404ErrorException)
        ).execute()
