# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.api_v_1_sites_location_coverage_response import ApiV1SitesLocationCoverageResponse
from mistapi.models.ml_events import MlEvents
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_location_coverage_401_error_exception import ApiV1SitesLocationCoverage401ErrorException
from mistapi.exceptions.api_v_1_sites_location_coverage_403_error_exception import ApiV1SitesLocationCoverage403ErrorException
from mistapi.exceptions.api_v_1_sites_location_coverage_404_error_exception import ApiV1SitesLocationCoverage404ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_current_401_error_exception import ApiV1SitesLocationMlCurrent401ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_current_403_error_exception import ApiV1SitesLocationMlCurrent403ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_current_404_error_exception import ApiV1SitesLocationMlCurrent404ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_defaults_401_error_exception import ApiV1SitesLocationMlDefaults401ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_defaults_403_error_exception import ApiV1SitesLocationMlDefaults403ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_defaults_404_error_exception import ApiV1SitesLocationMlDefaults404ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_device_401_error_exception import ApiV1SitesLocationMlDevice401ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_device_403_error_exception import ApiV1SitesLocationMlDevice403ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_device_404_error_exception import ApiV1SitesLocationMlDevice404ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_map_401_error_exception import ApiV1SitesLocationMlMap401ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_map_403_error_exception import ApiV1SitesLocationMlMap403ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_map_404_error_exception import ApiV1SitesLocationMlMap404ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_reset_map_401_error_exception import ApiV1SitesLocationMlResetMap401ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_reset_map_403_error_exception import ApiV1SitesLocationMlResetMap403ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_reset_map_404_error_exception import ApiV1SitesLocationMlResetMap404ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_updates_401_error_exception import ApiV1SitesLocationMlUpdates401ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_updates_403_error_exception import ApiV1SitesLocationMlUpdates403ErrorException
from mistapi.exceptions.api_v_1_sites_location_ml_updates_404_error_exception import ApiV1SitesLocationMlUpdates404ErrorException


class SitesLocationController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesLocationController, self).__init__(config)

    def get_site_beam_coverage_overview(self,
                                        site_id,
                                        map_id=None,
                                        mtype='sdkclient',
                                        duration='1h',
                                        resolution='default',
                                        client_type=None,
                                        start=0,
                                        end=0):
        """Does a GET request to /api/v1/sites/{site_id}/location/coverage.

        Get Beam Coverage Overview

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (string, optional): map_id (filter by map_id)
            mtype (Type58Enum, optional): TODO: type description here.
                Example: sdkclient
            duration (DurationEnum, optional): where the start time will be
                calculated (with end time is now)
            resolution (ResolutionEnum, optional): TODO: type description
                here. Example: default
            client_type (string, optional): client_type (as filter. optional)
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0

        Returns:
            ApiV1SitesLocationCoverageResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/location/coverage')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('map_id')
                         .value(map_id))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('resolution')
                         .value(resolution))
            .query_param(Parameter()
                         .key('client_type')
                         .value(client_type))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesLocationCoverageResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesLocationCoverage401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesLocationCoverage403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesLocationCoverage404ErrorException)
        ).execute()

    def get_site_machine_learning_current_stat(self,
                                               site_id,
                                               map_id=None):
        """Does a GET request to /api/v1/sites/{site_id}/location/ml/current.

        Get Machine Learning Current Stat
        For each VBLE AP, it has ML model parameters (e.g. Path-loss-estimate,
        Intercept) as well as completion indicators (Level and
        PercentageComplete). For the completeness, ML takes N sample to finish
        its first level and use N*0.25 samples to complete each successive
        level. When a device is moved, the completeness will be reset as it
        has to re-learn.

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (string, optional): map_id (as filter, optional)

        Returns:
            list of object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/location/ml/current')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('map_id')
                         .value(map_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesLocationMlCurrent401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesLocationMlCurrent403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesLocationMlCurrent404ErrorException)
        ).execute()

    def get_site_default_plf_for_models(self,
                                        site_id):
        """Does a GET request to /api/v1/sites/{site_id}/location/ml/defaults.

        Get Default PLF for Models

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            list of object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/location/ml/defaults')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesLocationMlDefaults401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesLocationMlDefaults403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesLocationMlDefaults404ErrorException)
        ).execute()

    def clear_site_ml_overwrite_for_device(self,
                                           site_id,
                                           device_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/location/ml/device/{device_id}.

        Clear ML Overwrite for Device

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/location/ml/device/{device_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesLocationMlDevice401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesLocationMlDevice403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesLocationMlDevice404ErrorException)
        ).execute()

    def overwrite_site_ml_for_device(self,
                                     site_id,
                                     device_id,
                                     body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/location/ml/device/{device_id}.

        Overwrite ML For Device

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            body (dict, optional): Request Body

        Returns:
            list of object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/location/ml/device/{device_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesLocationMlDevice401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesLocationMlDevice403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesLocationMlDevice404ErrorException)
        ).execute()

    def clear_site_ml_overwrite_for_map(self,
                                        site_id,
                                        map_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/location/ml/map/{map_id}.

        Clear ML Overwrite for Map

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/location/ml/map/{map_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesLocationMlMap401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesLocationMlMap403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesLocationMlMap404ErrorException)
        ).execute()

    def overwrite_site_ml_for_map(self,
                                  site_id,
                                  map_id,
                                  body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/location/ml/map/{map_id}.

        Overwrite ML For Map

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.
            body (dict, optional): Request Body

        Returns:
            list of object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/location/ml/map/{map_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesLocationMlMap401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesLocationMlMap403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesLocationMlMap404ErrorException)
        ).execute()

    def reset_site_ml_stats_by_map(self,
                                   site_id,
                                   map_id):
        """Does a POST request to /api/v1/sites/{site_id}/location/ml/reset/map/{map_id}.

        Reset ML Stats by Map

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/location/ml/reset/map/{map_id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesLocationMlResetMap401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesLocationMlResetMap403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesLocationMlResetMap404ErrorException)
        ).execute()

    def get_site_machine_learning_events(self,
                                         site_id,
                                         device_id=None,
                                         map_ip=None,
                                         client_type=None,
                                         duration=None,
                                         start=0,
                                         end=0,
                                         interval=None):
        """Does a GET request to /api/v1/sites/{site_id}/location/ml/updates.

        Get Machine Learning Events

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (string, optional): device_id (as filter, optional)
            map_ip (string, optional): map_id (as filter, optional)
            client_type (string, optional): client_type (as filter, optional)
            duration (string, optional): instead of start, you can use 1d,
                30m, 5h, where the start will be calculated
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            interval (string, optional): TODO: type description here.

        Returns:
            MlEvents: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/location/ml/updates')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('device_id')
                         .value(device_id))
            .query_param(Parameter()
                         .key('map_ip')
                         .value(map_ip))
            .query_param(Parameter()
                         .key('client_type')
                         .value(client_type))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('interval')
                         .value(interval))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MlEvents.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesLocationMlUpdates401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesLocationMlUpdates403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesLocationMlUpdates404ErrorException)
        ).execute()
