# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.logs_search import LogsSearch
from mistapi.models.count import Count
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_msps_logs_401_error_exception import ApiV1MspsLogs401ErrorException
from mistapi.exceptions.api_v_1_msps_logs_403_error_exception import ApiV1MspsLogs403ErrorException
from mistapi.exceptions.api_v_1_msps_logs_404_error_exception import ApiV1MspsLogs404ErrorException
from mistapi.exceptions.api_v_1_msps_logs_count_401_error_exception import ApiV1MspsLogsCount401ErrorException
from mistapi.exceptions.api_v_1_msps_logs_count_403_error_exception import ApiV1MspsLogsCount403ErrorException
from mistapi.exceptions.api_v_1_msps_logs_count_404_error_exception import ApiV1MspsLogsCount404ErrorException


class MspsLogsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(MspsLogsController, self).__init__(config)

    def list_msp_logs(self,
                      msp_id,
                      site_id=None,
                      admin_name=None,
                      message=None,
                      sort=None,
                      start=0,
                      end=0,
                      limit=100,
                      page=1,
                      duration='1d'):
        """Does a GET request to /api/v1/msps/{msp_id}/logs.

        Get list of change logs for the current MSP

        Args:
            msp_id (uuid|string): TODO: type description here.
            site_id (string, optional): site id
            admin_name (string, optional): admin name or email
            message (string, optional): message
            sort (SortEnum, optional): sort order
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            limit (int, optional): TODO: type description here. Example: 100
            page (int, optional): TODO: type description here. Example: 1
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            LogsSearch: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/logs')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('site_id')
                         .value(site_id))
            .query_param(Parameter()
                         .key('admin_name')
                         .value(admin_name))
            .query_param(Parameter()
                         .key('message')
                         .value(message))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LogsSearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsLogs401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsLogs403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsLogs404ErrorException)
        ).execute()

    def count_msp_logs(self,
                       msp_id,
                       distinct='admin_name'):
        """Does a GET request to /api/v1/msps/{msp_id}/logs/count.

        Count by Distinct Attributes of Audit Logs

        Args:
            msp_id (uuid|string): TODO: type description here.
            distinct (DistinctEnum, optional): TODO: type description here.
                Example: admin_name

        Returns:
            Count: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/logs/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Count.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsLogsCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsLogsCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsLogsCount404ErrorException)
        ).execute()
