# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.org import Org
from mistapi.models.orgs_search import OrgsSearch
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_msps_orgs_401_error_exception import ApiV1MspsOrgs401ErrorException
from mistapi.exceptions.api_v_1_msps_orgs_403_error_exception import ApiV1MspsOrgs403ErrorException
from mistapi.exceptions.api_v_1_msps_orgs_404_error_exception import ApiV1MspsOrgs404ErrorException
from mistapi.exceptions.api_v_1_msps_orgs_search_401_error_exception import ApiV1MspsOrgsSearch401ErrorException
from mistapi.exceptions.api_v_1_msps_orgs_search_403_error_exception import ApiV1MspsOrgsSearch403ErrorException
from mistapi.exceptions.api_v_1_msps_orgs_search_404_error_exception import ApiV1MspsOrgsSearch404ErrorException


class MspsOrgsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(MspsOrgsController, self).__init__(config)

    def list_msp_orgs(self,
                      msp_id):
        """Does a GET request to /api/v1/msps/{msp_id}/orgs.

        Get List of MSP Orgs

        Args:
            msp_id (uuid|string): TODO: type description here.

        Returns:
            list of Org: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/orgs')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Org.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsOrgs401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsOrgs403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsOrgs404ErrorException)
        ).execute()

    def create_msp_org(self,
                       msp_id,
                       body=None):
        """Does a POST request to /api/v1/msps/{msp_id}/orgs.

        Create an Org under MSP

        Args:
            msp_id (uuid|string): TODO: type description here.
            body (Org, optional): Request Body

        Returns:
            Org: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/orgs')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Org.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsOrgs401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsOrgs403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsOrgs404ErrorException)
        ).execute()

    def manage_msp_orgs(self,
                        msp_id,
                        body=None):
        """Does a PUT request to /api/v1/msps/{msp_id}/orgs.

        Assign or Unassign Orgs to an MSP account

        Args:
            msp_id (uuid|string): TODO: type description here.
            body (ApiV1MspsOrgsRequest, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/orgs')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsOrgs401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsOrgs403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsOrgs404ErrorException)
        ).execute()

    def search_msp_orgs(self,
                        msp_id,
                        name=None,
                        org_id=None,
                        sub_insufficient=None,
                        trial_enabled=None,
                        usage_types=None,
                        limit=100):
        """Does a GET request to /api/v1/msps/{msp_id}/orgs/search.

        Search Org in MSP

        Args:
            msp_id (uuid|string): TODO: type description here.
            name (string, optional): TODO: type description here.
            org_id (uuid|string, optional): org id
            sub_insufficient (bool, optional): if this org has sufficient
                subscription
            trial_enabled (bool, optional): if this org is under trial period
            usage_types (list of string, optional): a list of types that
                enabled by usage
            limit (int, optional): TODO: type description here. Example: 100

        Returns:
            OrgsSearch: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/orgs/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('org_id')
                         .value(org_id))
            .query_param(Parameter()
                         .key('sub_insufficient')
                         .value(sub_insufficient))
            .query_param(Parameter()
                         .key('trial_enabled')
                         .value(trial_enabled))
            .query_param(Parameter()
                         .key('usage_types')
                         .value(usage_types))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OrgsSearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsOrgsSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsOrgsSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsOrgsSearch404ErrorException)
        ).execute()

    def get_msp_org(self,
                    msp_id,
                    org_id):
        """Does a GET request to /api/v1/msps/{msp_id}/orgs/{org_id}.

        Get MSP Org Details

        Args:
            msp_id (uuid|string): TODO: type description here.
            org_id (uuid|string): TODO: type description here.

        Returns:
            Org: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/orgs/{org_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Org.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsOrgs401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsOrgs403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsOrgs404ErrorException)
        ).execute()
