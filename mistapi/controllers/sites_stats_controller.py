# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.stats_site import StatsSite
from mistapi.models.stats_asset import StatsAsset
from mistapi.models.stats_beacon import StatsBeacon
from mistapi.models.asset import Asset
from mistapi.models.api_v_1_sites_stats_discovered_switch_metrics_search_response import ApiV1SitesStatsDiscoveredSwitchMetricsSearchResponse
from mistapi.models.api_v_1_sites_stats_discovered_switches_count_response import ApiV1SitesStatsDiscoveredSwitchesCountResponse
from mistapi.models.api_v_1_sites_stats_discovered_switches_metrics_response import ApiV1SitesStatsDiscoveredSwitchesMetricsResponse
from mistapi.models.api_v_1_sites_stats_discovered_switches_search_response import ApiV1SitesStatsDiscoveredSwitchesSearchResponse
from mistapi.models.api_v_1_sites_stats_gateways_metrics_response import ApiV1SitesStatsGatewaysMetricsResponse
from mistapi.models.stats_client import StatsClient
from mistapi.models.stats_sdkclient import StatsSdkclient
from mistapi.models.stats_unconnected_clients import StatsUnconnectedClients
from mistapi.models.stats_sdkclient_details import StatsSdkclientDetails
from mistapi.models.stats_wxrule import StatsWxrule
from mistapi.models.stats_zone import StatsZone
from mistapi.models.stats_zone_details import StatsZoneDetails
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_stats_401_error_exception import ApiV1SitesStats401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_403_error_exception import ApiV1SitesStats403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_404_error_exception import ApiV1SitesStats404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_assets_401_error_exception import ApiV1SitesStatsAssets401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_assets_403_error_exception import ApiV1SitesStatsAssets403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_assets_404_error_exception import ApiV1SitesStatsAssets404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_assets_asset_id_401_error_exception import ApiV1SitesStatsAssetsAssetId401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_assets_asset_id_403_error_exception import ApiV1SitesStatsAssetsAssetId403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_assets_asset_id_404_error_exception import ApiV1SitesStatsAssetsAssetId404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_beacons_401_error_exception import ApiV1SitesStatsBeacons401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_beacons_403_error_exception import ApiV1SitesStatsBeacons403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_beacons_404_error_exception import ApiV1SitesStatsBeacons404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_clients_401_error_exception import ApiV1SitesStatsClients401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_clients_403_error_exception import ApiV1SitesStatsClients403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_clients_404_error_exception import ApiV1SitesStatsClients404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_assets_401_error_exception import ApiV1SitesStatsDiscoveredAssets401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_assets_403_error_exception import ApiV1SitesStatsDiscoveredAssets403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_assets_404_error_exception import ApiV1SitesStatsDiscoveredAssets404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_switch_metrics_search_401_error_exception import ApiV1SitesStatsDiscoveredSwitchMetricsSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_switch_metrics_search_403_error_exception import ApiV1SitesStatsDiscoveredSwitchMetricsSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_switch_metrics_search_404_error_exception import ApiV1SitesStatsDiscoveredSwitchMetricsSearch404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_switches_count_401_error_exception import ApiV1SitesStatsDiscoveredSwitchesCount401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_switches_count_403_error_exception import ApiV1SitesStatsDiscoveredSwitchesCount403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_switches_count_404_error_exception import ApiV1SitesStatsDiscoveredSwitchesCount404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_switches_metrics_401_error_exception import ApiV1SitesStatsDiscoveredSwitchesMetrics401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_switches_metrics_403_error_exception import ApiV1SitesStatsDiscoveredSwitchesMetrics403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_switches_metrics_404_error_exception import ApiV1SitesStatsDiscoveredSwitchesMetrics404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_switches_search_401_error_exception import ApiV1SitesStatsDiscoveredSwitchesSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_switches_search_403_error_exception import ApiV1SitesStatsDiscoveredSwitchesSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_discovered_switches_search_404_error_exception import ApiV1SitesStatsDiscoveredSwitchesSearch404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_gateways_metrics_401_error_exception import ApiV1SitesStatsGatewaysMetrics401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_gateways_metrics_403_error_exception import ApiV1SitesStatsGatewaysMetrics403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_gateways_metrics_404_error_exception import ApiV1SitesStatsGatewaysMetrics404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_maps_clients_401_error_exception import ApiV1SitesStatsMapsClients401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_maps_clients_403_error_exception import ApiV1SitesStatsMapsClients403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_maps_clients_404_error_exception import ApiV1SitesStatsMapsClients404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_maps_discovered_assets_401_error_exception import ApiV1SitesStatsMapsDiscoveredAssets401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_maps_discovered_assets_403_error_exception import ApiV1SitesStatsMapsDiscoveredAssets403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_maps_discovered_assets_404_error_exception import ApiV1SitesStatsMapsDiscoveredAssets404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_maps_sdkclients_401_error_exception import ApiV1SitesStatsMapsSdkclients401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_maps_sdkclients_403_error_exception import ApiV1SitesStatsMapsSdkclients403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_maps_sdkclients_404_error_exception import ApiV1SitesStatsMapsSdkclients404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_maps_unconnected_clients_401_error_exception import ApiV1SitesStatsMapsUnconnectedClients401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_maps_unconnected_clients_403_error_exception import ApiV1SitesStatsMapsUnconnectedClients403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_maps_unconnected_clients_404_error_exception import ApiV1SitesStatsMapsUnconnectedClients404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_sdkclients_401_error_exception import ApiV1SitesStatsSdkclients401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_sdkclients_403_error_exception import ApiV1SitesStatsSdkclients403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_sdkclients_404_error_exception import ApiV1SitesStatsSdkclients404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_wxrules_401_error_exception import ApiV1SitesStatsWxrules401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_wxrules_403_error_exception import ApiV1SitesStatsWxrules403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_wxrules_404_error_exception import ApiV1SitesStatsWxrules404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_zones_401_error_exception import ApiV1SitesStatsZones401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_zones_403_error_exception import ApiV1SitesStatsZones403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_zones_404_error_exception import ApiV1SitesStatsZones404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_zone_id_401_error_exception import ApiV1SitesStatsZoneId401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_zone_id_403_error_exception import ApiV1SitesStatsZoneId403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_zone_id_404_error_exception import ApiV1SitesStatsZoneId404ErrorException


class SitesStatsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesStatsController, self).__init__(config)

    def get_site_stats(self,
                       site_id):
        """Does a GET request to /api/v1/sites/{site_id}/stats.

        Get Site Stats

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            StatsSite: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsSite.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStats401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStats403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStats404ErrorException)
        ).execute()

    def list_site_assets_stats(self,
                               site_id,
                               page=1,
                               limit=100,
                               start=0,
                               end=0,
                               duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/assets.

        Get List of Site Assets Stats

        Args:
            site_id (uuid|string): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            list of StatsAsset: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/assets')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsAsset.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsAssets401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsAssets403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsAssets404ErrorException)
        ).execute()

    def get_site_asset_stats(self,
                             site_id,
                             start=0,
                             end=0,
                             duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/assets/asset_id.

        Get Site Asset Details

        Args:
            site_id (uuid|string): TODO: type description here.
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            StatsAsset: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/assets/asset_id')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsAsset.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsAssetsAssetId401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsAssetsAssetId403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsAssetsAssetId404ErrorException)
        ).execute()

    def list_site_beacons_stats(self,
                                site_id,
                                page=1,
                                limit=100,
                                start=0,
                                end=0,
                                duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/beacons.

        Get List of Site Beacons Stats

        Args:
            site_id (uuid|string): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            list of StatsBeacon: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/beacons')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsBeacon.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsBeacons401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsBeacons403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsBeacons404ErrorException)
        ).execute()

    def list_site_wireless_clients_stats(self,
                                         site_id,
                                         wired=False):
        """Does a GET request to /api/v1/sites/{site_id}/stats/clients.

        Get List of Site All Clients Stats Details

        Args:
            site_id (uuid|string): TODO: type description here.
            wired (bool, optional): TODO: type description here. Example:
                false

        Returns:
            list of mixed: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/clients')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('wired')
                         .value(wired))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsClients401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsClients403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsClients404ErrorException)
        ).execute()

    def get_site_wireless_client_stats(self,
                                       site_id,
                                       client_mac,
                                       wired=False):
        """Does a GET request to /api/v1/sites/{site_id}/stats/clients/{client_mac}.

        Get Site Client Stats Details

        Args:
            site_id (uuid|string): TODO: type description here.
            client_mac (string): TODO: type description here.
            wired (bool, optional): TODO: type description here. Example:
                false

        Returns:
            mixed: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/clients/{client_mac}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('client_mac')
                            .value(client_mac)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('wired')
                         .value(wired))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsClients401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsClients403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsClients404ErrorException)
        ).execute()

    def list_site_discovered_assets(self,
                                    site_id,
                                    page=1,
                                    limit=100,
                                    start=0,
                                    end=0,
                                    duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/discovered_assets.

        Get List of Site Discovered BLE Assets that doesn’t match any of the
        Asset / Assetfilters

        Args:
            site_id (uuid|string): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            list of Asset: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/discovered_assets')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Asset.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsDiscoveredAssets401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsDiscoveredAssets403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsDiscoveredAssets404ErrorException)
        ).execute()

    def search_site_discovered_switches_metrics(self,
                                                site_id,
                                                scope='site',
                                                mtype=None,
                                                limit=100,
                                                start=0,
                                                end=0,
                                                duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/discovered_switch_metrics/search.

        Search Discovered Switch Metrics

        Args:
            site_id (uuid|string): TODO: type description here.
            scope (Scope17Enum, optional): metric scope, optional
            mtype (Type62Enum, optional): metric type,
                inactive_wired_vlans/switch_ap_affinity/poe_compliance/version_
                compliance, optional
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ApiV1SitesStatsDiscoveredSwitchMetricsSearchResponse: Response
                from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/discovered_switch_metrics/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('scope')
                         .value(scope))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesStatsDiscoveredSwitchMetricsSearchResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsDiscoveredSwitchMetricsSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsDiscoveredSwitchMetricsSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsDiscoveredSwitchMetricsSearch404ErrorException)
        ).execute()

    def count_site_discovered_switches(self,
                                       site_id,
                                       distinct='system_name',
                                       page=1,
                                       limit=100,
                                       start=0,
                                       end=0,
                                       duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/discovered_switches/count.

        Count Discovered Switches

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct18Enum, optional): TODO: type description here.
                Example: system_name
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ApiV1SitesStatsDiscoveredSwitchesCountResponse: Response from the
                API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/discovered_switches/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesStatsDiscoveredSwitchesCountResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsDiscoveredSwitchesCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsDiscoveredSwitchesCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsDiscoveredSwitchesCount404ErrorException)
        ).execute()

    def get_site_discovered_switches_metrics(self,
                                             site_id,
                                             threshold=None,
                                             system_name=None):
        """Does a GET request to /api/v1/sites/{site_id}/stats/discovered_switches/metrics.

        Discovered switches related metrics, lists related switch system names
        & details if not compliant

        Args:
            site_id (uuid|string): TODO: type description here.
            threshold (string, optional): configurable # ap per switch
                threshold, default 12
            system_name (string, optional): system name for switch level
                metrics, optional

        Returns:
            ApiV1SitesStatsDiscoveredSwitchesMetricsResponse: Response from
                the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/discovered_switches/metrics')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('threshold')
                         .value(threshold))
            .query_param(Parameter()
                         .key('system_name')
                         .value(system_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesStatsDiscoveredSwitchesMetricsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsDiscoveredSwitchesMetrics401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsDiscoveredSwitchesMetrics403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsDiscoveredSwitchesMetrics404ErrorException)
        ).execute()

    def search_site_discovered_switches(self,
                                        site_id,
                                        adopted=None,
                                        system_name=None,
                                        hostname=None,
                                        vendor=None,
                                        model=None,
                                        version=None,
                                        limit=100,
                                        start=0,
                                        end=0,
                                        duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/discovered_switches/search.

        Search Discovered Switches

        Args:
            site_id (uuid|string): TODO: type description here.
            adopted (bool, optional): TODO: type description here.
            system_name (string, optional): TODO: type description here.
            hostname (string, optional): TODO: type description here.
            vendor (string, optional): TODO: type description here.
            model (string, optional): TODO: type description here.
            version (string, optional): TODO: type description here.
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ApiV1SitesStatsDiscoveredSwitchesSearchResponse: Response from the
                API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/discovered_switches/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('adopted')
                         .value(adopted))
            .query_param(Parameter()
                         .key('system_name')
                         .value(system_name))
            .query_param(Parameter()
                         .key('hostname')
                         .value(hostname))
            .query_param(Parameter()
                         .key('vendor')
                         .value(vendor))
            .query_param(Parameter()
                         .key('model')
                         .value(model))
            .query_param(Parameter()
                         .key('version')
                         .value(version))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesStatsDiscoveredSwitchesSearchResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsDiscoveredSwitchesSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsDiscoveredSwitchesSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsDiscoveredSwitchesSearch404ErrorException)
        ).execute()

    def get_site_gateway_metrics(self,
                                 site_id):
        """Does a GET request to /api/v1/sites/{site_id}/stats/gateways/metrics.

        Get Site Gateway Metrics

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            ApiV1SitesStatsGatewaysMetricsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/gateways/metrics')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesStatsGatewaysMetricsResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsGatewaysMetrics401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsGatewaysMetrics403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsGatewaysMetrics404ErrorException)
        ).execute()

    def get_site_wireless_clients_stats_by_map(self,
                                               site_id,
                                               map_id,
                                               page=1,
                                               limit=100,
                                               start=0,
                                               end=0,
                                               duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/maps/{map_id}/clients.

        Get Site Clients Stats By Map

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            list of StatsClient: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/maps/{map_id}/clients')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsClient.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsMapsClients401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsMapsClients403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsMapsClients404ErrorException)
        ).execute()

    def get_site_discovered_asset_by_map(self,
                                         site_id,
                                         map_id):
        """Does a GET request to /api/v1/sites/{site_id}/stats/maps/{map_id}/discovered_assets.

        Get a list of BLE beacons that we discovered (whether they’re defined
        as assets or not)

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.

        Returns:
            list of StatsAsset: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/maps/{map_id}/discovered_assets')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsAsset.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsMapsDiscoveredAssets401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsMapsDiscoveredAssets403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsMapsDiscoveredAssets404ErrorException)
        ).execute()

    def get_site_sdk_stats_by_map(self,
                                  site_id,
                                  map_id):
        """Does a GET request to /api/v1/sites/{site_id}/stats/maps/{map_id}/sdkclients.

        Get SdkClient Stats By Map

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.

        Returns:
            list of StatsSdkclient: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/maps/{map_id}/sdkclients')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsSdkclient.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsMapsSdkclients401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsMapsSdkclients403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsMapsSdkclients404ErrorException)
        ).execute()

    def list_site_unconnected_client_stats(self,
                                           site_id,
                                           map_id):
        """Does a GET request to /api/v1/sites/{site_id}/stats/maps/{map_id}/unconnected_clients.

        Get List of Site Unconnected Client Location

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (uuid|string): TODO: type description here.

        Returns:
            list of StatsUnconnectedClients: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/maps/{map_id}/unconnected_clients')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('map_id')
                            .value(map_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsUnconnectedClients.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsMapsUnconnectedClients401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsMapsUnconnectedClients403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsMapsUnconnectedClients404ErrorException)
        ).execute()

    def get_site_sdk_stats(self,
                           site_id,
                           sdkclient_id):
        """Does a GET request to /api/v1/sites/{site_id}/stats/sdkclients/{sdkclient_id}.

        Get Detail Stats of a SdkClient

        Args:
            site_id (uuid|string): TODO: type description here.
            sdkclient_id (uuid|string): TODO: type description here.

        Returns:
            StatsSdkclientDetails: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/sdkclients/{sdkclient_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('sdkclient_id')
                            .value(sdkclient_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsSdkclientDetails.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsSdkclients401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsSdkclients403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsSdkclients404ErrorException)
        ).execute()

    def get_site_wx_rules_usage(self,
                                site_id):
        """Does a GET request to /api/v1/sites/{site_id}/stats/wxrules.

        Get Wxlan Rule usage

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            list of StatsWxrule: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/wxrules')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsWxrule.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsWxrules401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsWxrules403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsWxrules404ErrorException)
        ).execute()

    def list_site_zones_stats(self,
                              site_id,
                              map_id=None):
        """Does a GET request to /api/v1/sites/{site_id}/stats/zones.

        Get List of Site Zones Stats

        Args:
            site_id (uuid|string): TODO: type description here.
            map_id (string, optional): TODO: type description here.

        Returns:
            list of StatsZone: Response from the API. Ok

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/zones')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('map_id')
                         .value(map_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsZone.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsZones401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsZones403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsZones404ErrorException)
        ).execute()

    def get_site_zone_stats(self,
                            site_id,
                            zone_type,
                            zone_id):
        """Does a GET request to /api/v1/sites/{site_id}/stats/{zone_type}/{zone_id}.

        Get Detail Zone Stats

        Args:
            site_id (uuid|string): TODO: type description here.
            zone_type (ZoneTypeEnum): TODO: type description here.
            zone_id (uuid|string): TODO: type description here.

        Returns:
            StatsZoneDetails: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/{zone_type}/{zone_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('zone_type')
                            .value(zone_type)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('zone_id')
                            .value(zone_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsZoneDetails.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsZoneId401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsZoneId403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsZoneId404ErrorException)
        ).execute()
