# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.count import Count
from mistapi.models.bgp_stats_array_search import BgpStatsArraySearch
from mistapi.models.devices_array_stats_site import DevicesArrayStatsSite
from mistapi.models.stats_client import StatsClient
from mistapi.models.stats_mxedge import StatsMxedge
from mistapi.models.api_v_1_sites_stats_ports_count_response import ApiV1SitesStatsPortsCountResponse
from mistapi.models.api_v_1_sites_stats_ports_search_response import ApiV1SitesStatsPortsSearchResponse
from mistapi.models.api_v_1_sites_stats_switch_ports_count_response import ApiV1SitesStatsSwitchPortsCountResponse
from mistapi.models.api_v_1_sites_stats_switch_ports_search_response import ApiV1SitesStatsSwitchPortsSearchResponse
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_stats_bgp_peers_count_401_error_exception import ApiV1SitesStatsBgpPeersCount401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_bgp_peers_count_403_error_exception import ApiV1SitesStatsBgpPeersCount403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_bgp_peers_count_404_error_exception import ApiV1SitesStatsBgpPeersCount404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_bgp_peers_search_401_error_exception import ApiV1SitesStatsBgpPeersSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_bgp_peers_search_403_error_exception import ApiV1SitesStatsBgpPeersSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_bgp_peers_search_404_error_exception import ApiV1SitesStatsBgpPeersSearch404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_devices_401_error_exception import ApiV1SitesStatsDevices401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_devices_403_error_exception import ApiV1SitesStatsDevices403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_devices_404_error_exception import ApiV1SitesStatsDevices404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_devices_clients_401_error_exception import ApiV1SitesStatsDevicesClients401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_devices_clients_403_error_exception import ApiV1SitesStatsDevicesClients403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_devices_clients_404_error_exception import ApiV1SitesStatsDevicesClients404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_mxedges_401_error_exception import ApiV1SitesStatsMxedges401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_mxedges_403_error_exception import ApiV1SitesStatsMxedges403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_mxedges_404_error_exception import ApiV1SitesStatsMxedges404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_ports_count_401_error_exception import ApiV1SitesStatsPortsCount401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_ports_count_403_error_exception import ApiV1SitesStatsPortsCount403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_ports_count_404_error_exception import ApiV1SitesStatsPortsCount404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_ports_search_401_error_exception import ApiV1SitesStatsPortsSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_ports_search_403_error_exception import ApiV1SitesStatsPortsSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_ports_search_404_error_exception import ApiV1SitesStatsPortsSearch404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_switch_ports_count_401_error_exception import ApiV1SitesStatsSwitchPortsCount401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_switch_ports_count_403_error_exception import ApiV1SitesStatsSwitchPortsCount403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_switch_ports_count_404_error_exception import ApiV1SitesStatsSwitchPortsCount404ErrorException
from mistapi.exceptions.api_v_1_sites_stats_switch_ports_search_401_error_exception import ApiV1SitesStatsSwitchPortsSearch401ErrorException
from mistapi.exceptions.api_v_1_sites_stats_switch_ports_search_403_error_exception import ApiV1SitesStatsSwitchPortsSearch403ErrorException
from mistapi.exceptions.api_v_1_sites_stats_switch_ports_search_404_error_exception import ApiV1SitesStatsSwitchPortsSearch404ErrorException


class SitesDevicesStatsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesDevicesStatsController, self).__init__(config)

    def count_site_bgp_stats(self,
                             site_id,
                             state=None,
                             distinct=None):
        """Does a GET request to /api/v1/sites/{site_id}/stats/bgp_peers/count.

        Count BGP Stats

        Args:
            site_id (uuid|string): TODO: type description here.
            state (string, optional): TODO: type description here.
            distinct (string, optional): TODO: type description here.

        Returns:
            Count: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/bgp_peers/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('state')
                         .value(state))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Count.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsBgpPeersCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsBgpPeersCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsBgpPeersCount404ErrorException)
        ).execute()

    def search_site_bgp_stats(self,
                              site_id):
        """Does a GET request to /api/v1/sites/{site_id}/stats/bgp_peers/search.

        Search BGP Stats

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            BgpStatsArraySearch: Response from the API. Example response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/bgp_peers/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BgpStatsArraySearch.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsBgpPeersSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsBgpPeersSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsBgpPeersSearch404ErrorException)
        ).execute()

    def list_site_devices_stats(self,
                                site_id,
                                mtype='ap',
                                status='all',
                                page=1,
                                limit=100):
        """Does a GET request to /api/v1/sites/{site_id}/stats/devices.

        Get List of Site Devices Stats

        Args:
            site_id (uuid|string): TODO: type description here.
            mtype (Type47Enum, optional): TODO: type description here.
                Example: ap
            status (Status9Enum, optional): TODO: type description here.
                Example: all
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100

        Returns:
            list of DevicesArrayStatsSite: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/devices')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DevicesArrayStatsSite.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsDevices401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsDevices403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsDevices404ErrorException)
        ).execute()

    def get_site_device_stats(self,
                              site_id,
                              device_id):
        """Does a GET request to /api/v1/sites/{site_id}/stats/devices/{device_id}.

        Get Site Device Stats Details

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.

        Returns:
            mixed: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/devices/{device_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsDevices401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsDevices403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsDevices404ErrorException)
        ).execute()

    def get_site_all_clients_stats_by_device(self,
                                             site_id,
                                             device_id):
        """Does a GET request to /api/v1/sites/{site_id}/stats/devices/{device_id}/clients.

        Get wireless client stat by Device

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.

        Returns:
            list of StatsClient: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/devices/{device_id}/clients')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsClient.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsDevicesClients401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsDevicesClients403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsDevicesClients404ErrorException)
        ).execute()

    def list_site_mx_edges_stats(self,
                                 site_id):
        """Does a GET request to /api/v1/sites/{site_id}/stats/mxedges.

        Get List of Site MxEdges Stats

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            list of StatsMxedge: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/mxedges')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsMxedge.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsMxedges401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsMxedges403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsMxedges404ErrorException)
        ).execute()

    def get_site_mx_edge_stats(self,
                               site_id,
                               mxedge_id):
        """Does a GET request to /api/v1/sites/{site_id}/stats/mxedges/{mxedge_id}.

        Get One Site MxEdge Stats

        Args:
            site_id (uuid|string): TODO: type description here.
            mxedge_id (uuid|string): TODO: type description here.

        Returns:
            StatsMxedge: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/mxedges/{mxedge_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('mxedge_id')
                            .value(mxedge_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(StatsMxedge.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsMxedges401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsMxedges403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsMxedges404ErrorException)
        ).execute()

    def count_site_sw_or_gw_ports(self,
                                  site_id,
                                  distinct='mac',
                                  full_duplex=None,
                                  mac=None,
                                  neighbor_mac=None,
                                  neighbor_port_desc=None,
                                  neighbor_system_name=None,
                                  poe_disabled=None,
                                  poe_mode=None,
                                  poe_on=None,
                                  port_id=None,
                                  port_mac=None,
                                  power_draw=None,
                                  tx_pkts=None,
                                  rx_pkts=None,
                                  rx_bytes=None,
                                  tx_bps=None,
                                  rx_bps=None,
                                  tx_mcast_pkts=None,
                                  tx_bcast_pkts=None,
                                  rx_mcast_pkts=None,
                                  rx_bcast_pkts=None,
                                  speed=None,
                                  stp_state=None,
                                  stp_role=None,
                                  auth_state=None,
                                  up=None,
                                  page=1,
                                  limit=100,
                                  start=0,
                                  end=0,
                                  duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/ports/count.

        Count by Distinct Attributes of Switch/Gateway Ports

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct19Enum, optional): port_id, port_mac,
                full_duplex, mac, neighbor_macneighbor_port_desc,
                neighbor_system_name, poe_disabled, poe_mode, poe_on, speed,
                up
            full_duplex (bool, optional): indicates full or half duplex
            mac (string, optional): device identifier
            neighbor_mac (string, optional): Chassis identifier of the chassis
                type listed
            neighbor_port_desc (string, optional): Description supplied by the
                system on the interface E.g. “GigabitEthernet2/0/39”
            neighbor_system_name (string, optional): Name supplied by the
                system on the interface E.g. neighbor system name E.g.
                “Kumar-Acc-SW.mist.local”
            poe_disabled (bool, optional): is the POE configured not be
                disabled.
            poe_mode (string, optional): poe mode depending on class E.g.
                “802.3at”
            poe_on (bool, optional): is the device attached to POE
            port_id (string, optional): interface name
            port_mac (string, optional): interface mac address
            power_draw (float, optional): Amount of power being used by the
                interface at the time the command is executed. Unit in watts.
            tx_pkts (int, optional): Output packets
            rx_pkts (int, optional): Input packets
            rx_bytes (int, optional): Input bytes
            tx_bps (int, optional): Output rate
            rx_bps (int, optional): Input rate
            tx_mcast_pkts (int, optional): Multicast output packets
            tx_bcast_pkts (int, optional): Broadcast output packets
            rx_mcast_pkts (int, optional): Multicast input packets
            rx_bcast_pkts (int, optional): Broadcast input packets
            speed (int, optional): port speed
            stp_state (StpStateEnum, optional): if `up`==`true`
            stp_role (StpRoleEnum, optional): if `up`==`true`
            auth_state (AuthStateEnum, optional): if `up`==`true` && has
                Authenticator role
            up (bool, optional): indicates if interface is up
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ApiV1SitesStatsPortsCountResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/ports/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .query_param(Parameter()
                         .key('full_duplex')
                         .value(full_duplex))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('neighbor_mac')
                         .value(neighbor_mac))
            .query_param(Parameter()
                         .key('neighbor_port_desc')
                         .value(neighbor_port_desc))
            .query_param(Parameter()
                         .key('neighbor_system_name')
                         .value(neighbor_system_name))
            .query_param(Parameter()
                         .key('poe_disabled')
                         .value(poe_disabled))
            .query_param(Parameter()
                         .key('poe_mode')
                         .value(poe_mode))
            .query_param(Parameter()
                         .key('poe_on')
                         .value(poe_on))
            .query_param(Parameter()
                         .key('port_id')
                         .value(port_id))
            .query_param(Parameter()
                         .key('port_mac')
                         .value(port_mac))
            .query_param(Parameter()
                         .key('power_draw')
                         .value(power_draw))
            .query_param(Parameter()
                         .key('tx_pkts')
                         .value(tx_pkts))
            .query_param(Parameter()
                         .key('rx_pkts')
                         .value(rx_pkts))
            .query_param(Parameter()
                         .key('rx_bytes')
                         .value(rx_bytes))
            .query_param(Parameter()
                         .key('tx_bps')
                         .value(tx_bps))
            .query_param(Parameter()
                         .key('rx_bps')
                         .value(rx_bps))
            .query_param(Parameter()
                         .key('tx_mcast_pkts')
                         .value(tx_mcast_pkts))
            .query_param(Parameter()
                         .key('tx_bcast_pkts')
                         .value(tx_bcast_pkts))
            .query_param(Parameter()
                         .key('rx_mcast_pkts')
                         .value(rx_mcast_pkts))
            .query_param(Parameter()
                         .key('rx_bcast_pkts')
                         .value(rx_bcast_pkts))
            .query_param(Parameter()
                         .key('speed')
                         .value(speed))
            .query_param(Parameter()
                         .key('stp_state')
                         .value(stp_state))
            .query_param(Parameter()
                         .key('stp_role')
                         .value(stp_role))
            .query_param(Parameter()
                         .key('auth_state')
                         .value(auth_state))
            .query_param(Parameter()
                         .key('up')
                         .value(up))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesStatsPortsCountResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsPortsCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsPortsCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsPortsCount404ErrorException)
        ).execute()

    def search_site_sw_or_gw_ports(self,
                                   site_id,
                                   full_duplex=None,
                                   mac=None,
                                   mtype=None,
                                   neighbor_mac=None,
                                   neighbor_port_desc=None,
                                   neighbor_system_name=None,
                                   poe_disabled=None,
                                   poe_mode=None,
                                   poe_on=None,
                                   port_id=None,
                                   port_mac=None,
                                   power_draw=None,
                                   tx_pkts=None,
                                   rx_pkts=None,
                                   rx_bytes=None,
                                   tx_bps=None,
                                   rx_bps=None,
                                   tx_errors=None,
                                   rx_errors=None,
                                   tx_mcast_pkts=None,
                                   tx_bcast_pkts=None,
                                   rx_mcast_pkts=None,
                                   rx_bcast_pkts=None,
                                   speed=None,
                                   mac_limit=None,
                                   mac_count=None,
                                   up=None,
                                   active=None,
                                   jitter=None,
                                   loss=None,
                                   latency=None,
                                   stp_state=None,
                                   stp_role=None,
                                   xcvr_part_number=None,
                                   auth_state=None,
                                   lte_imsi=None,
                                   lte_iccid=None,
                                   lte_imei=None,
                                   limit=100,
                                   start=0,
                                   end=0,
                                   duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/ports/search.

        Search Switch / Gateway Ports

        Args:
            site_id (uuid|string): TODO: type description here.
            full_duplex (bool, optional): indicates full or half duplex
            mac (string, optional): device identifier
            mtype (Type63Enum, optional): device type
            neighbor_mac (string, optional): Chassis identifier of the chassis
                type listed
            neighbor_port_desc (string, optional): Description supplied by the
                system on the interface E.g. “GigabitEthernet2/0/39”
            neighbor_system_name (string, optional): Name supplied by the
                system on the interface E.g. neighbor system name E.g.
                “Kumar-Acc-SW.mist.local”
            poe_disabled (bool, optional): is the POE configured not be
                disabled.
            poe_mode (string, optional): poe mode depending on class E.g.
                “802.3at”
            poe_on (bool, optional): is the device attached to POE
            port_id (string, optional): interface name
            port_mac (string, optional): interface mac address
            power_draw (float, optional): Amount of power being used by the
                interface at the time the command is executed. Unit in watts.
            tx_pkts (int, optional): Output packets
            rx_pkts (int, optional): Input packets
            rx_bytes (int, optional): Input bytes
            tx_bps (int, optional): Output rate
            rx_bps (int, optional): Input rate
            tx_errors (int, optional): Output errors
            rx_errors (int, optional): Input errors
            tx_mcast_pkts (int, optional): Multicast output packets
            tx_bcast_pkts (int, optional): Broadcast output packets
            rx_mcast_pkts (int, optional): Multicast input packets
            rx_bcast_pkts (int, optional): Broadcast input packets
            speed (int, optional): port speed
            mac_limit (int, optional): Limit on number of dynamically learned
                macs
            mac_count (int, optional): Number of mac addresses in the
                forwarding table
            up (bool, optional): indicates if interface is up
            active (bool, optional): indicates if interface is
                active/inactive
            jitter (float, optional): Last sampled jitter of the interface
            loss (float, optional): Last sampled loss of the interface
            latency (float, optional): Last sampled latency of the interface
            stp_state (StpStateEnum, optional): if `up`==`true`
            stp_role (StpRoleEnum, optional): if `up`==`true`
            xcvr_part_number (string, optional): Optic Slot Partnumber, Check
                for null/empty
            auth_state (AuthStateEnum, optional): if `up`==`true` && has
                Authenticator role
            lte_imsi (string, optional): LTE IMSI value, Check for null/empty
            lte_iccid (string, optional): LTE ICCID value, Check for
                null/empty
            lte_imei (string, optional): LTE IMEI value, Check for null/empty
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ApiV1SitesStatsPortsSearchResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/ports/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('full_duplex')
                         .value(full_duplex))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('neighbor_mac')
                         .value(neighbor_mac))
            .query_param(Parameter()
                         .key('neighbor_port_desc')
                         .value(neighbor_port_desc))
            .query_param(Parameter()
                         .key('neighbor_system_name')
                         .value(neighbor_system_name))
            .query_param(Parameter()
                         .key('poe_disabled')
                         .value(poe_disabled))
            .query_param(Parameter()
                         .key('poe_mode')
                         .value(poe_mode))
            .query_param(Parameter()
                         .key('poe_on')
                         .value(poe_on))
            .query_param(Parameter()
                         .key('port_id')
                         .value(port_id))
            .query_param(Parameter()
                         .key('port_mac')
                         .value(port_mac))
            .query_param(Parameter()
                         .key('power_draw')
                         .value(power_draw))
            .query_param(Parameter()
                         .key('tx_pkts')
                         .value(tx_pkts))
            .query_param(Parameter()
                         .key('rx_pkts')
                         .value(rx_pkts))
            .query_param(Parameter()
                         .key('rx_bytes')
                         .value(rx_bytes))
            .query_param(Parameter()
                         .key('tx_bps')
                         .value(tx_bps))
            .query_param(Parameter()
                         .key('rx_bps')
                         .value(rx_bps))
            .query_param(Parameter()
                         .key('tx_errors')
                         .value(tx_errors))
            .query_param(Parameter()
                         .key('rx_errors')
                         .value(rx_errors))
            .query_param(Parameter()
                         .key('tx_mcast_pkts')
                         .value(tx_mcast_pkts))
            .query_param(Parameter()
                         .key('tx_bcast_pkts')
                         .value(tx_bcast_pkts))
            .query_param(Parameter()
                         .key('rx_mcast_pkts')
                         .value(rx_mcast_pkts))
            .query_param(Parameter()
                         .key('rx_bcast_pkts')
                         .value(rx_bcast_pkts))
            .query_param(Parameter()
                         .key('speed')
                         .value(speed))
            .query_param(Parameter()
                         .key('mac_limit')
                         .value(mac_limit))
            .query_param(Parameter()
                         .key('mac_count')
                         .value(mac_count))
            .query_param(Parameter()
                         .key('up')
                         .value(up))
            .query_param(Parameter()
                         .key('active')
                         .value(active))
            .query_param(Parameter()
                         .key('jitter')
                         .value(jitter))
            .query_param(Parameter()
                         .key('loss')
                         .value(loss))
            .query_param(Parameter()
                         .key('latency')
                         .value(latency))
            .query_param(Parameter()
                         .key('stp_state')
                         .value(stp_state))
            .query_param(Parameter()
                         .key('stp_role')
                         .value(stp_role))
            .query_param(Parameter()
                         .key('xcvr_part_number')
                         .value(xcvr_part_number))
            .query_param(Parameter()
                         .key('auth_state')
                         .value(auth_state))
            .query_param(Parameter()
                         .key('lte_imsi')
                         .value(lte_imsi))
            .query_param(Parameter()
                         .key('lte_iccid')
                         .value(lte_iccid))
            .query_param(Parameter()
                         .key('lte_imei')
                         .value(lte_imei))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesStatsPortsSearchResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsPortsSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsPortsSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsPortsSearch404ErrorException)
        ).execute()

    def count_site_switch_ports(self,
                                site_id,
                                distinct='mac',
                                full_duplex=None,
                                mac=None,
                                neighbor_mac=None,
                                neighbor_port_desc=None,
                                neighbor_system_name=None,
                                poe_disabled=None,
                                poe_mode=None,
                                poe_on=None,
                                port_id=None,
                                port_mac=None,
                                power_draw=None,
                                tx_pkts=None,
                                rx_pkts=None,
                                rx_bytes=None,
                                tx_bps=None,
                                rx_bps=None,
                                tx_mcast_pkts=None,
                                tx_bcast_pkts=None,
                                rx_mcast_pkts=None,
                                rx_bcast_pkts=None,
                                speed=None,
                                stp_state=None,
                                stp_role=None,
                                auth_state=None,
                                up=None,
                                page=1,
                                limit=100,
                                start=0,
                                end=0,
                                duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/switch_ports/count.

        Count by Distinct Attributes of Switch/Gateway Ports

        Args:
            site_id (uuid|string): TODO: type description here.
            distinct (Distinct19Enum, optional): port_id, port_mac,
                full_duplex, mac, neighbor_macneighbor_port_desc,
                neighbor_system_name, poe_disabled, poe_mode, poe_on, speed,
                up
            full_duplex (bool, optional): indicates full or half duplex
            mac (string, optional): device identifier
            neighbor_mac (string, optional): Chassis identifier of the chassis
                type listed
            neighbor_port_desc (string, optional): Description supplied by the
                system on the interface E.g. “GigabitEthernet2/0/39”
            neighbor_system_name (string, optional): Name supplied by the
                system on the interface E.g. neighbor system name E.g.
                “Kumar-Acc-SW.mist.local”
            poe_disabled (bool, optional): is the POE configured not be
                disabled.
            poe_mode (string, optional): poe mode depending on class E.g.
                “802.3at”
            poe_on (bool, optional): is the device attached to POE
            port_id (string, optional): interface name
            port_mac (string, optional): interface mac address
            power_draw (float, optional): Amount of power being used by the
                interface at the time the command is executed. Unit in watts.
            tx_pkts (int, optional): Output packets
            rx_pkts (int, optional): Input packets
            rx_bytes (int, optional): Input bytes
            tx_bps (int, optional): Output rate
            rx_bps (int, optional): Input rate
            tx_mcast_pkts (int, optional): Multicast output packets
            tx_bcast_pkts (int, optional): Broadcast output packets
            rx_mcast_pkts (int, optional): Multicast input packets
            rx_bcast_pkts (int, optional): Broadcast input packets
            speed (int, optional): port speed
            stp_state (StpStateEnum, optional): if `up`==`true`
            stp_role (StpRoleEnum, optional): if `up`==`true`
            auth_state (AuthStateEnum, optional): if `up`==`true`
            up (bool, optional): indicates if interface is up
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ApiV1SitesStatsSwitchPortsCountResponse: Response from the API.
                OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/switch_ports/count')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distinct')
                         .value(distinct))
            .query_param(Parameter()
                         .key('full_duplex')
                         .value(full_duplex))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('neighbor_mac')
                         .value(neighbor_mac))
            .query_param(Parameter()
                         .key('neighbor_port_desc')
                         .value(neighbor_port_desc))
            .query_param(Parameter()
                         .key('neighbor_system_name')
                         .value(neighbor_system_name))
            .query_param(Parameter()
                         .key('poe_disabled')
                         .value(poe_disabled))
            .query_param(Parameter()
                         .key('poe_mode')
                         .value(poe_mode))
            .query_param(Parameter()
                         .key('poe_on')
                         .value(poe_on))
            .query_param(Parameter()
                         .key('port_id')
                         .value(port_id))
            .query_param(Parameter()
                         .key('port_mac')
                         .value(port_mac))
            .query_param(Parameter()
                         .key('power_draw')
                         .value(power_draw))
            .query_param(Parameter()
                         .key('tx_pkts')
                         .value(tx_pkts))
            .query_param(Parameter()
                         .key('rx_pkts')
                         .value(rx_pkts))
            .query_param(Parameter()
                         .key('rx_bytes')
                         .value(rx_bytes))
            .query_param(Parameter()
                         .key('tx_bps')
                         .value(tx_bps))
            .query_param(Parameter()
                         .key('rx_bps')
                         .value(rx_bps))
            .query_param(Parameter()
                         .key('tx_mcast_pkts')
                         .value(tx_mcast_pkts))
            .query_param(Parameter()
                         .key('tx_bcast_pkts')
                         .value(tx_bcast_pkts))
            .query_param(Parameter()
                         .key('rx_mcast_pkts')
                         .value(rx_mcast_pkts))
            .query_param(Parameter()
                         .key('rx_bcast_pkts')
                         .value(rx_bcast_pkts))
            .query_param(Parameter()
                         .key('speed')
                         .value(speed))
            .query_param(Parameter()
                         .key('stp_state')
                         .value(stp_state))
            .query_param(Parameter()
                         .key('stp_role')
                         .value(stp_role))
            .query_param(Parameter()
                         .key('auth_state')
                         .value(auth_state))
            .query_param(Parameter()
                         .key('up')
                         .value(up))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesStatsSwitchPortsCountResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsSwitchPortsCount401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsSwitchPortsCount403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsSwitchPortsCount404ErrorException)
        ).execute()

    def search_site_switch_ports(self,
                                 site_id,
                                 full_duplex=None,
                                 mac=None,
                                 neighbor_mac=None,
                                 neighbor_port_desc=None,
                                 neighbor_system_name=None,
                                 poe_disabled=None,
                                 poe_mode=None,
                                 poe_on=None,
                                 port_id=None,
                                 port_mac=None,
                                 power_draw=None,
                                 tx_pkts=None,
                                 rx_pkts=None,
                                 rx_bytes=None,
                                 tx_bps=None,
                                 rx_bps=None,
                                 tx_mcast_pkts=None,
                                 tx_bcast_pkts=None,
                                 rx_mcast_pkts=None,
                                 rx_bcast_pkts=None,
                                 speed=None,
                                 stp_state=None,
                                 stp_role=None,
                                 auth_state=None,
                                 up=None,
                                 limit=100,
                                 start=0,
                                 end=0,
                                 duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/stats/switch_ports/search.

        Search Switch / Gateway Ports

        Args:
            site_id (uuid|string): TODO: type description here.
            full_duplex (bool, optional): indicates full or half duplex
            mac (string, optional): device identifier
            neighbor_mac (string, optional): Chassis identifier of the chassis
                type listed
            neighbor_port_desc (string, optional): Description supplied by the
                system on the interface E.g. “GigabitEthernet2/0/39”
            neighbor_system_name (string, optional): Name supplied by the
                system on the interface E.g. neighbor system name E.g.
                “Kumar-Acc-SW.mist.local”
            poe_disabled (bool, optional): is the POE configured not be
                disabled.
            poe_mode (string, optional): poe mode depending on class E.g.
                “802.3at”
            poe_on (bool, optional): is the device attached to POE
            port_id (string, optional): interface name
            port_mac (string, optional): interface mac address
            power_draw (float, optional): Amount of power being used by the
                interface at the time the command is executed. Unit in watts.
            tx_pkts (int, optional): Output packets
            rx_pkts (int, optional): Input packets
            rx_bytes (int, optional): Input bytes
            tx_bps (int, optional): Output rate
            rx_bps (int, optional): Input rate
            tx_mcast_pkts (int, optional): Multicast output packets
            tx_bcast_pkts (int, optional): Broadcast output packets
            rx_mcast_pkts (int, optional): Multicast input packets
            rx_bcast_pkts (int, optional): Broadcast input packets
            speed (int, optional): port speed
            stp_state (StpStateEnum, optional): if `up`==`true`
            stp_role (StpRoleEnum, optional): if `up`==`true`
            auth_state (AuthStateEnum, optional): if `up`==`true` && has
                Authenticator role
            up (bool, optional): indicates if interface is up
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            ApiV1SitesStatsSwitchPortsSearchResponse: Response from the API.
                OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/stats/switch_ports/search')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('full_duplex')
                         .value(full_duplex))
            .query_param(Parameter()
                         .key('mac')
                         .value(mac))
            .query_param(Parameter()
                         .key('neighbor_mac')
                         .value(neighbor_mac))
            .query_param(Parameter()
                         .key('neighbor_port_desc')
                         .value(neighbor_port_desc))
            .query_param(Parameter()
                         .key('neighbor_system_name')
                         .value(neighbor_system_name))
            .query_param(Parameter()
                         .key('poe_disabled')
                         .value(poe_disabled))
            .query_param(Parameter()
                         .key('poe_mode')
                         .value(poe_mode))
            .query_param(Parameter()
                         .key('poe_on')
                         .value(poe_on))
            .query_param(Parameter()
                         .key('port_id')
                         .value(port_id))
            .query_param(Parameter()
                         .key('port_mac')
                         .value(port_mac))
            .query_param(Parameter()
                         .key('power_draw')
                         .value(power_draw))
            .query_param(Parameter()
                         .key('tx_pkts')
                         .value(tx_pkts))
            .query_param(Parameter()
                         .key('rx_pkts')
                         .value(rx_pkts))
            .query_param(Parameter()
                         .key('rx_bytes')
                         .value(rx_bytes))
            .query_param(Parameter()
                         .key('tx_bps')
                         .value(tx_bps))
            .query_param(Parameter()
                         .key('rx_bps')
                         .value(rx_bps))
            .query_param(Parameter()
                         .key('tx_mcast_pkts')
                         .value(tx_mcast_pkts))
            .query_param(Parameter()
                         .key('tx_bcast_pkts')
                         .value(tx_bcast_pkts))
            .query_param(Parameter()
                         .key('rx_mcast_pkts')
                         .value(rx_mcast_pkts))
            .query_param(Parameter()
                         .key('rx_bcast_pkts')
                         .value(rx_bcast_pkts))
            .query_param(Parameter()
                         .key('speed')
                         .value(speed))
            .query_param(Parameter()
                         .key('stp_state')
                         .value(stp_state))
            .query_param(Parameter()
                         .key('stp_role')
                         .value(stp_role))
            .query_param(Parameter()
                         .key('auth_state')
                         .value(auth_state))
            .query_param(Parameter()
                         .key('up')
                         .value(up))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1SitesStatsSwitchPortsSearchResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesStatsSwitchPortsSearch401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesStatsSwitchPortsSearch403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesStatsSwitchPortsSearch404ErrorException)
        ).execute()
