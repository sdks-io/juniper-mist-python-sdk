# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.site_setting import SiteSetting
from mistapi.models.macs_array import MacsArray
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_setting_401_error_exception import ApiV1SitesSetting401ErrorException
from mistapi.exceptions.api_v_1_sites_setting_403_error_exception import ApiV1SitesSetting403ErrorException
from mistapi.exceptions.api_v_1_sites_setting_404_error_exception import ApiV1SitesSetting404ErrorException
from mistapi.exceptions.api_v_1_sites_setting_blacklist_401_error_exception import ApiV1SitesSettingBlacklist401ErrorException
from mistapi.exceptions.api_v_1_sites_setting_blacklist_403_error_exception import ApiV1SitesSettingBlacklist403ErrorException
from mistapi.exceptions.api_v_1_sites_setting_blacklist_404_error_exception import ApiV1SitesSettingBlacklist404ErrorException
from mistapi.exceptions.api_v_1_sites_setting_watched_station_401_error_exception import ApiV1SitesSettingWatchedStation401ErrorException
from mistapi.exceptions.api_v_1_sites_setting_watched_station_403_error_exception import ApiV1SitesSettingWatchedStation403ErrorException
from mistapi.exceptions.api_v_1_sites_setting_watched_station_404_error_exception import ApiV1SitesSettingWatchedStation404ErrorException
from mistapi.exceptions.api_v_1_sites_setting_whitelist_401_error_exception import ApiV1SitesSettingWhitelist401ErrorException
from mistapi.exceptions.api_v_1_sites_setting_whitelist_403_error_exception import ApiV1SitesSettingWhitelist403ErrorException
from mistapi.exceptions.api_v_1_sites_setting_whitelist_404_error_exception import ApiV1SitesSettingWhitelist404ErrorException


class SitesSettingController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesSettingController, self).__init__(config)

    def get_site_setting(self,
                         site_id):
        """Does a GET request to /api/v1/sites/{site_id}/setting.

        Get Site Settings

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            SiteSetting: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/setting')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SiteSetting.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSetting401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSetting403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSetting404ErrorException)
        ).execute()

    def update_site_settings(self,
                             site_id,
                             body=None):
        """Does a PUT request to /api/v1/sites/{site_id}/setting.

        Update Site Settings

        Args:
            site_id (uuid|string): TODO: type description here.
            body (SiteSetting, optional): Request Body

        Returns:
            SiteSetting: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/setting')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SiteSetting.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSetting401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSetting403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSetting404ErrorException)
        ).execute()

    def delete_site_wireless_clients_blocklist(self,
                                               site_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/setting/blacklist.

        Delete Site Blacklist Station Clients

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/setting/blacklist')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSettingBlacklist401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSettingBlacklist403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSettingBlacklist404ErrorException)
        ).execute()

    def create_site_wireless_clients_blocklist(self,
                                               site_id,
                                               body=None):
        """Does a POST request to /api/v1/sites/{site_id}/setting/blacklist.

        This endpoint is to provide list of client macs for annotation
        blacklist.
        Retrieve the current clients list `blacklist_url` under Site:Setting

        Args:
            site_id (uuid|string): TODO: type description here.
            body (ModelObjectMacsArrayString, optional): Request Body

        Returns:
            MacsArray: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/setting/blacklist')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MacsArray.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSettingBlacklist401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSettingBlacklist403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSettingBlacklist404ErrorException)
        ).execute()

    def delete_site_watched_stations(self,
                                     site_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/setting/watched_station.

        Delete Site Watched Station Clients

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/setting/watched_station')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSettingWatchedStation401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSettingWatchedStation403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSettingWatchedStation404ErrorException)
        ).execute()

    def create_site_watched_stations(self,
                                     site_id,
                                     body=None):
        """Does a POST request to /api/v1/sites/{site_id}/setting/watched_station.

        This endpoint is to provide list of client macs for annotation as 
        watched station.
        Retrieve the current clients list from  `watched_station_url` under
        Site:Setting

        Args:
            site_id (uuid|string): TODO: type description here.
            body (ModelObjectMacsArrayString, optional): Request Body

        Returns:
            MacsArray: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/setting/watched_station')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MacsArray.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSettingWatchedStation401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSettingWatchedStation403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSettingWatchedStation404ErrorException)
        ).execute()

    def delete_site_wireless_clients_allowlist(self,
                                               site_id):
        """Does a DELETE request to /api/v1/sites/{site_id}/setting/whitelist.

        Delete Site Whitelist Station Clients

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/setting/whitelist')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSettingWhitelist401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSettingWhitelist403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSettingWhitelist404ErrorException)
        ).execute()

    def create_site_wireless_clients_allowlist(self,
                                               site_id,
                                               body=None):
        """Does a POST request to /api/v1/sites/{site_id}/setting/whitelist.

        This endpoint is to provide list of client macs for annotation as
        whitelist.
        Retrieve the current clients list from `whitelist_url` under
        Site:Setting

        Args:
            site_id (uuid|string): TODO: type description here.
            body (ModelObjectMacsArrayString, optional): Request Body

        Returns:
            MacsArray: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/setting/whitelist')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MacsArray.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesSettingWhitelist401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesSettingWhitelist403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesSettingWhitelist404ErrorException)
        ).execute()
