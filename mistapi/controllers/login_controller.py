# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.api_v_1_login_response import ApiV1LoginResponse
from mistapi.models.api_v_1_login_lookup_response import ApiV1LoginLookupResponse
from mistapi.models.api_v_1_logout_response import ApiV1LogoutResponse
from mistapi.exceptions.api_v_1_login_400_error_exception import ApiV1Login400ErrorException
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_login_lookup_401_error_exception import ApiV1LoginLookup401ErrorException
from mistapi.exceptions.api_v_1_login_lookup_403_error_exception import ApiV1LoginLookup403ErrorException
from mistapi.exceptions.api_v_1_logout_401_error_exception import ApiV1Logout401ErrorException
from mistapi.exceptions.api_v_1_logout_403_error_exception import ApiV1Logout403ErrorException
from mistapi.exceptions.api_v_1_logout_404_error_exception import ApiV1Logout404ErrorException


class LoginController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(LoginController, self).__init__(config)

    def login(self,
              body=None):
        """Does a POST request to /api/v1/login.

        Log in with email/password.
        When 2FA is enabled, there are two ways to login:
        1. login with two_factor token (with Google Authenticator, etc) 
        2. login with email/password, generate the token, and use
        /login/two_factor with the token

        Args:
            body (ApiV1LoginRequest, optional): TODO: type description here.

        Returns:
            ApiV1LoginResponse: Response from the API. Login Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/login')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1LoginResponse.from_dictionary)
            .local_error('400', 'Login Failed', ApiV1Login400ErrorException)
        ).execute()

    def lookup(self,
               body=None):
        """Does a POST request to /api/v1/login/lookup.

        Login Lookup

        Args:
            body (ModelObjectEmail, optional): Request Body

        Returns:
            ApiV1LoginLookupResponse: Response from the API. account exists

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/login/lookup')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1LoginLookupResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1LoginLookup401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1LoginLookup403ErrorException)
            .local_error('404', 'user does not exist', APIException)
        ).execute()

    def logout(self):
        """Does a POST request to /api/v1/logout.

        Logout

        Returns:
            ApiV1LogoutResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/logout')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV1LogoutResponse.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1Logout401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1Logout403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1Logout404ErrorException)
        ).execute()
