# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.admin import Admin
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_msps_admins_401_error_exception import ApiV1MspsAdmins401ErrorException
from mistapi.exceptions.api_v_1_msps_admins_403_error_exception import ApiV1MspsAdmins403ErrorException
from mistapi.exceptions.api_v_1_msps_admins_404_error_exception import ApiV1MspsAdmins404ErrorException


class MspsAdminsController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(MspsAdminsController, self).__init__(config)

    def list_msp_admins(self,
                        msp_id):
        """Does a GET request to /api/v1/msps/{msp_id}/admins.

        Get List of MSP Admins

        Args:
            msp_id (uuid|string): TODO: type description here.

        Returns:
            list of Admin: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/admins')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Admin.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsAdmins401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsAdmins403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsAdmins404ErrorException)
        ).execute()

    def revoke_msp_admin(self,
                         msp_id,
                         admin_id):
        """Does a DELETE request to /api/v1/msps/{msp_id}/admins/{admin_id}.

        This removes all privileges this admin has against the MSP. This goes
        deep all the way to the sites

        Args:
            msp_id (uuid|string): TODO: type description here.
            admin_id (uuid|string): TODO: type description here.

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/admins/{admin_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admin_id')
                            .value(admin_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsAdmins401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsAdmins403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsAdmins404ErrorException)
        ).execute()

    def get_msp_admin(self,
                      msp_id,
                      admin_id):
        """Does a GET request to /api/v1/msps/{msp_id}/admins/{admin_id}.

        Get MSP Admins

        Args:
            msp_id (uuid|string): TODO: type description here.
            admin_id (uuid|string): TODO: type description here.

        Returns:
            Admin: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/admins/{admin_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admin_id')
                            .value(admin_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Admin.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsAdmins401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsAdmins403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsAdmins404ErrorException)
        ).execute()

    def update_msp_admin(self,
                         msp_id,
                         admin_id,
                         body=None):
        """Does a PUT request to /api/v1/msps/{msp_id}/admins/{admin_id}.

        Update MSP Admin

        Args:
            msp_id (uuid|string): TODO: type description here.
            admin_id (uuid|string): TODO: type description here.
            body (Admin, optional): Request Body

        Returns:
            Admin: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/msps/{msp_id}/admins/{admin_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('msp_id')
                            .value(msp_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admin_id')
                            .value(admin_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Admin.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1MspsAdmins401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1MspsAdmins403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1MspsAdmins404ErrorException)
        ).execute()
