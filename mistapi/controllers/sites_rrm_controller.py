# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mistapi.api_helper import APIHelper
from mistapi.configuration import Server
from mistapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mistapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mistapi.models.rrm import Rrm
from mistapi.models.rrm_consideration import RrmConsideration
from mistapi.models.rrm_events import RrmEvents
from mistapi.exceptions.api_exception import APIException
from mistapi.exceptions.api_v_1_sites_rrm_current_401_error_exception import ApiV1SitesRrmCurrent401ErrorException
from mistapi.exceptions.api_v_1_sites_rrm_current_403_error_exception import ApiV1SitesRrmCurrent403ErrorException
from mistapi.exceptions.api_v_1_sites_rrm_current_404_error_exception import ApiV1SitesRrmCurrent404ErrorException
from mistapi.exceptions.api_v_1_sites_rrm_current_devices_band_band_401_error_exception import ApiV1SitesRrmCurrentDevicesBandBand401ErrorException
from mistapi.exceptions.api_v_1_sites_rrm_current_devices_band_band_403_error_exception import ApiV1SitesRrmCurrentDevicesBandBand403ErrorException
from mistapi.exceptions.api_v_1_sites_rrm_current_devices_band_band_404_error_exception import ApiV1SitesRrmCurrentDevicesBandBand404ErrorException
from mistapi.exceptions.api_v_1_sites_rrm_events_401_error_exception import ApiV1SitesRrmEvents401ErrorException
from mistapi.exceptions.api_v_1_sites_rrm_events_403_error_exception import ApiV1SitesRrmEvents403ErrorException
from mistapi.exceptions.api_v_1_sites_rrm_events_404_error_exception import ApiV1SitesRrmEvents404ErrorException
from mistapi.exceptions.api_v_1_sites_rrm_optimize_401_error_exception import ApiV1SitesRrmOptimize401ErrorException
from mistapi.exceptions.api_v_1_sites_rrm_optimize_403_error_exception import ApiV1SitesRrmOptimize403ErrorException
from mistapi.exceptions.api_v_1_sites_rrm_optimize_404_error_exception import ApiV1SitesRrmOptimize404ErrorException


class SitesRRMController(BaseController):

    """A Controller to access Endpoints in the mistapi API."""
    def __init__(self, config):
        super(SitesRRMController, self).__init__(config)

    def get_site_current_channel_planning(self,
                                          site_id):
        """Does a GET request to /api/v1/sites/{site_id}/rrm/current.

        Get Current Channel Planning

        Args:
            site_id (uuid|string): TODO: type description here.

        Returns:
            Rrm: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/rrm/current')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Rrm.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesRrmCurrent401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesRrmCurrent403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesRrmCurrent404ErrorException)
        ).execute()

    def get_site_current_rrm_considerations_for_an_ap_on_a_specific_band(self,
                                                                         site_id,
                                                                         device_id,
                                                                         band):
        """Does a GET request to /api/v1/sites/{site_id}/rrm/current/devices/{device_id}/band/{band}.

        Get Current RRM Considerations for an AP on a Specific Band

        Args:
            site_id (uuid|string): TODO: type description here.
            device_id (uuid|string): TODO: type description here.
            band (Band8Enum): radio band

        Returns:
            RrmConsideration: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/rrm/current/devices/{device_id}/band/{band}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('band')
                            .value(band)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RrmConsideration.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesRrmCurrentDevicesBandBand401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesRrmCurrentDevicesBandBand403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesRrmCurrentDevicesBandBand404ErrorException)
        ).execute()

    def get_site_rrm_events(self,
                            site_id,
                            band,
                            page=1,
                            limit=100,
                            start=0,
                            end=0,
                            duration='1d'):
        """Does a GET request to /api/v1/sites/{site_id}/rrm/events.

        Get Site RRM Events

        Args:
            site_id (uuid|string): TODO: type description here.
            band (Band8Enum): TODO: type description here.
            page (int, optional): TODO: type description here. Example: 1
            limit (int, optional): TODO: type description here. Example: 100
            start (int, optional): TODO: type description here. Example: 0
            end (int, optional): TODO: type description here. Example: 0
            duration (string, optional): For historical stats and/or logs
                where time range is needed, you can specify the time range in
                a few different ways:   * ?start=1430000000&end=1430864000
                specify the start / end   * ?end=1430864000&duration=1d
                specify end time and duration   * ?duration=1d specify
                duration, end will be now() in seconds

        Returns:
            RrmEvents: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/rrm/events')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('band')
                         .value(band))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('start')
                         .value(start))
            .query_param(Parameter()
                         .key('end')
                         .value(end))
            .query_param(Parameter()
                         .key('duration')
                         .value(duration))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RrmEvents.from_dictionary)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesRrmEvents401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesRrmEvents403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesRrmEvents404ErrorException)
        ).execute()

    def optimize_site_rrm(self,
                          site_id,
                          body=None):
        """Does a POST request to /api/v1/sites/{site_id}/rrm/optimize.

        Optimize Site RRM

        Args:
            site_id (uuid|string): TODO: type description here.
            body (ApiV1SitesRrmOptimizeRequest, optional): Request Body

        Returns:
            object: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v1/sites/{site_id}/rrm/optimize')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('site_id')
                            .value(site_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'The API endpoint exists but its syntax/payload is incorrect, detail may be given', APIException)
            .local_error('401', 'Unauthorized', ApiV1SitesRrmOptimize401ErrorException)
            .local_error('403', 'Permission Denied', ApiV1SitesRrmOptimize403ErrorException)
            .local_error('404', 'Not found. The API endpoint doesn\'t exist or resource doesn\'t exist', ApiV1SitesRrmOptimize404ErrorException)
        ).execute()
