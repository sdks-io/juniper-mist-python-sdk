# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.switches_2 import Switches2


class Client(object):

    """Implementation of the 'Client' model.

    TODO: type model description here.

    Attributes:
        degraded (int): TODO: type description here.
        duration (int): TODO: type description here.
        mac (string): TODO: type description here.
        name (string): TODO: type description here.
        switches (list of Switches2): TODO: type description here.
        total (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "degraded": 'degraded',
        "duration": 'duration',
        "mac": 'mac',
        "name": 'name',
        "switches": 'switches',
        "total": 'total'
    }

    _optionals = [
        'degraded',
        'duration',
        'mac',
        'name',
        'switches',
        'total',
    ]

    def __init__(self,
                 degraded=APIHelper.SKIP,
                 duration=APIHelper.SKIP,
                 mac=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 switches=APIHelper.SKIP,
                 total=APIHelper.SKIP):
        """Constructor for the Client class"""

        # Initialize members of the class
        if degraded is not APIHelper.SKIP:
            self.degraded = degraded 
        if duration is not APIHelper.SKIP:
            self.duration = duration 
        if mac is not APIHelper.SKIP:
            self.mac = mac 
        if name is not APIHelper.SKIP:
            self.name = name 
        if switches is not APIHelper.SKIP:
            self.switches = switches 
        if total is not APIHelper.SKIP:
            self.total = total 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        degraded = dictionary.get("degraded") if dictionary.get("degraded") else APIHelper.SKIP
        duration = dictionary.get("duration") if dictionary.get("duration") else APIHelper.SKIP
        mac = dictionary.get("mac") if dictionary.get("mac") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        switches = None
        if dictionary.get('switches') is not None:
            switches = [Switches2.from_dictionary(x) for x in dictionary.get('switches')]
        else:
            switches = APIHelper.SKIP
        total = dictionary.get("total") if dictionary.get("total") else APIHelper.SKIP
        # Return an object of this model
        return cls(degraded,
                   duration,
                   mac,
                   name,
                   switches,
                   total)
