# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Beacon(object):

    """Implementation of the 'beacon' model.

    Beacon

    Attributes:
        created_time (float): TODO: type description here.
        eddystone_instance (string): Eddystone-UID instance (6 bytes) in
            hexstring format
        eddystone_namespace (string): Eddystone-UID namespace (10 bytes) in
            hexstring format
        eddystone_url (string): Eddystone-URL url
        for_site (bool): TODO: type description here.
        ibeacon_major (int): bluetooth tag major
        ibeacon_minor (int): bluetooth tag minor
        ibeacon_uuid (uuid|string): bluetooth tag UUID
        id (uuid|string): TODO: type description here.
        mac (string): optiona, MAC of the beacon, currently used only to
            identify battery voltage
        map_id (uuid|string): map where the device belongs to
        modified_time (float): TODO: type description here.
        name (string): name / label of the device
        org_id (uuid|string): TODO: type description here.
        power (int): in dBm
        site_id (uuid|string): TODO: type description here.
        mtype (Type4Enum): TODO: type description here.
        x (float): x in pixel
        y (float): y in pixel

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "created_time": 'created_time',
        "eddystone_instance": 'eddystone_instance',
        "eddystone_namespace": 'eddystone_namespace',
        "eddystone_url": 'eddystone_url',
        "for_site": 'for_site',
        "ibeacon_major": 'ibeacon_major',
        "ibeacon_minor": 'ibeacon_minor',
        "ibeacon_uuid": 'ibeacon_uuid',
        "id": 'id',
        "mac": 'mac',
        "map_id": 'map_id',
        "modified_time": 'modified_time',
        "name": 'name',
        "org_id": 'org_id',
        "power": 'power',
        "site_id": 'site_id',
        "mtype": 'type',
        "x": 'x',
        "y": 'y'
    }

    _optionals = [
        'created_time',
        'eddystone_instance',
        'eddystone_namespace',
        'eddystone_url',
        'for_site',
        'ibeacon_major',
        'ibeacon_minor',
        'ibeacon_uuid',
        'id',
        'mac',
        'map_id',
        'modified_time',
        'name',
        'org_id',
        'power',
        'site_id',
        'mtype',
        'x',
        'y',
    ]

    def __init__(self,
                 created_time=APIHelper.SKIP,
                 eddystone_instance=APIHelper.SKIP,
                 eddystone_namespace=APIHelper.SKIP,
                 eddystone_url=APIHelper.SKIP,
                 for_site=APIHelper.SKIP,
                 ibeacon_major=APIHelper.SKIP,
                 ibeacon_minor=APIHelper.SKIP,
                 ibeacon_uuid=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 mac=APIHelper.SKIP,
                 map_id=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 power=-12,
                 site_id=APIHelper.SKIP,
                 mtype='eddystone-uid',
                 x=APIHelper.SKIP,
                 y=APIHelper.SKIP):
        """Constructor for the Beacon class"""

        # Initialize members of the class
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if eddystone_instance is not APIHelper.SKIP:
            self.eddystone_instance = eddystone_instance 
        if eddystone_namespace is not APIHelper.SKIP:
            self.eddystone_namespace = eddystone_namespace 
        if eddystone_url is not APIHelper.SKIP:
            self.eddystone_url = eddystone_url 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        if ibeacon_major is not APIHelper.SKIP:
            self.ibeacon_major = ibeacon_major 
        if ibeacon_minor is not APIHelper.SKIP:
            self.ibeacon_minor = ibeacon_minor 
        if ibeacon_uuid is not APIHelper.SKIP:
            self.ibeacon_uuid = ibeacon_uuid 
        if id is not APIHelper.SKIP:
            self.id = id 
        if mac is not APIHelper.SKIP:
            self.mac = mac 
        if map_id is not APIHelper.SKIP:
            self.map_id = map_id 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        if name is not APIHelper.SKIP:
            self.name = name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        self.power = power 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        self.mtype = mtype 
        if x is not APIHelper.SKIP:
            self.x = x 
        if y is not APIHelper.SKIP:
            self.y = y 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        eddystone_instance = dictionary.get("eddystone_instance") if dictionary.get("eddystone_instance") else APIHelper.SKIP
        eddystone_namespace = dictionary.get("eddystone_namespace") if dictionary.get("eddystone_namespace") else APIHelper.SKIP
        eddystone_url = dictionary.get("eddystone_url") if dictionary.get("eddystone_url") else APIHelper.SKIP
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        ibeacon_major = dictionary.get("ibeacon_major") if dictionary.get("ibeacon_major") else APIHelper.SKIP
        ibeacon_minor = dictionary.get("ibeacon_minor") if dictionary.get("ibeacon_minor") else APIHelper.SKIP
        ibeacon_uuid = dictionary.get("ibeacon_uuid") if dictionary.get("ibeacon_uuid") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        mac = dictionary.get("mac") if dictionary.get("mac") else APIHelper.SKIP
        map_id = dictionary.get("map_id") if dictionary.get("map_id") else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        power = dictionary.get("power") if dictionary.get("power") else -12
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else 'eddystone-uid'
        x = dictionary.get("x") if dictionary.get("x") else APIHelper.SKIP
        y = dictionary.get("y") if dictionary.get("y") else APIHelper.SKIP
        # Return an object of this model
        return cls(created_time,
                   eddystone_instance,
                   eddystone_namespace,
                   eddystone_url,
                   for_site,
                   ibeacon_major,
                   ibeacon_minor,
                   ibeacon_uuid,
                   id,
                   mac,
                   map_id,
                   modified_time,
                   name,
                   org_id,
                   power,
                   site_id,
                   mtype,
                   x,
                   y)
