# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Rfdiag(object):

    """Implementation of the 'rfdiag' model.

    RF Diag

    Attributes:
        duration (int): recording length in seconds, max is 180. Default value
            is also 180.
        mac (string): if `type`==`client` or `asset`, mac of the device
        name (string): name of the recording, the name of the sdk client would
            be a good default choice
        sdkclient_id (uuid|string): if `type`==`sdkclient`, sdkclient_id of
            this recording
        mtype (Type36Enum): sdkclient / client/ asset

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "mtype": 'type',
        "duration": 'duration',
        "mac": 'mac',
        "sdkclient_id": 'sdkclient_id'
    }

    _optionals = [
        'duration',
        'mac',
        'sdkclient_id',
    ]

    def __init__(self,
                 name=None,
                 mtype=None,
                 duration=180,
                 mac=APIHelper.SKIP,
                 sdkclient_id=APIHelper.SKIP):
        """Constructor for the Rfdiag class"""

        # Initialize members of the class
        self.duration = duration 
        if mac is not APIHelper.SKIP:
            self.mac = mac 
        self.name = name 
        if sdkclient_id is not APIHelper.SKIP:
            self.sdkclient_id = sdkclient_id 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        duration = dictionary.get("duration") if dictionary.get("duration") else 180
        mac = dictionary.get("mac") if dictionary.get("mac") else APIHelper.SKIP
        sdkclient_id = dictionary.get("sdkclient_id") if dictionary.get("sdkclient_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   mtype,
                   duration,
                   mac,
                   sdkclient_id)
