# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.aps_4 import Aps4


class Result26(object):

    """Implementation of the 'Result26' model.

    TODO: type model description here.

    Attributes:
        adopted (bool): TODO: type description here.
        aps (list of Aps4): TODO: type description here.
        chassis_id (list of string): TODO: type description here.
        for_site (bool): TODO: type description here.
        model (string): TODO: type description here.
        org_id (uuid|string): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        system_desc (string): TODO: type description here.
        system_name (string): TODO: type description here.
        timestamp (float): TODO: type description here.
        vendor (string): TODO: type description here.
        version (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "model": 'model',
        "org_id": 'org_id',
        "site_id": 'site_id',
        "system_desc": 'system_desc',
        "system_name": 'system_name',
        "timestamp": 'timestamp',
        "vendor": 'vendor',
        "version": 'version',
        "adopted": 'adopted',
        "aps": 'aps',
        "chassis_id": 'chassis_id',
        "for_site": 'for_site'
    }

    _optionals = [
        'adopted',
        'aps',
        'chassis_id',
        'for_site',
    ]

    def __init__(self,
                 model=None,
                 org_id=None,
                 site_id=None,
                 system_desc=None,
                 system_name=None,
                 timestamp=None,
                 vendor=None,
                 version=None,
                 adopted=APIHelper.SKIP,
                 aps=APIHelper.SKIP,
                 chassis_id=APIHelper.SKIP,
                 for_site=APIHelper.SKIP):
        """Constructor for the Result26 class"""

        # Initialize members of the class
        if adopted is not APIHelper.SKIP:
            self.adopted = adopted 
        if aps is not APIHelper.SKIP:
            self.aps = aps 
        if chassis_id is not APIHelper.SKIP:
            self.chassis_id = chassis_id 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        self.model = model 
        self.org_id = org_id 
        self.site_id = site_id 
        self.system_desc = system_desc 
        self.system_name = system_name 
        self.timestamp = timestamp 
        self.vendor = vendor 
        self.version = version 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        model = dictionary.get("model") if dictionary.get("model") else None
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else None
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else None
        system_desc = dictionary.get("system_desc") if dictionary.get("system_desc") else None
        system_name = dictionary.get("system_name") if dictionary.get("system_name") else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        vendor = dictionary.get("vendor") if dictionary.get("vendor") else None
        version = dictionary.get("version") if dictionary.get("version") else None
        adopted = dictionary.get("adopted") if "adopted" in dictionary.keys() else APIHelper.SKIP
        aps = None
        if dictionary.get('aps') is not None:
            aps = [Aps4.from_dictionary(x) for x in dictionary.get('aps')]
        else:
            aps = APIHelper.SKIP
        chassis_id = dictionary.get("chassis_id") if dictionary.get("chassis_id") else APIHelper.SKIP
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(model,
                   org_id,
                   site_id,
                   system_desc,
                   system_name,
                   timestamp,
                   vendor,
                   version,
                   adopted,
                   aps,
                   chassis_id,
                   for_site)
