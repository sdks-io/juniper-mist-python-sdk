# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Result2(object):

    """Implementation of the 'Result2' model.

    TODO: type model description here.

    Attributes:
        num_clients (float): TODO: type description here.
        num_switches (float): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        switch_health (float): TODO: type description here.
        switch_stc (float): TODO: type description here.
        switch_throughput (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "site_id": 'site_id',
        "num_clients": 'num_clients',
        "num_switches": 'num_switches',
        "switch_health": 'switch-health',
        "switch_stc": 'switch-stc',
        "switch_throughput": 'switch-throughput'
    }

    _optionals = [
        'num_clients',
        'num_switches',
        'switch_health',
        'switch_stc',
        'switch_throughput',
    ]

    def __init__(self,
                 site_id=None,
                 num_clients=APIHelper.SKIP,
                 num_switches=APIHelper.SKIP,
                 switch_health=APIHelper.SKIP,
                 switch_stc=APIHelper.SKIP,
                 switch_throughput=APIHelper.SKIP):
        """Constructor for the Result2 class"""

        # Initialize members of the class
        if num_clients is not APIHelper.SKIP:
            self.num_clients = num_clients 
        if num_switches is not APIHelper.SKIP:
            self.num_switches = num_switches 
        self.site_id = site_id 
        if switch_health is not APIHelper.SKIP:
            self.switch_health = switch_health 
        if switch_stc is not APIHelper.SKIP:
            self.switch_stc = switch_stc 
        if switch_throughput is not APIHelper.SKIP:
            self.switch_throughput = switch_throughput 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        site_id = dictionary.get("site_id") if dictionary.get("site_id") else None
        num_clients = dictionary.get("num_clients") if dictionary.get("num_clients") else APIHelper.SKIP
        num_switches = dictionary.get("num_switches") if dictionary.get("num_switches") else APIHelper.SKIP
        switch_health = dictionary.get("switch-health") if dictionary.get("switch-health") else APIHelper.SKIP
        switch_stc = dictionary.get("switch-stc") if dictionary.get("switch-stc") else APIHelper.SKIP
        switch_throughput = dictionary.get("switch-throughput") if dictionary.get("switch-throughput") else APIHelper.SKIP
        # Return an object of this model
        return cls(site_id,
                   num_clients,
                   num_switches,
                   switch_health,
                   switch_stc,
                   switch_throughput)
