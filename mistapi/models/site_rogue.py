# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class SiteRogue(object):

    """Implementation of the 'site_rogue' model.

    Rogue site settings

    Attributes:
        enabled (bool): whether or not rogue detection is enabled
        honeypot_enabled (bool): whether or not honeypot detection is enabled
        min_duration (int): minimum duration for a bssid to be considered
            rogue
        min_rssi (int): minimum RSSI for an AP to be considered rogue
            (ignoring APs thatâ€™s far away)
        whitelisted_bssids (list of string): list of BSSIDs to whitelist. Ex:
            "cc-:8e-:6f-:d4-:bf-:16", "cc-8e-6f-d4-bf-16", "cc-73-*",
            "cc:82:*"
        whitelisted_ssids (list of string): list of SSIDs to whitelist

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enabled": 'enabled',
        "honeypot_enabled": 'honeypot_enabled',
        "min_duration": 'min_duration',
        "min_rssi": 'min_rssi',
        "whitelisted_bssids": 'whitelisted_bssids',
        "whitelisted_ssids": 'whitelisted_ssids'
    }

    _optionals = [
        'enabled',
        'honeypot_enabled',
        'min_duration',
        'min_rssi',
        'whitelisted_bssids',
        'whitelisted_ssids',
    ]

    def __init__(self,
                 enabled=APIHelper.SKIP,
                 honeypot_enabled=APIHelper.SKIP,
                 min_duration=10,
                 min_rssi=-80,
                 whitelisted_bssids=APIHelper.SKIP,
                 whitelisted_ssids=APIHelper.SKIP):
        """Constructor for the SiteRogue class"""

        # Initialize members of the class
        if enabled is not APIHelper.SKIP:
            self.enabled = enabled 
        if honeypot_enabled is not APIHelper.SKIP:
            self.honeypot_enabled = honeypot_enabled 
        self.min_duration = min_duration 
        self.min_rssi = min_rssi 
        if whitelisted_bssids is not APIHelper.SKIP:
            self.whitelisted_bssids = whitelisted_bssids 
        if whitelisted_ssids is not APIHelper.SKIP:
            self.whitelisted_ssids = whitelisted_ssids 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else APIHelper.SKIP
        honeypot_enabled = dictionary.get("honeypot_enabled") if "honeypot_enabled" in dictionary.keys() else APIHelper.SKIP
        min_duration = dictionary.get("min_duration") if dictionary.get("min_duration") else 10
        min_rssi = dictionary.get("min_rssi") if dictionary.get("min_rssi") else -80
        whitelisted_bssids = dictionary.get("whitelisted_bssids") if dictionary.get("whitelisted_bssids") else APIHelper.SKIP
        whitelisted_ssids = dictionary.get("whitelisted_ssids") if dictionary.get("whitelisted_ssids") else APIHelper.SKIP
        # Return an object of this model
        return cls(enabled,
                   honeypot_enabled,
                   min_duration,
                   min_rssi,
                   whitelisted_bssids,
                   whitelisted_ssids)
