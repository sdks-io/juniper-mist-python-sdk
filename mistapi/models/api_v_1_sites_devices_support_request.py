# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApiV1SitesDevicesSupportRequest(object):

    """Implementation of the 'Api V1 Sites Devices Support Request' model.

    TODO: type model description here.

    Attributes:
        info (InfoEnum): optional choice: process, outbound-ssh, and full
            (default)
        node (string): optional: for SSR, if node is not present, both nodes
            support files are uploaded
        num_messages_files (int): optional: number of most recent messages
            files to upload.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "info": 'info',
        "node": 'node',
        "num_messages_files": 'num_messages_files'
    }

    _optionals = [
        'info',
        'node',
        'num_messages_files',
    ]

    def __init__(self,
                 info='full',
                 node=APIHelper.SKIP,
                 num_messages_files=1):
        """Constructor for the ApiV1SitesDevicesSupportRequest class"""

        # Initialize members of the class
        self.info = info 
        if node is not APIHelper.SKIP:
            self.node = node 
        self.num_messages_files = num_messages_files 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        info = dictionary.get("info") if dictionary.get("info") else 'full'
        node = dictionary.get("node") if dictionary.get("node") else APIHelper.SKIP
        num_messages_files = dictionary.get("num_messages_files") if dictionary.get("num_messages_files") else 1
        # Return an object of this model
        return cls(info,
                   node,
                   num_messages_files)
