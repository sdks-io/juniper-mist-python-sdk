# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class StatsDeviceOther(object):

    """Implementation of the 'stats_device_other' model.

    TODO: type model description here.

    Attributes:
        last_config (int): TODO: type description here.
        last_seen (int): TODO: type description here.
        mac (string): TODO: type description here.
        uptime (int): TODO: type description here.
        vendor (string): TODO: type description here.
        vendor_specific (object): TODO: type description here.
        version (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "last_config": 'last_config',
        "last_seen": 'last_seen',
        "mac": 'mac',
        "uptime": 'uptime',
        "vendor": 'vendor',
        "vendor_specific": 'vendor_specific',
        "version": 'version'
    }

    _optionals = [
        'last_config',
        'last_seen',
        'mac',
        'uptime',
        'vendor',
        'vendor_specific',
        'version',
    ]

    def __init__(self,
                 last_config=APIHelper.SKIP,
                 last_seen=APIHelper.SKIP,
                 mac=APIHelper.SKIP,
                 uptime=APIHelper.SKIP,
                 vendor=APIHelper.SKIP,
                 vendor_specific=APIHelper.SKIP,
                 version=APIHelper.SKIP):
        """Constructor for the StatsDeviceOther class"""

        # Initialize members of the class
        if last_config is not APIHelper.SKIP:
            self.last_config = last_config 
        if last_seen is not APIHelper.SKIP:
            self.last_seen = last_seen 
        if mac is not APIHelper.SKIP:
            self.mac = mac 
        if uptime is not APIHelper.SKIP:
            self.uptime = uptime 
        if vendor is not APIHelper.SKIP:
            self.vendor = vendor 
        if vendor_specific is not APIHelper.SKIP:
            self.vendor_specific = vendor_specific 
        if version is not APIHelper.SKIP:
            self.version = version 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        last_config = dictionary.get("last_config") if dictionary.get("last_config") else APIHelper.SKIP
        last_seen = dictionary.get("last_seen") if dictionary.get("last_seen") else APIHelper.SKIP
        mac = dictionary.get("mac") if dictionary.get("mac") else APIHelper.SKIP
        uptime = dictionary.get("uptime") if dictionary.get("uptime") else APIHelper.SKIP
        vendor = dictionary.get("vendor") if dictionary.get("vendor") else APIHelper.SKIP
        vendor_specific = dictionary.get("vendor_specific") if dictionary.get("vendor_specific") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        # Return an object of this model
        return cls(last_config,
                   last_seen,
                   mac,
                   uptime,
                   vendor,
                   vendor_specific,
                   version)
