# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Sso2(object):

    """Implementation of the 'Sso2' model.

    if `auth`==`sso`

    Attributes:
        allowed_roles (list of string): // allowed roles for accessing psk
            portal, if none, any role is permitted
        idp_cert (string): TODO: type description here.
        idp_sign_algo (string): TODO: type description here.
        idp_sso_url (string): TODO: type description here.
        issuer (string): TODO: type description here.
        nameid_format (string): TODO: type description here.
        role_mapping (dict): Property key is the role name, property value is
            the SSO Attribute
        use_sso_role_for_psk_role (bool): if enabled, the `role` above will be
            ignored

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "allowed_roles": 'allowed_roles',
        "idp_cert": 'idp_cert',
        "idp_sign_algo": 'idp_sign_algo',
        "idp_sso_url": 'idp_sso_url',
        "issuer": 'issuer',
        "nameid_format": 'nameid_format',
        "role_mapping": 'role_mapping',
        "use_sso_role_for_psk_role": 'use_sso_role_for_psk_role'
    }

    _optionals = [
        'allowed_roles',
        'idp_cert',
        'idp_sign_algo',
        'idp_sso_url',
        'issuer',
        'nameid_format',
        'role_mapping',
        'use_sso_role_for_psk_role',
    ]

    def __init__(self,
                 allowed_roles=APIHelper.SKIP,
                 idp_cert=APIHelper.SKIP,
                 idp_sign_algo=APIHelper.SKIP,
                 idp_sso_url=APIHelper.SKIP,
                 issuer=APIHelper.SKIP,
                 nameid_format=APIHelper.SKIP,
                 role_mapping=APIHelper.SKIP,
                 use_sso_role_for_psk_role=APIHelper.SKIP):
        """Constructor for the Sso2 class"""

        # Initialize members of the class
        if allowed_roles is not APIHelper.SKIP:
            self.allowed_roles = allowed_roles 
        if idp_cert is not APIHelper.SKIP:
            self.idp_cert = idp_cert 
        if idp_sign_algo is not APIHelper.SKIP:
            self.idp_sign_algo = idp_sign_algo 
        if idp_sso_url is not APIHelper.SKIP:
            self.idp_sso_url = idp_sso_url 
        if issuer is not APIHelper.SKIP:
            self.issuer = issuer 
        if nameid_format is not APIHelper.SKIP:
            self.nameid_format = nameid_format 
        if role_mapping is not APIHelper.SKIP:
            self.role_mapping = role_mapping 
        if use_sso_role_for_psk_role is not APIHelper.SKIP:
            self.use_sso_role_for_psk_role = use_sso_role_for_psk_role 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        allowed_roles = dictionary.get("allowed_roles") if dictionary.get("allowed_roles") else APIHelper.SKIP
        idp_cert = dictionary.get("idp_cert") if dictionary.get("idp_cert") else APIHelper.SKIP
        idp_sign_algo = dictionary.get("idp_sign_algo") if dictionary.get("idp_sign_algo") else APIHelper.SKIP
        idp_sso_url = dictionary.get("idp_sso_url") if dictionary.get("idp_sso_url") else APIHelper.SKIP
        issuer = dictionary.get("issuer") if dictionary.get("issuer") else APIHelper.SKIP
        nameid_format = dictionary.get("nameid_format") if dictionary.get("nameid_format") else APIHelper.SKIP
        role_mapping = dictionary.get("role_mapping") if dictionary.get("role_mapping") else APIHelper.SKIP
        use_sso_role_for_psk_role = dictionary.get("use_sso_role_for_psk_role") if "use_sso_role_for_psk_role" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(allowed_roles,
                   idp_cert,
                   idp_sign_algo,
                   idp_sso_url,
                   issuer,
                   nameid_format,
                   role_mapping,
                   use_sso_role_for_psk_role)
