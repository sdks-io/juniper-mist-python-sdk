# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.airwatch import Airwatch
from mistapi.models.guest_1 import Guest1


class StatsClient(object):

    """Implementation of the 'stats_client' model.

    Client statistics

    Attributes:
        ttl (float): TTL of the validity of the stat
        accuracy (int): estimated clinet location accuracy, in meter
        airespace_ifname (string): TODO: type description here.
        airwatch (Airwatch): information if airwatch enabled
        ap_id (uuid|string): AP ID the client is connected to
        ap_mac (string): AP the client is connected to
        band (Band7Enum): TODO: type description here.
        channel (int): current channel
        dual_band (bool): whether the client is dual-band capable (determined
            by whether we’ve seen probe requests from both bands)
        family (string): device family, through fingerprinting. iPod / Nexus
            Galaxy / Windows Mobile or CE …
        guest (Guest1): information about this portal
        hostname (string): hostname that we learned from sniffing DHCP
        idle_time (float): how long, in seconds, has the client been idle
            (since the last RX packet)
        ip (string): TODO: type description here.
        ip_6 (string): TODO: type description here.
        is_guest (bool): whether this is a guest
        key_mgmt (string): e.g. WPA2-PSK/CCMP
        last_seen (float): last seen timestamp
        mac (string): client mac
        manufacture (string): device manufacture, through fingerprinting or
            OUI
        map_id (uuid|string): estimated client location - map_id
        model (string): device model, may be available if we can identify
            them
        num_locating_aps (int): number of APs used to locate this client
        os (string): device os, through fingerprinting
        power_saving (bool): if it’s currently in power-save mode
        proto (Proto1Enum): TODO: type description here.
        psk_id (uuid|string): PSK id (if multi-psk is used)
        rssi (float): signal strength
        rx_bps (float): rate of receiving traffic from the clients,
            bits/seconds, last known
        rx_bytes (float): amount of traffic received from client since client
            connects
        rx_packets (float): amount of traffic received from client since
            client connects
        rx_rate (float): RX Rate, Mbps
        rx_retries (float): amount of rx retries
        snr (float): signal over noise
        ssid (string): SSID the client is connected to
        tx_bps (float): rate of transmitting traffic to the clients,
            bits/seconds, last known
        tx_bytes (float): amount of traffic sent to client since client
            connects
        tx_packets (float): amount of traffic sent to client since client
            connects
        tx_rate (float): TX Rate, Mbps
        tx_retries (float): amount of tx retries
        mtype (string): client’s type, regular / vip / resource / blocked (if
            client object is created)
        uptime (float): how long, in seconds, has the client been connected
        username (string): username that we learned from 802.1X exchange or
            Per-user PSK or User Portal
        vlan_id (int): vlan id, could be empty (from older AP)
        wlan_id (uuid|string): WLAN ID the client is connected to
        x (float): estimated client location in pixels
        x_m (float): estimated client location in meter
        y (float): estimated client location in pixels
        y_m (float): estimated client location in meter

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ttl": '_ttl',
        "ap_id": 'ap_id',
        "ap_mac": 'ap_mac',
        "band": 'band',
        "channel": 'channel',
        "dual_band": 'dual_band',
        "family": 'family',
        "hostname": 'hostname',
        "idle_time": 'idle_time',
        "ip": 'ip',
        "is_guest": 'is_guest',
        "key_mgmt": 'key_mgmt',
        "last_seen": 'last_seen',
        "mac": 'mac',
        "manufacture": 'manufacture',
        "model": 'model',
        "os": 'os',
        "power_saving": 'power_saving',
        "proto": 'proto',
        "rssi": 'rssi',
        "rx_bps": 'rx_bps',
        "rx_bytes": 'rx_bytes',
        "rx_packets": 'rx_packets',
        "rx_rate": 'rx_rate',
        "rx_retries": 'rx_retries',
        "snr": 'snr',
        "ssid": 'ssid',
        "tx_bps": 'tx_bps',
        "tx_bytes": 'tx_bytes',
        "tx_packets": 'tx_packets',
        "tx_rate": 'tx_rate',
        "tx_retries": 'tx_retries',
        "uptime": 'uptime',
        "username": 'username',
        "wlan_id": 'wlan_id',
        "accuracy": 'accuracy',
        "airespace_ifname": 'airespace_ifname',
        "airwatch": 'airwatch',
        "guest": 'guest',
        "ip_6": 'ip6',
        "map_id": 'map_id',
        "num_locating_aps": 'num_locating_aps',
        "psk_id": 'psk_id',
        "mtype": 'type',
        "vlan_id": 'vlan_id',
        "x": 'x',
        "x_m": 'x_m',
        "y": 'y',
        "y_m": 'y_m'
    }

    _optionals = [
        'accuracy',
        'airespace_ifname',
        'airwatch',
        'guest',
        'ip_6',
        'map_id',
        'num_locating_aps',
        'psk_id',
        'mtype',
        'vlan_id',
        'x',
        'x_m',
        'y',
        'y_m',
    ]

    def __init__(self,
                 ttl=None,
                 ap_id=None,
                 ap_mac=None,
                 band=None,
                 channel=None,
                 dual_band=None,
                 family=None,
                 hostname=None,
                 idle_time=None,
                 ip=None,
                 is_guest=False,
                 key_mgmt=None,
                 last_seen=None,
                 mac=None,
                 manufacture=None,
                 model=None,
                 os=None,
                 power_saving=None,
                 proto=None,
                 rssi=None,
                 rx_bps=None,
                 rx_bytes=None,
                 rx_packets=None,
                 rx_rate=None,
                 rx_retries=None,
                 snr=None,
                 ssid=None,
                 tx_bps=None,
                 tx_bytes=None,
                 tx_packets=None,
                 tx_rate=None,
                 tx_retries=None,
                 uptime=None,
                 username=None,
                 wlan_id=None,
                 accuracy=APIHelper.SKIP,
                 airespace_ifname=APIHelper.SKIP,
                 airwatch=APIHelper.SKIP,
                 guest=APIHelper.SKIP,
                 ip_6=APIHelper.SKIP,
                 map_id=APIHelper.SKIP,
                 num_locating_aps=APIHelper.SKIP,
                 psk_id=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 vlan_id=APIHelper.SKIP,
                 x=APIHelper.SKIP,
                 x_m=APIHelper.SKIP,
                 y=APIHelper.SKIP,
                 y_m=APIHelper.SKIP):
        """Constructor for the StatsClient class"""

        # Initialize members of the class
        self.ttl = ttl 
        if accuracy is not APIHelper.SKIP:
            self.accuracy = accuracy 
        if airespace_ifname is not APIHelper.SKIP:
            self.airespace_ifname = airespace_ifname 
        if airwatch is not APIHelper.SKIP:
            self.airwatch = airwatch 
        self.ap_id = ap_id 
        self.ap_mac = ap_mac 
        self.band = band 
        self.channel = channel 
        self.dual_band = dual_band 
        self.family = family 
        if guest is not APIHelper.SKIP:
            self.guest = guest 
        self.hostname = hostname 
        self.idle_time = idle_time 
        self.ip = ip 
        if ip_6 is not APIHelper.SKIP:
            self.ip_6 = ip_6 
        self.is_guest = is_guest 
        self.key_mgmt = key_mgmt 
        self.last_seen = last_seen 
        self.mac = mac 
        self.manufacture = manufacture 
        if map_id is not APIHelper.SKIP:
            self.map_id = map_id 
        self.model = model 
        if num_locating_aps is not APIHelper.SKIP:
            self.num_locating_aps = num_locating_aps 
        self.os = os 
        self.power_saving = power_saving 
        self.proto = proto 
        if psk_id is not APIHelper.SKIP:
            self.psk_id = psk_id 
        self.rssi = rssi 
        self.rx_bps = rx_bps 
        self.rx_bytes = rx_bytes 
        self.rx_packets = rx_packets 
        self.rx_rate = rx_rate 
        self.rx_retries = rx_retries 
        self.snr = snr 
        self.ssid = ssid 
        self.tx_bps = tx_bps 
        self.tx_bytes = tx_bytes 
        self.tx_packets = tx_packets 
        self.tx_rate = tx_rate 
        self.tx_retries = tx_retries 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        self.uptime = uptime 
        self.username = username 
        if vlan_id is not APIHelper.SKIP:
            self.vlan_id = vlan_id 
        self.wlan_id = wlan_id 
        if x is not APIHelper.SKIP:
            self.x = x 
        if x_m is not APIHelper.SKIP:
            self.x_m = x_m 
        if y is not APIHelper.SKIP:
            self.y = y 
        if y_m is not APIHelper.SKIP:
            self.y_m = y_m 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ttl = dictionary.get("_ttl") if dictionary.get("_ttl") else None
        ap_id = dictionary.get("ap_id") if dictionary.get("ap_id") else None
        ap_mac = dictionary.get("ap_mac") if dictionary.get("ap_mac") else None
        band = dictionary.get("band") if dictionary.get("band") else None
        channel = dictionary.get("channel") if dictionary.get("channel") else None
        dual_band = dictionary.get("dual_band") if "dual_band" in dictionary.keys() else None
        family = dictionary.get("family") if dictionary.get("family") else None
        hostname = dictionary.get("hostname") if dictionary.get("hostname") else None
        idle_time = dictionary.get("idle_time") if dictionary.get("idle_time") else None
        ip = dictionary.get("ip") if dictionary.get("ip") else None
        is_guest = dictionary.get("is_guest") if dictionary.get("is_guest") else False
        key_mgmt = dictionary.get("key_mgmt") if dictionary.get("key_mgmt") else None
        last_seen = dictionary.get("last_seen") if dictionary.get("last_seen") else None
        mac = dictionary.get("mac") if dictionary.get("mac") else None
        manufacture = dictionary.get("manufacture") if dictionary.get("manufacture") else None
        model = dictionary.get("model") if dictionary.get("model") else None
        os = dictionary.get("os") if dictionary.get("os") else None
        power_saving = dictionary.get("power_saving") if "power_saving" in dictionary.keys() else None
        proto = dictionary.get("proto") if dictionary.get("proto") else None
        rssi = dictionary.get("rssi") if dictionary.get("rssi") else None
        rx_bps = dictionary.get("rx_bps") if dictionary.get("rx_bps") else None
        rx_bytes = dictionary.get("rx_bytes") if dictionary.get("rx_bytes") else None
        rx_packets = dictionary.get("rx_packets") if dictionary.get("rx_packets") else None
        rx_rate = dictionary.get("rx_rate") if dictionary.get("rx_rate") else None
        rx_retries = dictionary.get("rx_retries") if dictionary.get("rx_retries") else None
        snr = dictionary.get("snr") if dictionary.get("snr") else None
        ssid = dictionary.get("ssid") if dictionary.get("ssid") else None
        tx_bps = dictionary.get("tx_bps") if dictionary.get("tx_bps") else None
        tx_bytes = dictionary.get("tx_bytes") if dictionary.get("tx_bytes") else None
        tx_packets = dictionary.get("tx_packets") if dictionary.get("tx_packets") else None
        tx_rate = dictionary.get("tx_rate") if dictionary.get("tx_rate") else None
        tx_retries = dictionary.get("tx_retries") if dictionary.get("tx_retries") else None
        uptime = dictionary.get("uptime") if dictionary.get("uptime") else None
        username = dictionary.get("username") if dictionary.get("username") else None
        wlan_id = dictionary.get("wlan_id") if dictionary.get("wlan_id") else None
        accuracy = dictionary.get("accuracy") if dictionary.get("accuracy") else APIHelper.SKIP
        airespace_ifname = dictionary.get("airespace_ifname") if dictionary.get("airespace_ifname") else APIHelper.SKIP
        airwatch = Airwatch.from_dictionary(dictionary.get('airwatch')) if 'airwatch' in dictionary.keys() else APIHelper.SKIP
        guest = Guest1.from_dictionary(dictionary.get('guest')) if 'guest' in dictionary.keys() else APIHelper.SKIP
        ip_6 = dictionary.get("ip6") if dictionary.get("ip6") else APIHelper.SKIP
        map_id = dictionary.get("map_id") if dictionary.get("map_id") else APIHelper.SKIP
        num_locating_aps = dictionary.get("num_locating_aps") if dictionary.get("num_locating_aps") else APIHelper.SKIP
        psk_id = dictionary.get("psk_id") if dictionary.get("psk_id") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        vlan_id = dictionary.get("vlan_id") if dictionary.get("vlan_id") else APIHelper.SKIP
        x = dictionary.get("x") if dictionary.get("x") else APIHelper.SKIP
        x_m = dictionary.get("x_m") if dictionary.get("x_m") else APIHelper.SKIP
        y = dictionary.get("y") if dictionary.get("y") else APIHelper.SKIP
        y_m = dictionary.get("y_m") if dictionary.get("y_m") else APIHelper.SKIP
        # Return an object of this model
        return cls(ttl,
                   ap_id,
                   ap_mac,
                   band,
                   channel,
                   dual_band,
                   family,
                   hostname,
                   idle_time,
                   ip,
                   is_guest,
                   key_mgmt,
                   last_seen,
                   mac,
                   manufacture,
                   model,
                   os,
                   power_saving,
                   proto,
                   rssi,
                   rx_bps,
                   rx_bytes,
                   rx_packets,
                   rx_rate,
                   rx_retries,
                   snr,
                   ssid,
                   tx_bps,
                   tx_bytes,
                   tx_packets,
                   tx_rate,
                   tx_retries,
                   uptime,
                   username,
                   wlan_id,
                   accuracy,
                   airespace_ifname,
                   airwatch,
                   guest,
                   ip_6,
                   map_id,
                   num_locating_aps,
                   psk_id,
                   mtype,
                   vlan_id,
                   x,
                   x_m,
                   y,
                   y_m)
