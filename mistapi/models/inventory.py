# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Inventory(object):

    """Implementation of the 'inventory' model.

    TODO: type model description here.

    Attributes:
        adopted (bool): only if `type`==`switch` or `type`==`gateway` whether
            the switch/gateway is adopted
        connected (bool): whether the device is connected
        created_time (int): inventory created time, in epoch
        deviceprofile_id (string): deviceprofile id if assigned, null if not
            assigned
        hostname (string): hostname reported by the device
        hw_rev (string): device hardware revision number
        id (string): device id
        jsi (bool): TODO: type description here.
        mac (string): device MAC address
        magic (string): device claim code
        model (string): device model
        modified_time (int): inventory last modified time, in epoch
        name (string): device name if configured
        org_id (string): org id
        serial (string): device serial
        site_id (string): site id if assigned, null if not assigned
        sku (string): device stock keeping unit
        mtype (Type23Enum): device type

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "adopted": 'adopted',
        "connected": 'connected',
        "created_time": 'created_time',
        "deviceprofile_id": 'deviceprofile_id',
        "hostname": 'hostname',
        "hw_rev": 'hw_rev',
        "id": 'id',
        "jsi": 'jsi',
        "mac": 'mac',
        "magic": 'magic',
        "model": 'model',
        "modified_time": 'modified_time',
        "name": 'name',
        "org_id": 'org_id',
        "serial": 'serial',
        "site_id": 'site_id',
        "sku": 'sku',
        "mtype": 'type'
    }

    _optionals = [
        'adopted',
        'connected',
        'created_time',
        'deviceprofile_id',
        'hostname',
        'hw_rev',
        'id',
        'jsi',
        'mac',
        'magic',
        'model',
        'modified_time',
        'name',
        'org_id',
        'serial',
        'site_id',
        'sku',
        'mtype',
    ]

    _nullables = [
        'deviceprofile_id',
        'site_id',
    ]

    def __init__(self,
                 adopted=APIHelper.SKIP,
                 connected=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 deviceprofile_id=APIHelper.SKIP,
                 hostname=APIHelper.SKIP,
                 hw_rev=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 jsi=APIHelper.SKIP,
                 mac=APIHelper.SKIP,
                 magic=APIHelper.SKIP,
                 model=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 serial=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 sku=APIHelper.SKIP,
                 mtype=APIHelper.SKIP):
        """Constructor for the Inventory class"""

        # Initialize members of the class
        if adopted is not APIHelper.SKIP:
            self.adopted = adopted 
        if connected is not APIHelper.SKIP:
            self.connected = connected 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if deviceprofile_id is not APIHelper.SKIP:
            self.deviceprofile_id = deviceprofile_id 
        if hostname is not APIHelper.SKIP:
            self.hostname = hostname 
        if hw_rev is not APIHelper.SKIP:
            self.hw_rev = hw_rev 
        if id is not APIHelper.SKIP:
            self.id = id 
        if jsi is not APIHelper.SKIP:
            self.jsi = jsi 
        if mac is not APIHelper.SKIP:
            self.mac = mac 
        if magic is not APIHelper.SKIP:
            self.magic = magic 
        if model is not APIHelper.SKIP:
            self.model = model 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        if name is not APIHelper.SKIP:
            self.name = name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if serial is not APIHelper.SKIP:
            self.serial = serial 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if sku is not APIHelper.SKIP:
            self.sku = sku 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        adopted = dictionary.get("adopted") if "adopted" in dictionary.keys() else APIHelper.SKIP
        connected = dictionary.get("connected") if "connected" in dictionary.keys() else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        deviceprofile_id = dictionary.get("deviceprofile_id") if "deviceprofile_id" in dictionary.keys() else APIHelper.SKIP
        hostname = dictionary.get("hostname") if dictionary.get("hostname") else APIHelper.SKIP
        hw_rev = dictionary.get("hw_rev") if dictionary.get("hw_rev") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        jsi = dictionary.get("jsi") if "jsi" in dictionary.keys() else APIHelper.SKIP
        mac = dictionary.get("mac") if dictionary.get("mac") else APIHelper.SKIP
        magic = dictionary.get("magic") if dictionary.get("magic") else APIHelper.SKIP
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        serial = dictionary.get("serial") if dictionary.get("serial") else APIHelper.SKIP
        site_id = dictionary.get("site_id") if "site_id" in dictionary.keys() else APIHelper.SKIP
        sku = dictionary.get("sku") if dictionary.get("sku") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        # Return an object of this model
        return cls(adopted,
                   connected,
                   created_time,
                   deviceprofile_id,
                   hostname,
                   hw_rev,
                   id,
                   jsi,
                   mac,
                   magic,
                   model,
                   modified_time,
                   name,
                   org_id,
                   serial,
                   site_id,
                   sku,
                   mtype)
