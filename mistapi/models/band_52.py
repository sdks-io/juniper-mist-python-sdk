# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Band52(object):

    """Implementation of the 'Band52' model.

    TODO: type model description here.

    Attributes:
        bandwidth (float): TODO: type description here.
        channel (int): TODO: type description here.
        dynamic_chaining_enabled (bool): TODO: type description here.
        power (float): TODO: type description here.
        rx_chain (int): TODO: type description here.
        tx_chain (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bandwidth": 'bandwidth',
        "channel": 'channel',
        "dynamic_chaining_enabled": 'dynamic_chaining_enabled',
        "power": 'power',
        "rx_chain": 'rx_chain',
        "tx_chain": 'tx_chain'
    }

    _optionals = [
        'bandwidth',
        'channel',
        'dynamic_chaining_enabled',
        'power',
        'rx_chain',
        'tx_chain',
    ]

    def __init__(self,
                 bandwidth=APIHelper.SKIP,
                 channel=APIHelper.SKIP,
                 dynamic_chaining_enabled=APIHelper.SKIP,
                 power=APIHelper.SKIP,
                 rx_chain=APIHelper.SKIP,
                 tx_chain=APIHelper.SKIP):
        """Constructor for the Band52 class"""

        # Initialize members of the class
        if bandwidth is not APIHelper.SKIP:
            self.bandwidth = bandwidth 
        if channel is not APIHelper.SKIP:
            self.channel = channel 
        if dynamic_chaining_enabled is not APIHelper.SKIP:
            self.dynamic_chaining_enabled = dynamic_chaining_enabled 
        if power is not APIHelper.SKIP:
            self.power = power 
        if rx_chain is not APIHelper.SKIP:
            self.rx_chain = rx_chain 
        if tx_chain is not APIHelper.SKIP:
            self.tx_chain = tx_chain 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        bandwidth = dictionary.get("bandwidth") if dictionary.get("bandwidth") else APIHelper.SKIP
        channel = dictionary.get("channel") if dictionary.get("channel") else APIHelper.SKIP
        dynamic_chaining_enabled = dictionary.get("dynamic_chaining_enabled") if "dynamic_chaining_enabled" in dictionary.keys() else APIHelper.SKIP
        power = dictionary.get("power") if dictionary.get("power") else APIHelper.SKIP
        rx_chain = dictionary.get("rx_chain") if dictionary.get("rx_chain") else APIHelper.SKIP
        tx_chain = dictionary.get("tx_chain") if dictionary.get("tx_chain") else APIHelper.SKIP
        # Return an object of this model
        return cls(bandwidth,
                   channel,
                   dynamic_chaining_enabled,
                   power,
                   rx_chain,
                   tx_chain)
