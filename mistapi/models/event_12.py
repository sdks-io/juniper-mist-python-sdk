# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Event12(object):

    """Implementation of the 'Event12' model.

    TODO: type model description here.

    Attributes:
        asset_id (uuid|string): uuid of named asset
        id (uuid|string): uuid of SDK-client
        mac (string): mac address of wifi client or asset
        map_id (uuid|string): map id
        name (string): name of the client, may be empty
        site_id (uuid|string): site id
        timestamp (int): timestamp of the event, epoch
        trigger (TriggerEnum): enter / exit
        mtype (string): TODO: type description here.
        zone_id (uuid|string): zone id

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "map_id": 'map_id',
        "site_id": 'site_id',
        "timestamp": 'timestamp',
        "trigger": 'trigger',
        "mtype": 'type',
        "zone_id": 'zone_id',
        "asset_id": 'asset_id',
        "mac": 'mac',
        "name": 'name'
    }

    _optionals = [
        'asset_id',
        'mac',
        'name',
    ]

    def __init__(self,
                 id=None,
                 map_id=None,
                 site_id=None,
                 timestamp=None,
                 trigger=None,
                 mtype=None,
                 zone_id=None,
                 asset_id=APIHelper.SKIP,
                 mac=APIHelper.SKIP,
                 name=APIHelper.SKIP):
        """Constructor for the Event12 class"""

        # Initialize members of the class
        if asset_id is not APIHelper.SKIP:
            self.asset_id = asset_id 
        self.id = id 
        if mac is not APIHelper.SKIP:
            self.mac = mac 
        self.map_id = map_id 
        if name is not APIHelper.SKIP:
            self.name = name 
        self.site_id = site_id 
        self.timestamp = timestamp 
        self.trigger = trigger 
        self.mtype = mtype 
        self.zone_id = zone_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else None
        map_id = dictionary.get("map_id") if dictionary.get("map_id") else None
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        trigger = dictionary.get("trigger") if dictionary.get("trigger") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        zone_id = dictionary.get("zone_id") if dictionary.get("zone_id") else None
        asset_id = dictionary.get("asset_id") if dictionary.get("asset_id") else APIHelper.SKIP
        mac = dictionary.get("mac") if dictionary.get("mac") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   map_id,
                   site_id,
                   timestamp,
                   trigger,
                   mtype,
                   zone_id,
                   asset_id,
                   mac,
                   name)
