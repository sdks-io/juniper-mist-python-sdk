# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.models.event import Event


class WebhookAlarms(object):

    """Implementation of the 'webhook_alarms' model.

    **N.B.**: Fields like `aps`, `bssids`, `ssids` are event specific. They
    are relevant to this event type ( rogue-ap-detected). For a different
    event type, different fields may be sent. These don’t contain all affected
    entities and are representative samples of entities (capped at 10). For
    marvis action related events, we expose `details` to include more event
    specific details.
    Events specific fields for other alarm event type can be found with API
    https://api.mist.com/api/v1/const/alarm_defs, under “fields” array of
    /alarm_defs response object.

    Attributes:
        events (list of Event): list of events
        topic (string): topic subscribed to

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "events": 'events',
        "topic": 'topic'
    }

    def __init__(self,
                 events=None,
                 topic='alarms'):
        """Constructor for the WebhookAlarms class"""

        # Initialize members of the class
        self.events = events 
        self.topic = topic 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        events = None
        if dictionary.get('events') is not None:
            events = [Event.from_dictionary(x) for x in dictionary.get('events')]
        topic = dictionary.get("topic") if dictionary.get("topic") else 'alarms'
        # Return an object of this model
        return cls(events,
                   topic)
