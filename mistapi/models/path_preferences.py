# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.paths import Paths


class PathPreferences(object):

    """Implementation of the 'PathPreferences' model.

    The property key is the path name

    Attributes:
        paths (Paths): TODO: type description here.
        strategy (Strategy2Enum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "paths": 'paths',
        "strategy": 'strategy'
    }

    _optionals = [
        'paths',
        'strategy',
    ]

    def __init__(self,
                 paths=APIHelper.SKIP,
                 strategy='ordered'):
        """Constructor for the PathPreferences class"""

        # Initialize members of the class
        if paths is not APIHelper.SKIP:
            self.paths = paths 
        self.strategy = strategy 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        paths = Paths.from_dictionary(dictionary.get('paths')) if 'paths' in dictionary.keys() else APIHelper.SKIP
        strategy = dictionary.get("strategy") if dictionary.get("strategy") else 'ordered'
        # Return an object of this model
        return cls(paths,
                   strategy)
