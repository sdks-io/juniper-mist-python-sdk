# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Underlay(object):

    """Implementation of the 'Underlay' model.

    TODO: type model description here.

    Attributes:
        as_base (int): TODO: type description here.
        routed_id_prefix (string): TODO: type description here.
        subnet (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "as_base": 'as_base',
        "routed_id_prefix": 'routed_id_prefix',
        "subnet": 'subnet'
    }

    _optionals = [
        'as_base',
        'routed_id_prefix',
        'subnet',
    ]

    def __init__(self,
                 as_base=APIHelper.SKIP,
                 routed_id_prefix=APIHelper.SKIP,
                 subnet=APIHelper.SKIP):
        """Constructor for the Underlay class"""

        # Initialize members of the class
        if as_base is not APIHelper.SKIP:
            self.as_base = as_base 
        if routed_id_prefix is not APIHelper.SKIP:
            self.routed_id_prefix = routed_id_prefix 
        if subnet is not APIHelper.SKIP:
            self.subnet = subnet 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        as_base = dictionary.get("as_base") if dictionary.get("as_base") else APIHelper.SKIP
        routed_id_prefix = dictionary.get("routed_id_prefix") if dictionary.get("routed_id_prefix") else APIHelper.SKIP
        subnet = dictionary.get("subnet") if dictionary.get("subnet") else APIHelper.SKIP
        # Return an object of this model
        return cls(as_base,
                   routed_id_prefix,
                   subnet)
