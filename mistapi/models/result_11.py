# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.radio import Radio
from mistapi.models.wlan_2 import Wlan2


class Result11(object):

    """Implementation of the 'Result11' model.

    TODO: type model description here.

    Attributes:
        channel_24 (int): TODO: type description here.
        channel_5 (int): TODO: type description here.
        radio_macs (list of string): TODO: type description here.
        radios (list of Radio): TODO: type description here.
        secpolicy_violated (bool): TODO: type description here.
        ssids (list of string): TODO: type description here.
        ssids_24 (list of string): TODO: type description here.
        ssids_5 (list of string): TODO: type description here.
        timestamp (float): TODO: type description here.
        version (string): TODO: type description here.
        wlans (list of Wlan2): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "channel_24": 'channel_24',
        "channel_5": 'channel_5',
        "secpolicy_violated": 'secpolicy_violated',
        "timestamp": 'timestamp',
        "version": 'version',
        "radio_macs": 'radio_macs',
        "radios": 'radios',
        "ssids": 'ssids',
        "ssids_24": 'ssids_24',
        "ssids_5": 'ssids_5',
        "wlans": 'wlans'
    }

    _optionals = [
        'radio_macs',
        'radios',
        'ssids',
        'ssids_24',
        'ssids_5',
        'wlans',
    ]

    def __init__(self,
                 channel_24=None,
                 channel_5=None,
                 secpolicy_violated=None,
                 timestamp=None,
                 version=None,
                 radio_macs=APIHelper.SKIP,
                 radios=APIHelper.SKIP,
                 ssids=APIHelper.SKIP,
                 ssids_24=APIHelper.SKIP,
                 ssids_5=APIHelper.SKIP,
                 wlans=APIHelper.SKIP):
        """Constructor for the Result11 class"""

        # Initialize members of the class
        self.channel_24 = channel_24 
        self.channel_5 = channel_5 
        if radio_macs is not APIHelper.SKIP:
            self.radio_macs = radio_macs 
        if radios is not APIHelper.SKIP:
            self.radios = radios 
        self.secpolicy_violated = secpolicy_violated 
        if ssids is not APIHelper.SKIP:
            self.ssids = ssids 
        if ssids_24 is not APIHelper.SKIP:
            self.ssids_24 = ssids_24 
        if ssids_5 is not APIHelper.SKIP:
            self.ssids_5 = ssids_5 
        self.timestamp = timestamp 
        self.version = version 
        if wlans is not APIHelper.SKIP:
            self.wlans = wlans 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        channel_24 = dictionary.get("channel_24") if dictionary.get("channel_24") else None
        channel_5 = dictionary.get("channel_5") if dictionary.get("channel_5") else None
        secpolicy_violated = dictionary.get("secpolicy_violated") if "secpolicy_violated" in dictionary.keys() else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        version = dictionary.get("version") if dictionary.get("version") else None
        radio_macs = dictionary.get("radio_macs") if dictionary.get("radio_macs") else APIHelper.SKIP
        radios = None
        if dictionary.get('radios') is not None:
            radios = [Radio.from_dictionary(x) for x in dictionary.get('radios')]
        else:
            radios = APIHelper.SKIP
        ssids = dictionary.get("ssids") if dictionary.get("ssids") else APIHelper.SKIP
        ssids_24 = dictionary.get("ssids_24") if dictionary.get("ssids_24") else APIHelper.SKIP
        ssids_5 = dictionary.get("ssids_5") if dictionary.get("ssids_5") else APIHelper.SKIP
        wlans = None
        if dictionary.get('wlans') is not None:
            wlans = [Wlan2.from_dictionary(x) for x in dictionary.get('wlans')]
        else:
            wlans = APIHelper.SKIP
        # Return an object of this model
        return cls(channel_24,
                   channel_5,
                   secpolicy_violated,
                   timestamp,
                   version,
                   radio_macs,
                   radios,
                   ssids,
                   ssids_24,
                   ssids_5,
                   wlans)
