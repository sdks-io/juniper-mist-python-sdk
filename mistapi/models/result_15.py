# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Result15(object):

    """Implementation of the 'Result15' model.

    TODO: type model description here.

    Attributes:
        band_24_bandwith (string): Bandwith of band_24
        band_24_channel (int): Channel of band_24
        band_24_power (int): TODO: type description here.
        band_5_bandwith (string): Bandwith of band_5
        band_5_channel (int): Channel of band_5
        band_5_power (int): TODO: type description here.
        band_6_bandwith (string): TODO: type description here.
        band_6_channel (int): Channel of band_6
        band_6_power (int): TODO: type description here.
        eth_0_port_speed (int): Port speed of eth0
        ext_ip (string): TODO: type description here.
        hostname (list of string): partial / full hostname
        ip (string): ip address
        lldp_mgmt_addr (string): LLDP management ip address
        lldp_port_desc (string): TODO: type description here.
        lldp_port_id (string): LLDP port id
        lldp_power_allocated (int): TODO: type description here.
        lldp_power_draw (int): TODO: type description here.
        lldp_system_desc (string): LLDP system description
        lldp_system_name (string): LLDP system name
        mac (string): device model
        model (string): TODO: type description here.
        mxedge_id (string): Mist Edge id, if AP is connecting to a Mist Edge
        mxtunnel_status (string): MxTunnel status
        org_id (string): TODO: type description here.
        power_constrained (bool): TODO: type description here.
        site_id (string): site id
        sku (string): TODO: type description here.
        timestamp (float): TODO: type description here.
        uptime (int): TODO: type description here.
        version (string): version
        last_hostname (string): TODO: type description here.
        num_members (int): TODO: type description here.
        mtype (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "band_24_bandwith": 'band_24_bandwith',
        "band_24_channel": 'band_24_channel',
        "band_24_power": 'band_24_power',
        "band_5_bandwith": 'band_5_bandwith',
        "band_5_channel": 'band_5_channel',
        "band_5_power": 'band_5_power',
        "band_6_bandwith": 'band_6_bandwith',
        "band_6_channel": 'band_6_channel',
        "band_6_power": 'band_6_power',
        "eth_0_port_speed": 'eth0_port_speed',
        "ext_ip": 'ext_ip',
        "hostname": 'hostname',
        "ip": 'ip',
        "lldp_mgmt_addr": 'lldp_mgmt_addr',
        "lldp_port_desc": 'lldp_port_desc',
        "lldp_port_id": 'lldp_port_id',
        "lldp_power_allocated": 'lldp_power_allocated',
        "lldp_power_draw": 'lldp_power_draw',
        "lldp_system_desc": 'lldp_system_desc',
        "lldp_system_name": 'lldp_system_name',
        "mac": 'mac',
        "model": 'model',
        "mxedge_id": 'mxedge_id',
        "mxtunnel_status": 'mxtunnel_status',
        "org_id": 'org_id',
        "power_constrained": 'power_constrained',
        "site_id": 'site_id',
        "sku": 'sku',
        "timestamp": 'timestamp',
        "uptime": 'uptime',
        "version": 'version',
        "last_hostname": 'last_hostname',
        "num_members": 'num_members',
        "mtype": 'type'
    }

    _optionals = [
        'band_24_bandwith',
        'band_24_channel',
        'band_24_power',
        'band_5_bandwith',
        'band_5_channel',
        'band_5_power',
        'band_6_bandwith',
        'band_6_channel',
        'band_6_power',
        'eth_0_port_speed',
        'ext_ip',
        'hostname',
        'ip',
        'lldp_mgmt_addr',
        'lldp_port_desc',
        'lldp_port_id',
        'lldp_power_allocated',
        'lldp_power_draw',
        'lldp_system_desc',
        'lldp_system_name',
        'mac',
        'model',
        'mxedge_id',
        'mxtunnel_status',
        'org_id',
        'power_constrained',
        'site_id',
        'sku',
        'timestamp',
        'uptime',
        'version',
        'last_hostname',
        'num_members',
        'mtype',
    ]

    def __init__(self,
                 band_24_bandwith=APIHelper.SKIP,
                 band_24_channel=APIHelper.SKIP,
                 band_24_power=APIHelper.SKIP,
                 band_5_bandwith=APIHelper.SKIP,
                 band_5_channel=APIHelper.SKIP,
                 band_5_power=APIHelper.SKIP,
                 band_6_bandwith=APIHelper.SKIP,
                 band_6_channel=APIHelper.SKIP,
                 band_6_power=APIHelper.SKIP,
                 eth_0_port_speed=APIHelper.SKIP,
                 ext_ip=APIHelper.SKIP,
                 hostname=APIHelper.SKIP,
                 ip=APIHelper.SKIP,
                 lldp_mgmt_addr=APIHelper.SKIP,
                 lldp_port_desc=APIHelper.SKIP,
                 lldp_port_id=APIHelper.SKIP,
                 lldp_power_allocated=APIHelper.SKIP,
                 lldp_power_draw=APIHelper.SKIP,
                 lldp_system_desc=APIHelper.SKIP,
                 lldp_system_name=APIHelper.SKIP,
                 mac=APIHelper.SKIP,
                 model=APIHelper.SKIP,
                 mxedge_id=APIHelper.SKIP,
                 mxtunnel_status=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 power_constrained=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 sku=APIHelper.SKIP,
                 timestamp=APIHelper.SKIP,
                 uptime=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 last_hostname=APIHelper.SKIP,
                 num_members=APIHelper.SKIP,
                 mtype=APIHelper.SKIP):
        """Constructor for the Result15 class"""

        # Initialize members of the class
        if band_24_bandwith is not APIHelper.SKIP:
            self.band_24_bandwith = band_24_bandwith 
        if band_24_channel is not APIHelper.SKIP:
            self.band_24_channel = band_24_channel 
        if band_24_power is not APIHelper.SKIP:
            self.band_24_power = band_24_power 
        if band_5_bandwith is not APIHelper.SKIP:
            self.band_5_bandwith = band_5_bandwith 
        if band_5_channel is not APIHelper.SKIP:
            self.band_5_channel = band_5_channel 
        if band_5_power is not APIHelper.SKIP:
            self.band_5_power = band_5_power 
        if band_6_bandwith is not APIHelper.SKIP:
            self.band_6_bandwith = band_6_bandwith 
        if band_6_channel is not APIHelper.SKIP:
            self.band_6_channel = band_6_channel 
        if band_6_power is not APIHelper.SKIP:
            self.band_6_power = band_6_power 
        if eth_0_port_speed is not APIHelper.SKIP:
            self.eth_0_port_speed = eth_0_port_speed 
        if ext_ip is not APIHelper.SKIP:
            self.ext_ip = ext_ip 
        if hostname is not APIHelper.SKIP:
            self.hostname = hostname 
        if ip is not APIHelper.SKIP:
            self.ip = ip 
        if lldp_mgmt_addr is not APIHelper.SKIP:
            self.lldp_mgmt_addr = lldp_mgmt_addr 
        if lldp_port_desc is not APIHelper.SKIP:
            self.lldp_port_desc = lldp_port_desc 
        if lldp_port_id is not APIHelper.SKIP:
            self.lldp_port_id = lldp_port_id 
        if lldp_power_allocated is not APIHelper.SKIP:
            self.lldp_power_allocated = lldp_power_allocated 
        if lldp_power_draw is not APIHelper.SKIP:
            self.lldp_power_draw = lldp_power_draw 
        if lldp_system_desc is not APIHelper.SKIP:
            self.lldp_system_desc = lldp_system_desc 
        if lldp_system_name is not APIHelper.SKIP:
            self.lldp_system_name = lldp_system_name 
        if mac is not APIHelper.SKIP:
            self.mac = mac 
        if model is not APIHelper.SKIP:
            self.model = model 
        if mxedge_id is not APIHelper.SKIP:
            self.mxedge_id = mxedge_id 
        if mxtunnel_status is not APIHelper.SKIP:
            self.mxtunnel_status = mxtunnel_status 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if power_constrained is not APIHelper.SKIP:
            self.power_constrained = power_constrained 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if sku is not APIHelper.SKIP:
            self.sku = sku 
        if timestamp is not APIHelper.SKIP:
            self.timestamp = timestamp 
        if uptime is not APIHelper.SKIP:
            self.uptime = uptime 
        if version is not APIHelper.SKIP:
            self.version = version 
        if last_hostname is not APIHelper.SKIP:
            self.last_hostname = last_hostname 
        if num_members is not APIHelper.SKIP:
            self.num_members = num_members 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        band_24_bandwith = dictionary.get("band_24_bandwith") if dictionary.get("band_24_bandwith") else APIHelper.SKIP
        band_24_channel = dictionary.get("band_24_channel") if dictionary.get("band_24_channel") else APIHelper.SKIP
        band_24_power = dictionary.get("band_24_power") if dictionary.get("band_24_power") else APIHelper.SKIP
        band_5_bandwith = dictionary.get("band_5_bandwith") if dictionary.get("band_5_bandwith") else APIHelper.SKIP
        band_5_channel = dictionary.get("band_5_channel") if dictionary.get("band_5_channel") else APIHelper.SKIP
        band_5_power = dictionary.get("band_5_power") if dictionary.get("band_5_power") else APIHelper.SKIP
        band_6_bandwith = dictionary.get("band_6_bandwith") if dictionary.get("band_6_bandwith") else APIHelper.SKIP
        band_6_channel = dictionary.get("band_6_channel") if dictionary.get("band_6_channel") else APIHelper.SKIP
        band_6_power = dictionary.get("band_6_power") if dictionary.get("band_6_power") else APIHelper.SKIP
        eth_0_port_speed = dictionary.get("eth0_port_speed") if dictionary.get("eth0_port_speed") else APIHelper.SKIP
        ext_ip = dictionary.get("ext_ip") if dictionary.get("ext_ip") else APIHelper.SKIP
        hostname = dictionary.get("hostname") if dictionary.get("hostname") else APIHelper.SKIP
        ip = dictionary.get("ip") if dictionary.get("ip") else APIHelper.SKIP
        lldp_mgmt_addr = dictionary.get("lldp_mgmt_addr") if dictionary.get("lldp_mgmt_addr") else APIHelper.SKIP
        lldp_port_desc = dictionary.get("lldp_port_desc") if dictionary.get("lldp_port_desc") else APIHelper.SKIP
        lldp_port_id = dictionary.get("lldp_port_id") if dictionary.get("lldp_port_id") else APIHelper.SKIP
        lldp_power_allocated = dictionary.get("lldp_power_allocated") if dictionary.get("lldp_power_allocated") else APIHelper.SKIP
        lldp_power_draw = dictionary.get("lldp_power_draw") if dictionary.get("lldp_power_draw") else APIHelper.SKIP
        lldp_system_desc = dictionary.get("lldp_system_desc") if dictionary.get("lldp_system_desc") else APIHelper.SKIP
        lldp_system_name = dictionary.get("lldp_system_name") if dictionary.get("lldp_system_name") else APIHelper.SKIP
        mac = dictionary.get("mac") if dictionary.get("mac") else APIHelper.SKIP
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        mxedge_id = dictionary.get("mxedge_id") if dictionary.get("mxedge_id") else APIHelper.SKIP
        mxtunnel_status = dictionary.get("mxtunnel_status") if dictionary.get("mxtunnel_status") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        power_constrained = dictionary.get("power_constrained") if "power_constrained" in dictionary.keys() else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        sku = dictionary.get("sku") if dictionary.get("sku") else APIHelper.SKIP
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else APIHelper.SKIP
        uptime = dictionary.get("uptime") if dictionary.get("uptime") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        last_hostname = dictionary.get("last_hostname") if dictionary.get("last_hostname") else APIHelper.SKIP
        num_members = dictionary.get("num_members") if dictionary.get("num_members") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        # Return an object of this model
        return cls(band_24_bandwith,
                   band_24_channel,
                   band_24_power,
                   band_5_bandwith,
                   band_5_channel,
                   band_5_power,
                   band_6_bandwith,
                   band_6_channel,
                   band_6_power,
                   eth_0_port_speed,
                   ext_ip,
                   hostname,
                   ip,
                   lldp_mgmt_addr,
                   lldp_port_desc,
                   lldp_port_id,
                   lldp_power_allocated,
                   lldp_power_draw,
                   lldp_system_desc,
                   lldp_system_name,
                   mac,
                   model,
                   mxedge_id,
                   mxtunnel_status,
                   org_id,
                   power_constrained,
                   site_id,
                   sku,
                   timestamp,
                   uptime,
                   version,
                   last_hostname,
                   num_members,
                   mtype)
