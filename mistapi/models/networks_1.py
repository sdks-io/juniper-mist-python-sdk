# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Networks1(object):

    """Implementation of the 'Networks1' model.

    TODO: type model description here.

    Attributes:
        auth_keys (dict): if `auth_type`==`md5`. The property key is the key
            number
        auth_password (string): if `auth_type`==`password`, the password, max
            length is 8
        auth_type (AuthTypeEnum): auth type
        bfd_minimum_interval (int): TODO: type description here.
        dead_interval (int): TODO: type description here.
        hello_interval (int): TODO: type description here.
        interface_type (InterfaceTypeEnum): interface type (nbma =
            non-broadcast multi-access)
        metric (int): TODO: type description here.
        passive (bool): whether to send OSPF-Hello

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "auth_keys": 'auth_keys',
        "auth_password": 'auth_password',
        "auth_type": 'auth_type',
        "bfd_minimum_interval": 'bfd_minimum_interval',
        "dead_interval": 'dead_interval',
        "hello_interval": 'hello_interval',
        "interface_type": 'interface_type',
        "metric": 'metric',
        "passive": 'passive'
    }

    _optionals = [
        'auth_keys',
        'auth_password',
        'auth_type',
        'bfd_minimum_interval',
        'dead_interval',
        'hello_interval',
        'interface_type',
        'metric',
        'passive',
    ]

    _nullables = [
        'metric',
    ]

    def __init__(self,
                 auth_keys=APIHelper.SKIP,
                 auth_password=APIHelper.SKIP,
                 auth_type='none',
                 bfd_minimum_interval=APIHelper.SKIP,
                 dead_interval=APIHelper.SKIP,
                 hello_interval=APIHelper.SKIP,
                 interface_type='nbma',
                 metric=APIHelper.SKIP,
                 passive=False):
        """Constructor for the Networks1 class"""

        # Initialize members of the class
        if auth_keys is not APIHelper.SKIP:
            self.auth_keys = auth_keys 
        if auth_password is not APIHelper.SKIP:
            self.auth_password = auth_password 
        self.auth_type = auth_type 
        if bfd_minimum_interval is not APIHelper.SKIP:
            self.bfd_minimum_interval = bfd_minimum_interval 
        if dead_interval is not APIHelper.SKIP:
            self.dead_interval = dead_interval 
        if hello_interval is not APIHelper.SKIP:
            self.hello_interval = hello_interval 
        self.interface_type = interface_type 
        if metric is not APIHelper.SKIP:
            self.metric = metric 
        self.passive = passive 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        auth_keys = dictionary.get("auth_keys") if dictionary.get("auth_keys") else APIHelper.SKIP
        auth_password = dictionary.get("auth_password") if dictionary.get("auth_password") else APIHelper.SKIP
        auth_type = dictionary.get("auth_type") if dictionary.get("auth_type") else 'none'
        bfd_minimum_interval = dictionary.get("bfd_minimum_interval") if dictionary.get("bfd_minimum_interval") else APIHelper.SKIP
        dead_interval = dictionary.get("dead_interval") if dictionary.get("dead_interval") else APIHelper.SKIP
        hello_interval = dictionary.get("hello_interval") if dictionary.get("hello_interval") else APIHelper.SKIP
        interface_type = dictionary.get("interface_type") if dictionary.get("interface_type") else 'nbma'
        metric = dictionary.get("metric") if "metric" in dictionary.keys() else APIHelper.SKIP
        passive = dictionary.get("passive") if dictionary.get("passive") else False
        # Return an object of this model
        return cls(auth_keys,
                   auth_password,
                   auth_type,
                   bfd_minimum_interval,
                   dead_interval,
                   hello_interval,
                   interface_type,
                   metric,
                   passive)
