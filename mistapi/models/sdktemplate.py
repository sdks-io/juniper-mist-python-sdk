# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Sdktemplate(object):

    """Implementation of the 'sdktemplate' model.

    SDK Template

    Attributes:
        bg_image (string): TODO: type description here.
        btn_flr_bgcolor (string): TODO: type description here.
        created_time (float): TODO: type description here.
        default (bool): whether this is the default template when there are
            multiple templates
        for_site (bool): TODO: type description here.
        header_txt (string): TODO: type description here.
        id (uuid|string): TODO: type description here.
        modified_time (float): TODO: type description here.
        name (string): name for identification purpose
        org_id (uuid|string): TODO: type description here.
        search_txtcolor (string): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        welcome_msg (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "bg_image": 'bg_image',
        "btn_flr_bgcolor": 'btn_flr_bgcolor',
        "created_time": 'created_time',
        "default": 'default',
        "for_site": 'for_site',
        "header_txt": 'header_txt',
        "id": 'id',
        "modified_time": 'modified_time',
        "org_id": 'org_id',
        "search_txtcolor": 'search_txtcolor',
        "site_id": 'site_id',
        "welcome_msg": 'welcome_msg'
    }

    _optionals = [
        'bg_image',
        'btn_flr_bgcolor',
        'created_time',
        'default',
        'for_site',
        'header_txt',
        'id',
        'modified_time',
        'org_id',
        'search_txtcolor',
        'site_id',
        'welcome_msg',
    ]

    def __init__(self,
                 name=None,
                 bg_image=APIHelper.SKIP,
                 btn_flr_bgcolor=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 default=APIHelper.SKIP,
                 for_site=APIHelper.SKIP,
                 header_txt=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 search_txtcolor=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 welcome_msg=APIHelper.SKIP):
        """Constructor for the Sdktemplate class"""

        # Initialize members of the class
        if bg_image is not APIHelper.SKIP:
            self.bg_image = bg_image 
        if btn_flr_bgcolor is not APIHelper.SKIP:
            self.btn_flr_bgcolor = btn_flr_bgcolor 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if default is not APIHelper.SKIP:
            self.default = default 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        if header_txt is not APIHelper.SKIP:
            self.header_txt = header_txt 
        if id is not APIHelper.SKIP:
            self.id = id 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        self.name = name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if search_txtcolor is not APIHelper.SKIP:
            self.search_txtcolor = search_txtcolor 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if welcome_msg is not APIHelper.SKIP:
            self.welcome_msg = welcome_msg 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        bg_image = dictionary.get("bg_image") if dictionary.get("bg_image") else APIHelper.SKIP
        btn_flr_bgcolor = dictionary.get("btn_flr_bgcolor") if dictionary.get("btn_flr_bgcolor") else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        default = dictionary.get("default") if "default" in dictionary.keys() else APIHelper.SKIP
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        header_txt = dictionary.get("header_txt") if dictionary.get("header_txt") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        search_txtcolor = dictionary.get("search_txtcolor") if dictionary.get("search_txtcolor") else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        welcome_msg = dictionary.get("welcome_msg") if dictionary.get("welcome_msg") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   bg_image,
                   btn_flr_bgcolor,
                   created_time,
                   default,
                   for_site,
                   header_txt,
                   id,
                   modified_time,
                   org_id,
                   search_txtcolor,
                   site_id,
                   welcome_msg)
