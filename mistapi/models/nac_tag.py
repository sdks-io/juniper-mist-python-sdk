# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class NacTag(object):

    """Implementation of the 'nac_tag' model.

    TODO: type model description here.

    Attributes:
        created_time (float): TODO: type description here.
        egress_vlan_names (list of string): if `type`==`egress_vlan_names`,
            list of egress vlans to return
        gbp_tag (int): if `type`==`gbp_tag`
        id (uuid|string): TODO: type description here.
        match (MatchEnum): if `type`==`match`
        modified_time (float): TODO: type description here.
        name (string): TODO: type description here.
        org_id (uuid|string): TODO: type description here.
        radius_attrs (list of string): if `type`==`radius_attrs`, user can
            specify a list of one or more standard attributes in the field
            "radius_attrs".  It is the responsibility of the user to provide a
            syntactically correct string, otherwise it may not work as
            expected. Note that it is allowed to have more than one
            radius_attrs in the result of a given rule.
        radius_group (string): if `type`==`radius_group`
        radius_vendor_attrs (list of string): if
            `type`==`radius_vendor_attrs`, user can specify a list of one or
            more vendor-specific attributes in the field
            "radius_vendor_attrs".  It is the responsibility of the user to
            provide a  syntactically correct string, otherwise it may not work
            as expected. Note that it is allowed to have more than one
            radius_vendor_attrs in the result of a given rule.
        session_timeout (int): if `type`==`session_timeout, in seconds
        mtype (Type34Enum): TODO: type description here.
        values (list of string): if `type`==`match`
        vlan (string): if `type`==`vlan`

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "mtype": 'type',
        "created_time": 'created_time',
        "egress_vlan_names": 'egress_vlan_names',
        "gbp_tag": 'gbp_tag',
        "id": 'id',
        "match": 'match',
        "modified_time": 'modified_time',
        "org_id": 'org_id',
        "radius_attrs": 'radius_attrs',
        "radius_group": 'radius_group',
        "radius_vendor_attrs": 'radius_vendor_attrs',
        "session_timeout": 'session_timeout',
        "values": 'values',
        "vlan": 'vlan'
    }

    _optionals = [
        'created_time',
        'egress_vlan_names',
        'gbp_tag',
        'id',
        'match',
        'modified_time',
        'org_id',
        'radius_attrs',
        'radius_group',
        'radius_vendor_attrs',
        'session_timeout',
        'values',
        'vlan',
    ]

    def __init__(self,
                 name=None,
                 mtype=None,
                 created_time=APIHelper.SKIP,
                 egress_vlan_names=APIHelper.SKIP,
                 gbp_tag=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 match=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 radius_attrs=APIHelper.SKIP,
                 radius_group=APIHelper.SKIP,
                 radius_vendor_attrs=APIHelper.SKIP,
                 session_timeout=APIHelper.SKIP,
                 values=APIHelper.SKIP,
                 vlan=APIHelper.SKIP):
        """Constructor for the NacTag class"""

        # Initialize members of the class
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if egress_vlan_names is not APIHelper.SKIP:
            self.egress_vlan_names = egress_vlan_names 
        if gbp_tag is not APIHelper.SKIP:
            self.gbp_tag = gbp_tag 
        if id is not APIHelper.SKIP:
            self.id = id 
        if match is not APIHelper.SKIP:
            self.match = match 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        self.name = name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if radius_attrs is not APIHelper.SKIP:
            self.radius_attrs = radius_attrs 
        if radius_group is not APIHelper.SKIP:
            self.radius_group = radius_group 
        if radius_vendor_attrs is not APIHelper.SKIP:
            self.radius_vendor_attrs = radius_vendor_attrs 
        if session_timeout is not APIHelper.SKIP:
            self.session_timeout = session_timeout 
        self.mtype = mtype 
        if values is not APIHelper.SKIP:
            self.values = values 
        if vlan is not APIHelper.SKIP:
            self.vlan = vlan 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        egress_vlan_names = dictionary.get("egress_vlan_names") if dictionary.get("egress_vlan_names") else APIHelper.SKIP
        gbp_tag = dictionary.get("gbp_tag") if dictionary.get("gbp_tag") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        match = dictionary.get("match") if dictionary.get("match") else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        radius_attrs = dictionary.get("radius_attrs") if dictionary.get("radius_attrs") else APIHelper.SKIP
        radius_group = dictionary.get("radius_group") if dictionary.get("radius_group") else APIHelper.SKIP
        radius_vendor_attrs = dictionary.get("radius_vendor_attrs") if dictionary.get("radius_vendor_attrs") else APIHelper.SKIP
        session_timeout = dictionary.get("session_timeout") if dictionary.get("session_timeout") else APIHelper.SKIP
        values = dictionary.get("values") if dictionary.get("values") else APIHelper.SKIP
        vlan = dictionary.get("vlan") if dictionary.get("vlan") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   mtype,
                   created_time,
                   egress_vlan_names,
                   gbp_tag,
                   id,
                   match,
                   modified_time,
                   org_id,
                   radius_attrs,
                   radius_group,
                   radius_vendor_attrs,
                   session_timeout,
                   values,
                   vlan)
