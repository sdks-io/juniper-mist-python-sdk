# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class WlanDatarates(object):

    """Implementation of the 'wlan_datarates' model.

    data rates wlan settings

    Attributes:
        ht (string): MCS bitmasks for 4 streams (16-bit for each stream, MCS0
            is least significant bit), e.g. 00ff 00f0 001f limits HT rates to
            MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS
            1-5 for 3 stream (i.e. MCS 16-20)
        legacy (list of string): list of supported rates (IE=1) and extended
            supported rates (IE=50) for custom template, append ‘b’ at the end
            to indicate a rate being basic/mandatory. If `template`==`custom`
            is configured and legacy does not define at least one basic rate,
            it will use `no-legacy` default values
        min_rssi (int): Minimum RSSI for client to connect, 0 means not
            enforcing
        template (string): * `no-legacy`: no 11b * `compatible`: all, like
            before, default setting that Broadcom/Atheros used *
            `legacy-only`: disable 802.11n and 802.11ac  * `high-density`: no
            11b, no low rates * `custom`: user defined
        vht (string): MCS bitmasks for 4 streams (16-bit for each stream, MCS0
            is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to
            MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3
            streams.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ht": 'ht',
        "legacy": 'legacy',
        "min_rssi": 'min_rssi',
        "template": 'template',
        "vht": 'vht'
    }

    _optionals = [
        'ht',
        'legacy',
        'min_rssi',
        'template',
        'vht',
    ]

    _nullables = [
        'ht',
        'template',
    ]

    def __init__(self,
                 ht=APIHelper.SKIP,
                 legacy=APIHelper.SKIP,
                 min_rssi=APIHelper.SKIP,
                 template=APIHelper.SKIP,
                 vht=APIHelper.SKIP):
        """Constructor for the WlanDatarates class"""

        # Initialize members of the class
        if ht is not APIHelper.SKIP:
            self.ht = ht 
        if legacy is not APIHelper.SKIP:
            self.legacy = legacy 
        if min_rssi is not APIHelper.SKIP:
            self.min_rssi = min_rssi 
        if template is not APIHelper.SKIP:
            self.template = template 
        if vht is not APIHelper.SKIP:
            self.vht = vht 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ht = dictionary.get("ht") if "ht" in dictionary.keys() else APIHelper.SKIP
        legacy = dictionary.get("legacy") if dictionary.get("legacy") else APIHelper.SKIP
        min_rssi = dictionary.get("min_rssi") if dictionary.get("min_rssi") else APIHelper.SKIP
        template = dictionary.get("template") if "template" in dictionary.keys() else APIHelper.SKIP
        vht = dictionary.get("vht") if dictionary.get("vht") else APIHelper.SKIP
        # Return an object of this model
        return cls(ht,
                   legacy,
                   min_rssi,
                   template,
                   vht)
