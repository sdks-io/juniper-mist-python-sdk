# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.extra_routes_5 import ExtraRoutes5
from mistapi.models.junos_dhcp_snooping import JunosDhcpSnooping
from mistapi.models.junos_radius_config import JunosRadiusConfig
from mistapi.models.junos_snmp_config import JunosSnmpConfig
from mistapi.models.mist_nac import MistNac
from mistapi.models.networks_3 import Networks3
from mistapi.models.port_usages import PortUsages
from mistapi.models.remote_syslog import RemoteSyslog
from mistapi.models.switch_mgmt_2 import SwitchMgmt2
from mistapi.models.template_switch_matching import TemplateSwitchMatching
from mistapi.models.vrf_config import VrfConfig
from mistapi.models.vrf_instances import VrfInstances


class Networktemplate(object):

    """Implementation of the 'networktemplate' model.

    Network Template

    Attributes:
        additional_config_cmds (list of string): TODO: type description here.
        created_time (float): TODO: type description here.
        dhcp_snooping (JunosDhcpSnooping): TODO: type description here.
        dns_servers (list of string): TODO: type description here.
        dns_suffix (list of string): TODO: type description here.
        extra_routes (dict): TODO: type description here.
        group_tags (object): TODO: type description here.
        id (uuid|string): TODO: type description here.
        import_org_networks (list of string): Org Networks that we'd like to
            import
        mist_nac (MistNac): enable mist_nac to use radsec
        modified_time (float): TODO: type description here.
        name (string): TODO: type description here.
        networks (dict): The property key is network name
        ntp_servers (list of string): TODO: type description here.
        org_id (uuid|string): TODO: type description here.
        port_usages (PortUsages): The property key is the port profile name
        radius_config (JunosRadiusConfig): Junos Radius config
        remote_syslog (RemoteSyslog): TODO: type description here.
        snmp_config (JunosSnmpConfig): TODO: type description here.
        switch_matching (TemplateSwitchMatching): Switch template
        switch_mgmt (SwitchMgmt2): TODO: type description here.
        vrf_config (VrfConfig): TODO: type description here.
        vrf_instances (dict): Property key is the VRF name

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "additional_config_cmds": 'additional_config_cmds',
        "created_time": 'created_time',
        "dhcp_snooping": 'dhcp_snooping',
        "dns_servers": 'dns_servers',
        "dns_suffix": 'dns_suffix',
        "extra_routes": 'extra_routes',
        "group_tags": 'group_tags',
        "id": 'id',
        "import_org_networks": 'import_org_networks',
        "mist_nac": 'mist_nac',
        "modified_time": 'modified_time',
        "name": 'name',
        "networks": 'networks',
        "ntp_servers": 'ntp_servers',
        "org_id": 'org_id',
        "port_usages": 'port_usages',
        "radius_config": 'radius_config',
        "remote_syslog": 'remote_syslog',
        "snmp_config": 'snmp_config',
        "switch_matching": 'switch_matching',
        "switch_mgmt": 'switch_mgmt',
        "vrf_config": 'vrf_config',
        "vrf_instances": 'vrf_instances'
    }

    _optionals = [
        'additional_config_cmds',
        'created_time',
        'dhcp_snooping',
        'dns_servers',
        'dns_suffix',
        'extra_routes',
        'group_tags',
        'id',
        'import_org_networks',
        'mist_nac',
        'modified_time',
        'name',
        'networks',
        'ntp_servers',
        'org_id',
        'port_usages',
        'radius_config',
        'remote_syslog',
        'snmp_config',
        'switch_matching',
        'switch_mgmt',
        'vrf_config',
        'vrf_instances',
    ]

    def __init__(self,
                 additional_config_cmds=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 dhcp_snooping=APIHelper.SKIP,
                 dns_servers=APIHelper.SKIP,
                 dns_suffix=APIHelper.SKIP,
                 extra_routes=APIHelper.SKIP,
                 group_tags=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 import_org_networks=APIHelper.SKIP,
                 mist_nac=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 networks=APIHelper.SKIP,
                 ntp_servers=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 port_usages=APIHelper.SKIP,
                 radius_config=APIHelper.SKIP,
                 remote_syslog=APIHelper.SKIP,
                 snmp_config=APIHelper.SKIP,
                 switch_matching=APIHelper.SKIP,
                 switch_mgmt=APIHelper.SKIP,
                 vrf_config=APIHelper.SKIP,
                 vrf_instances=APIHelper.SKIP):
        """Constructor for the Networktemplate class"""

        # Initialize members of the class
        if additional_config_cmds is not APIHelper.SKIP:
            self.additional_config_cmds = additional_config_cmds 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if dhcp_snooping is not APIHelper.SKIP:
            self.dhcp_snooping = dhcp_snooping 
        if dns_servers is not APIHelper.SKIP:
            self.dns_servers = dns_servers 
        if dns_suffix is not APIHelper.SKIP:
            self.dns_suffix = dns_suffix 
        if extra_routes is not APIHelper.SKIP:
            self.extra_routes = extra_routes 
        if group_tags is not APIHelper.SKIP:
            self.group_tags = group_tags 
        if id is not APIHelper.SKIP:
            self.id = id 
        if import_org_networks is not APIHelper.SKIP:
            self.import_org_networks = import_org_networks 
        if mist_nac is not APIHelper.SKIP:
            self.mist_nac = mist_nac 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        if name is not APIHelper.SKIP:
            self.name = name 
        if networks is not APIHelper.SKIP:
            self.networks = networks 
        if ntp_servers is not APIHelper.SKIP:
            self.ntp_servers = ntp_servers 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if port_usages is not APIHelper.SKIP:
            self.port_usages = port_usages 
        if radius_config is not APIHelper.SKIP:
            self.radius_config = radius_config 
        if remote_syslog is not APIHelper.SKIP:
            self.remote_syslog = remote_syslog 
        if snmp_config is not APIHelper.SKIP:
            self.snmp_config = snmp_config 
        if switch_matching is not APIHelper.SKIP:
            self.switch_matching = switch_matching 
        if switch_mgmt is not APIHelper.SKIP:
            self.switch_mgmt = switch_mgmt 
        if vrf_config is not APIHelper.SKIP:
            self.vrf_config = vrf_config 
        if vrf_instances is not APIHelper.SKIP:
            self.vrf_instances = vrf_instances 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        additional_config_cmds = dictionary.get("additional_config_cmds") if dictionary.get("additional_config_cmds") else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        dhcp_snooping = JunosDhcpSnooping.from_dictionary(dictionary.get('dhcp_snooping')) if 'dhcp_snooping' in dictionary.keys() else APIHelper.SKIP
        dns_servers = dictionary.get("dns_servers") if dictionary.get("dns_servers") else APIHelper.SKIP
        dns_suffix = dictionary.get("dns_suffix") if dictionary.get("dns_suffix") else APIHelper.SKIP
        extra_routes = ExtraRoutes5.from_dictionary(dictionary.get('extra_routes')) if 'extra_routes' in dictionary.keys() else APIHelper.SKIP
        group_tags = dictionary.get("group_tags") if dictionary.get("group_tags") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        import_org_networks = dictionary.get("import_org_networks") if dictionary.get("import_org_networks") else APIHelper.SKIP
        mist_nac = MistNac.from_dictionary(dictionary.get('mist_nac')) if 'mist_nac' in dictionary.keys() else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        networks = Networks3.from_dictionary(dictionary.get('networks')) if 'networks' in dictionary.keys() else APIHelper.SKIP
        ntp_servers = dictionary.get("ntp_servers") if dictionary.get("ntp_servers") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        port_usages = PortUsages.from_dictionary(dictionary.get('port_usages')) if 'port_usages' in dictionary.keys() else APIHelper.SKIP
        radius_config = JunosRadiusConfig.from_dictionary(dictionary.get('radius_config')) if 'radius_config' in dictionary.keys() else APIHelper.SKIP
        remote_syslog = RemoteSyslog.from_dictionary(dictionary.get('remote_syslog')) if 'remote_syslog' in dictionary.keys() else APIHelper.SKIP
        snmp_config = JunosSnmpConfig.from_dictionary(dictionary.get('snmp_config')) if 'snmp_config' in dictionary.keys() else APIHelper.SKIP
        switch_matching = TemplateSwitchMatching.from_dictionary(dictionary.get('switch_matching')) if 'switch_matching' in dictionary.keys() else APIHelper.SKIP
        switch_mgmt = SwitchMgmt2.from_dictionary(dictionary.get('switch_mgmt')) if 'switch_mgmt' in dictionary.keys() else APIHelper.SKIP
        vrf_config = VrfConfig.from_dictionary(dictionary.get('vrf_config')) if 'vrf_config' in dictionary.keys() else APIHelper.SKIP
        vrf_instances = VrfInstances.from_dictionary(dictionary.get('vrf_instances')) if 'vrf_instances' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(additional_config_cmds,
                   created_time,
                   dhcp_snooping,
                   dns_servers,
                   dns_suffix,
                   extra_routes,
                   group_tags,
                   id,
                   import_org_networks,
                   mist_nac,
                   modified_time,
                   name,
                   networks,
                   ntp_servers,
                   org_id,
                   port_usages,
                   radius_config,
                   remote_syslog,
                   snmp_config,
                   switch_matching,
                   switch_mgmt,
                   vrf_config,
                   vrf_instances)
