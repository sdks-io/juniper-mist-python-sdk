# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Action3(object):

    """Implementation of the 'Action3' model.

    when used as import policy

    Attributes:
        accept (bool): TODO: type description here.
        add_community (list of string): TODO: type description here.
        community (list of string): when used as export policy, optional
        exclude_as_path (list of string): when used as export policy,
            optional. To exclude certain AS
        exclude_community (list of string): TODO: type description here.
        export_communitites (list of string): when used as export policy,
            optional
        local_preference (string): optional, for an import policy,
            local_preference can be changed
        prepend_as_path (list of string): when used as export policy,
            optional. By default, the local AS will be prepended, to change
            it

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "accept": 'accept',
        "add_community": 'add_community',
        "community": 'community',
        "exclude_as_path": 'exclude_as_path',
        "exclude_community": 'exclude_community',
        "export_communitites": 'export_communitites',
        "local_preference": 'local_preference',
        "prepend_as_path": 'prepend_as_path'
    }

    _optionals = [
        'accept',
        'add_community',
        'community',
        'exclude_as_path',
        'exclude_community',
        'export_communitites',
        'local_preference',
        'prepend_as_path',
    ]

    def __init__(self,
                 accept=APIHelper.SKIP,
                 add_community=APIHelper.SKIP,
                 community=APIHelper.SKIP,
                 exclude_as_path=APIHelper.SKIP,
                 exclude_community=APIHelper.SKIP,
                 export_communitites=APIHelper.SKIP,
                 local_preference=APIHelper.SKIP,
                 prepend_as_path=APIHelper.SKIP):
        """Constructor for the Action3 class"""

        # Initialize members of the class
        if accept is not APIHelper.SKIP:
            self.accept = accept 
        if add_community is not APIHelper.SKIP:
            self.add_community = add_community 
        if community is not APIHelper.SKIP:
            self.community = community 
        if exclude_as_path is not APIHelper.SKIP:
            self.exclude_as_path = exclude_as_path 
        if exclude_community is not APIHelper.SKIP:
            self.exclude_community = exclude_community 
        if export_communitites is not APIHelper.SKIP:
            self.export_communitites = export_communitites 
        if local_preference is not APIHelper.SKIP:
            self.local_preference = local_preference 
        if prepend_as_path is not APIHelper.SKIP:
            self.prepend_as_path = prepend_as_path 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        accept = dictionary.get("accept") if "accept" in dictionary.keys() else APIHelper.SKIP
        add_community = dictionary.get("add_community") if dictionary.get("add_community") else APIHelper.SKIP
        community = dictionary.get("community") if dictionary.get("community") else APIHelper.SKIP
        exclude_as_path = dictionary.get("exclude_as_path") if dictionary.get("exclude_as_path") else APIHelper.SKIP
        exclude_community = dictionary.get("exclude_community") if dictionary.get("exclude_community") else APIHelper.SKIP
        export_communitites = dictionary.get("export_communitites") if dictionary.get("export_communitites") else APIHelper.SKIP
        local_preference = dictionary.get("local_preference") if dictionary.get("local_preference") else APIHelper.SKIP
        prepend_as_path = dictionary.get("prepend_as_path") if dictionary.get("prepend_as_path") else APIHelper.SKIP
        # Return an object of this model
        return cls(accept,
                   add_community,
                   community,
                   exclude_as_path,
                   exclude_community,
                   export_communitites,
                   local_preference,
                   prepend_as_path)
