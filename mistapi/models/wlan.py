# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.acct_server import AcctServer
from mistapi.models.app_limit import AppLimit
from mistapi.models.auth_server import AuthServer
from mistapi.models.coa_server import CoaServer
from mistapi.models.dns_server_rewrite import DnsServerRewrite
from mistapi.models.dynamic_psk import DynamicPsk
from mistapi.models.dynamic_vlan_1 import DynamicVlan1
from mistapi.models.mist_nac_2 import MistNac2
from mistapi.models.qos import Qos
from mistapi.models.radsec import Radsec
from mistapi.models.schedule import Schedule
from mistapi.models.wlan_airwatch import WlanAirwatch
from mistapi.models.wlan_app_qos import WlanAppQos
from mistapi.models.wlan_auth import WlanAuth
from mistapi.models.wlan_bonjour import WlanBonjour
from mistapi.models.wlan_cisco_cwa import WlanCiscoCwa
from mistapi.models.wlan_datarates import WlanDatarates
from mistapi.models.wlan_hotspot_20 import WlanHotspot20
from mistapi.models.wlan_portal import WlanPortal


class Wlan(object):

    """Implementation of the 'wlan' model.

    WLAN
    **Note**: portal_template will be forked out of wlan objects soon. To
    fetch portal_template, please query portal_template_url. To update
    portal_template, use Wlan Portal Template.

    Attributes:
        acct_immediate_update (bool): enable coa-immediate-update and
            address-change-immediate-update on the access profile.
        acct_interim_interval (int): how frequently should interim accounting
            be reported, 60-65535. default is 0 (use one specified in
            Access-Accept request from RADIUS Server). Very frequent messages
            can affect the performance of the radius server, 600 and up is
            recommended when enabled
        acct_servers (list of AcctServer): list of RADIUS accounting servers,
            optional, order matters where the first one is treated as primary
        airwatch (WlanAirwatch): airwatch wlan settings
        allow_ipv_6_ndp (bool): only applicable when limit_bcast==true, which
            allows or disallows ipv6 Neighbor Discovery packets to go through
        allow_mdns (bool): only applicable when limit_bcast==true, which
            allows mDNS / Bonjour packets to go through
        allow_ssdp (bool): only applicable when `limit_bcast`==`tru`e, which
            allows SSDP
        ap_ids (list of uuid|string): list of device ids
        app_limit (AppLimit): bandwidth limiting for apps (applies to
            up/down)
        app_qos (WlanAppQos): app qos wlan settings
        apply_to (ApplyToEnum): TODO: type description here.
        arp_filter (bool): whether to enable smart arp filter
        auth (WlanAuth): authentication wlan settings
        auth_server_selection (AuthServerSelectionEnum): When ordered, AP will
            prefer and go back to the first server if possible
        auth_servers (list of AuthServer): list of RADIUS authentication
            servers, at least one is needed if `auth type`==`eap`, order
            matters where the first one is treated as primary
        auth_servers_nas_id (string): optional, up to 48 bytes, will be
            dynamically generated if not provided. used only for
            authentication servers
        auth_servers_nas_ip (string): optional, NAS-IP-ADDRESS to use
        auth_servers_retries (int): radius auth session retries. Following
            fast timers are set if “fast_dot1x_timers” knob is enabled.
            ‘retries’ are set to value of auth_servers_retries. ‘max-requests’
            is also set when setting auth_servers_retries and is set to
            default value to 3.
        auth_servers_timeout (int): radius auth session timeout. Following
            fast timers are set if “fast_dot1x_timers” knob is enabled.
            ‘quite-period’ and ‘transmit-period’ are set to half the value of
            auth_servers_timeout. ‘supplicant-timeout’ is also set when
            setting auth_servers_timeout and is set to default value of 10.
        band (string): `band` is deprecated and kept for backward compability.
            Use bands instead
        band_steer (bool): whether to enable band_steering, this works only
            when band==both
        band_steer_force_band_5 (bool): force dual-band capable client to
            connect to 5G
        bands (list of Band8Enum): list of radios that the wlan should apply
            to
        block_blacklist_clients (bool): whether to block the clients in the
            blacklist (up to first 256 macs)
        bonjour (WlanBonjour): bonjour gateway wlan settings
        cisco_cwa (WlanCiscoCwa): Cisco CWA (central web authentication)
            required RADIUS with COA in order to work. See CWA:
            https://www.cisco.com/c/en/us/support/docs/security/identity-servic
            es-engine/115732-central-web-auth-00.html
        client_limit_down (int): kbps
        client_limit_down_enabled (bool): if downlink limiting per-client is
            enabled
        client_limit_up (int): kbps
        client_limit_up_enabled (bool): if uplink limiting per-client is
            enabled
        coa_servers (list of CoaServer): list of COA (change of authorization)
            servers, optional
        created_time (float): TODO: type description here.
        disable_11_ax (bool): some old WLAN drivers may not be compatible
        disable_ht_vht_rates (bool): to disable ht or vht rates
        disable_uapsd (bool): whether to disable U-APSD
        disable_v_1_roam_notify (bool): disable sending v2 roam notification
            messages
        disable_v_2_roam_notify (bool): disable sending v2 roam notification
            messages
        disable_wmm (bool): whether to disable WMM
        dns_server_rewrite (DnsServerRewrite): for radius_group-based DNS
            server (rewrite DNS request depending on the Group RADIUS server
            returns)
        dtim (int): TODO: type description here.
        dynamic_psk (DynamicPsk): for dynamic PSK where we get per-user PSK
            from Radius dynamic_psk allows PSK to be selected at runtime
            depending on context (wlan/site/user/...) thus following
            configurations are assumed (currently) - PSK will come from RADIUS
            server - AP sends client MAC as username ans password (i.e.
            `enable_mac_auth` is assumed) - AP sends BSSID:SSID as
            Caller-Station-ID - `auth_servers` is required - PSK will come
            from cloud WLC if source is cloud_psks - default_psk will be used
            if cloud WLC is not available - `multi_psk_only` and `psk` is
            ignored - `pairwise` can only be wpa2-ccmp (for now, wpa3 support
            on the roadmap)
        dynamic_vlan (DynamicVlan1): for 802.1x
        enable_local_keycaching (bool): enable AP-AP keycaching via multicast
        enable_wireless_bridging (bool): whether to enable wireless bridging,
            which allows more broadcast packets to go through (allows
            forwarding of DHCP response to client not associated with the AP)
        enabled (bool): if this wlan is enabled
        fast_dot_1_x_timers (bool): if set to true, sets default fast-timers
            with values calculated from ‘auth_servers_timeout’ and
            ‘auth_server_retries’.
        for_site (bool): TODO: type description here.
        hide_ssid (bool): whether to hide SSID in beacon
        hostname_ie (bool): include hostname inside IE in AP beacons / probe
            responses
        hotspot_20 (WlanHotspot20): hostspot 2.0 wlan settings
        id (uuid|string): TODO: type description here.
        interface (InterfaceEnum): where this WLAN will be connected to
        isolation (bool): whether to allow clients to talk to each other
        l_2_isolation (bool): if isolation is enabled, whether to deny clients
            to talk to L2 on the LAN
        legacy_overds (bool): legacy devices requires the Over-DS (for Fast
            BSS Transition) bit set (while our chip doesn’t support it).
            Warning! Enabling this will cause problem for iOS devices.
        limit_bcast (bool): whether to limit broadcast packets going to
            wireless (i.e. only allow certain bcast packets to go through)
        limit_probe_response (bool): limit probe response base on some
            heuristic rules
        max_idletime (int): max idle time in seconds
        mist_nac (MistNac2): TODO: type description here.
        modified_time (float): TODO: type description here.
        msp_id (uuid|string): TODO: type description here.
        mxtunnel (object): when `interface`=`site_medge`, the definition of
            the Mist Tunnels (key is the name)
        mxtunnel_ids (list of string): when `interface`=`mxtunnel`, id of the
            Mist Tunnel
        mxtunnel_name (list of string): when `interface`=`site_medge`, name of
            the mxtunnel that in mxtunnels under Site Setting
        no_static_dns (bool): whether to only allow client to use DNS that
            we’ve learned from DHCP response
        no_static_ip (bool): whether to only allow client that we’ve learned
            from DHCP exchange to talk
        org_id (uuid|string): TODO: type description here.
        portal (WlanPortal): portal wlan settings
        portal_allowed_hostnames (list of string): list of hostnames without
            http(s):// (matched by substring)
        portal_allowed_subnets (list of string): list of CIDRs
        portal_api_secret (string): api secret (auto-generated) that can be
            used to sign guest authorization requests
        portal_denied_hostnames (list of string): list of hostnames without
            http(s):// (matched by substring), this takes precedence over
            portal_allowed_hostnames
        portal_image (string): Url of portal background image
        portal_sso_url (string): TODO: type description here.
        portal_template_url (string): N.B portal_template will be forked out
            of wlan objects soon. To fetch portal_template, please query
            portal_template_url. To update portal_template, use Wlan Portal
            Template.
        qos (Qos): TODO: type description here.
        radsec (Radsec): Radsec settings
        rateset (dict): TODO: type description here.
        roam_mode (RoamModeEnum): TODO: type description here.
        schedule (Schedule): WLAN operating schedule, default is disabled
        site_id (uuid|string): TODO: type description here.
        sle_excluded (bool): whether to exclude this WLAN from SLE metrics
        ssid (string): the name of the SSID
        template_id (uuid|string): TODO: type description here.
        thumbnail (string): Url of portal background image thumbnail
        use_eapol_v_1 (bool): if `auth.type`==’eap’ or ‘psk’, should only be
            set for legacy client, such as pre-2004, 802.11b devices
        vlan_enabled (bool): if vlan tagging is enabled
        vlan_id (int): TODO: type description here.
        vlan_ids (list of int): list of VLAN ids
        vlan_pooling (bool): vlan pooling allows AP to place client on
            different VLAN using a deterministic algorithm
        wlan_limit_down (int): kbps
        wlan_limit_down_enabled (bool): if downlink limiting for whole wlan is
            enabled
        wlan_limit_up (int): kbps
        wlan_limit_up_enabled (bool): if uplink limiting for whole wlan is
            enabled
        wxtag_ids (list of uuid|string): list of wxtag_ids
        wxtunnel_id (string): when `interface`=`wxtunnel`, id of the WXLAN
            Tunnel
        wxtunnel_remote_id (string): when `interface`=`wxtunnel`, remote
            tunnel identifier

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ssid": 'ssid',
        "acct_immediate_update": 'acct_immediate_update',
        "acct_interim_interval": 'acct_interim_interval',
        "acct_servers": 'acct_servers',
        "airwatch": 'airwatch',
        "allow_ipv_6_ndp": 'allow_ipv6_ndp',
        "allow_mdns": 'allow_mdns',
        "allow_ssdp": 'allow_ssdp',
        "ap_ids": 'ap_ids',
        "app_limit": 'app_limit',
        "app_qos": 'app_qos',
        "apply_to": 'apply_to',
        "arp_filter": 'arp_filter',
        "auth": 'auth',
        "auth_server_selection": 'auth_server_selection',
        "auth_servers": 'auth_servers',
        "auth_servers_nas_id": 'auth_servers_nas_id',
        "auth_servers_nas_ip": 'auth_servers_nas_ip',
        "auth_servers_retries": 'auth_servers_retries',
        "auth_servers_timeout": 'auth_servers_timeout',
        "band": 'band',
        "band_steer": 'band_steer',
        "band_steer_force_band_5": 'band_steer_force_band5',
        "bands": 'bands',
        "block_blacklist_clients": 'block_blacklist_clients',
        "bonjour": 'bonjour',
        "cisco_cwa": 'cisco_cwa',
        "client_limit_down": 'client_limit_down',
        "client_limit_down_enabled": 'client_limit_down_enabled',
        "client_limit_up": 'client_limit_up',
        "client_limit_up_enabled": 'client_limit_up_enabled',
        "coa_servers": 'coa_servers',
        "created_time": 'created_time',
        "disable_11_ax": 'disable_11ax',
        "disable_ht_vht_rates": 'disable_ht_vht_rates',
        "disable_uapsd": 'disable_uapsd',
        "disable_v_1_roam_notify": 'disable_v1_roam_notify',
        "disable_v_2_roam_notify": 'disable_v2_roam_notify',
        "disable_wmm": 'disable_wmm',
        "dns_server_rewrite": 'dns_server_rewrite',
        "dtim": 'dtim',
        "dynamic_psk": 'dynamic_psk',
        "dynamic_vlan": 'dynamic_vlan',
        "enable_local_keycaching": 'enable_local_keycaching',
        "enable_wireless_bridging": 'enable_wireless_bridging',
        "enabled": 'enabled',
        "fast_dot_1_x_timers": 'fast_dot1x_timers',
        "for_site": 'for_site',
        "hide_ssid": 'hide_ssid',
        "hostname_ie": 'hostname_ie',
        "hotspot_20": 'hotspot20',
        "id": 'id',
        "interface": 'interface',
        "isolation": 'isolation',
        "l_2_isolation": 'l2_isolation',
        "legacy_overds": 'legacy_overds',
        "limit_bcast": 'limit_bcast',
        "limit_probe_response": 'limit_probe_response',
        "max_idletime": 'max_idletime',
        "mist_nac": 'mist_nac',
        "modified_time": 'modified_time',
        "msp_id": 'msp_id',
        "mxtunnel": 'mxtunnel',
        "mxtunnel_ids": 'mxtunnel_ids',
        "mxtunnel_name": 'mxtunnel_name',
        "no_static_dns": 'no_static_dns',
        "no_static_ip": 'no_static_ip',
        "org_id": 'org_id',
        "portal": 'portal',
        "portal_allowed_hostnames": 'portal_allowed_hostnames',
        "portal_allowed_subnets": 'portal_allowed_subnets',
        "portal_api_secret": 'portal_api_secret',
        "portal_denied_hostnames": 'portal_denied_hostnames',
        "portal_image": 'portal_image',
        "portal_sso_url": 'portal_sso_url',
        "portal_template_url": 'portal_template_url',
        "qos": 'qos',
        "radsec": 'radsec',
        "rateset": 'rateset',
        "roam_mode": 'roam_mode',
        "schedule": 'schedule',
        "site_id": 'site_id',
        "sle_excluded": 'sle_excluded',
        "template_id": 'template_id',
        "thumbnail": 'thumbnail',
        "use_eapol_v_1": 'use_eapol_v1',
        "vlan_enabled": 'vlan_enabled',
        "vlan_id": 'vlan_id',
        "vlan_ids": 'vlan_ids',
        "vlan_pooling": 'vlan_pooling',
        "wlan_limit_down": 'wlan_limit_down',
        "wlan_limit_down_enabled": 'wlan_limit_down_enabled',
        "wlan_limit_up": 'wlan_limit_up',
        "wlan_limit_up_enabled": 'wlan_limit_up_enabled',
        "wxtag_ids": 'wxtag_ids',
        "wxtunnel_id": 'wxtunnel_id',
        "wxtunnel_remote_id": 'wxtunnel_remote_id'
    }

    _optionals = [
        'acct_immediate_update',
        'acct_interim_interval',
        'acct_servers',
        'airwatch',
        'allow_ipv_6_ndp',
        'allow_mdns',
        'allow_ssdp',
        'ap_ids',
        'app_limit',
        'app_qos',
        'apply_to',
        'arp_filter',
        'auth',
        'auth_server_selection',
        'auth_servers',
        'auth_servers_nas_id',
        'auth_servers_nas_ip',
        'auth_servers_retries',
        'auth_servers_timeout',
        'band',
        'band_steer',
        'band_steer_force_band_5',
        'bands',
        'block_blacklist_clients',
        'bonjour',
        'cisco_cwa',
        'client_limit_down',
        'client_limit_down_enabled',
        'client_limit_up',
        'client_limit_up_enabled',
        'coa_servers',
        'created_time',
        'disable_11_ax',
        'disable_ht_vht_rates',
        'disable_uapsd',
        'disable_v_1_roam_notify',
        'disable_v_2_roam_notify',
        'disable_wmm',
        'dns_server_rewrite',
        'dtim',
        'dynamic_psk',
        'dynamic_vlan',
        'enable_local_keycaching',
        'enable_wireless_bridging',
        'enabled',
        'fast_dot_1_x_timers',
        'for_site',
        'hide_ssid',
        'hostname_ie',
        'hotspot_20',
        'id',
        'interface',
        'isolation',
        'l_2_isolation',
        'legacy_overds',
        'limit_bcast',
        'limit_probe_response',
        'max_idletime',
        'mist_nac',
        'modified_time',
        'msp_id',
        'mxtunnel',
        'mxtunnel_ids',
        'mxtunnel_name',
        'no_static_dns',
        'no_static_ip',
        'org_id',
        'portal',
        'portal_allowed_hostnames',
        'portal_allowed_subnets',
        'portal_api_secret',
        'portal_denied_hostnames',
        'portal_image',
        'portal_sso_url',
        'portal_template_url',
        'qos',
        'radsec',
        'rateset',
        'roam_mode',
        'schedule',
        'site_id',
        'sle_excluded',
        'template_id',
        'thumbnail',
        'use_eapol_v_1',
        'vlan_enabled',
        'vlan_id',
        'vlan_ids',
        'vlan_pooling',
        'wlan_limit_down',
        'wlan_limit_down_enabled',
        'wlan_limit_up',
        'wlan_limit_up_enabled',
        'wxtag_ids',
        'wxtunnel_id',
        'wxtunnel_remote_id',
    ]

    _nullables = [
        'ap_ids',
        'apply_to',
        'auth_server_selection',
        'auth_servers_nas_id',
        'auth_servers_nas_ip',
        'coa_servers',
        'dns_server_rewrite',
        'dynamic_psk',
        'dynamic_vlan',
        'portal_api_secret',
        'portal_image',
        'portal_sso_url',
        'portal_template_url',
        'roam_mode',
        'template_id',
        'thumbnail',
        'vlan_id',
        'wxtag_ids',
        'wxtunnel_id',
        'wxtunnel_remote_id',
    ]

    def __init__(self,
                 ssid=None,
                 acct_immediate_update=False,
                 acct_interim_interval=0,
                 acct_servers=APIHelper.SKIP,
                 airwatch=APIHelper.SKIP,
                 allow_ipv_6_ndp=True,
                 allow_mdns=False,
                 allow_ssdp=False,
                 ap_ids=APIHelper.SKIP,
                 app_limit=APIHelper.SKIP,
                 app_qos=APIHelper.SKIP,
                 apply_to=APIHelper.SKIP,
                 arp_filter=False,
                 auth=APIHelper.SKIP,
                 auth_server_selection='ordered',
                 auth_servers=APIHelper.SKIP,
                 auth_servers_nas_id=APIHelper.SKIP,
                 auth_servers_nas_ip=APIHelper.SKIP,
                 auth_servers_retries=2,
                 auth_servers_timeout=5,
                 band=APIHelper.SKIP,
                 band_steer=False,
                 band_steer_force_band_5=False,
                 bands=APIHelper.SKIP,
                 block_blacklist_clients=APIHelper.SKIP,
                 bonjour=APIHelper.SKIP,
                 cisco_cwa=APIHelper.SKIP,
                 client_limit_down=APIHelper.SKIP,
                 client_limit_down_enabled=False,
                 client_limit_up=APIHelper.SKIP,
                 client_limit_up_enabled=False,
                 coa_servers=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 disable_11_ax=False,
                 disable_ht_vht_rates=False,
                 disable_uapsd=False,
                 disable_v_1_roam_notify=True,
                 disable_v_2_roam_notify=False,
                 disable_wmm=False,
                 dns_server_rewrite=APIHelper.SKIP,
                 dtim=2,
                 dynamic_psk=APIHelper.SKIP,
                 dynamic_vlan=APIHelper.SKIP,
                 enable_local_keycaching=False,
                 enable_wireless_bridging=APIHelper.SKIP,
                 enabled=True,
                 fast_dot_1_x_timers=False,
                 for_site=APIHelper.SKIP,
                 hide_ssid=False,
                 hostname_ie=False,
                 hotspot_20=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 interface='all',
                 isolation=False,
                 l_2_isolation=False,
                 legacy_overds=APIHelper.SKIP,
                 limit_bcast=False,
                 limit_probe_response=APIHelper.SKIP,
                 max_idletime=1800,
                 mist_nac=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 msp_id=APIHelper.SKIP,
                 mxtunnel=APIHelper.SKIP,
                 mxtunnel_ids=APIHelper.SKIP,
                 mxtunnel_name=APIHelper.SKIP,
                 no_static_dns=False,
                 no_static_ip=False,
                 org_id=APIHelper.SKIP,
                 portal=APIHelper.SKIP,
                 portal_allowed_hostnames=APIHelper.SKIP,
                 portal_allowed_subnets=APIHelper.SKIP,
                 portal_api_secret=APIHelper.SKIP,
                 portal_denied_hostnames=APIHelper.SKIP,
                 portal_image=APIHelper.SKIP,
                 portal_sso_url=APIHelper.SKIP,
                 portal_template_url=APIHelper.SKIP,
                 qos=APIHelper.SKIP,
                 radsec=APIHelper.SKIP,
                 rateset=APIHelper.SKIP,
                 roam_mode='none',
                 schedule=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 sle_excluded=False,
                 template_id=APIHelper.SKIP,
                 thumbnail=APIHelper.SKIP,
                 use_eapol_v_1=False,
                 vlan_enabled=False,
                 vlan_id=APIHelper.SKIP,
                 vlan_ids=APIHelper.SKIP,
                 vlan_pooling=False,
                 wlan_limit_down=APIHelper.SKIP,
                 wlan_limit_down_enabled=False,
                 wlan_limit_up=APIHelper.SKIP,
                 wlan_limit_up_enabled=False,
                 wxtag_ids=APIHelper.SKIP,
                 wxtunnel_id=APIHelper.SKIP,
                 wxtunnel_remote_id=APIHelper.SKIP):
        """Constructor for the Wlan class"""

        # Initialize members of the class
        self.acct_immediate_update = acct_immediate_update 
        self.acct_interim_interval = acct_interim_interval 
        if acct_servers is not APIHelper.SKIP:
            self.acct_servers = acct_servers 
        if airwatch is not APIHelper.SKIP:
            self.airwatch = airwatch 
        self.allow_ipv_6_ndp = allow_ipv_6_ndp 
        self.allow_mdns = allow_mdns 
        self.allow_ssdp = allow_ssdp 
        if ap_ids is not APIHelper.SKIP:
            self.ap_ids = ap_ids 
        if app_limit is not APIHelper.SKIP:
            self.app_limit = app_limit 
        if app_qos is not APIHelper.SKIP:
            self.app_qos = app_qos 
        if apply_to is not APIHelper.SKIP:
            self.apply_to = apply_to 
        self.arp_filter = arp_filter 
        if auth is not APIHelper.SKIP:
            self.auth = auth 
        self.auth_server_selection = auth_server_selection 
        if auth_servers is not APIHelper.SKIP:
            self.auth_servers = auth_servers 
        if auth_servers_nas_id is not APIHelper.SKIP:
            self.auth_servers_nas_id = auth_servers_nas_id 
        if auth_servers_nas_ip is not APIHelper.SKIP:
            self.auth_servers_nas_ip = auth_servers_nas_ip 
        self.auth_servers_retries = auth_servers_retries 
        self.auth_servers_timeout = auth_servers_timeout 
        if band is not APIHelper.SKIP:
            self.band = band 
        self.band_steer = band_steer 
        self.band_steer_force_band_5 = band_steer_force_band_5 
        if bands is not APIHelper.SKIP:
            self.bands = bands 
        if block_blacklist_clients is not APIHelper.SKIP:
            self.block_blacklist_clients = block_blacklist_clients 
        if bonjour is not APIHelper.SKIP:
            self.bonjour = bonjour 
        if cisco_cwa is not APIHelper.SKIP:
            self.cisco_cwa = cisco_cwa 
        if client_limit_down is not APIHelper.SKIP:
            self.client_limit_down = client_limit_down 
        self.client_limit_down_enabled = client_limit_down_enabled 
        if client_limit_up is not APIHelper.SKIP:
            self.client_limit_up = client_limit_up 
        self.client_limit_up_enabled = client_limit_up_enabled 
        if coa_servers is not APIHelper.SKIP:
            self.coa_servers = coa_servers 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        self.disable_11_ax = disable_11_ax 
        self.disable_ht_vht_rates = disable_ht_vht_rates 
        self.disable_uapsd = disable_uapsd 
        self.disable_v_1_roam_notify = disable_v_1_roam_notify 
        self.disable_v_2_roam_notify = disable_v_2_roam_notify 
        self.disable_wmm = disable_wmm 
        if dns_server_rewrite is not APIHelper.SKIP:
            self.dns_server_rewrite = dns_server_rewrite 
        self.dtim = dtim 
        if dynamic_psk is not APIHelper.SKIP:
            self.dynamic_psk = dynamic_psk 
        if dynamic_vlan is not APIHelper.SKIP:
            self.dynamic_vlan = dynamic_vlan 
        self.enable_local_keycaching = enable_local_keycaching 
        if enable_wireless_bridging is not APIHelper.SKIP:
            self.enable_wireless_bridging = enable_wireless_bridging 
        self.enabled = enabled 
        self.fast_dot_1_x_timers = fast_dot_1_x_timers 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        self.hide_ssid = hide_ssid 
        self.hostname_ie = hostname_ie 
        if hotspot_20 is not APIHelper.SKIP:
            self.hotspot_20 = hotspot_20 
        if id is not APIHelper.SKIP:
            self.id = id 
        self.interface = interface 
        self.isolation = isolation 
        self.l_2_isolation = l_2_isolation 
        if legacy_overds is not APIHelper.SKIP:
            self.legacy_overds = legacy_overds 
        self.limit_bcast = limit_bcast 
        if limit_probe_response is not APIHelper.SKIP:
            self.limit_probe_response = limit_probe_response 
        self.max_idletime = max_idletime 
        if mist_nac is not APIHelper.SKIP:
            self.mist_nac = mist_nac 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        if msp_id is not APIHelper.SKIP:
            self.msp_id = msp_id 
        if mxtunnel is not APIHelper.SKIP:
            self.mxtunnel = mxtunnel 
        if mxtunnel_ids is not APIHelper.SKIP:
            self.mxtunnel_ids = mxtunnel_ids 
        if mxtunnel_name is not APIHelper.SKIP:
            self.mxtunnel_name = mxtunnel_name 
        self.no_static_dns = no_static_dns 
        self.no_static_ip = no_static_ip 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if portal is not APIHelper.SKIP:
            self.portal = portal 
        if portal_allowed_hostnames is not APIHelper.SKIP:
            self.portal_allowed_hostnames = portal_allowed_hostnames 
        if portal_allowed_subnets is not APIHelper.SKIP:
            self.portal_allowed_subnets = portal_allowed_subnets 
        if portal_api_secret is not APIHelper.SKIP:
            self.portal_api_secret = portal_api_secret 
        if portal_denied_hostnames is not APIHelper.SKIP:
            self.portal_denied_hostnames = portal_denied_hostnames 
        if portal_image is not APIHelper.SKIP:
            self.portal_image = portal_image 
        if portal_sso_url is not APIHelper.SKIP:
            self.portal_sso_url = portal_sso_url 
        if portal_template_url is not APIHelper.SKIP:
            self.portal_template_url = portal_template_url 
        if qos is not APIHelper.SKIP:
            self.qos = qos 
        if radsec is not APIHelper.SKIP:
            self.radsec = radsec 
        if rateset is not APIHelper.SKIP:
            self.rateset = rateset 
        self.roam_mode = roam_mode 
        if schedule is not APIHelper.SKIP:
            self.schedule = schedule 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        self.sle_excluded = sle_excluded 
        self.ssid = ssid 
        if template_id is not APIHelper.SKIP:
            self.template_id = template_id 
        if thumbnail is not APIHelper.SKIP:
            self.thumbnail = thumbnail 
        self.use_eapol_v_1 = use_eapol_v_1 
        self.vlan_enabled = vlan_enabled 
        if vlan_id is not APIHelper.SKIP:
            self.vlan_id = vlan_id 
        if vlan_ids is not APIHelper.SKIP:
            self.vlan_ids = vlan_ids 
        self.vlan_pooling = vlan_pooling 
        if wlan_limit_down is not APIHelper.SKIP:
            self.wlan_limit_down = wlan_limit_down 
        self.wlan_limit_down_enabled = wlan_limit_down_enabled 
        if wlan_limit_up is not APIHelper.SKIP:
            self.wlan_limit_up = wlan_limit_up 
        self.wlan_limit_up_enabled = wlan_limit_up_enabled 
        if wxtag_ids is not APIHelper.SKIP:
            self.wxtag_ids = wxtag_ids 
        if wxtunnel_id is not APIHelper.SKIP:
            self.wxtunnel_id = wxtunnel_id 
        if wxtunnel_remote_id is not APIHelper.SKIP:
            self.wxtunnel_remote_id = wxtunnel_remote_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ssid = dictionary.get("ssid") if dictionary.get("ssid") else None
        acct_immediate_update = dictionary.get("acct_immediate_update") if dictionary.get("acct_immediate_update") else False
        acct_interim_interval = dictionary.get("acct_interim_interval") if dictionary.get("acct_interim_interval") else 0
        acct_servers = None
        if dictionary.get('acct_servers') is not None:
            acct_servers = [AcctServer.from_dictionary(x) for x in dictionary.get('acct_servers')]
        else:
            acct_servers = APIHelper.SKIP
        airwatch = WlanAirwatch.from_dictionary(dictionary.get('airwatch')) if 'airwatch' in dictionary.keys() else APIHelper.SKIP
        allow_ipv_6_ndp = dictionary.get("allow_ipv6_ndp") if dictionary.get("allow_ipv6_ndp") else True
        allow_mdns = dictionary.get("allow_mdns") if dictionary.get("allow_mdns") else False
        allow_ssdp = dictionary.get("allow_ssdp") if dictionary.get("allow_ssdp") else False
        ap_ids = dictionary.get("ap_ids") if "ap_ids" in dictionary.keys() else APIHelper.SKIP
        app_limit = AppLimit.from_dictionary(dictionary.get('app_limit')) if 'app_limit' in dictionary.keys() else APIHelper.SKIP
        app_qos = WlanAppQos.from_dictionary(dictionary.get('app_qos')) if 'app_qos' in dictionary.keys() else APIHelper.SKIP
        apply_to = dictionary.get("apply_to") if "apply_to" in dictionary.keys() else APIHelper.SKIP
        arp_filter = dictionary.get("arp_filter") if dictionary.get("arp_filter") else False
        auth = WlanAuth.from_dictionary(dictionary.get('auth')) if 'auth' in dictionary.keys() else APIHelper.SKIP
        auth_server_selection = dictionary.get("auth_server_selection") if dictionary.get("auth_server_selection") else 'ordered'
        auth_servers = None
        if dictionary.get('auth_servers') is not None:
            auth_servers = [AuthServer.from_dictionary(x) for x in dictionary.get('auth_servers')]
        else:
            auth_servers = APIHelper.SKIP
        auth_servers_nas_id = dictionary.get("auth_servers_nas_id") if "auth_servers_nas_id" in dictionary.keys() else APIHelper.SKIP
        auth_servers_nas_ip = dictionary.get("auth_servers_nas_ip") if "auth_servers_nas_ip" in dictionary.keys() else APIHelper.SKIP
        auth_servers_retries = dictionary.get("auth_servers_retries") if dictionary.get("auth_servers_retries") else 2
        auth_servers_timeout = dictionary.get("auth_servers_timeout") if dictionary.get("auth_servers_timeout") else 5
        band = dictionary.get("band") if dictionary.get("band") else APIHelper.SKIP
        band_steer = dictionary.get("band_steer") if dictionary.get("band_steer") else False
        band_steer_force_band_5 = dictionary.get("band_steer_force_band5") if dictionary.get("band_steer_force_band5") else False
        bands = dictionary.get("bands") if dictionary.get("bands") else APIHelper.SKIP
        block_blacklist_clients = dictionary.get("block_blacklist_clients") if "block_blacklist_clients" in dictionary.keys() else APIHelper.SKIP
        bonjour = WlanBonjour.from_dictionary(dictionary.get('bonjour')) if 'bonjour' in dictionary.keys() else APIHelper.SKIP
        cisco_cwa = WlanCiscoCwa.from_dictionary(dictionary.get('cisco_cwa')) if 'cisco_cwa' in dictionary.keys() else APIHelper.SKIP
        client_limit_down = dictionary.get("client_limit_down") if dictionary.get("client_limit_down") else APIHelper.SKIP
        client_limit_down_enabled = dictionary.get("client_limit_down_enabled") if dictionary.get("client_limit_down_enabled") else False
        client_limit_up = dictionary.get("client_limit_up") if dictionary.get("client_limit_up") else APIHelper.SKIP
        client_limit_up_enabled = dictionary.get("client_limit_up_enabled") if dictionary.get("client_limit_up_enabled") else False
        if 'coa_servers' in dictionary.keys():
            coa_servers = [CoaServer.from_dictionary(x) for x in dictionary.get('coa_servers')] if dictionary.get('coa_servers') else None
        else:
            coa_servers = APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        disable_11_ax = dictionary.get("disable_11ax") if dictionary.get("disable_11ax") else False
        disable_ht_vht_rates = dictionary.get("disable_ht_vht_rates") if dictionary.get("disable_ht_vht_rates") else False
        disable_uapsd = dictionary.get("disable_uapsd") if dictionary.get("disable_uapsd") else False
        disable_v_1_roam_notify = dictionary.get("disable_v1_roam_notify") if dictionary.get("disable_v1_roam_notify") else True
        disable_v_2_roam_notify = dictionary.get("disable_v2_roam_notify") if dictionary.get("disable_v2_roam_notify") else False
        disable_wmm = dictionary.get("disable_wmm") if dictionary.get("disable_wmm") else False
        if 'dns_server_rewrite' in dictionary.keys():
            dns_server_rewrite = DnsServerRewrite.from_dictionary(dictionary.get('dns_server_rewrite')) if dictionary.get('dns_server_rewrite') else None
        else:
            dns_server_rewrite = APIHelper.SKIP
        dtim = dictionary.get("dtim") if dictionary.get("dtim") else 2
        if 'dynamic_psk' in dictionary.keys():
            dynamic_psk = DynamicPsk.from_dictionary(dictionary.get('dynamic_psk')) if dictionary.get('dynamic_psk') else None
        else:
            dynamic_psk = APIHelper.SKIP
        if 'dynamic_vlan' in dictionary.keys():
            dynamic_vlan = DynamicVlan1.from_dictionary(dictionary.get('dynamic_vlan')) if dictionary.get('dynamic_vlan') else None
        else:
            dynamic_vlan = APIHelper.SKIP
        enable_local_keycaching = dictionary.get("enable_local_keycaching") if dictionary.get("enable_local_keycaching") else False
        enable_wireless_bridging = dictionary.get("enable_wireless_bridging") if "enable_wireless_bridging" in dictionary.keys() else APIHelper.SKIP
        enabled = dictionary.get("enabled") if dictionary.get("enabled") else True
        fast_dot_1_x_timers = dictionary.get("fast_dot1x_timers") if dictionary.get("fast_dot1x_timers") else False
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        hide_ssid = dictionary.get("hide_ssid") if dictionary.get("hide_ssid") else False
        hostname_ie = dictionary.get("hostname_ie") if dictionary.get("hostname_ie") else False
        hotspot_20 = WlanHotspot20.from_dictionary(dictionary.get('hotspot20')) if 'hotspot20' in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        interface = dictionary.get("interface") if dictionary.get("interface") else 'all'
        isolation = dictionary.get("isolation") if dictionary.get("isolation") else False
        l_2_isolation = dictionary.get("l2_isolation") if dictionary.get("l2_isolation") else False
        legacy_overds = dictionary.get("legacy_overds") if "legacy_overds" in dictionary.keys() else APIHelper.SKIP
        limit_bcast = dictionary.get("limit_bcast") if dictionary.get("limit_bcast") else False
        limit_probe_response = dictionary.get("limit_probe_response") if "limit_probe_response" in dictionary.keys() else APIHelper.SKIP
        max_idletime = dictionary.get("max_idletime") if dictionary.get("max_idletime") else 1800
        mist_nac = MistNac2.from_dictionary(dictionary.get('mist_nac')) if 'mist_nac' in dictionary.keys() else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        msp_id = dictionary.get("msp_id") if dictionary.get("msp_id") else APIHelper.SKIP
        mxtunnel = dictionary.get("mxtunnel") if dictionary.get("mxtunnel") else APIHelper.SKIP
        mxtunnel_ids = dictionary.get("mxtunnel_ids") if dictionary.get("mxtunnel_ids") else APIHelper.SKIP
        mxtunnel_name = dictionary.get("mxtunnel_name") if dictionary.get("mxtunnel_name") else APIHelper.SKIP
        no_static_dns = dictionary.get("no_static_dns") if dictionary.get("no_static_dns") else False
        no_static_ip = dictionary.get("no_static_ip") if dictionary.get("no_static_ip") else False
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        portal = WlanPortal.from_dictionary(dictionary.get('portal')) if 'portal' in dictionary.keys() else APIHelper.SKIP
        portal_allowed_hostnames = dictionary.get("portal_allowed_hostnames") if dictionary.get("portal_allowed_hostnames") else APIHelper.SKIP
        portal_allowed_subnets = dictionary.get("portal_allowed_subnets") if dictionary.get("portal_allowed_subnets") else APIHelper.SKIP
        portal_api_secret = dictionary.get("portal_api_secret") if "portal_api_secret" in dictionary.keys() else APIHelper.SKIP
        portal_denied_hostnames = dictionary.get("portal_denied_hostnames") if dictionary.get("portal_denied_hostnames") else APIHelper.SKIP
        portal_image = dictionary.get("portal_image") if "portal_image" in dictionary.keys() else APIHelper.SKIP
        portal_sso_url = dictionary.get("portal_sso_url") if "portal_sso_url" in dictionary.keys() else APIHelper.SKIP
        portal_template_url = dictionary.get("portal_template_url") if "portal_template_url" in dictionary.keys() else APIHelper.SKIP
        qos = Qos.from_dictionary(dictionary.get('qos')) if 'qos' in dictionary.keys() else APIHelper.SKIP
        radsec = Radsec.from_dictionary(dictionary.get('radsec')) if 'radsec' in dictionary.keys() else APIHelper.SKIP
        rateset = WlanDatarates.from_dictionary(dictionary.get('rateset')) if 'rateset' in dictionary.keys() else APIHelper.SKIP
        roam_mode = dictionary.get("roam_mode") if dictionary.get("roam_mode") else 'none'
        schedule = Schedule.from_dictionary(dictionary.get('schedule')) if 'schedule' in dictionary.keys() else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        sle_excluded = dictionary.get("sle_excluded") if dictionary.get("sle_excluded") else False
        template_id = dictionary.get("template_id") if "template_id" in dictionary.keys() else APIHelper.SKIP
        thumbnail = dictionary.get("thumbnail") if "thumbnail" in dictionary.keys() else APIHelper.SKIP
        use_eapol_v_1 = dictionary.get("use_eapol_v1") if dictionary.get("use_eapol_v1") else False
        vlan_enabled = dictionary.get("vlan_enabled") if dictionary.get("vlan_enabled") else False
        vlan_id = dictionary.get("vlan_id") if "vlan_id" in dictionary.keys() else APIHelper.SKIP
        vlan_ids = dictionary.get("vlan_ids") if dictionary.get("vlan_ids") else APIHelper.SKIP
        vlan_pooling = dictionary.get("vlan_pooling") if dictionary.get("vlan_pooling") else False
        wlan_limit_down = dictionary.get("wlan_limit_down") if dictionary.get("wlan_limit_down") else APIHelper.SKIP
        wlan_limit_down_enabled = dictionary.get("wlan_limit_down_enabled") if dictionary.get("wlan_limit_down_enabled") else False
        wlan_limit_up = dictionary.get("wlan_limit_up") if dictionary.get("wlan_limit_up") else APIHelper.SKIP
        wlan_limit_up_enabled = dictionary.get("wlan_limit_up_enabled") if dictionary.get("wlan_limit_up_enabled") else False
        wxtag_ids = dictionary.get("wxtag_ids") if "wxtag_ids" in dictionary.keys() else APIHelper.SKIP
        wxtunnel_id = dictionary.get("wxtunnel_id") if "wxtunnel_id" in dictionary.keys() else APIHelper.SKIP
        wxtunnel_remote_id = dictionary.get("wxtunnel_remote_id") if "wxtunnel_remote_id" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(ssid,
                   acct_immediate_update,
                   acct_interim_interval,
                   acct_servers,
                   airwatch,
                   allow_ipv_6_ndp,
                   allow_mdns,
                   allow_ssdp,
                   ap_ids,
                   app_limit,
                   app_qos,
                   apply_to,
                   arp_filter,
                   auth,
                   auth_server_selection,
                   auth_servers,
                   auth_servers_nas_id,
                   auth_servers_nas_ip,
                   auth_servers_retries,
                   auth_servers_timeout,
                   band,
                   band_steer,
                   band_steer_force_band_5,
                   bands,
                   block_blacklist_clients,
                   bonjour,
                   cisco_cwa,
                   client_limit_down,
                   client_limit_down_enabled,
                   client_limit_up,
                   client_limit_up_enabled,
                   coa_servers,
                   created_time,
                   disable_11_ax,
                   disable_ht_vht_rates,
                   disable_uapsd,
                   disable_v_1_roam_notify,
                   disable_v_2_roam_notify,
                   disable_wmm,
                   dns_server_rewrite,
                   dtim,
                   dynamic_psk,
                   dynamic_vlan,
                   enable_local_keycaching,
                   enable_wireless_bridging,
                   enabled,
                   fast_dot_1_x_timers,
                   for_site,
                   hide_ssid,
                   hostname_ie,
                   hotspot_20,
                   id,
                   interface,
                   isolation,
                   l_2_isolation,
                   legacy_overds,
                   limit_bcast,
                   limit_probe_response,
                   max_idletime,
                   mist_nac,
                   modified_time,
                   msp_id,
                   mxtunnel,
                   mxtunnel_ids,
                   mxtunnel_name,
                   no_static_dns,
                   no_static_ip,
                   org_id,
                   portal,
                   portal_allowed_hostnames,
                   portal_allowed_subnets,
                   portal_api_secret,
                   portal_denied_hostnames,
                   portal_image,
                   portal_sso_url,
                   portal_template_url,
                   qos,
                   radsec,
                   rateset,
                   roam_mode,
                   schedule,
                   site_id,
                   sle_excluded,
                   template_id,
                   thumbnail,
                   use_eapol_v_1,
                   vlan_enabled,
                   vlan_id,
                   vlan_ids,
                   vlan_pooling,
                   wlan_limit_down,
                   wlan_limit_down_enabled,
                   wlan_limit_up,
                   wlan_limit_up_enabled,
                   wxtag_ids,
                   wxtunnel_id,
                   wxtunnel_remote_id)
