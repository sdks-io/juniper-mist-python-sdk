# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.models.latlng_2 import Latlng2


class ApiV1InstallerOrgsSitesResponse(object):

    """Implementation of the 'Api V1 Installer Orgs Sites Response' model.

    TODO: type model description here.

    Attributes:
        address (string): TODO: type description here.
        country_code (string): TODO: type description here.
        id (uuid|string): TODO: type description here.
        latlng (Latlng2): TODO: type description here.
        name (string): TODO: type description here.
        timezone (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "address": 'address',
        "country_code": 'country_code',
        "id": 'id',
        "latlng": 'latlng',
        "name": 'name',
        "timezone": 'timezone'
    }

    def __init__(self,
                 address=None,
                 country_code=None,
                 id=None,
                 latlng=None,
                 name=None,
                 timezone=None):
        """Constructor for the ApiV1InstallerOrgsSitesResponse class"""

        # Initialize members of the class
        self.address = address 
        self.country_code = country_code 
        self.id = id 
        self.latlng = latlng 
        self.name = name 
        self.timezone = timezone 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        address = dictionary.get("address") if dictionary.get("address") else None
        country_code = dictionary.get("country_code") if dictionary.get("country_code") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        latlng = Latlng2.from_dictionary(dictionary.get('latlng')) if dictionary.get('latlng') else None
        name = dictionary.get("name") if dictionary.get("name") else None
        timezone = dictionary.get("timezone") if dictionary.get("timezone") else None
        # Return an object of this model
        return cls(address,
                   country_code,
                   id,
                   latlng,
                   name,
                   timezone)
