# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Vbeacon(object):

    """Implementation of the 'vbeacon' model.

    vBeacon

    Attributes:
        created_time (float): TODO: type description here.
        for_site (bool): TODO: type description here.
        id (uuid|string): TODO: type description here.
        major (int): bluetooth tag major
        map_id (uuid|string): map where the device belongs to
        message (string): a message that can be displayed when the sdkclient
            gets near the vbeacon
        minor (int): bluetooth tag minor
        modified_time (float): TODO: type description here.
        name (string): name / label of the device
        org_id (uuid|string): TODO: type description here.
        power (int): required if `power_mode`==`custom`, -30 - 100, in dBm.
            For default power_mode, power = 4 dBm.
        power_mode (PowerModeEnum): default / custom
        site_id (uuid|string): TODO: type description here.
        url (string): URL to show, optional
        uuid (uuid|string): bluetooth tag UUID
        wayfinding_nodename (string): the name to be used in wayfinding_path
            or wayfinding_grid blob
        x (float): x in pixel
        y (float): y in pixel

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "created_time": 'created_time',
        "for_site": 'for_site',
        "id": 'id',
        "major": 'major',
        "map_id": 'map_id',
        "message": 'message',
        "minor": 'minor',
        "modified_time": 'modified_time',
        "name": 'name',
        "org_id": 'org_id',
        "power": 'power',
        "power_mode": 'power_mode',
        "site_id": 'site_id',
        "url": 'url',
        "uuid": 'uuid',
        "wayfinding_nodename": 'wayfinding_nodename',
        "x": 'x',
        "y": 'y'
    }

    _optionals = [
        'created_time',
        'for_site',
        'id',
        'major',
        'map_id',
        'message',
        'minor',
        'modified_time',
        'name',
        'org_id',
        'power',
        'power_mode',
        'site_id',
        'url',
        'uuid',
        'wayfinding_nodename',
        'x',
        'y',
    ]

    def __init__(self,
                 created_time=APIHelper.SKIP,
                 for_site=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 major=APIHelper.SKIP,
                 map_id=APIHelper.SKIP,
                 message=APIHelper.SKIP,
                 minor=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 power=4,
                 power_mode='default',
                 site_id=APIHelper.SKIP,
                 url=APIHelper.SKIP,
                 uuid=APIHelper.SKIP,
                 wayfinding_nodename=APIHelper.SKIP,
                 x=APIHelper.SKIP,
                 y=APIHelper.SKIP):
        """Constructor for the Vbeacon class"""

        # Initialize members of the class
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        if id is not APIHelper.SKIP:
            self.id = id 
        if major is not APIHelper.SKIP:
            self.major = major 
        if map_id is not APIHelper.SKIP:
            self.map_id = map_id 
        if message is not APIHelper.SKIP:
            self.message = message 
        if minor is not APIHelper.SKIP:
            self.minor = minor 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        if name is not APIHelper.SKIP:
            self.name = name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        self.power = power 
        self.power_mode = power_mode 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if url is not APIHelper.SKIP:
            self.url = url 
        if uuid is not APIHelper.SKIP:
            self.uuid = uuid 
        if wayfinding_nodename is not APIHelper.SKIP:
            self.wayfinding_nodename = wayfinding_nodename 
        if x is not APIHelper.SKIP:
            self.x = x 
        if y is not APIHelper.SKIP:
            self.y = y 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        major = dictionary.get("major") if dictionary.get("major") else APIHelper.SKIP
        map_id = dictionary.get("map_id") if dictionary.get("map_id") else APIHelper.SKIP
        message = dictionary.get("message") if dictionary.get("message") else APIHelper.SKIP
        minor = dictionary.get("minor") if dictionary.get("minor") else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        power = dictionary.get("power") if dictionary.get("power") else 4
        power_mode = dictionary.get("power_mode") if dictionary.get("power_mode") else 'default'
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        url = dictionary.get("url") if dictionary.get("url") else APIHelper.SKIP
        uuid = dictionary.get("uuid") if dictionary.get("uuid") else APIHelper.SKIP
        wayfinding_nodename = dictionary.get("wayfinding_nodename") if dictionary.get("wayfinding_nodename") else APIHelper.SKIP
        x = dictionary.get("x") if dictionary.get("x") else APIHelper.SKIP
        y = dictionary.get("y") if dictionary.get("y") else APIHelper.SKIP
        # Return an object of this model
        return cls(created_time,
                   for_site,
                   id,
                   major,
                   map_id,
                   message,
                   minor,
                   modified_time,
                   name,
                   org_id,
                   power,
                   power_mode,
                   site_id,
                   url,
                   uuid,
                   wayfinding_nodename,
                   x,
                   y)
