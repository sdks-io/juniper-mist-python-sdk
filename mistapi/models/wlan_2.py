# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Wlan2(object):

    """Implementation of the 'Wlan2' model.

    TODO: type model description here.

    Attributes:
        auth (string): TODO: type description here.
        bands (list of string): TODO: type description here.
        id (uuid|string): TODO: type description here.
        ssid (string): TODO: type description here.
        vlan_ids (list of string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "auth": 'auth',
        "id": 'id',
        "ssid": 'ssid',
        "bands": 'bands',
        "vlan_ids": 'vlan_ids'
    }

    _optionals = [
        'bands',
        'vlan_ids',
    ]

    def __init__(self,
                 auth=None,
                 id=None,
                 ssid=None,
                 bands=APIHelper.SKIP,
                 vlan_ids=APIHelper.SKIP):
        """Constructor for the Wlan2 class"""

        # Initialize members of the class
        self.auth = auth 
        if bands is not APIHelper.SKIP:
            self.bands = bands 
        self.id = id 
        self.ssid = ssid 
        if vlan_ids is not APIHelper.SKIP:
            self.vlan_ids = vlan_ids 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        auth = dictionary.get("auth") if dictionary.get("auth") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        ssid = dictionary.get("ssid") if dictionary.get("ssid") else None
        bands = dictionary.get("bands") if dictionary.get("bands") else APIHelper.SKIP
        vlan_ids = dictionary.get("vlan_ids") if dictionary.get("vlan_ids") else APIHelper.SKIP
        # Return an object of this model
        return cls(auth,
                   id,
                   ssid,
                   bands,
                   vlan_ids)
