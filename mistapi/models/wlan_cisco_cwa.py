# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class WlanCiscoCwa(object):

    """Implementation of the 'wlan_cisco_cwa' model.

    Cisco CWA (central web authentication) required RADIUS with COA in order
    to work. See CWA:
    https://www.cisco.com/c/en/us/support/docs/security/identity-services-engin
    e/115732-central-web-auth-00.html

    Attributes:
        allowed_hostnames (list of string): list of hostnames without
            http(s):// (matched by substring)
        allowed_subnets (list of string): list of CIDRs
        blocked_subnets (list of string): list of blocked CIDRs
        enabled (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "allowed_hostnames": 'allowed_hostnames',
        "allowed_subnets": 'allowed_subnets',
        "blocked_subnets": 'blocked_subnets',
        "enabled": 'enabled'
    }

    _optionals = [
        'allowed_hostnames',
        'allowed_subnets',
        'blocked_subnets',
        'enabled',
    ]

    def __init__(self,
                 allowed_hostnames=APIHelper.SKIP,
                 allowed_subnets=APIHelper.SKIP,
                 blocked_subnets=APIHelper.SKIP,
                 enabled=False):
        """Constructor for the WlanCiscoCwa class"""

        # Initialize members of the class
        if allowed_hostnames is not APIHelper.SKIP:
            self.allowed_hostnames = allowed_hostnames 
        if allowed_subnets is not APIHelper.SKIP:
            self.allowed_subnets = allowed_subnets 
        if blocked_subnets is not APIHelper.SKIP:
            self.blocked_subnets = blocked_subnets 
        self.enabled = enabled 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        allowed_hostnames = dictionary.get("allowed_hostnames") if dictionary.get("allowed_hostnames") else APIHelper.SKIP
        allowed_subnets = dictionary.get("allowed_subnets") if dictionary.get("allowed_subnets") else APIHelper.SKIP
        blocked_subnets = dictionary.get("blocked_subnets") if dictionary.get("blocked_subnets") else APIHelper.SKIP
        enabled = dictionary.get("enabled") if dictionary.get("enabled") else False
        # Return an object of this model
        return cls(allowed_hostnames,
                   allowed_subnets,
                   blocked_subnets,
                   enabled)
