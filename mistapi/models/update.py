# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Update(object):

    """Implementation of the 'Update' model.

    TODO: type model description here.

    Attributes:
        client_type (string): TODO: type description here.
        completed (float): TODO: type description here.
        int (float): TODO: type description here.
        level (float): TODO: type description here.
        ple (float): TODO: type description here.
        timestamp (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "client_type": 'client_type',
        "completed": 'completed',
        "int": 'int',
        "level": 'level',
        "ple": 'ple',
        "timestamp": 'timestamp'
    }

    def __init__(self,
                 client_type=None,
                 completed=None,
                 int=None,
                 level=None,
                 ple=None,
                 timestamp=None):
        """Constructor for the Update class"""

        # Initialize members of the class
        self.client_type = client_type 
        self.completed = completed 
        self.int = int 
        self.level = level 
        self.ple = ple 
        self.timestamp = timestamp 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        client_type = dictionary.get("client_type") if dictionary.get("client_type") else None
        completed = dictionary.get("completed") if dictionary.get("completed") else None
        int = dictionary.get("int") if dictionary.get("int") else None
        level = dictionary.get("level") if dictionary.get("level") else None
        ple = dictionary.get("ple") if dictionary.get("ple") else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        # Return an object of this model
        return cls(client_type,
                   completed,
                   int,
                   level,
                   ple,
                   timestamp)
