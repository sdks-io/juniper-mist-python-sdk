# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.prefix_list import PrefixList


class Access(object):

    """Implementation of the 'Access' model.

    TODO: type model description here.

    Attributes:
        group_name (string): TODO: type description here.
        prefix_list (list of PrefixList): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "group_name": 'group_name',
        "prefix_list": 'prefix_list'
    }

    _optionals = [
        'group_name',
        'prefix_list',
    ]

    def __init__(self,
                 group_name=APIHelper.SKIP,
                 prefix_list=APIHelper.SKIP):
        """Constructor for the Access class"""

        # Initialize members of the class
        if group_name is not APIHelper.SKIP:
            self.group_name = group_name 
        if prefix_list is not APIHelper.SKIP:
            self.prefix_list = prefix_list 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        group_name = dictionary.get("group_name") if dictionary.get("group_name") else APIHelper.SKIP
        prefix_list = None
        if dictionary.get('prefix_list') is not None:
            prefix_list = [PrefixList.from_dictionary(x) for x in dictionary.get('prefix_list')]
        else:
            prefix_list = APIHelper.SKIP
        # Return an object of this model
        return cls(group_name,
                   prefix_list)
