# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.event_7 import Event7


class WebhookDiscoveredRawRssi(object):

    """Implementation of the 'webhook_discovered_raw_rssi' model.

    TODO: type model description here.

    Attributes:
        events (list of Event7): TODO: type description here.
        topic (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "topic": 'topic',
        "events": 'events'
    }

    _optionals = [
        'events',
    ]

    def __init__(self,
                 topic=None,
                 events=APIHelper.SKIP):
        """Constructor for the WebhookDiscoveredRawRssi class"""

        # Initialize members of the class
        if events is not APIHelper.SKIP:
            self.events = events 
        self.topic = topic 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        topic = dictionary.get("topic") if dictionary.get("topic") else None
        events = None
        if dictionary.get('events') is not None:
            events = [Event7.from_dictionary(x) for x in dictionary.get('events')]
        else:
            events = APIHelper.SKIP
        # Return an object of this model
        return cls(topic,
                   events)
