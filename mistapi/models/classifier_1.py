# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.impact_1 import Impact1
from mistapi.models.samples import Samples


class Classifier1(object):

    """Implementation of the 'Classifier1' model.

    TODO: type model description here.

    Attributes:
        impact (Impact1): TODO: type description here.
        interval (float): TODO: type description here.
        name (string): TODO: type description here.
        samples (Samples): TODO: type description here.
        x_label (string): TODO: type description here.
        y_label (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "interval": 'interval',
        "name": 'name',
        "x_label": 'x_label',
        "y_label": 'y_label',
        "impact": 'impact',
        "samples": 'samples'
    }

    _optionals = [
        'impact',
        'samples',
    ]

    def __init__(self,
                 interval=None,
                 name=None,
                 x_label=None,
                 y_label=None,
                 impact=APIHelper.SKIP,
                 samples=APIHelper.SKIP):
        """Constructor for the Classifier1 class"""

        # Initialize members of the class
        if impact is not APIHelper.SKIP:
            self.impact = impact 
        self.interval = interval 
        self.name = name 
        if samples is not APIHelper.SKIP:
            self.samples = samples 
        self.x_label = x_label 
        self.y_label = y_label 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        interval = dictionary.get("interval") if dictionary.get("interval") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        x_label = dictionary.get("x_label") if dictionary.get("x_label") else None
        y_label = dictionary.get("y_label") if dictionary.get("y_label") else None
        impact = Impact1.from_dictionary(dictionary.get('impact')) if 'impact' in dictionary.keys() else APIHelper.SKIP
        samples = Samples.from_dictionary(dictionary.get('samples')) if 'samples' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(interval,
                   name,
                   x_label,
                   y_label,
                   impact,
                   samples)
