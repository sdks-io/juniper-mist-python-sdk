# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class JunosDhcpSnooping(object):

    """Implementation of the 'junos_dhcp_snooping' model.

    TODO: type model description here.

    Attributes:
        all_networks (bool): TODO: type description here.
        enable_arp_spoof_check (bool): Enable for dynamic ARP inspection
            check
        enable_ip_source_guard (bool): Enable for check for forging source IP
            address
        enabled (bool): TODO: type description here.
        networks (list of string): if `all_networks`==`false`, list of network
            with DHCP snooping enabled

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "all_networks": 'all_networks',
        "enable_arp_spoof_check": 'enable_arp_spoof_check',
        "enable_ip_source_guard": 'enable_ip_source_guard',
        "enabled": 'enabled',
        "networks": 'networks'
    }

    _optionals = [
        'all_networks',
        'enable_arp_spoof_check',
        'enable_ip_source_guard',
        'enabled',
        'networks',
    ]

    def __init__(self,
                 all_networks=APIHelper.SKIP,
                 enable_arp_spoof_check=APIHelper.SKIP,
                 enable_ip_source_guard=APIHelper.SKIP,
                 enabled=APIHelper.SKIP,
                 networks=APIHelper.SKIP):
        """Constructor for the JunosDhcpSnooping class"""

        # Initialize members of the class
        if all_networks is not APIHelper.SKIP:
            self.all_networks = all_networks 
        if enable_arp_spoof_check is not APIHelper.SKIP:
            self.enable_arp_spoof_check = enable_arp_spoof_check 
        if enable_ip_source_guard is not APIHelper.SKIP:
            self.enable_ip_source_guard = enable_ip_source_guard 
        if enabled is not APIHelper.SKIP:
            self.enabled = enabled 
        if networks is not APIHelper.SKIP:
            self.networks = networks 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        all_networks = dictionary.get("all_networks") if "all_networks" in dictionary.keys() else APIHelper.SKIP
        enable_arp_spoof_check = dictionary.get("enable_arp_spoof_check") if "enable_arp_spoof_check" in dictionary.keys() else APIHelper.SKIP
        enable_ip_source_guard = dictionary.get("enable_ip_source_guard") if "enable_ip_source_guard" in dictionary.keys() else APIHelper.SKIP
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else APIHelper.SKIP
        networks = dictionary.get("networks") if dictionary.get("networks") else APIHelper.SKIP
        # Return an object of this model
        return cls(all_networks,
                   enable_arp_spoof_check,
                   enable_ip_source_guard,
                   enabled,
                   networks)
