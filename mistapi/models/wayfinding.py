# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.micello import Micello


class Wayfinding(object):

    """Implementation of the 'Wayfinding' model.

    properties related to wayfinding

    Attributes:
        micello (Micello): TODO: type description here.
        snap_to_path (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "micello": 'micello',
        "snap_to_path": 'snap_to_path'
    }

    _optionals = [
        'micello',
        'snap_to_path',
    ]

    def __init__(self,
                 micello=APIHelper.SKIP,
                 snap_to_path=APIHelper.SKIP):
        """Constructor for the Wayfinding class"""

        # Initialize members of the class
        if micello is not APIHelper.SKIP:
            self.micello = micello 
        if snap_to_path is not APIHelper.SKIP:
            self.snap_to_path = snap_to_path 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        micello = Micello.from_dictionary(dictionary.get('micello')) if 'micello' in dictionary.keys() else APIHelper.SKIP
        snap_to_path = dictionary.get("snap_to_path") if "snap_to_path" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(micello,
                   snap_to_path)
