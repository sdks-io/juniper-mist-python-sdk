# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Result5(object):

    """Implementation of the 'Result5' model.

    TODO: type model description here.

    Attributes:
        msp_id (uuid|string): TODO: type description here.
        name (string): org name
        num_aps (int): TODO: type description here.
        num_gateways (int): TODO: type description here.
        num_sites (int): TODO: type description here.
        num_switches (int): TODO: type description here.
        num_unassigned_aps (int): TODO: type description here.
        org_id (uuid|string): org id
        sub_ana_entitled (int): TODO: type description here.
        sub_ana_required (int): TODO: type description here.
        sub_ast_entitled (int): TODO: type description here.
        sub_ast_required (int): TODO: type description here.
        sub_eng_entitled (int): TODO: type description here.
        sub_eng_required (int): TODO: type description here.
        sub_ex_12_required (int): TODO: type description here.
        sub_insufficient (bool): if this org has sufficient subscription
        sub_man_entitled (int): TODO: type description here.
        sub_man_required (int): TODO: type description here.
        sub_me_entitled (int): TODO: type description here.
        sub_vna_entitled (int): TODO: type description here.
        sub_vna_required (int): TODO: type description here.
        timestamp (float): TODO: type description here.
        trial_enabled (bool): if this org is under trial period
        usage_types (list of string): a list of types that enabled by usage

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "msp_id": 'msp_id',
        "name": 'name',
        "num_aps": 'num_aps',
        "num_gateways": 'num_gateways',
        "num_sites": 'num_sites',
        "num_switches": 'num_switches',
        "num_unassigned_aps": 'num_unassigned_aps',
        "org_id": 'org_id',
        "sub_ana_entitled": 'sub_ana_entitled',
        "sub_ana_required": 'sub_ana_required',
        "sub_ast_entitled": 'sub_ast_entitled',
        "sub_ast_required": 'sub_ast_required',
        "sub_eng_entitled": 'sub_eng_entitled',
        "sub_eng_required": 'sub_eng_required',
        "sub_ex_12_required": 'sub_ex12_required',
        "sub_insufficient": 'sub_insufficient',
        "sub_man_entitled": 'sub_man_entitled',
        "sub_man_required": 'sub_man_required',
        "sub_me_entitled": 'sub_me_entitled',
        "sub_vna_entitled": 'sub_vna_entitled',
        "sub_vna_required": 'sub_vna_required',
        "timestamp": 'timestamp',
        "trial_enabled": 'trial_enabled',
        "usage_types": 'usage_types'
    }

    _optionals = [
        'msp_id',
        'name',
        'num_aps',
        'num_gateways',
        'num_sites',
        'num_switches',
        'num_unassigned_aps',
        'org_id',
        'sub_ana_entitled',
        'sub_ana_required',
        'sub_ast_entitled',
        'sub_ast_required',
        'sub_eng_entitled',
        'sub_eng_required',
        'sub_ex_12_required',
        'sub_insufficient',
        'sub_man_entitled',
        'sub_man_required',
        'sub_me_entitled',
        'sub_vna_entitled',
        'sub_vna_required',
        'timestamp',
        'trial_enabled',
        'usage_types',
    ]

    def __init__(self,
                 msp_id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 num_aps=APIHelper.SKIP,
                 num_gateways=APIHelper.SKIP,
                 num_sites=APIHelper.SKIP,
                 num_switches=APIHelper.SKIP,
                 num_unassigned_aps=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 sub_ana_entitled=APIHelper.SKIP,
                 sub_ana_required=APIHelper.SKIP,
                 sub_ast_entitled=APIHelper.SKIP,
                 sub_ast_required=APIHelper.SKIP,
                 sub_eng_entitled=APIHelper.SKIP,
                 sub_eng_required=APIHelper.SKIP,
                 sub_ex_12_required=APIHelper.SKIP,
                 sub_insufficient=APIHelper.SKIP,
                 sub_man_entitled=APIHelper.SKIP,
                 sub_man_required=APIHelper.SKIP,
                 sub_me_entitled=APIHelper.SKIP,
                 sub_vna_entitled=APIHelper.SKIP,
                 sub_vna_required=APIHelper.SKIP,
                 timestamp=APIHelper.SKIP,
                 trial_enabled=APIHelper.SKIP,
                 usage_types=APIHelper.SKIP):
        """Constructor for the Result5 class"""

        # Initialize members of the class
        if msp_id is not APIHelper.SKIP:
            self.msp_id = msp_id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if num_aps is not APIHelper.SKIP:
            self.num_aps = num_aps 
        if num_gateways is not APIHelper.SKIP:
            self.num_gateways = num_gateways 
        if num_sites is not APIHelper.SKIP:
            self.num_sites = num_sites 
        if num_switches is not APIHelper.SKIP:
            self.num_switches = num_switches 
        if num_unassigned_aps is not APIHelper.SKIP:
            self.num_unassigned_aps = num_unassigned_aps 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if sub_ana_entitled is not APIHelper.SKIP:
            self.sub_ana_entitled = sub_ana_entitled 
        if sub_ana_required is not APIHelper.SKIP:
            self.sub_ana_required = sub_ana_required 
        if sub_ast_entitled is not APIHelper.SKIP:
            self.sub_ast_entitled = sub_ast_entitled 
        if sub_ast_required is not APIHelper.SKIP:
            self.sub_ast_required = sub_ast_required 
        if sub_eng_entitled is not APIHelper.SKIP:
            self.sub_eng_entitled = sub_eng_entitled 
        if sub_eng_required is not APIHelper.SKIP:
            self.sub_eng_required = sub_eng_required 
        if sub_ex_12_required is not APIHelper.SKIP:
            self.sub_ex_12_required = sub_ex_12_required 
        if sub_insufficient is not APIHelper.SKIP:
            self.sub_insufficient = sub_insufficient 
        if sub_man_entitled is not APIHelper.SKIP:
            self.sub_man_entitled = sub_man_entitled 
        if sub_man_required is not APIHelper.SKIP:
            self.sub_man_required = sub_man_required 
        if sub_me_entitled is not APIHelper.SKIP:
            self.sub_me_entitled = sub_me_entitled 
        if sub_vna_entitled is not APIHelper.SKIP:
            self.sub_vna_entitled = sub_vna_entitled 
        if sub_vna_required is not APIHelper.SKIP:
            self.sub_vna_required = sub_vna_required 
        if timestamp is not APIHelper.SKIP:
            self.timestamp = timestamp 
        if trial_enabled is not APIHelper.SKIP:
            self.trial_enabled = trial_enabled 
        if usage_types is not APIHelper.SKIP:
            self.usage_types = usage_types 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        msp_id = dictionary.get("msp_id") if dictionary.get("msp_id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        num_aps = dictionary.get("num_aps") if dictionary.get("num_aps") else APIHelper.SKIP
        num_gateways = dictionary.get("num_gateways") if dictionary.get("num_gateways") else APIHelper.SKIP
        num_sites = dictionary.get("num_sites") if dictionary.get("num_sites") else APIHelper.SKIP
        num_switches = dictionary.get("num_switches") if dictionary.get("num_switches") else APIHelper.SKIP
        num_unassigned_aps = dictionary.get("num_unassigned_aps") if dictionary.get("num_unassigned_aps") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        sub_ana_entitled = dictionary.get("sub_ana_entitled") if dictionary.get("sub_ana_entitled") else APIHelper.SKIP
        sub_ana_required = dictionary.get("sub_ana_required") if dictionary.get("sub_ana_required") else APIHelper.SKIP
        sub_ast_entitled = dictionary.get("sub_ast_entitled") if dictionary.get("sub_ast_entitled") else APIHelper.SKIP
        sub_ast_required = dictionary.get("sub_ast_required") if dictionary.get("sub_ast_required") else APIHelper.SKIP
        sub_eng_entitled = dictionary.get("sub_eng_entitled") if dictionary.get("sub_eng_entitled") else APIHelper.SKIP
        sub_eng_required = dictionary.get("sub_eng_required") if dictionary.get("sub_eng_required") else APIHelper.SKIP
        sub_ex_12_required = dictionary.get("sub_ex12_required") if dictionary.get("sub_ex12_required") else APIHelper.SKIP
        sub_insufficient = dictionary.get("sub_insufficient") if "sub_insufficient" in dictionary.keys() else APIHelper.SKIP
        sub_man_entitled = dictionary.get("sub_man_entitled") if dictionary.get("sub_man_entitled") else APIHelper.SKIP
        sub_man_required = dictionary.get("sub_man_required") if dictionary.get("sub_man_required") else APIHelper.SKIP
        sub_me_entitled = dictionary.get("sub_me_entitled") if dictionary.get("sub_me_entitled") else APIHelper.SKIP
        sub_vna_entitled = dictionary.get("sub_vna_entitled") if dictionary.get("sub_vna_entitled") else APIHelper.SKIP
        sub_vna_required = dictionary.get("sub_vna_required") if dictionary.get("sub_vna_required") else APIHelper.SKIP
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else APIHelper.SKIP
        trial_enabled = dictionary.get("trial_enabled") if "trial_enabled" in dictionary.keys() else APIHelper.SKIP
        usage_types = dictionary.get("usage_types") if dictionary.get("usage_types") else APIHelper.SKIP
        # Return an object of this model
        return cls(msp_id,
                   name,
                   num_aps,
                   num_gateways,
                   num_sites,
                   num_switches,
                   num_unassigned_aps,
                   org_id,
                   sub_ana_entitled,
                   sub_ana_required,
                   sub_ast_entitled,
                   sub_ast_required,
                   sub_eng_entitled,
                   sub_eng_required,
                   sub_ex_12_required,
                   sub_insufficient,
                   sub_man_entitled,
                   sub_man_required,
                   sub_me_entitled,
                   sub_vna_entitled,
                   sub_vna_required,
                   timestamp,
                   trial_enabled,
                   usage_types)
