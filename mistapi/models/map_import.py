# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.aps_2 import Aps2
from mistapi.models.floorplan import Floorplan
from mistapi.models.summary import Summary


class MapImport(object):

    """Implementation of the 'MapImport' model.

    TODO: type model description here.

    Attributes:
        aps (list of Aps2): TODO: type description here.
        floorplans (list of Floorplan): TODO: type description here.
        for_site (bool): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        summary (Summary): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "aps": 'aps',
        "floorplans": 'floorplans',
        "site_id": 'site_id',
        "summary": 'summary',
        "for_site": 'for_site'
    }

    _optionals = [
        'for_site',
    ]

    def __init__(self,
                 aps=None,
                 floorplans=None,
                 site_id=None,
                 summary=None,
                 for_site=APIHelper.SKIP):
        """Constructor for the MapImport class"""

        # Initialize members of the class
        self.aps = aps 
        self.floorplans = floorplans 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        self.site_id = site_id 
        self.summary = summary 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        aps = None
        if dictionary.get('aps') is not None:
            aps = [Aps2.from_dictionary(x) for x in dictionary.get('aps')]
        floorplans = None
        if dictionary.get('floorplans') is not None:
            floorplans = [Floorplan.from_dictionary(x) for x in dictionary.get('floorplans')]
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else None
        summary = Summary.from_dictionary(dictionary.get('summary')) if dictionary.get('summary') else None
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(aps,
                   floorplans,
                   site_id,
                   summary,
                   for_site)
