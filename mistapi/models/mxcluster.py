# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.mxcluster_nac import MxclusterNac
from mistapi.models.mxcluster_radsec import MxclusterRadsec
from mistapi.models.mxedge_das import MxedgeDas
from mistapi.models.proxy import Proxy
from mistapi.models.radsec_tls import RadsecTls
from mistapi.models.site_tunterm_monitoring import SiteTuntermMonitoring
from mistapi.models.tunterm_dhcpd_config import TuntermDhcpdConfig
from mistapi.models.tunterm_extra_routes import TuntermExtraRoutes


class Mxcluster(object):

    """Implementation of the 'mxcluster' model.

    mxCluster

    Attributes:
        created_time (float): TODO: type description here.
        for_site (bool): TODO: type description here.
        id (uuid|string): TODO: type description here.
        mist_das (MxedgeDas): configure cloud-assisted dynamic authorization
            service on this cluster of mist edges
        mist_nac (MxclusterNac): TODO: type description here.
        modified_time (float): TODO: type description here.
        name (string): TODO: type description here.
        org_id (uuid|string): TODO: type description here.
        proxy (Proxy): Proxy Configuration to talk to Mist
        radsec (MxclusterRadsec): MxEdge Radsec Configuration
        radsec_tls (RadsecTls): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        tunterm_ap_subnets (list of string): list of subnets where we allow AP
            to establish Mist Tunnels from
        tunterm_dhcpd_config (TuntermDhcpdConfig): DHCP server/relay
            configuration of Mist Tunneled VLANs. The property key is the VLAN
            ID
        tunterm_extra_routes (dict): extra routes for Mist Tunneled VLANs. The
            property key is a CIDR
        tunterm_hosts (list of string): hostnames or IPs where a Mist Tunnel
            will use as the Peer (i.e. they are reachable from AP)
        tunterm_hosts_order (list of int): list of index of tunterm_hosts
        tunterm_hosts_selection (TuntermHostsSelectionEnum): Ordering of
            tunterm_hosts for mxedge within the same mxcluster.  * When
            `shuffle`, the ordering of tunterm_hosts is randomized by the
            deviceâ€™s MAC.  * When `shuffle-by-site`, we shuffle by
            site_id+tunnel_id (so when client connects to a specific Tunnel,
            it will go to the same (order of) mxedge, and we load-balancing
            between tunnels).  * When `ordered`, the order is decided by
            tunterm_hosts_order
        tunterm_monitoring (list of SiteTuntermMonitoring): TODO: type
            description here.
        tunterm_monitoring_disabled (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "created_time": 'created_time',
        "for_site": 'for_site',
        "id": 'id',
        "mist_das": 'mist_das',
        "mist_nac": 'mist_nac',
        "modified_time": 'modified_time',
        "name": 'name',
        "org_id": 'org_id',
        "proxy": 'proxy',
        "radsec": 'radsec',
        "radsec_tls": 'radsec_tls',
        "site_id": 'site_id',
        "tunterm_ap_subnets": 'tunterm_ap_subnets',
        "tunterm_dhcpd_config": 'tunterm_dhcpd_config',
        "tunterm_extra_routes": 'tunterm_extra_routes',
        "tunterm_hosts": 'tunterm_hosts',
        "tunterm_hosts_order": 'tunterm_hosts_order',
        "tunterm_hosts_selection": 'tunterm_hosts_selection',
        "tunterm_monitoring": 'tunterm_monitoring',
        "tunterm_monitoring_disabled": 'tunterm_monitoring_disabled'
    }

    _optionals = [
        'created_time',
        'for_site',
        'id',
        'mist_das',
        'mist_nac',
        'modified_time',
        'name',
        'org_id',
        'proxy',
        'radsec',
        'radsec_tls',
        'site_id',
        'tunterm_ap_subnets',
        'tunterm_dhcpd_config',
        'tunterm_extra_routes',
        'tunterm_hosts',
        'tunterm_hosts_order',
        'tunterm_hosts_selection',
        'tunterm_monitoring',
        'tunterm_monitoring_disabled',
    ]

    def __init__(self,
                 created_time=APIHelper.SKIP,
                 for_site=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 mist_das=APIHelper.SKIP,
                 mist_nac=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 proxy=APIHelper.SKIP,
                 radsec=APIHelper.SKIP,
                 radsec_tls=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 tunterm_ap_subnets=APIHelper.SKIP,
                 tunterm_dhcpd_config=APIHelper.SKIP,
                 tunterm_extra_routes=APIHelper.SKIP,
                 tunterm_hosts=APIHelper.SKIP,
                 tunterm_hosts_order=APIHelper.SKIP,
                 tunterm_hosts_selection='shuffle',
                 tunterm_monitoring=APIHelper.SKIP,
                 tunterm_monitoring_disabled=APIHelper.SKIP):
        """Constructor for the Mxcluster class"""

        # Initialize members of the class
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        if id is not APIHelper.SKIP:
            self.id = id 
        if mist_das is not APIHelper.SKIP:
            self.mist_das = mist_das 
        if mist_nac is not APIHelper.SKIP:
            self.mist_nac = mist_nac 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        if name is not APIHelper.SKIP:
            self.name = name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if proxy is not APIHelper.SKIP:
            self.proxy = proxy 
        if radsec is not APIHelper.SKIP:
            self.radsec = radsec 
        if radsec_tls is not APIHelper.SKIP:
            self.radsec_tls = radsec_tls 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if tunterm_ap_subnets is not APIHelper.SKIP:
            self.tunterm_ap_subnets = tunterm_ap_subnets 
        if tunterm_dhcpd_config is not APIHelper.SKIP:
            self.tunterm_dhcpd_config = tunterm_dhcpd_config 
        if tunterm_extra_routes is not APIHelper.SKIP:
            self.tunterm_extra_routes = tunterm_extra_routes 
        if tunterm_hosts is not APIHelper.SKIP:
            self.tunterm_hosts = tunterm_hosts 
        if tunterm_hosts_order is not APIHelper.SKIP:
            self.tunterm_hosts_order = tunterm_hosts_order 
        self.tunterm_hosts_selection = tunterm_hosts_selection 
        if tunterm_monitoring is not APIHelper.SKIP:
            self.tunterm_monitoring = tunterm_monitoring 
        if tunterm_monitoring_disabled is not APIHelper.SKIP:
            self.tunterm_monitoring_disabled = tunterm_monitoring_disabled 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        mist_das = MxedgeDas.from_dictionary(dictionary.get('mist_das')) if 'mist_das' in dictionary.keys() else APIHelper.SKIP
        mist_nac = MxclusterNac.from_dictionary(dictionary.get('mist_nac')) if 'mist_nac' in dictionary.keys() else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        proxy = Proxy.from_dictionary(dictionary.get('proxy')) if 'proxy' in dictionary.keys() else APIHelper.SKIP
        radsec = MxclusterRadsec.from_dictionary(dictionary.get('radsec')) if 'radsec' in dictionary.keys() else APIHelper.SKIP
        radsec_tls = RadsecTls.from_dictionary(dictionary.get('radsec_tls')) if 'radsec_tls' in dictionary.keys() else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        tunterm_ap_subnets = dictionary.get("tunterm_ap_subnets") if dictionary.get("tunterm_ap_subnets") else APIHelper.SKIP
        tunterm_dhcpd_config = TuntermDhcpdConfig.from_dictionary(dictionary.get('tunterm_dhcpd_config')) if 'tunterm_dhcpd_config' in dictionary.keys() else APIHelper.SKIP
        tunterm_extra_routes = TuntermExtraRoutes.from_dictionary(dictionary.get('tunterm_extra_routes')) if 'tunterm_extra_routes' in dictionary.keys() else APIHelper.SKIP
        tunterm_hosts = dictionary.get("tunterm_hosts") if dictionary.get("tunterm_hosts") else APIHelper.SKIP
        tunterm_hosts_order = dictionary.get("tunterm_hosts_order") if dictionary.get("tunterm_hosts_order") else APIHelper.SKIP
        tunterm_hosts_selection = dictionary.get("tunterm_hosts_selection") if dictionary.get("tunterm_hosts_selection") else 'shuffle'
        tunterm_monitoring = None
        if dictionary.get('tunterm_monitoring') is not None:
            tunterm_monitoring = [SiteTuntermMonitoring.from_dictionary(x) for x in dictionary.get('tunterm_monitoring')]
        else:
            tunterm_monitoring = APIHelper.SKIP
        tunterm_monitoring_disabled = dictionary.get("tunterm_monitoring_disabled") if "tunterm_monitoring_disabled" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(created_time,
                   for_site,
                   id,
                   mist_das,
                   mist_nac,
                   modified_time,
                   name,
                   org_id,
                   proxy,
                   radsec,
                   radsec_tls,
                   site_id,
                   tunterm_ap_subnets,
                   tunterm_dhcpd_config,
                   tunterm_extra_routes,
                   tunterm_hosts,
                   tunterm_hosts_order,
                   tunterm_hosts_selection,
                   tunterm_monitoring,
                   tunterm_monitoring_disabled)
