# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.latlng import Latlng
from mistapi.models.primary import Primary
from mistapi.models.secondary import Secondary


class AutoProvision(object):

    """Implementation of the 'AutoProvision' model.

    TODO: type model description here.

    Attributes:
        enable (bool): TODO: type description here.
        latlng (Latlng): TODO: type description here.
        primary (Primary): TODO: type description here.
        region (RegionEnum): TODO: type description here.
        secondary (Secondary): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enable": 'enable',
        "latlng": 'latlng',
        "primary": 'primary',
        "region": 'region',
        "secondary": 'secondary'
    }

    _optionals = [
        'enable',
        'latlng',
        'primary',
        'region',
        'secondary',
    ]

    def __init__(self,
                 enable=APIHelper.SKIP,
                 latlng=APIHelper.SKIP,
                 primary=APIHelper.SKIP,
                 region='auto',
                 secondary=APIHelper.SKIP):
        """Constructor for the AutoProvision class"""

        # Initialize members of the class
        if enable is not APIHelper.SKIP:
            self.enable = enable 
        if latlng is not APIHelper.SKIP:
            self.latlng = latlng 
        if primary is not APIHelper.SKIP:
            self.primary = primary 
        self.region = region 
        if secondary is not APIHelper.SKIP:
            self.secondary = secondary 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        enable = dictionary.get("enable") if "enable" in dictionary.keys() else APIHelper.SKIP
        latlng = Latlng.from_dictionary(dictionary.get('latlng')) if 'latlng' in dictionary.keys() else APIHelper.SKIP
        primary = Primary.from_dictionary(dictionary.get('primary')) if 'primary' in dictionary.keys() else APIHelper.SKIP
        region = dictionary.get("region") if dictionary.get("region") else 'auto'
        secondary = Secondary.from_dictionary(dictionary.get('secondary')) if 'secondary' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(enable,
                   latlng,
                   primary,
                   region,
                   secondary)
