# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.cpu_stat_3 import CpuStat3
from mistapi.models.ip_stat_4 import IpStat4
from mistapi.models.lag_stat import LagStat
from mistapi.models.memory_stat_3 import MemoryStat3
from mistapi.models.port_stat_1 import PortStat1
from mistapi.models.service_stat import ServiceStat
from mistapi.models.tunterm_ip_config_1 import TuntermIpConfig1
from mistapi.models.tunterm_port_config_1 import TuntermPortConfig1
from mistapi.models.tunterm_stat import TuntermStat


class StatsMxedge(object):

    """Implementation of the 'stats_mxedge' model.

    TODO: type model description here.

    Attributes:
        cpu_stat (CpuStat3): CPU/core stats list
        created_time (int): TODO: type description here.
        for_site (bool): TODO: type description here.
        id (uuid|string): TODO: type description here.
        ip_stat (IpStat4): OOBM IP stats
        lag_stat (dict): Stat for LAG (Link Aggregation Group). Property key
            is the LAG name
        last_seen (int): TODO: type description here.
        mac (string): TODO: type description here.
        memory_stat (MemoryStat3): Memory usage
        model (string): TODO: type description here.
        modified_time (int): TODO: type description here.
        mxagent_registered (bool): TODO: type description here.
        mxcluster_id (uuid|string): TODO: type description here.
        name (string): The name of the tunnel
        num_tunnels (int): TODO: type description here.
        org_id (uuid|string): TODO: type description here.
        port_stat (dict): TODO: type description here.
        sensor_stat (object): TODO: type description here.
        service_stat (ServiceStat): stat for each services
        services (list of object): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        status (string): TODO: type description here.
        tunterm_id (uuid|string): TODO: type description here.
        tunterm_ip_config (TuntermIpConfig1): TODO: type description here.
        tunterm_port_config (TuntermPortConfig1): TODO: type description
            here.
        tunterm_registered (bool): TODO: type description here.
        tunterm_stat (TuntermStat): TODO: type description here.
        uptime (int): TODO: type description here.
        virtualization_type (string): Virtualization environment

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cpu_stat": 'cpu_stat',
        "created_time": 'created_time',
        "for_site": 'for_site',
        "id": 'id',
        "ip_stat": 'ip_stat',
        "lag_stat": 'lag_stat',
        "last_seen": 'last_seen',
        "mac": 'mac',
        "memory_stat": 'memory_stat',
        "model": 'model',
        "modified_time": 'modified_time',
        "mxagent_registered": 'mxagent_registered',
        "mxcluster_id": 'mxcluster_id',
        "name": 'name',
        "num_tunnels": 'num_tunnels',
        "org_id": 'org_id',
        "port_stat": 'port_stat',
        "sensor_stat": 'sensor_stat',
        "service_stat": 'service_stat',
        "services": 'services',
        "site_id": 'site_id',
        "status": 'status',
        "tunterm_id": 'tunterm_id',
        "tunterm_ip_config": 'tunterm_ip_config',
        "tunterm_port_config": 'tunterm_port_config',
        "tunterm_registered": 'tunterm_registered',
        "tunterm_stat": 'tunterm_stat',
        "uptime": 'uptime',
        "virtualization_type": 'virtualization_type'
    }

    _optionals = [
        'cpu_stat',
        'created_time',
        'for_site',
        'id',
        'ip_stat',
        'lag_stat',
        'last_seen',
        'mac',
        'memory_stat',
        'model',
        'modified_time',
        'mxagent_registered',
        'mxcluster_id',
        'name',
        'num_tunnels',
        'org_id',
        'port_stat',
        'sensor_stat',
        'service_stat',
        'services',
        'site_id',
        'status',
        'tunterm_id',
        'tunterm_ip_config',
        'tunterm_port_config',
        'tunterm_registered',
        'tunterm_stat',
        'uptime',
        'virtualization_type',
    ]

    def __init__(self,
                 cpu_stat=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 for_site=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 ip_stat=APIHelper.SKIP,
                 lag_stat=APIHelper.SKIP,
                 last_seen=APIHelper.SKIP,
                 mac=APIHelper.SKIP,
                 memory_stat=APIHelper.SKIP,
                 model=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 mxagent_registered=APIHelper.SKIP,
                 mxcluster_id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 num_tunnels=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 port_stat=APIHelper.SKIP,
                 sensor_stat=APIHelper.SKIP,
                 service_stat=APIHelper.SKIP,
                 services=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 tunterm_id=APIHelper.SKIP,
                 tunterm_ip_config=APIHelper.SKIP,
                 tunterm_port_config=APIHelper.SKIP,
                 tunterm_registered=APIHelper.SKIP,
                 tunterm_stat=APIHelper.SKIP,
                 uptime=APIHelper.SKIP,
                 virtualization_type=APIHelper.SKIP):
        """Constructor for the StatsMxedge class"""

        # Initialize members of the class
        if cpu_stat is not APIHelper.SKIP:
            self.cpu_stat = cpu_stat 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        if id is not APIHelper.SKIP:
            self.id = id 
        if ip_stat is not APIHelper.SKIP:
            self.ip_stat = ip_stat 
        if lag_stat is not APIHelper.SKIP:
            self.lag_stat = lag_stat 
        if last_seen is not APIHelper.SKIP:
            self.last_seen = last_seen 
        if mac is not APIHelper.SKIP:
            self.mac = mac 
        if memory_stat is not APIHelper.SKIP:
            self.memory_stat = memory_stat 
        if model is not APIHelper.SKIP:
            self.model = model 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        if mxagent_registered is not APIHelper.SKIP:
            self.mxagent_registered = mxagent_registered 
        if mxcluster_id is not APIHelper.SKIP:
            self.mxcluster_id = mxcluster_id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if num_tunnels is not APIHelper.SKIP:
            self.num_tunnels = num_tunnels 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if port_stat is not APIHelper.SKIP:
            self.port_stat = port_stat 
        if sensor_stat is not APIHelper.SKIP:
            self.sensor_stat = sensor_stat 
        if service_stat is not APIHelper.SKIP:
            self.service_stat = service_stat 
        if services is not APIHelper.SKIP:
            self.services = services 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if status is not APIHelper.SKIP:
            self.status = status 
        if tunterm_id is not APIHelper.SKIP:
            self.tunterm_id = tunterm_id 
        if tunterm_ip_config is not APIHelper.SKIP:
            self.tunterm_ip_config = tunterm_ip_config 
        if tunterm_port_config is not APIHelper.SKIP:
            self.tunterm_port_config = tunterm_port_config 
        if tunterm_registered is not APIHelper.SKIP:
            self.tunterm_registered = tunterm_registered 
        if tunterm_stat is not APIHelper.SKIP:
            self.tunterm_stat = tunterm_stat 
        if uptime is not APIHelper.SKIP:
            self.uptime = uptime 
        if virtualization_type is not APIHelper.SKIP:
            self.virtualization_type = virtualization_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        cpu_stat = CpuStat3.from_dictionary(dictionary.get('cpu_stat')) if 'cpu_stat' in dictionary.keys() else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        ip_stat = IpStat4.from_dictionary(dictionary.get('ip_stat')) if 'ip_stat' in dictionary.keys() else APIHelper.SKIP
        lag_stat = LagStat.from_dictionary(dictionary.get('lag_stat')) if 'lag_stat' in dictionary.keys() else APIHelper.SKIP
        last_seen = dictionary.get("last_seen") if dictionary.get("last_seen") else APIHelper.SKIP
        mac = dictionary.get("mac") if dictionary.get("mac") else APIHelper.SKIP
        memory_stat = MemoryStat3.from_dictionary(dictionary.get('memory_stat')) if 'memory_stat' in dictionary.keys() else APIHelper.SKIP
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        mxagent_registered = dictionary.get("mxagent_registered") if "mxagent_registered" in dictionary.keys() else APIHelper.SKIP
        mxcluster_id = dictionary.get("mxcluster_id") if dictionary.get("mxcluster_id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        num_tunnels = dictionary.get("num_tunnels") if dictionary.get("num_tunnels") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        port_stat = PortStat1.from_dictionary(dictionary.get('port_stat')) if 'port_stat' in dictionary.keys() else APIHelper.SKIP
        sensor_stat = dictionary.get("sensor_stat") if dictionary.get("sensor_stat") else APIHelper.SKIP
        service_stat = ServiceStat.from_dictionary(dictionary.get('service_stat')) if 'service_stat' in dictionary.keys() else APIHelper.SKIP
        services = dictionary.get("services") if dictionary.get("services") else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        tunterm_id = dictionary.get("tunterm_id") if dictionary.get("tunterm_id") else APIHelper.SKIP
        tunterm_ip_config = TuntermIpConfig1.from_dictionary(dictionary.get('tunterm_ip_config')) if 'tunterm_ip_config' in dictionary.keys() else APIHelper.SKIP
        tunterm_port_config = TuntermPortConfig1.from_dictionary(dictionary.get('tunterm_port_config')) if 'tunterm_port_config' in dictionary.keys() else APIHelper.SKIP
        tunterm_registered = dictionary.get("tunterm_registered") if "tunterm_registered" in dictionary.keys() else APIHelper.SKIP
        tunterm_stat = TuntermStat.from_dictionary(dictionary.get('tunterm_stat')) if 'tunterm_stat' in dictionary.keys() else APIHelper.SKIP
        uptime = dictionary.get("uptime") if dictionary.get("uptime") else APIHelper.SKIP
        virtualization_type = dictionary.get("virtualization_type") if dictionary.get("virtualization_type") else APIHelper.SKIP
        # Return an object of this model
        return cls(cpu_stat,
                   created_time,
                   for_site,
                   id,
                   ip_stat,
                   lag_stat,
                   last_seen,
                   mac,
                   memory_stat,
                   model,
                   modified_time,
                   mxagent_registered,
                   mxcluster_id,
                   name,
                   num_tunnels,
                   org_id,
                   port_stat,
                   sensor_stat,
                   service_stat,
                   services,
                   site_id,
                   status,
                   tunterm_id,
                   tunterm_ip_config,
                   tunterm_port_config,
                   tunterm_registered,
                   tunterm_stat,
                   uptime,
                   virtualization_type)
