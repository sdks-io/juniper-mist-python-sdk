# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Result3(object):

    """Implementation of the 'Result3' model.

    TODO: type model description here.

    Attributes:
        admin_id (uuid|string): admin id
        admin_name (string): name of the admin that performs the action
        after (object): field values after the change
        before (object): field values prior to the change
        for_site (bool): TODO: type description here.
        id (uuid|string): TODO: type description here.
        message (string): log message
        org_id (uuid|string): org id
        site_id (uuid|string): site id
        timestamp (float): start time, in epoch

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "admin_id": 'admin_id',
        "admin_name": 'admin_name',
        "message": 'message',
        "org_id": 'org_id',
        "site_id": 'site_id',
        "timestamp": 'timestamp',
        "after": 'after',
        "before": 'before',
        "for_site": 'for_site',
        "id": 'id'
    }

    _optionals = [
        'after',
        'before',
        'for_site',
        'id',
    ]

    _nullables = [
        'admin_id',
        'admin_name',
    ]

    def __init__(self,
                 admin_id=None,
                 admin_name=None,
                 message=None,
                 org_id=None,
                 site_id=None,
                 timestamp=None,
                 after=APIHelper.SKIP,
                 before=APIHelper.SKIP,
                 for_site=APIHelper.SKIP,
                 id=APIHelper.SKIP):
        """Constructor for the Result3 class"""

        # Initialize members of the class
        self.admin_id = admin_id 
        self.admin_name = admin_name 
        if after is not APIHelper.SKIP:
            self.after = after 
        if before is not APIHelper.SKIP:
            self.before = before 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        if id is not APIHelper.SKIP:
            self.id = id 
        self.message = message 
        self.org_id = org_id 
        self.site_id = site_id 
        self.timestamp = timestamp 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        admin_id = dictionary.get("admin_id") if dictionary.get("admin_id") else None
        admin_name = dictionary.get("admin_name") if dictionary.get("admin_name") else None
        message = dictionary.get("message") if dictionary.get("message") else None
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else None
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        after = dictionary.get("after") if dictionary.get("after") else APIHelper.SKIP
        before = dictionary.get("before") if dictionary.get("before") else APIHelper.SKIP
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        # Return an object of this model
        return cls(admin_id,
                   admin_name,
                   message,
                   org_id,
                   site_id,
                   timestamp,
                   after,
                   before,
                   for_site,
                   id)
