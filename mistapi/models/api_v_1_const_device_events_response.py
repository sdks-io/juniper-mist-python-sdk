# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApiV1ConstDeviceEventsResponse(object):

    """Implementation of the 'Api V1 Const Device Events Response' model.

    TODO: type model description here.

    Attributes:
        description (string): TODO: type description here.
        display (string): TODO: type description here.
        example (object): TODO: type description here.
        key (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "key": 'key',
        "description": 'description',
        "display": 'display',
        "example": 'example'
    }

    _optionals = [
        'description',
        'display',
        'example',
    ]

    def __init__(self,
                 key=None,
                 description=APIHelper.SKIP,
                 display=APIHelper.SKIP,
                 example=APIHelper.SKIP):
        """Constructor for the ApiV1ConstDeviceEventsResponse class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if display is not APIHelper.SKIP:
            self.display = display 
        if example is not APIHelper.SKIP:
            self.example = example 
        self.key = key 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        key = dictionary.get("key") if dictionary.get("key") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        display = dictionary.get("display") if dictionary.get("display") else APIHelper.SKIP
        example = dictionary.get("example") if dictionary.get("example") else APIHelper.SKIP
        # Return an object of this model
        return cls(key,
                   description,
                   display,
                   example)
