# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.spec_2 import Spec2


class WxlanTag(object):

    """Implementation of the 'wxlan_tag' model.

    WxLAN Tag
    * type:
    ** client: created manually (e.g. on wireless client table, when they spot
    a device of interest, they can create an wxlan tag for it
    ** resource: created automatically when we discover a network resource
    ** subnet: create automatically when a subnet is discovered
    * match:
    ** wlan_id, ap_id: values are a list of Wlan / Device ids
    ** client_mac: values are a list of MAC addresses
    * radius_group: this is a smart tag that matches RADIUS-Filter-ID,
    Airespace-ACL-Name (VendorID=14179, VendorType=6) / Aruba-User-Role
    (VendorID=14823, VendorType=1)
    * radius_username: this matches the ATTR-User-Name(1)
    * radius_class: thie matches the ATTR-Class(25)
    * radius_attr: the values are [ “6=1”, “26=10.2.3.4” ], this support other
    RADIUS attributes where we know the type
    * radius_vendor: the values are [ “14179.10=1”, “14178.16=1.2.3.4” ], this
    matches vendor attributes and will be dynamically evaluated

    Attributes:
        created_time (float): TODO: type description here.
        for_site (bool): TODO: type description here.
        id (uuid|string): TODO: type description here.
        last_ips (list of string): TODO: type description here.
        mac (string): TODO: type description here.
        match (Match1Enum): TODO: type description here.
        modified_time (float): TODO: type description here.
        name (string): The name
        op (Op1Enum): TODO: type description here.
        org_id (uuid|string): TODO: type description here.
        resource_mac (string): TODO: type description here.
        services (list of string): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        specs (list of Spec2): TODO: type description here.
        subnet (string): TODO: type description here.
        mtype (Type43Enum): TODO: type description here.
        values (list of string): list of values to match

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "mtype": 'type',
        "created_time": 'created_time',
        "for_site": 'for_site',
        "id": 'id',
        "last_ips": 'last_ips',
        "mac": 'mac',
        "match": 'match',
        "modified_time": 'modified_time',
        "op": 'op',
        "org_id": 'org_id',
        "resource_mac": 'resource_mac',
        "services": 'services',
        "site_id": 'site_id',
        "specs": 'specs',
        "subnet": 'subnet',
        "values": 'values'
    }

    _optionals = [
        'created_time',
        'for_site',
        'id',
        'last_ips',
        'mac',
        'match',
        'modified_time',
        'op',
        'org_id',
        'resource_mac',
        'services',
        'site_id',
        'specs',
        'subnet',
        'values',
    ]

    _nullables = [
        'mac',
        'match',
        'resource_mac',
    ]

    def __init__(self,
                 name=None,
                 mtype=None,
                 created_time=APIHelper.SKIP,
                 for_site=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 last_ips=APIHelper.SKIP,
                 mac=APIHelper.SKIP,
                 match=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 op='in',
                 org_id=APIHelper.SKIP,
                 resource_mac=APIHelper.SKIP,
                 services=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 specs=APIHelper.SKIP,
                 subnet=APIHelper.SKIP,
                 values=APIHelper.SKIP):
        """Constructor for the WxlanTag class"""

        # Initialize members of the class
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        if id is not APIHelper.SKIP:
            self.id = id 
        if last_ips is not APIHelper.SKIP:
            self.last_ips = last_ips 
        if mac is not APIHelper.SKIP:
            self.mac = mac 
        if match is not APIHelper.SKIP:
            self.match = match 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        self.name = name 
        self.op = op 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if resource_mac is not APIHelper.SKIP:
            self.resource_mac = resource_mac 
        if services is not APIHelper.SKIP:
            self.services = services 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if specs is not APIHelper.SKIP:
            self.specs = specs 
        if subnet is not APIHelper.SKIP:
            self.subnet = subnet 
        self.mtype = mtype 
        if values is not APIHelper.SKIP:
            self.values = values 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        last_ips = dictionary.get("last_ips") if dictionary.get("last_ips") else APIHelper.SKIP
        mac = dictionary.get("mac") if "mac" in dictionary.keys() else APIHelper.SKIP
        match = dictionary.get("match") if "match" in dictionary.keys() else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        op = dictionary.get("op") if dictionary.get("op") else 'in'
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        resource_mac = dictionary.get("resource_mac") if "resource_mac" in dictionary.keys() else APIHelper.SKIP
        services = dictionary.get("services") if dictionary.get("services") else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        specs = None
        if dictionary.get('specs') is not None:
            specs = [Spec2.from_dictionary(x) for x in dictionary.get('specs')]
        else:
            specs = APIHelper.SKIP
        subnet = dictionary.get("subnet") if dictionary.get("subnet") else APIHelper.SKIP
        values = dictionary.get("values") if dictionary.get("values") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   mtype,
                   created_time,
                   for_site,
                   id,
                   last_ips,
                   mac,
                   match,
                   modified_time,
                   op,
                   org_id,
                   resource_mac,
                   services,
                   site_id,
                   specs,
                   subnet,
                   values)
