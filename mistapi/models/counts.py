# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Counts(object):

    """Implementation of the 'Counts' model.

    TODO: type model description here.

    Attributes:
        download_requested (int): count of devices which cloud has requested
            to download firmware
        downloaded (int): count of apâ€™s which have the firmware downloaded
        failed (int): count of devices which have failed to upgrade
        reboot_in_progress (int): count of devices which are rebooting
        rebooted (int): count of devices which have rebooted successfully
        scheduled (int): count of devices which cloud has scheduled an upgrade
            for
        skipped (int): count of devices which skipped upgrade since requested
            version was same as running version. Use force to always upgrade
        total (int): count of devices part of this upgrade
        upgraded (int): count of devices which have upgraded successfully

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "download_requested": 'download_requested',
        "downloaded": 'downloaded',
        "failed": 'failed',
        "reboot_in_progress": 'reboot_in_progress',
        "rebooted": 'rebooted',
        "scheduled": 'scheduled',
        "skipped": 'skipped',
        "total": 'total',
        "upgraded": 'upgraded'
    }

    _optionals = [
        'download_requested',
        'downloaded',
        'failed',
        'reboot_in_progress',
        'rebooted',
        'scheduled',
        'skipped',
        'total',
        'upgraded',
    ]

    def __init__(self,
                 download_requested=APIHelper.SKIP,
                 downloaded=APIHelper.SKIP,
                 failed=APIHelper.SKIP,
                 reboot_in_progress=APIHelper.SKIP,
                 rebooted=APIHelper.SKIP,
                 scheduled=APIHelper.SKIP,
                 skipped=APIHelper.SKIP,
                 total=APIHelper.SKIP,
                 upgraded=APIHelper.SKIP):
        """Constructor for the Counts class"""

        # Initialize members of the class
        if download_requested is not APIHelper.SKIP:
            self.download_requested = download_requested 
        if downloaded is not APIHelper.SKIP:
            self.downloaded = downloaded 
        if failed is not APIHelper.SKIP:
            self.failed = failed 
        if reboot_in_progress is not APIHelper.SKIP:
            self.reboot_in_progress = reboot_in_progress 
        if rebooted is not APIHelper.SKIP:
            self.rebooted = rebooted 
        if scheduled is not APIHelper.SKIP:
            self.scheduled = scheduled 
        if skipped is not APIHelper.SKIP:
            self.skipped = skipped 
        if total is not APIHelper.SKIP:
            self.total = total 
        if upgraded is not APIHelper.SKIP:
            self.upgraded = upgraded 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        download_requested = dictionary.get("download_requested") if dictionary.get("download_requested") else APIHelper.SKIP
        downloaded = dictionary.get("downloaded") if dictionary.get("downloaded") else APIHelper.SKIP
        failed = dictionary.get("failed") if dictionary.get("failed") else APIHelper.SKIP
        reboot_in_progress = dictionary.get("reboot_in_progress") if dictionary.get("reboot_in_progress") else APIHelper.SKIP
        rebooted = dictionary.get("rebooted") if dictionary.get("rebooted") else APIHelper.SKIP
        scheduled = dictionary.get("scheduled") if dictionary.get("scheduled") else APIHelper.SKIP
        skipped = dictionary.get("skipped") if dictionary.get("skipped") else APIHelper.SKIP
        total = dictionary.get("total") if dictionary.get("total") else APIHelper.SKIP
        upgraded = dictionary.get("upgraded") if dictionary.get("upgraded") else APIHelper.SKIP
        # Return an object of this model
        return cls(download_requested,
                   downloaded,
                   failed,
                   reboot_in_progress,
                   rebooted,
                   scheduled,
                   skipped,
                   total,
                   upgraded)
