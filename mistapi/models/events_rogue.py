# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class EventsRogue(object):

    """Implementation of the 'events_rogue' model.

    rogue events

    Attributes:
        ap (string): TODO: type description here.
        bssid (string): TODO: type description here.
        channel (int): TODO: type description here.
        rssi (int): TODO: type description here.
        ssid (string): TODO: type description here.
        timestamp (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ap": 'ap',
        "bssid": 'bssid',
        "channel": 'channel',
        "rssi": 'rssi',
        "ssid": 'ssid',
        "timestamp": 'timestamp'
    }

    def __init__(self,
                 ap=None,
                 bssid=None,
                 channel=None,
                 rssi=None,
                 ssid=None,
                 timestamp=None):
        """Constructor for the EventsRogue class"""

        # Initialize members of the class
        self.ap = ap 
        self.bssid = bssid 
        self.channel = channel 
        self.rssi = rssi 
        self.ssid = ssid 
        self.timestamp = timestamp 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ap = dictionary.get("ap") if dictionary.get("ap") else None
        bssid = dictionary.get("bssid") if dictionary.get("bssid") else None
        channel = dictionary.get("channel") if dictionary.get("channel") else None
        rssi = dictionary.get("rssi") if dictionary.get("rssi") else None
        ssid = dictionary.get("ssid") if dictionary.get("ssid") else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        # Return an object of this model
        return cls(ap,
                   bssid,
                   channel,
                   rssi,
                   ssid,
                   timestamp)
