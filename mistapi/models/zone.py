# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.vertex import Vertex


class Zone(object):

    """Implementation of the 'zone' model.

    Zone

    Attributes:
        created_time (float): TODO: type description here.
        for_site (bool): TODO: type description here.
        id (uuid|string): TODO: type description here.
        map_id (uuid|string): map where this zone is defined
        modified_time (float): TODO: type description here.
        name (string): The name of the zone
        org_id (uuid|string): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        vertices (list of Vertex): vertices used to define an area. Itâ€™s
            assumed that the last point connects to the first point and forms
            an closed area

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "map_id": 'map_id',
        "name": 'name',
        "vertices": 'vertices',
        "created_time": 'created_time',
        "for_site": 'for_site',
        "id": 'id',
        "modified_time": 'modified_time',
        "org_id": 'org_id',
        "site_id": 'site_id'
    }

    _optionals = [
        'created_time',
        'for_site',
        'id',
        'modified_time',
        'org_id',
        'site_id',
    ]

    def __init__(self,
                 map_id=None,
                 name=None,
                 vertices=None,
                 created_time=APIHelper.SKIP,
                 for_site=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 site_id=APIHelper.SKIP):
        """Constructor for the Zone class"""

        # Initialize members of the class
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        if id is not APIHelper.SKIP:
            self.id = id 
        self.map_id = map_id 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        self.name = name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        self.vertices = vertices 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        map_id = dictionary.get("map_id") if dictionary.get("map_id") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        vertices = None
        if dictionary.get('vertices') is not None:
            vertices = [Vertex.from_dictionary(x) for x in dictionary.get('vertices')]
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(map_id,
                   name,
                   vertices,
                   created_time,
                   for_site,
                   id,
                   modified_time,
                   org_id,
                   site_id)
