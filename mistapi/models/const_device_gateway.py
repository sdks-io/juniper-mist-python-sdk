# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.ports_1 import Ports1


class ConstDeviceGateway(object):

    """Implementation of the 'const_device_gateway' model.

    TODO: type model description here.

    Attributes:
        defaults (dict): Object Key is the interface type name (e.g.
            "lan_ports", "wan_ports", ...)
        description (string): TODO: type description here.
        experimental (bool): TODO: type description here.
        fans_pluggable (bool): TODO: type description here.
        ha_node_0_fpc (int): TODO: type description here.
        ha_node_1_fpc (int): TODO: type description here.
        has_bgp (bool): TODO: type description here.
        has_fxp_0 (bool): TODO: type description here.
        has_ha_control (bool): TODO: type description here.
        has_ha_data (bool): TODO: type description here.
        has_irb (bool): TODO: type description here.
        has_poe_out (bool): TODO: type description here.
        has_snapshot (bool): TODO: type description here.
        irb_disabled_by_default (bool): TODO: type description here.
        model (string): TODO: type description here.
        number_fans (int): TODO: type description here.
        oc_device (bool): TODO: type description here.
        pic (dict): Object Key is the PIC number
        ports (Ports1): Object Key is the interface name (e.g. "ge-0/0/1",
            ...)
        sub_required (string): TODO: type description here.
        t_128_device (bool): TODO: type description here.
        mtype (Type9Enum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "defaults": 'defaults',
        "description": 'description',
        "experimental": 'experimental',
        "fans_pluggable": 'fans_pluggable',
        "ha_node_0_fpc": 'ha_node0_fpc',
        "ha_node_1_fpc": 'ha_node1_fpc',
        "has_bgp": 'has_bgp',
        "has_fxp_0": 'has_fxp0',
        "has_ha_control": 'has_ha_control',
        "has_ha_data": 'has_ha_data',
        "has_irb": 'has_irb',
        "has_poe_out": 'has_poe_out',
        "has_snapshot": 'has_snapshot',
        "irb_disabled_by_default": 'irb_disabled_by_default',
        "model": 'model',
        "number_fans": 'number_fans',
        "oc_device": 'oc_device',
        "pic": 'pic',
        "ports": 'ports',
        "sub_required": 'sub_required',
        "t_128_device": 't128_device',
        "mtype": 'type'
    }

    _optionals = [
        'defaults',
        'description',
        'experimental',
        'fans_pluggable',
        'ha_node_0_fpc',
        'ha_node_1_fpc',
        'has_bgp',
        'has_fxp_0',
        'has_ha_control',
        'has_ha_data',
        'has_irb',
        'has_poe_out',
        'has_snapshot',
        'irb_disabled_by_default',
        'model',
        'number_fans',
        'oc_device',
        'pic',
        'ports',
        'sub_required',
        't_128_device',
        'mtype',
    ]

    def __init__(self,
                 defaults=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 experimental=False,
                 fans_pluggable=True,
                 ha_node_0_fpc=APIHelper.SKIP,
                 ha_node_1_fpc=APIHelper.SKIP,
                 has_bgp=False,
                 has_fxp_0=True,
                 has_ha_control=False,
                 has_ha_data=False,
                 has_irb=False,
                 has_poe_out=True,
                 has_snapshot=True,
                 irb_disabled_by_default=False,
                 model=APIHelper.SKIP,
                 number_fans=APIHelper.SKIP,
                 oc_device=False,
                 pic=APIHelper.SKIP,
                 ports=APIHelper.SKIP,
                 sub_required=APIHelper.SKIP,
                 t_128_device=False,
                 mtype=APIHelper.SKIP):
        """Constructor for the ConstDeviceGateway class"""

        # Initialize members of the class
        if defaults is not APIHelper.SKIP:
            self.defaults = defaults 
        if description is not APIHelper.SKIP:
            self.description = description 
        self.experimental = experimental 
        self.fans_pluggable = fans_pluggable 
        if ha_node_0_fpc is not APIHelper.SKIP:
            self.ha_node_0_fpc = ha_node_0_fpc 
        if ha_node_1_fpc is not APIHelper.SKIP:
            self.ha_node_1_fpc = ha_node_1_fpc 
        self.has_bgp = has_bgp 
        self.has_fxp_0 = has_fxp_0 
        self.has_ha_control = has_ha_control 
        self.has_ha_data = has_ha_data 
        self.has_irb = has_irb 
        self.has_poe_out = has_poe_out 
        self.has_snapshot = has_snapshot 
        self.irb_disabled_by_default = irb_disabled_by_default 
        if model is not APIHelper.SKIP:
            self.model = model 
        if number_fans is not APIHelper.SKIP:
            self.number_fans = number_fans 
        self.oc_device = oc_device 
        if pic is not APIHelper.SKIP:
            self.pic = pic 
        if ports is not APIHelper.SKIP:
            self.ports = ports 
        if sub_required is not APIHelper.SKIP:
            self.sub_required = sub_required 
        self.t_128_device = t_128_device 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        defaults = dictionary.get("defaults") if dictionary.get("defaults") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        experimental = dictionary.get("experimental") if dictionary.get("experimental") else False
        fans_pluggable = dictionary.get("fans_pluggable") if dictionary.get("fans_pluggable") else True
        ha_node_0_fpc = dictionary.get("ha_node0_fpc") if dictionary.get("ha_node0_fpc") else APIHelper.SKIP
        ha_node_1_fpc = dictionary.get("ha_node1_fpc") if dictionary.get("ha_node1_fpc") else APIHelper.SKIP
        has_bgp = dictionary.get("has_bgp") if dictionary.get("has_bgp") else False
        has_fxp_0 = dictionary.get("has_fxp0") if dictionary.get("has_fxp0") else True
        has_ha_control = dictionary.get("has_ha_control") if dictionary.get("has_ha_control") else False
        has_ha_data = dictionary.get("has_ha_data") if dictionary.get("has_ha_data") else False
        has_irb = dictionary.get("has_irb") if dictionary.get("has_irb") else False
        has_poe_out = dictionary.get("has_poe_out") if dictionary.get("has_poe_out") else True
        has_snapshot = dictionary.get("has_snapshot") if dictionary.get("has_snapshot") else True
        irb_disabled_by_default = dictionary.get("irb_disabled_by_default") if dictionary.get("irb_disabled_by_default") else False
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        number_fans = dictionary.get("number_fans") if dictionary.get("number_fans") else APIHelper.SKIP
        oc_device = dictionary.get("oc_device") if dictionary.get("oc_device") else False
        pic = dictionary.get("pic") if dictionary.get("pic") else APIHelper.SKIP
        ports = Ports1.from_dictionary(dictionary.get('ports')) if 'ports' in dictionary.keys() else APIHelper.SKIP
        sub_required = dictionary.get("sub_required") if dictionary.get("sub_required") else APIHelper.SKIP
        t_128_device = dictionary.get("t128_device") if dictionary.get("t128_device") else False
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        # Return an object of this model
        return cls(defaults,
                   description,
                   experimental,
                   fans_pluggable,
                   ha_node_0_fpc,
                   ha_node_1_fpc,
                   has_bgp,
                   has_fxp_0,
                   has_ha_control,
                   has_ha_data,
                   has_irb,
                   has_poe_out,
                   has_snapshot,
                   irb_disabled_by_default,
                   model,
                   number_fans,
                   oc_device,
                   pic,
                   ports,
                   sub_required,
                   t_128_device,
                   mtype)
