# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApiV1SitesMapsAutoPlacementRequest(object):

    """Implementation of the 'Api V1 Sites Maps Auto Placement Request' model.

    TODO: type model description here.

    Attributes:
        device_ids (list of string): list of device macs
        force_collection (bool): * If `force_collection`==`false`: the API
            Iattempts to start localization with existing data.  * If
            `force_collection`==`true`: maintenance the API attempts to start
            orchestration.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_ids": 'device_ids',
        "force_collection": 'force_collection'
    }

    _optionals = [
        'device_ids',
        'force_collection',
    ]

    def __init__(self,
                 device_ids=APIHelper.SKIP,
                 force_collection=False):
        """Constructor for the ApiV1SitesMapsAutoPlacementRequest class"""

        # Initialize members of the class
        if device_ids is not APIHelper.SKIP:
            self.device_ids = device_ids 
        self.force_collection = force_collection 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        device_ids = dictionary.get("device_ids") if dictionary.get("device_ids") else APIHelper.SKIP
        force_collection = dictionary.get("force_collection") if dictionary.get("force_collection") else False
        # Return an object of this model
        return cls(device_ids,
                   force_collection)
