# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Anomaly(object):

    """Implementation of the 'anomaly' model.

    Anomaly

    Attributes:
        events (list of object): TODO: type description here.
        since (float): TODO: type description here.
        sle_baseline (float): TODO: type description here.
        sle_deviation (float): TODO: type description here.
        timestamp (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "events": 'events',
        "sle_baseline": 'sle_baseline',
        "sle_deviation": 'sle_deviation',
        "timestamp": 'timestamp',
        "since": 'since'
    }

    _optionals = [
        'since',
    ]

    def __init__(self,
                 events=None,
                 sle_baseline=None,
                 sle_deviation=None,
                 timestamp=None,
                 since=APIHelper.SKIP):
        """Constructor for the Anomaly class"""

        # Initialize members of the class
        self.events = events 
        if since is not APIHelper.SKIP:
            self.since = since 
        self.sle_baseline = sle_baseline 
        self.sle_deviation = sle_deviation 
        self.timestamp = timestamp 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        events = dictionary.get("events") if dictionary.get("events") else None
        sle_baseline = dictionary.get("sle_baseline") if dictionary.get("sle_baseline") else None
        sle_deviation = dictionary.get("sle_deviation") if dictionary.get("sle_deviation") else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        since = dictionary.get("since") if dictionary.get("since") else APIHelper.SKIP
        # Return an object of this model
        return cls(events,
                   sle_baseline,
                   sle_deviation,
                   timestamp,
                   since)
