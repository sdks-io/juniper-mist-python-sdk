# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Event(object):

    """Implementation of the 'Event' model.

    TODO: type model description here.

    Attributes:
        aps (list of string): TODO: type description here.
        bssids (list of string): TODO: type description here.
        count (int): If present, represents number of events of given type
            occurred in current interval, default=1
        event_id (uuid|string): event id
        for_site (bool): TODO: type description here.
        id (uuid|string): TODO: type description here.
        last_seen (float): TODO: type description here.
        org_id (uuid|string): org id
        site_id (uuid|string): site id
        ssids (list of string): TODO: type description here.
        timestamp (int): TODO: type description here.
        mtype (string): event type
        update (bool): If presents, represents that this is an update to event
            with given id sent earlier. default=false

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "last_seen": 'last_seen',
        "org_id": 'org_id',
        "site_id": 'site_id',
        "timestamp": 'timestamp',
        "mtype": 'type',
        "aps": 'aps',
        "bssids": 'bssids',
        "count": 'count',
        "event_id": 'event_id',
        "for_site": 'for_site',
        "ssids": 'ssids',
        "update": 'update'
    }

    _optionals = [
        'aps',
        'bssids',
        'count',
        'event_id',
        'for_site',
        'ssids',
        'update',
    ]

    def __init__(self,
                 id=None,
                 last_seen=None,
                 org_id=None,
                 site_id=None,
                 timestamp=None,
                 mtype=None,
                 aps=APIHelper.SKIP,
                 bssids=APIHelper.SKIP,
                 count=APIHelper.SKIP,
                 event_id=APIHelper.SKIP,
                 for_site=APIHelper.SKIP,
                 ssids=APIHelper.SKIP,
                 update=APIHelper.SKIP):
        """Constructor for the Event class"""

        # Initialize members of the class
        if aps is not APIHelper.SKIP:
            self.aps = aps 
        if bssids is not APIHelper.SKIP:
            self.bssids = bssids 
        if count is not APIHelper.SKIP:
            self.count = count 
        if event_id is not APIHelper.SKIP:
            self.event_id = event_id 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        self.id = id 
        self.last_seen = last_seen 
        self.org_id = org_id 
        self.site_id = site_id 
        if ssids is not APIHelper.SKIP:
            self.ssids = ssids 
        self.timestamp = timestamp 
        self.mtype = mtype 
        if update is not APIHelper.SKIP:
            self.update = update 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else None
        last_seen = dictionary.get("last_seen") if dictionary.get("last_seen") else None
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else None
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        aps = dictionary.get("aps") if dictionary.get("aps") else APIHelper.SKIP
        bssids = dictionary.get("bssids") if dictionary.get("bssids") else APIHelper.SKIP
        count = dictionary.get("count") if dictionary.get("count") else APIHelper.SKIP
        event_id = dictionary.get("event_id") if dictionary.get("event_id") else APIHelper.SKIP
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        ssids = dictionary.get("ssids") if dictionary.get("ssids") else APIHelper.SKIP
        update = dictionary.get("update") if "update" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   last_seen,
                   org_id,
                   site_id,
                   timestamp,
                   mtype,
                   aps,
                   bssids,
                   count,
                   event_id,
                   for_site,
                   ssids,
                   update)
