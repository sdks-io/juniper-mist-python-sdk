# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class JunosPortMirror1(object):

    """Implementation of the 'junos_port_mirror1' model.

    TODO: type model description here.

    Attributes:
        egress_port_ids (list of string): at least one of
            `ingress_port_ids`,`egress_port_ids` or `ingress_networks` should
            be specified
        filter (object): TODO: type description here.
        ingress_networks (list of string): at least one of
            `ingress_port_ids`,`egress_port_ids` or `ingress_networks` should
            be specified
        ingress_port_ids (list of string): at least one of
            `ingress_port_ids`,`egress_port_ids` or `ingress_networks` should
            be specified
        output_network (string): TODO: type description here.
        output_port_id (string): only one of of `output_port_id` or
            `output_network` should be specified
        family_type (string): TODO: type description here.
        rate (int): TODO: type description here.
        run_length (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "egress_port_ids": 'egress_port_ids',
        "filter": 'filter',
        "ingress_networks": 'ingress_networks',
        "ingress_port_ids": 'ingress_port_ids',
        "output_network": 'output_network',
        "output_port_id": 'output_port_id',
        "family_type": 'family_type',
        "rate": 'rate',
        "run_length": 'run_length'
    }

    _optionals = [
        'egress_port_ids',
        'filter',
        'ingress_networks',
        'ingress_port_ids',
        'output_network',
        'output_port_id',
        'family_type',
        'rate',
        'run_length',
    ]

    def __init__(self,
                 egress_port_ids=APIHelper.SKIP,
                 filter=APIHelper.SKIP,
                 ingress_networks=APIHelper.SKIP,
                 ingress_port_ids=APIHelper.SKIP,
                 output_network=APIHelper.SKIP,
                 output_port_id=APIHelper.SKIP,
                 family_type=APIHelper.SKIP,
                 rate=APIHelper.SKIP,
                 run_length=APIHelper.SKIP):
        """Constructor for the JunosPortMirror1 class"""

        # Initialize members of the class
        if egress_port_ids is not APIHelper.SKIP:
            self.egress_port_ids = egress_port_ids 
        if filter is not APIHelper.SKIP:
            self.filter = filter 
        if ingress_networks is not APIHelper.SKIP:
            self.ingress_networks = ingress_networks 
        if ingress_port_ids is not APIHelper.SKIP:
            self.ingress_port_ids = ingress_port_ids 
        if output_network is not APIHelper.SKIP:
            self.output_network = output_network 
        if output_port_id is not APIHelper.SKIP:
            self.output_port_id = output_port_id 
        if family_type is not APIHelper.SKIP:
            self.family_type = family_type 
        if rate is not APIHelper.SKIP:
            self.rate = rate 
        if run_length is not APIHelper.SKIP:
            self.run_length = run_length 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        egress_port_ids = dictionary.get("egress_port_ids") if dictionary.get("egress_port_ids") else APIHelper.SKIP
        filter = dictionary.get("filter") if dictionary.get("filter") else APIHelper.SKIP
        ingress_networks = dictionary.get("ingress_networks") if dictionary.get("ingress_networks") else APIHelper.SKIP
        ingress_port_ids = dictionary.get("ingress_port_ids") if dictionary.get("ingress_port_ids") else APIHelper.SKIP
        output_network = dictionary.get("output_network") if dictionary.get("output_network") else APIHelper.SKIP
        output_port_id = dictionary.get("output_port_id") if dictionary.get("output_port_id") else APIHelper.SKIP
        family_type = dictionary.get("family_type") if dictionary.get("family_type") else APIHelper.SKIP
        rate = dictionary.get("rate") if dictionary.get("rate") else APIHelper.SKIP
        run_length = dictionary.get("run_length") if dictionary.get("run_length") else APIHelper.SKIP
        # Return an object of this model
        return cls(egress_port_ids,
                   filter,
                   ingress_networks,
                   ingress_port_ids,
                   output_network,
                   output_port_id,
                   family_type,
                   rate,
                   run_length)
