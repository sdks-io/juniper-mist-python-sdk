# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class DeviceMacPort(object):

    """Implementation of the 'DeviceMacPort' model.

    TODO: type model description here.

    Attributes:
        device_mac (string): TODO: type description here.
        ip (string): TODO: type description here.
        port_id (string): TODO: type description here.
        port_parent (string): TODO: type description here.
        start (string): TODO: type description here.
        vlan (int): TODO: type description here.
        when (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_mac": 'device_mac',
        "ip": 'ip',
        "port_id": 'port_id',
        "port_parent": 'port_parent',
        "start": 'start',
        "vlan": 'vlan',
        "when": 'when'
    }

    _optionals = [
        'device_mac',
        'ip',
        'port_id',
        'port_parent',
        'start',
        'vlan',
        'when',
    ]

    def __init__(self,
                 device_mac=APIHelper.SKIP,
                 ip=APIHelper.SKIP,
                 port_id=APIHelper.SKIP,
                 port_parent=APIHelper.SKIP,
                 start=APIHelper.SKIP,
                 vlan=APIHelper.SKIP,
                 when=APIHelper.SKIP):
        """Constructor for the DeviceMacPort class"""

        # Initialize members of the class
        if device_mac is not APIHelper.SKIP:
            self.device_mac = device_mac 
        if ip is not APIHelper.SKIP:
            self.ip = ip 
        if port_id is not APIHelper.SKIP:
            self.port_id = port_id 
        if port_parent is not APIHelper.SKIP:
            self.port_parent = port_parent 
        if start is not APIHelper.SKIP:
            self.start = start 
        if vlan is not APIHelper.SKIP:
            self.vlan = vlan 
        if when is not APIHelper.SKIP:
            self.when = when 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        device_mac = dictionary.get("device_mac") if dictionary.get("device_mac") else APIHelper.SKIP
        ip = dictionary.get("ip") if dictionary.get("ip") else APIHelper.SKIP
        port_id = dictionary.get("port_id") if dictionary.get("port_id") else APIHelper.SKIP
        port_parent = dictionary.get("port_parent") if dictionary.get("port_parent") else APIHelper.SKIP
        start = dictionary.get("start") if dictionary.get("start") else APIHelper.SKIP
        vlan = dictionary.get("vlan") if dictionary.get("vlan") else APIHelper.SKIP
        when = dictionary.get("when") if dictionary.get("when") else APIHelper.SKIP
        # Return an object of this model
        return cls(device_mac,
                   ip,
                   port_id,
                   port_parent,
                   start,
                   vlan,
                   when)
