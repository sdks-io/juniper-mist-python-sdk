# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class AssetFilter(object):

    """Implementation of the 'asset_filter' model.

    Asset Filter

    Attributes:
        ap_mac (string): TODO: type description here.
        beam (int): TODO: type description here.
        created_time (float): TODO: type description here.
        disasbled (bool): whether the asset filter is disabled
        eddystone_uid_namespace (string): eddystone uid namespace used to
            filter assets
        eddystone_url (string): eddystone url used to filter assets
        for_site (bool): TODO: type description here.
        ibeacon_major (int): ibeacon major value used to filter assets
        ibeacon_uuid (uuid|string): ibeacon uuid used to filter assets
        id (uuid|string): TODO: type description here.
        mfg_company_id (int): ble manufacturing-specific company-id used to
            filter assets
        modified_time (float): TODO: type description here.
        name (string): TODO: type description here.
        org_id (uuid|string): TODO: type description here.
        rssi (int): TODO: type description here.
        service_uuid (uuid|string): ble service data uuid used to filter
            assets
        site_id (uuid|string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "ap_mac": 'ap_mac',
        "beam": 'beam',
        "created_time": 'created_time',
        "disasbled": 'disasbled',
        "eddystone_uid_namespace": 'eddystone_uid_namespace',
        "eddystone_url": 'eddystone_url',
        "for_site": 'for_site',
        "ibeacon_major": 'ibeacon_major',
        "ibeacon_uuid": 'ibeacon_uuid',
        "id": 'id',
        "mfg_company_id": 'mfg_company_id',
        "modified_time": 'modified_time',
        "org_id": 'org_id',
        "rssi": 'rssi',
        "service_uuid": 'service_uuid',
        "site_id": 'site_id'
    }

    _optionals = [
        'ap_mac',
        'beam',
        'created_time',
        'disasbled',
        'eddystone_uid_namespace',
        'eddystone_url',
        'for_site',
        'ibeacon_major',
        'ibeacon_uuid',
        'id',
        'mfg_company_id',
        'modified_time',
        'org_id',
        'rssi',
        'service_uuid',
        'site_id',
    ]

    def __init__(self,
                 name=None,
                 ap_mac=APIHelper.SKIP,
                 beam=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 disasbled=APIHelper.SKIP,
                 eddystone_uid_namespace=APIHelper.SKIP,
                 eddystone_url=APIHelper.SKIP,
                 for_site=APIHelper.SKIP,
                 ibeacon_major=APIHelper.SKIP,
                 ibeacon_uuid=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 mfg_company_id=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 rssi=APIHelper.SKIP,
                 service_uuid=APIHelper.SKIP,
                 site_id=APIHelper.SKIP):
        """Constructor for the AssetFilter class"""

        # Initialize members of the class
        if ap_mac is not APIHelper.SKIP:
            self.ap_mac = ap_mac 
        if beam is not APIHelper.SKIP:
            self.beam = beam 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if disasbled is not APIHelper.SKIP:
            self.disasbled = disasbled 
        if eddystone_uid_namespace is not APIHelper.SKIP:
            self.eddystone_uid_namespace = eddystone_uid_namespace 
        if eddystone_url is not APIHelper.SKIP:
            self.eddystone_url = eddystone_url 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        if ibeacon_major is not APIHelper.SKIP:
            self.ibeacon_major = ibeacon_major 
        if ibeacon_uuid is not APIHelper.SKIP:
            self.ibeacon_uuid = ibeacon_uuid 
        if id is not APIHelper.SKIP:
            self.id = id 
        if mfg_company_id is not APIHelper.SKIP:
            self.mfg_company_id = mfg_company_id 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        self.name = name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if rssi is not APIHelper.SKIP:
            self.rssi = rssi 
        if service_uuid is not APIHelper.SKIP:
            self.service_uuid = service_uuid 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        ap_mac = dictionary.get("ap_mac") if dictionary.get("ap_mac") else APIHelper.SKIP
        beam = dictionary.get("beam") if dictionary.get("beam") else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        disasbled = dictionary.get("disasbled") if "disasbled" in dictionary.keys() else APIHelper.SKIP
        eddystone_uid_namespace = dictionary.get("eddystone_uid_namespace") if dictionary.get("eddystone_uid_namespace") else APIHelper.SKIP
        eddystone_url = dictionary.get("eddystone_url") if dictionary.get("eddystone_url") else APIHelper.SKIP
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        ibeacon_major = dictionary.get("ibeacon_major") if dictionary.get("ibeacon_major") else APIHelper.SKIP
        ibeacon_uuid = dictionary.get("ibeacon_uuid") if dictionary.get("ibeacon_uuid") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        mfg_company_id = dictionary.get("mfg_company_id") if dictionary.get("mfg_company_id") else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        rssi = dictionary.get("rssi") if dictionary.get("rssi") else APIHelper.SKIP
        service_uuid = dictionary.get("service_uuid") if dictionary.get("service_uuid") else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   ap_mac,
                   beam,
                   created_time,
                   disasbled,
                   eddystone_uid_namespace,
                   eddystone_url,
                   for_site,
                   ibeacon_major,
                   ibeacon_uuid,
                   id,
                   mfg_company_id,
                   modified_time,
                   org_id,
                   rssi,
                   service_uuid,
                   site_id)
