# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.amendment import Amendment
from mistapi.models.license_1 import License1


class License(object):

    """Implementation of the 'license' model.

    License

    Attributes:
        amendments (list of Amendment): TODO: type description here.
        entitled (dict): Property key is license type (e.g. SUB-MAN)  and
            Property value is the number of licenses entitled.
        licenses (list of License1): list of registered licenses
        summary (dict): Property key is license type (e.g. SUB-MAN) and
            Property value is the number of licenses consumed.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "amendments": 'amendments',
        "entitled": 'entitled',
        "licenses": 'licenses',
        "summary": 'summary'
    }

    _optionals = [
        'amendments',
        'entitled',
        'licenses',
        'summary',
    ]

    def __init__(self,
                 amendments=APIHelper.SKIP,
                 entitled=APIHelper.SKIP,
                 licenses=APIHelper.SKIP,
                 summary=APIHelper.SKIP):
        """Constructor for the License class"""

        # Initialize members of the class
        if amendments is not APIHelper.SKIP:
            self.amendments = amendments 
        if entitled is not APIHelper.SKIP:
            self.entitled = entitled 
        if licenses is not APIHelper.SKIP:
            self.licenses = licenses 
        if summary is not APIHelper.SKIP:
            self.summary = summary 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        amendments = None
        if dictionary.get('amendments') is not None:
            amendments = [Amendment.from_dictionary(x) for x in dictionary.get('amendments')]
        else:
            amendments = APIHelper.SKIP
        entitled = dictionary.get("entitled") if dictionary.get("entitled") else APIHelper.SKIP
        licenses = None
        if dictionary.get('licenses') is not None:
            licenses = [License1.from_dictionary(x) for x in dictionary.get('licenses')]
        else:
            licenses = APIHelper.SKIP
        summary = dictionary.get("summary") if dictionary.get("summary") else APIHelper.SKIP
        # Return an object of this model
        return cls(amendments,
                   entitled,
                   licenses,
                   summary)
