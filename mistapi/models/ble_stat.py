# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class BleStat(object):

    """Implementation of the 'BleStat' model.

    TODO: type model description here.

    Attributes:
        beacon_rate (int): TODO: type description here.
        eddystone_uid_enabled (bool): TODO: type description here.
        eddystone_uid_freq_msec (int): TODO: type description here.
        eddystone_uid_instance (string): TODO: type description here.
        eddystone_uid_namespace (string): TODO: type description here.
        eddystone_url_enabled (bool): TODO: type description here.
        eddystone_url_freq_msec (int): Frequency (msec) of data emmit by
            Eddystone-UID beacon
        eddystone_url_url (string): TODO: type description here.
        ibeacon_enabled (bool): TODO: type description here.
        ibeacon_major (int): TODO: type description here.
        ibeacon_minor (int): TODO: type description here.
        ibeacon_uuid (uuid|string): TODO: type description here.
        major (int): TODO: type description here.
        minors (list of int): TODO: type description here.
        power (int): TODO: type description here.
        rx_bytes (int): TODO: type description here.
        rx_pkts (int): TODO: type description here.
        tx_bytes (int): TODO: type description here.
        tx_pkts (int): TODO: type description here.
        tx_resets (int): resets due to tx hung
        uuid (uuid|string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "beacon_rate": 'beacon_rate',
        "eddystone_uid_enabled": 'eddystone_uid_enabled',
        "eddystone_uid_freq_msec": 'eddystone_uid_freq_msec',
        "eddystone_uid_instance": 'eddystone_uid_instance',
        "eddystone_uid_namespace": 'eddystone_uid_namespace',
        "eddystone_url_enabled": 'eddystone_url_enabled',
        "eddystone_url_freq_msec": 'eddystone_url_freq_msec',
        "eddystone_url_url": 'eddystone_url_url',
        "ibeacon_enabled": 'ibeacon_enabled',
        "ibeacon_major": 'ibeacon_major',
        "ibeacon_minor": 'ibeacon_minor',
        "ibeacon_uuid": 'ibeacon_uuid',
        "major": 'major',
        "minors": 'minors',
        "power": 'power',
        "rx_bytes": 'rx_bytes',
        "rx_pkts": 'rx_pkts',
        "tx_bytes": 'tx_bytes',
        "tx_pkts": 'tx_pkts',
        "tx_resets": 'tx_resets',
        "uuid": 'uuid'
    }

    _optionals = [
        'beacon_rate',
        'eddystone_uid_enabled',
        'eddystone_uid_freq_msec',
        'eddystone_uid_instance',
        'eddystone_uid_namespace',
        'eddystone_url_enabled',
        'eddystone_url_freq_msec',
        'eddystone_url_url',
        'ibeacon_enabled',
        'ibeacon_major',
        'ibeacon_minor',
        'ibeacon_uuid',
        'major',
        'minors',
        'power',
        'rx_bytes',
        'rx_pkts',
        'tx_bytes',
        'tx_pkts',
        'tx_resets',
        'uuid',
    ]

    def __init__(self,
                 beacon_rate=APIHelper.SKIP,
                 eddystone_uid_enabled=APIHelper.SKIP,
                 eddystone_uid_freq_msec=APIHelper.SKIP,
                 eddystone_uid_instance=APIHelper.SKIP,
                 eddystone_uid_namespace=APIHelper.SKIP,
                 eddystone_url_enabled=APIHelper.SKIP,
                 eddystone_url_freq_msec=APIHelper.SKIP,
                 eddystone_url_url=APIHelper.SKIP,
                 ibeacon_enabled=APIHelper.SKIP,
                 ibeacon_major=APIHelper.SKIP,
                 ibeacon_minor=APIHelper.SKIP,
                 ibeacon_uuid=APIHelper.SKIP,
                 major=APIHelper.SKIP,
                 minors=APIHelper.SKIP,
                 power=APIHelper.SKIP,
                 rx_bytes=APIHelper.SKIP,
                 rx_pkts=APIHelper.SKIP,
                 tx_bytes=APIHelper.SKIP,
                 tx_pkts=APIHelper.SKIP,
                 tx_resets=APIHelper.SKIP,
                 uuid=APIHelper.SKIP):
        """Constructor for the BleStat class"""

        # Initialize members of the class
        if beacon_rate is not APIHelper.SKIP:
            self.beacon_rate = beacon_rate 
        if eddystone_uid_enabled is not APIHelper.SKIP:
            self.eddystone_uid_enabled = eddystone_uid_enabled 
        if eddystone_uid_freq_msec is not APIHelper.SKIP:
            self.eddystone_uid_freq_msec = eddystone_uid_freq_msec 
        if eddystone_uid_instance is not APIHelper.SKIP:
            self.eddystone_uid_instance = eddystone_uid_instance 
        if eddystone_uid_namespace is not APIHelper.SKIP:
            self.eddystone_uid_namespace = eddystone_uid_namespace 
        if eddystone_url_enabled is not APIHelper.SKIP:
            self.eddystone_url_enabled = eddystone_url_enabled 
        if eddystone_url_freq_msec is not APIHelper.SKIP:
            self.eddystone_url_freq_msec = eddystone_url_freq_msec 
        if eddystone_url_url is not APIHelper.SKIP:
            self.eddystone_url_url = eddystone_url_url 
        if ibeacon_enabled is not APIHelper.SKIP:
            self.ibeacon_enabled = ibeacon_enabled 
        if ibeacon_major is not APIHelper.SKIP:
            self.ibeacon_major = ibeacon_major 
        if ibeacon_minor is not APIHelper.SKIP:
            self.ibeacon_minor = ibeacon_minor 
        if ibeacon_uuid is not APIHelper.SKIP:
            self.ibeacon_uuid = ibeacon_uuid 
        if major is not APIHelper.SKIP:
            self.major = major 
        if minors is not APIHelper.SKIP:
            self.minors = minors 
        if power is not APIHelper.SKIP:
            self.power = power 
        if rx_bytes is not APIHelper.SKIP:
            self.rx_bytes = rx_bytes 
        if rx_pkts is not APIHelper.SKIP:
            self.rx_pkts = rx_pkts 
        if tx_bytes is not APIHelper.SKIP:
            self.tx_bytes = tx_bytes 
        if tx_pkts is not APIHelper.SKIP:
            self.tx_pkts = tx_pkts 
        if tx_resets is not APIHelper.SKIP:
            self.tx_resets = tx_resets 
        if uuid is not APIHelper.SKIP:
            self.uuid = uuid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        beacon_rate = dictionary.get("beacon_rate") if dictionary.get("beacon_rate") else APIHelper.SKIP
        eddystone_uid_enabled = dictionary.get("eddystone_uid_enabled") if "eddystone_uid_enabled" in dictionary.keys() else APIHelper.SKIP
        eddystone_uid_freq_msec = dictionary.get("eddystone_uid_freq_msec") if dictionary.get("eddystone_uid_freq_msec") else APIHelper.SKIP
        eddystone_uid_instance = dictionary.get("eddystone_uid_instance") if dictionary.get("eddystone_uid_instance") else APIHelper.SKIP
        eddystone_uid_namespace = dictionary.get("eddystone_uid_namespace") if dictionary.get("eddystone_uid_namespace") else APIHelper.SKIP
        eddystone_url_enabled = dictionary.get("eddystone_url_enabled") if "eddystone_url_enabled" in dictionary.keys() else APIHelper.SKIP
        eddystone_url_freq_msec = dictionary.get("eddystone_url_freq_msec") if dictionary.get("eddystone_url_freq_msec") else APIHelper.SKIP
        eddystone_url_url = dictionary.get("eddystone_url_url") if dictionary.get("eddystone_url_url") else APIHelper.SKIP
        ibeacon_enabled = dictionary.get("ibeacon_enabled") if "ibeacon_enabled" in dictionary.keys() else APIHelper.SKIP
        ibeacon_major = dictionary.get("ibeacon_major") if dictionary.get("ibeacon_major") else APIHelper.SKIP
        ibeacon_minor = dictionary.get("ibeacon_minor") if dictionary.get("ibeacon_minor") else APIHelper.SKIP
        ibeacon_uuid = dictionary.get("ibeacon_uuid") if dictionary.get("ibeacon_uuid") else APIHelper.SKIP
        major = dictionary.get("major") if dictionary.get("major") else APIHelper.SKIP
        minors = dictionary.get("minors") if dictionary.get("minors") else APIHelper.SKIP
        power = dictionary.get("power") if dictionary.get("power") else APIHelper.SKIP
        rx_bytes = dictionary.get("rx_bytes") if dictionary.get("rx_bytes") else APIHelper.SKIP
        rx_pkts = dictionary.get("rx_pkts") if dictionary.get("rx_pkts") else APIHelper.SKIP
        tx_bytes = dictionary.get("tx_bytes") if dictionary.get("tx_bytes") else APIHelper.SKIP
        tx_pkts = dictionary.get("tx_pkts") if dictionary.get("tx_pkts") else APIHelper.SKIP
        tx_resets = dictionary.get("tx_resets") if dictionary.get("tx_resets") else APIHelper.SKIP
        uuid = dictionary.get("uuid") if dictionary.get("uuid") else APIHelper.SKIP
        # Return an object of this model
        return cls(beacon_rate,
                   eddystone_uid_enabled,
                   eddystone_uid_freq_msec,
                   eddystone_uid_instance,
                   eddystone_uid_namespace,
                   eddystone_url_enabled,
                   eddystone_url_freq_msec,
                   eddystone_url_url,
                   ibeacon_enabled,
                   ibeacon_major,
                   ibeacon_minor,
                   ibeacon_uuid,
                   major,
                   minors,
                   power,
                   rx_bytes,
                   rx_pkts,
                   tx_bytes,
                   tx_pkts,
                   tx_resets,
                   uuid)
