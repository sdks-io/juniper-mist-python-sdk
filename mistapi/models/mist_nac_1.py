# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.idp import Idp
from mistapi.models.server_cert import ServerCert


class MistNac1(object):

    """Implementation of the 'MistNac1' model.

    TODO: type model description here.

    Attributes:
        cacerts (string): the CA certs we use to verify client certs
        default_idp_id (string): use this IDP when no explicit realm present
            in the incoming username/CN OR when no IDP is explicitly mapped to
            the incoming realm.
        idps (list of Idp): TODO: type description here.
        server_cert (ServerCert): radius server cert to be presented in EAP
            TLS

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cacerts": 'cacerts',
        "default_idp_id": 'default_idp_id',
        "idps": 'idps',
        "server_cert": 'server_cert'
    }

    _optionals = [
        'cacerts',
        'default_idp_id',
        'idps',
        'server_cert',
    ]

    def __init__(self,
                 cacerts=APIHelper.SKIP,
                 default_idp_id=APIHelper.SKIP,
                 idps=APIHelper.SKIP,
                 server_cert=APIHelper.SKIP):
        """Constructor for the MistNac1 class"""

        # Initialize members of the class
        if cacerts is not APIHelper.SKIP:
            self.cacerts = cacerts 
        if default_idp_id is not APIHelper.SKIP:
            self.default_idp_id = default_idp_id 
        if idps is not APIHelper.SKIP:
            self.idps = idps 
        if server_cert is not APIHelper.SKIP:
            self.server_cert = server_cert 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        cacerts = dictionary.get("cacerts") if dictionary.get("cacerts") else APIHelper.SKIP
        default_idp_id = dictionary.get("default_idp_id") if dictionary.get("default_idp_id") else APIHelper.SKIP
        idps = None
        if dictionary.get('idps') is not None:
            idps = [Idp.from_dictionary(x) for x in dictionary.get('idps')]
        else:
            idps = APIHelper.SKIP
        server_cert = ServerCert.from_dictionary(dictionary.get('server_cert')) if 'server_cert' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(cacerts,
                   default_idp_id,
                   idps,
                   server_cert)
