# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.models.counts_1 import Counts1


class MxedgeUpgradeResponse(object):

    """Implementation of the 'mxedge_upgrade_response' model.

    TODO: type model description here.

    Attributes:
        channel (string): TODO: type description here.
        counts (Counts1): TODO: type description here.
        id (string): TODO: type description here.
        status (string): TODO: type description here.
        strategy (string): TODO: type description here.
        versions (object): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "channel": 'channel',
        "counts": 'counts',
        "id": 'id',
        "status": 'status',
        "strategy": 'strategy',
        "versions": 'versions'
    }

    def __init__(self,
                 channel=None,
                 counts=None,
                 id=None,
                 status=None,
                 strategy=None,
                 versions=None):
        """Constructor for the MxedgeUpgradeResponse class"""

        # Initialize members of the class
        self.channel = channel 
        self.counts = counts 
        self.id = id 
        self.status = status 
        self.strategy = strategy 
        self.versions = versions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        channel = dictionary.get("channel") if dictionary.get("channel") else None
        counts = Counts1.from_dictionary(dictionary.get('counts')) if dictionary.get('counts') else None
        id = dictionary.get("id") if dictionary.get("id") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        strategy = dictionary.get("strategy") if dictionary.get("strategy") else None
        versions = dictionary.get("versions") if dictionary.get("versions") else None
        # Return an object of this model
        return cls(channel,
                   counts,
                   id,
                   status,
                   strategy,
                   versions)
