# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.protect_re import ProtectRe


class SwitchMgmt(object):

    """Implementation of the 'SwitchMgmt' model.

    TODO: type model description here.

    Attributes:
        config_revert_timer (int): rollback timer for commit confirmed
        protect_re (ProtectRe): restrict inbound-traffic to host when enabled,
            all traffic that is not essential to our operation will be dropped
            e.g. ntp / dns / traffic to mist will be allowed by default, if
            dhcpd is enabled, we'll make sure it works
        root_password (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "config_revert_timer": 'config_revert_timer',
        "protect_re": 'protect_re',
        "root_password": 'root_password'
    }

    _optionals = [
        'config_revert_timer',
        'protect_re',
        'root_password',
    ]

    def __init__(self,
                 config_revert_timer=10,
                 protect_re=APIHelper.SKIP,
                 root_password=APIHelper.SKIP):
        """Constructor for the SwitchMgmt class"""

        # Initialize members of the class
        self.config_revert_timer = config_revert_timer 
        if protect_re is not APIHelper.SKIP:
            self.protect_re = protect_re 
        if root_password is not APIHelper.SKIP:
            self.root_password = root_password 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        config_revert_timer = dictionary.get("config_revert_timer") if dictionary.get("config_revert_timer") else 10
        protect_re = ProtectRe.from_dictionary(dictionary.get('protect_re')) if 'protect_re' in dictionary.keys() else APIHelper.SKIP
        root_password = dictionary.get("root_password") if dictionary.get("root_password") else APIHelper.SKIP
        # Return an object of this model
        return cls(config_revert_timer,
                   protect_re,
                   root_password)
