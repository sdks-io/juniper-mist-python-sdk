# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class EslStat(object):

    """Implementation of the 'EslStat' model.

    TODO: type model description here.

    Attributes:
        channel (int): TODO: type description here.
        connected (bool): TODO: type description here.
        mtype (string): TODO: type description here.
        up (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "channel": 'channel',
        "connected": 'connected',
        "mtype": 'type',
        "up": 'up'
    }

    _optionals = [
        'channel',
        'connected',
        'mtype',
        'up',
    ]

    def __init__(self,
                 channel=APIHelper.SKIP,
                 connected=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 up=APIHelper.SKIP):
        """Constructor for the EslStat class"""

        # Initialize members of the class
        if channel is not APIHelper.SKIP:
            self.channel = channel 
        if connected is not APIHelper.SKIP:
            self.connected = connected 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if up is not APIHelper.SKIP:
            self.up = up 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        channel = dictionary.get("channel") if dictionary.get("channel") else APIHelper.SKIP
        connected = dictionary.get("connected") if "connected" in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        up = dictionary.get("up") if "up" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(channel,
                   connected,
                   mtype,
                   up)
