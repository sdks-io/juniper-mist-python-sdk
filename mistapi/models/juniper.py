# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.account_1 import Account1


class Juniper(object):

    """Implementation of the 'Juniper' model.

    TODO: type model description here.

    Attributes:
        accounts (list of Account1): TODO: type description here.
        customer_name (string): TODO: type description here.
        linked (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "accounts": 'accounts',
        "customer_name": 'customer_name',
        "linked": 'linked'
    }

    _optionals = [
        'accounts',
        'customer_name',
        'linked',
    ]

    def __init__(self,
                 accounts=APIHelper.SKIP,
                 customer_name=APIHelper.SKIP,
                 linked=APIHelper.SKIP):
        """Constructor for the Juniper class"""

        # Initialize members of the class
        if accounts is not APIHelper.SKIP:
            self.accounts = accounts 
        if customer_name is not APIHelper.SKIP:
            self.customer_name = customer_name 
        if linked is not APIHelper.SKIP:
            self.linked = linked 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        accounts = None
        if dictionary.get('accounts') is not None:
            accounts = [Account1.from_dictionary(x) for x in dictionary.get('accounts')]
        else:
            accounts = APIHelper.SKIP
        customer_name = dictionary.get("customer_name") if dictionary.get("customer_name") else APIHelper.SKIP
        linked = dictionary.get("linked") if "linked" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(accounts,
                   customer_name,
                   linked)
