# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Result22(object):

    """Implementation of the 'Result22' model.

    TODO: type model description here.

    Attributes:
        channel (int): TODO: type description here.
        noise (float): TODO: type description here.
        other_rssi (float): the avg RSSI heard from other APs (that does NOT
            belongs to the same site)
        other_ssid (string): SSID from other AP that we heard from with the
            max RSSI
        util_score (float): utilization score, 0-1, lower means less
            utilization (cleaner RF)
        util_score_non_wifi (float): non-wifi utilization score, 0-1, lower
            means less utilization (cleaner RF)
        util_score_other (float): other utilization score, 0-1, lower means
            less utilization (cleaner RF)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "channel": 'channel',
        "noise": 'noise',
        "util_score": 'util_score',
        "util_score_non_wifi": 'util_score_non_wifi',
        "util_score_other": 'util_score_other',
        "other_rssi": 'other_rssi',
        "other_ssid": 'other_ssid'
    }

    _optionals = [
        'other_rssi',
        'other_ssid',
    ]

    def __init__(self,
                 channel=None,
                 noise=None,
                 util_score=None,
                 util_score_non_wifi=None,
                 util_score_other=None,
                 other_rssi=APIHelper.SKIP,
                 other_ssid=APIHelper.SKIP):
        """Constructor for the Result22 class"""

        # Initialize members of the class
        self.channel = channel 
        self.noise = noise 
        if other_rssi is not APIHelper.SKIP:
            self.other_rssi = other_rssi 
        if other_ssid is not APIHelper.SKIP:
            self.other_ssid = other_ssid 
        self.util_score = util_score 
        self.util_score_non_wifi = util_score_non_wifi 
        self.util_score_other = util_score_other 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        channel = dictionary.get("channel") if dictionary.get("channel") else None
        noise = dictionary.get("noise") if dictionary.get("noise") else None
        util_score = dictionary.get("util_score") if dictionary.get("util_score") else None
        util_score_non_wifi = dictionary.get("util_score_non_wifi") if dictionary.get("util_score_non_wifi") else None
        util_score_other = dictionary.get("util_score_other") if dictionary.get("util_score_other") else None
        other_rssi = dictionary.get("other_rssi") if dictionary.get("other_rssi") else APIHelper.SKIP
        other_ssid = dictionary.get("other_ssid") if dictionary.get("other_ssid") else APIHelper.SKIP
        # Return an object of this model
        return cls(channel,
                   noise,
                   util_score,
                   util_score_non_wifi,
                   util_score_other,
                   other_rssi,
                   other_ssid)
