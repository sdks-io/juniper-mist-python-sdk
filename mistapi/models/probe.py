# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Probe(object):

    """Implementation of the 'Probe' model.

    Only if:
    * `provider`== `custom-ipsec`

    Attributes:
        interval (int): how often to trigger the probe
        threshold (int): number of consecutive misses before declaring the
            tunnel down
        timeout (int): time within which to complete the connectivity check
        mtype (Type20Enum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "interval": 'interval',
        "threshold": 'threshold',
        "timeout": 'timeout',
        "mtype": 'type'
    }

    _optionals = [
        'interval',
        'threshold',
        'timeout',
        'mtype',
    ]

    def __init__(self,
                 interval=APIHelper.SKIP,
                 threshold=APIHelper.SKIP,
                 timeout=APIHelper.SKIP,
                 mtype='icmp'):
        """Constructor for the Probe class"""

        # Initialize members of the class
        if interval is not APIHelper.SKIP:
            self.interval = interval 
        if threshold is not APIHelper.SKIP:
            self.threshold = threshold 
        if timeout is not APIHelper.SKIP:
            self.timeout = timeout 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        interval = dictionary.get("interval") if dictionary.get("interval") else APIHelper.SKIP
        threshold = dictionary.get("threshold") if dictionary.get("threshold") else APIHelper.SKIP
        timeout = dictionary.get("timeout") if dictionary.get("timeout") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else 'icmp'
        # Return an object of this model
        return cls(interval,
                   threshold,
                   timeout,
                   mtype)
