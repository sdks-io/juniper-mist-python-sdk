# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class RrmBandMetric(object):

    """Implementation of the 'rrm_band_metric' model.

    TODO: type model description here.

    Attributes:
        cochannel_neighbors (float): average number of co-channel neighbors
        density (float): defined by how APs can hear from one and another, 0 -
            1 (everyone can hear everyone)
        neighbors (float): average number of neighbors
        noise (float): average noise in dBm

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cochannel_neighbors": 'cochannel_neighbors',
        "density": 'density',
        "neighbors": 'neighbors',
        "noise": 'noise'
    }

    def __init__(self,
                 cochannel_neighbors=None,
                 density=None,
                 neighbors=None,
                 noise=None):
        """Constructor for the RrmBandMetric class"""

        # Initialize members of the class
        self.cochannel_neighbors = cochannel_neighbors 
        self.density = density 
        self.neighbors = neighbors 
        self.noise = noise 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        cochannel_neighbors = dictionary.get("cochannel_neighbors") if dictionary.get("cochannel_neighbors") else None
        density = dictionary.get("density") if dictionary.get("density") else None
        neighbors = dictionary.get("neighbors") if dictionary.get("neighbors") else None
        noise = dictionary.get("noise") if dictionary.get("noise") else None
        # Return an object of this model
        return cls(cochannel_neighbors,
                   density,
                   neighbors,
                   noise)
