# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ClientIps(object):

    """Implementation of the 'ClientIps' model.

    Property key is the RADIUS Client IP/Subnet.

    Attributes:
        secret (string): if different from above
        site_id (uuid|string): present only for 3rd party clients
        vendor (VendorEnum): convention to be followed is :
            "<vendor>-<variant>" <variant> could be an
            os/platform/model/company for ex: for cisco vendor, there could
            variants wrt os (such as ios, nxos etc), platforms (asa etc), or
            acquired companies (such as meraki, airnonet) etc.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "secret": 'secret',
        "site_id": 'site_id',
        "vendor": 'vendor'
    }

    _optionals = [
        'secret',
        'site_id',
        'vendor',
    ]

    def __init__(self,
                 secret=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 vendor=APIHelper.SKIP):
        """Constructor for the ClientIps class"""

        # Initialize members of the class
        if secret is not APIHelper.SKIP:
            self.secret = secret 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if vendor is not APIHelper.SKIP:
            self.vendor = vendor 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        secret = dictionary.get("secret") if dictionary.get("secret") else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        vendor = dictionary.get("vendor") if dictionary.get("vendor") else APIHelper.SKIP
        # Return an object of this model
        return cls(secret,
                   site_id,
                   vendor)
