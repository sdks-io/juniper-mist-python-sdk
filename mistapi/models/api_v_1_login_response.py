# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApiV1LoginResponse(object):

    """Implementation of the 'Api V1 Login Response' model.

    TODO: type model description here.

    Attributes:
        email (string): TODO: type description here.
        two_factor_passed (bool): TODO: type description here.
        two_factor_required (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "email": 'email',
        "two_factor_passed": 'two_factor_passed',
        "two_factor_required": 'two_factor_required'
    }

    _optionals = [
        'email',
        'two_factor_passed',
        'two_factor_required',
    ]

    def __init__(self,
                 email=APIHelper.SKIP,
                 two_factor_passed=APIHelper.SKIP,
                 two_factor_required=APIHelper.SKIP):
        """Constructor for the ApiV1LoginResponse class"""

        # Initialize members of the class
        if email is not APIHelper.SKIP:
            self.email = email 
        if two_factor_passed is not APIHelper.SKIP:
            self.two_factor_passed = two_factor_passed 
        if two_factor_required is not APIHelper.SKIP:
            self.two_factor_required = two_factor_required 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        two_factor_passed = dictionary.get("two_factor_passed") if "two_factor_passed" in dictionary.keys() else APIHelper.SKIP
        two_factor_required = dictionary.get("two_factor_required") if "two_factor_required" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(email,
                   two_factor_passed,
                   two_factor_required)
