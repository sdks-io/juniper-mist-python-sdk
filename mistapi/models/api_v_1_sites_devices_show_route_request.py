# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApiV1SitesDevicesShowRouteRequest(object):

    """Implementation of the 'Api V1 Sites Devices Show Route Request' model.

    TODO: type model description here.

    Attributes:
        neighbor (string): TODO: type description here.
        node (Node4Enum): Only for HA
        prefix (string): route prefix
        protocol (string): only bgp is supported
        route (RouteEnum): if specified, dump both received and advertised *
            for SSR, show bgp neighbors 10.250.18.202
            received-routes/advertised-routes * for SRX, show route
            receive-protocol/advertise-protocol bgp 192.168.255.12
        vrf_name (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "neighbor": 'neighbor',
        "node": 'node',
        "prefix": 'prefix',
        "protocol": 'protocol',
        "route": 'route',
        "vrf_name": 'vrf_name'
    }

    _optionals = [
        'neighbor',
        'node',
        'prefix',
        'protocol',
        'route',
        'vrf_name',
    ]

    def __init__(self,
                 neighbor=APIHelper.SKIP,
                 node=APIHelper.SKIP,
                 prefix=APIHelper.SKIP,
                 protocol=APIHelper.SKIP,
                 route=APIHelper.SKIP,
                 vrf_name=APIHelper.SKIP):
        """Constructor for the ApiV1SitesDevicesShowRouteRequest class"""

        # Initialize members of the class
        if neighbor is not APIHelper.SKIP:
            self.neighbor = neighbor 
        if node is not APIHelper.SKIP:
            self.node = node 
        if prefix is not APIHelper.SKIP:
            self.prefix = prefix 
        if protocol is not APIHelper.SKIP:
            self.protocol = protocol 
        if route is not APIHelper.SKIP:
            self.route = route 
        if vrf_name is not APIHelper.SKIP:
            self.vrf_name = vrf_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        neighbor = dictionary.get("neighbor") if dictionary.get("neighbor") else APIHelper.SKIP
        node = dictionary.get("node") if dictionary.get("node") else APIHelper.SKIP
        prefix = dictionary.get("prefix") if dictionary.get("prefix") else APIHelper.SKIP
        protocol = dictionary.get("protocol") if dictionary.get("protocol") else APIHelper.SKIP
        route = dictionary.get("route") if dictionary.get("route") else APIHelper.SKIP
        vrf_name = dictionary.get("vrf_name") if dictionary.get("vrf_name") else APIHelper.SKIP
        # Return an object of this model
        return cls(neighbor,
                   node,
                   prefix,
                   protocol,
                   route,
                   vrf_name)
