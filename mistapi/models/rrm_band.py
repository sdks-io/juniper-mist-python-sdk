# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class RrmBand(object):

    """Implementation of the 'rrm_band' model.

    TODO: type model description here.

    Attributes:
        bandwidth (Bandwidth1Enum): proposed bandwidth
        channel (int): proposed channel
        curr_bandwidht (CurrBandwidhtEnum): current bandwidth
        curr_channel (int): current channel
        curr_power (int): current tx power
        curr_usage (string): current radio band
        power (int): proposed tx power
        usage (string): proposed radio band

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bandwidth": 'bandwidth',
        "channel": 'channel',
        "curr_bandwidht": 'curr_bandwidht',
        "curr_channel": 'curr_channel',
        "curr_power": 'curr_power',
        "curr_usage": 'curr_usage',
        "power": 'power',
        "usage": 'usage'
    }

    _optionals = [
        'bandwidth',
        'channel',
        'curr_bandwidht',
        'curr_channel',
        'curr_power',
        'curr_usage',
        'power',
        'usage',
    ]

    def __init__(self,
                 bandwidth=APIHelper.SKIP,
                 channel=APIHelper.SKIP,
                 curr_bandwidht=APIHelper.SKIP,
                 curr_channel=APIHelper.SKIP,
                 curr_power=APIHelper.SKIP,
                 curr_usage=APIHelper.SKIP,
                 power=APIHelper.SKIP,
                 usage=APIHelper.SKIP):
        """Constructor for the RrmBand class"""

        # Initialize members of the class
        if bandwidth is not APIHelper.SKIP:
            self.bandwidth = bandwidth 
        if channel is not APIHelper.SKIP:
            self.channel = channel 
        if curr_bandwidht is not APIHelper.SKIP:
            self.curr_bandwidht = curr_bandwidht 
        if curr_channel is not APIHelper.SKIP:
            self.curr_channel = curr_channel 
        if curr_power is not APIHelper.SKIP:
            self.curr_power = curr_power 
        if curr_usage is not APIHelper.SKIP:
            self.curr_usage = curr_usage 
        if power is not APIHelper.SKIP:
            self.power = power 
        if usage is not APIHelper.SKIP:
            self.usage = usage 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        bandwidth = dictionary.get("bandwidth") if dictionary.get("bandwidth") else APIHelper.SKIP
        channel = dictionary.get("channel") if dictionary.get("channel") else APIHelper.SKIP
        curr_bandwidht = dictionary.get("curr_bandwidht") if dictionary.get("curr_bandwidht") else APIHelper.SKIP
        curr_channel = dictionary.get("curr_channel") if dictionary.get("curr_channel") else APIHelper.SKIP
        curr_power = dictionary.get("curr_power") if dictionary.get("curr_power") else APIHelper.SKIP
        curr_usage = dictionary.get("curr_usage") if dictionary.get("curr_usage") else APIHelper.SKIP
        power = dictionary.get("power") if dictionary.get("power") else APIHelper.SKIP
        usage = dictionary.get("usage") if dictionary.get("usage") else APIHelper.SKIP
        # Return an object of this model
        return cls(bandwidth,
                   channel,
                   curr_bandwidht,
                   curr_channel,
                   curr_power,
                   curr_usage,
                   power,
                   usage)
