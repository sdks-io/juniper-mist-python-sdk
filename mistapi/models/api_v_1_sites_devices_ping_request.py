# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApiV1SitesDevicesPingRequest(object):

    """Implementation of the 'Api V1 Sites Devices Ping Request' model.

    TODO: type model description here.

    Attributes:
        count (int): TODO: type description here.
        egress_interface (string): Interface through which packet needs to
            egress
        host (string): TODO: type description here.
        node (Node4Enum): Only for HA
        size (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "host": 'host',
        "count": 'count',
        "egress_interface": 'egress_interface',
        "node": 'node',
        "size": 'size'
    }

    _optionals = [
        'count',
        'egress_interface',
        'node',
        'size',
    ]

    def __init__(self,
                 host=None,
                 count=10,
                 egress_interface=APIHelper.SKIP,
                 node=APIHelper.SKIP,
                 size=56):
        """Constructor for the ApiV1SitesDevicesPingRequest class"""

        # Initialize members of the class
        self.count = count 
        if egress_interface is not APIHelper.SKIP:
            self.egress_interface = egress_interface 
        self.host = host 
        if node is not APIHelper.SKIP:
            self.node = node 
        self.size = size 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        host = dictionary.get("host") if dictionary.get("host") else None
        count = dictionary.get("count") if dictionary.get("count") else 10
        egress_interface = dictionary.get("egress_interface") if dictionary.get("egress_interface") else APIHelper.SKIP
        node = dictionary.get("node") if dictionary.get("node") else APIHelper.SKIP
        size = dictionary.get("size") if dictionary.get("size") else 56
        # Return an object of this model
        return cls(host,
                   count,
                   egress_interface,
                   node,
                   size)
