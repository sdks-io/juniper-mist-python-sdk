# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.content_2 import Content2


class Server1(object):

    """Implementation of the 'Server1' model.

    TODO: type model description here.

    Attributes:
        contents (list of Content2): TODO: type description here.
        explicit_priority (bool): TODO: type description here.
        facility (FacilityEnum): TODO: type description here.
        host (string): TODO: type description here.
        match (string): TODO: type description here.
        port (int): TODO: type description here.
        protocol (Protocol4Enum): TODO: type description here.
        routing_instance (string): TODO: type description here.
        severity (Severity1Enum): TODO: type description here.
        source_address (string): if source_address is configured, will use the
            vlan firstly otherwise use source_ip
        structured_data (bool): TODO: type description here.
        tag (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "contents": 'contents',
        "explicit_priority": 'explicit_priority',
        "facility": 'facility',
        "host": 'host',
        "match": 'match',
        "port": 'port',
        "protocol": 'protocol',
        "routing_instance": 'routing_instance',
        "severity": 'severity',
        "source_address": 'source_address',
        "structured_data": 'structured_data',
        "tag": 'tag'
    }

    _optionals = [
        'contents',
        'explicit_priority',
        'facility',
        'host',
        'match',
        'port',
        'protocol',
        'routing_instance',
        'severity',
        'source_address',
        'structured_data',
        'tag',
    ]

    def __init__(self,
                 contents=APIHelper.SKIP,
                 explicit_priority=APIHelper.SKIP,
                 facility=APIHelper.SKIP,
                 host=APIHelper.SKIP,
                 match=APIHelper.SKIP,
                 port=514,
                 protocol='udp',
                 routing_instance=APIHelper.SKIP,
                 severity=APIHelper.SKIP,
                 source_address=APIHelper.SKIP,
                 structured_data=APIHelper.SKIP,
                 tag=APIHelper.SKIP):
        """Constructor for the Server1 class"""

        # Initialize members of the class
        if contents is not APIHelper.SKIP:
            self.contents = contents 
        if explicit_priority is not APIHelper.SKIP:
            self.explicit_priority = explicit_priority 
        if facility is not APIHelper.SKIP:
            self.facility = facility 
        if host is not APIHelper.SKIP:
            self.host = host 
        if match is not APIHelper.SKIP:
            self.match = match 
        self.port = port 
        self.protocol = protocol 
        if routing_instance is not APIHelper.SKIP:
            self.routing_instance = routing_instance 
        if severity is not APIHelper.SKIP:
            self.severity = severity 
        if source_address is not APIHelper.SKIP:
            self.source_address = source_address 
        if structured_data is not APIHelper.SKIP:
            self.structured_data = structured_data 
        if tag is not APIHelper.SKIP:
            self.tag = tag 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        contents = None
        if dictionary.get('contents') is not None:
            contents = [Content2.from_dictionary(x) for x in dictionary.get('contents')]
        else:
            contents = APIHelper.SKIP
        explicit_priority = dictionary.get("explicit_priority") if "explicit_priority" in dictionary.keys() else APIHelper.SKIP
        facility = dictionary.get("facility") if dictionary.get("facility") else APIHelper.SKIP
        host = dictionary.get("host") if dictionary.get("host") else APIHelper.SKIP
        match = dictionary.get("match") if dictionary.get("match") else APIHelper.SKIP
        port = dictionary.get("port") if dictionary.get("port") else 514
        protocol = dictionary.get("protocol") if dictionary.get("protocol") else 'udp'
        routing_instance = dictionary.get("routing_instance") if dictionary.get("routing_instance") else APIHelper.SKIP
        severity = dictionary.get("severity") if dictionary.get("severity") else APIHelper.SKIP
        source_address = dictionary.get("source_address") if dictionary.get("source_address") else APIHelper.SKIP
        structured_data = dictionary.get("structured_data") if "structured_data" in dictionary.keys() else APIHelper.SKIP
        tag = dictionary.get("tag") if dictionary.get("tag") else APIHelper.SKIP
        # Return an object of this model
        return cls(contents,
                   explicit_priority,
                   facility,
                   host,
                   match,
                   port,
                   protocol,
                   routing_instance,
                   severity,
                   source_address,
                   structured_data,
                   tag)
