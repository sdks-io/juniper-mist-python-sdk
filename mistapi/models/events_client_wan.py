# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class EventsClientWan(object):

    """Implementation of the 'events_client_wan' model.

    TODO: type model description here.

    Attributes:
        when (string): TODO: type description here.
        ev_type (string): TODO: type description here.
        metadata (object): TODO: type description here.
        org_id (uuid|string): TODO: type description here.
        random_mac (bool): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        text (string): TODO: type description here.
        wcid (uuid|string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "when": 'When',
        "ev_type": 'ev_type',
        "metadata": 'metadata',
        "org_id": 'org_id',
        "random_mac": 'random_mac',
        "site_id": 'site_id',
        "text": 'text',
        "wcid": 'wcid'
    }

    _optionals = [
        'when',
        'ev_type',
        'metadata',
        'org_id',
        'random_mac',
        'site_id',
        'text',
        'wcid',
    ]

    def __init__(self,
                 when=APIHelper.SKIP,
                 ev_type=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 random_mac=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 text=APIHelper.SKIP,
                 wcid=APIHelper.SKIP):
        """Constructor for the EventsClientWan class"""

        # Initialize members of the class
        if when is not APIHelper.SKIP:
            self.when = when 
        if ev_type is not APIHelper.SKIP:
            self.ev_type = ev_type 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if random_mac is not APIHelper.SKIP:
            self.random_mac = random_mac 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if text is not APIHelper.SKIP:
            self.text = text 
        if wcid is not APIHelper.SKIP:
            self.wcid = wcid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        when = dictionary.get("When") if dictionary.get("When") else APIHelper.SKIP
        ev_type = dictionary.get("ev_type") if dictionary.get("ev_type") else APIHelper.SKIP
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        random_mac = dictionary.get("random_mac") if "random_mac" in dictionary.keys() else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        text = dictionary.get("text") if dictionary.get("text") else APIHelper.SKIP
        wcid = dictionary.get("wcid") if dictionary.get("wcid") else APIHelper.SKIP
        # Return an object of this model
        return cls(when,
                   ev_type,
                   metadata,
                   org_id,
                   random_mac,
                   site_id,
                   text,
                   wcid)
