# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.spec import Spec


class JunosAclTags(object):

    """Implementation of the 'junos_acl_tags' model.

    TODO: type model description here.

    Attributes:
        gbp_tag (float): required if - `type`==`dynamic_gbp` (gbp_tag received
            from RADIUS) - `type`==`static_gbp` (applying gbp tag against
            matching conditions)
        macs (list of string): required if  - `type`==`mac` -
            `type`==`static_gbp` if from matching mac
        network (string): if: - `type`==`mac` (optional. default is `any`) -
            `type`==`subnet` (optional. default is `any`) - `type`==`network`
            - `type`==`resource` (optional. default is `any`) -
            `type`==`static_gbp` if from matching network (vlan)
        radius_group (string): required if  - `type`==`radius_group`  -
            `type`==`static_gbp` if from matching radius_group
        specs (list of Spec): if `type`==`resource` empty means unrestricted,
            i.e. any
        subnets (list of string): if  - `type`==`subnet`  - `type`==`resource`
            (optional. default is `any`) - `type`==`static_gbp` if from
            matching subnet
        mtype (Type24Enum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "gbp_tag": 'gbp_tag',
        "macs": 'macs',
        "network": 'network',
        "radius_group": 'radius_group',
        "specs": 'specs',
        "subnets": 'subnets'
    }

    _optionals = [
        'gbp_tag',
        'macs',
        'network',
        'radius_group',
        'specs',
        'subnets',
    ]

    def __init__(self,
                 mtype=None,
                 gbp_tag=APIHelper.SKIP,
                 macs=APIHelper.SKIP,
                 network=APIHelper.SKIP,
                 radius_group=APIHelper.SKIP,
                 specs=APIHelper.SKIP,
                 subnets=APIHelper.SKIP):
        """Constructor for the JunosAclTags class"""

        # Initialize members of the class
        if gbp_tag is not APIHelper.SKIP:
            self.gbp_tag = gbp_tag 
        if macs is not APIHelper.SKIP:
            self.macs = macs 
        if network is not APIHelper.SKIP:
            self.network = network 
        if radius_group is not APIHelper.SKIP:
            self.radius_group = radius_group 
        if specs is not APIHelper.SKIP:
            self.specs = specs 
        if subnets is not APIHelper.SKIP:
            self.subnets = subnets 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        mtype = dictionary.get("type") if dictionary.get("type") else None
        gbp_tag = dictionary.get("gbp_tag") if dictionary.get("gbp_tag") else APIHelper.SKIP
        macs = dictionary.get("macs") if dictionary.get("macs") else APIHelper.SKIP
        network = dictionary.get("network") if dictionary.get("network") else APIHelper.SKIP
        radius_group = dictionary.get("radius_group") if dictionary.get("radius_group") else APIHelper.SKIP
        specs = None
        if dictionary.get('specs') is not None:
            specs = [Spec.from_dictionary(x) for x in dictionary.get('specs')]
        else:
            specs = APIHelper.SKIP
        subnets = dictionary.get("subnets") if dictionary.get("subnets") else APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   gbp_tag,
                   macs,
                   network,
                   radius_group,
                   specs,
                   subnets)
