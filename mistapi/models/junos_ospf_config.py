# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.areas import Areas


class JunosOspfConfig(object):

    """Implementation of the 'junos_ospf_config' model.

    Junos OSPF config

    Attributes:
        areas (dict): OSPF areas to run on this device and the corresponding
            per-area-specific configs. The property key is the area
        enabled (bool): whether to rung OSPF on this device
        reference_bandwidth (string): Bandwidth for calculating metric
            defaults (9600..4000000000000)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "areas": 'areas',
        "enabled": 'enabled',
        "reference_bandwidth": 'reference_bandwidth'
    }

    _optionals = [
        'areas',
        'enabled',
        'reference_bandwidth',
    ]

    def __init__(self,
                 areas=APIHelper.SKIP,
                 enabled=APIHelper.SKIP,
                 reference_bandwidth='100M'):
        """Constructor for the JunosOspfConfig class"""

        # Initialize members of the class
        if areas is not APIHelper.SKIP:
            self.areas = areas 
        if enabled is not APIHelper.SKIP:
            self.enabled = enabled 
        self.reference_bandwidth = reference_bandwidth 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        areas = Areas.from_dictionary(dictionary.get('areas')) if 'areas' in dictionary.keys() else APIHelper.SKIP
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else APIHelper.SKIP
        reference_bandwidth = dictionary.get("reference_bandwidth") if dictionary.get("reference_bandwidth") else '100M'
        # Return an object of this model
        return cls(areas,
                   enabled,
                   reference_bandwidth)
