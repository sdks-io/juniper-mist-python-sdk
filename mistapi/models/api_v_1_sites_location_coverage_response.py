# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ApiV1SitesLocationCoverageResponse(object):

    """Implementation of the 'Api V1 Sites Location Coverage Response' model.

    TODO: type model description here.

    Attributes:
        beams_means (list of float): list of [x, y, mean]s, x/y are in meters
            (UI would need to use map.ppm to calulate the pixel location from
            top-left).
        end (int): TODO: type description here.
        gridsize (float): the size of grid, in meter
        result_def (list of string): list of names annotating the fields in
            results
        results (list of float): list of results, see result_def.
        start (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "beams_means": 'beams_means',
        "end": 'end',
        "gridsize": 'gridsize',
        "result_def": 'result_def',
        "results": 'results',
        "start": 'start'
    }

    def __init__(self,
                 beams_means=None,
                 end=None,
                 gridsize=None,
                 result_def=None,
                 results=None,
                 start=None):
        """Constructor for the ApiV1SitesLocationCoverageResponse class"""

        # Initialize members of the class
        self.beams_means = beams_means 
        self.end = end 
        self.gridsize = gridsize 
        self.result_def = result_def 
        self.results = results 
        self.start = start 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        beams_means = dictionary.get("beams_means") if dictionary.get("beams_means") else None
        end = dictionary.get("end") if dictionary.get("end") else None
        gridsize = dictionary.get("gridsize") if dictionary.get("gridsize") else None
        result_def = dictionary.get("result_def") if dictionary.get("result_def") else None
        results = dictionary.get("results") if dictionary.get("results") else None
        start = dictionary.get("start") if dictionary.get("start") else None
        # Return an object of this model
        return cls(beams_means,
                   end,
                   gridsize,
                   result_def,
                   results,
                   start)
