# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Result1(object):

    """Implementation of the 'Result1' model.

    TODO: type model description here.

    Attributes:
        ap_availability (float): TODO: type description here.
        ap_health (float): TODO: type description here.
        capacity (float): TODO: type description here.
        coverage (float): TODO: type description here.
        num_aps (float): TODO: type description here.
        num_clients (float): TODO: type description here.
        roaming (float): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        successful_connect (float): TODO: type description here.
        throughput (float): TODO: type description here.
        time_to_connect (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "site_id": 'site_id',
        "ap_availability": 'ap-availability',
        "ap_health": 'ap-health',
        "capacity": 'capacity',
        "coverage": 'coverage',
        "num_aps": 'num_aps',
        "num_clients": 'num_clients',
        "roaming": 'roaming',
        "successful_connect": 'successful-connect',
        "throughput": 'throughput',
        "time_to_connect": 'time-to-connect'
    }

    _optionals = [
        'ap_availability',
        'ap_health',
        'capacity',
        'coverage',
        'num_aps',
        'num_clients',
        'roaming',
        'successful_connect',
        'throughput',
        'time_to_connect',
    ]

    def __init__(self,
                 site_id=None,
                 ap_availability=APIHelper.SKIP,
                 ap_health=APIHelper.SKIP,
                 capacity=APIHelper.SKIP,
                 coverage=APIHelper.SKIP,
                 num_aps=APIHelper.SKIP,
                 num_clients=APIHelper.SKIP,
                 roaming=APIHelper.SKIP,
                 successful_connect=APIHelper.SKIP,
                 throughput=APIHelper.SKIP,
                 time_to_connect=APIHelper.SKIP):
        """Constructor for the Result1 class"""

        # Initialize members of the class
        if ap_availability is not APIHelper.SKIP:
            self.ap_availability = ap_availability 
        if ap_health is not APIHelper.SKIP:
            self.ap_health = ap_health 
        if capacity is not APIHelper.SKIP:
            self.capacity = capacity 
        if coverage is not APIHelper.SKIP:
            self.coverage = coverage 
        if num_aps is not APIHelper.SKIP:
            self.num_aps = num_aps 
        if num_clients is not APIHelper.SKIP:
            self.num_clients = num_clients 
        if roaming is not APIHelper.SKIP:
            self.roaming = roaming 
        self.site_id = site_id 
        if successful_connect is not APIHelper.SKIP:
            self.successful_connect = successful_connect 
        if throughput is not APIHelper.SKIP:
            self.throughput = throughput 
        if time_to_connect is not APIHelper.SKIP:
            self.time_to_connect = time_to_connect 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        site_id = dictionary.get("site_id") if dictionary.get("site_id") else None
        ap_availability = dictionary.get("ap-availability") if dictionary.get("ap-availability") else APIHelper.SKIP
        ap_health = dictionary.get("ap-health") if dictionary.get("ap-health") else APIHelper.SKIP
        capacity = dictionary.get("capacity") if dictionary.get("capacity") else APIHelper.SKIP
        coverage = dictionary.get("coverage") if dictionary.get("coverage") else APIHelper.SKIP
        num_aps = dictionary.get("num_aps") if dictionary.get("num_aps") else APIHelper.SKIP
        num_clients = dictionary.get("num_clients") if dictionary.get("num_clients") else APIHelper.SKIP
        roaming = dictionary.get("roaming") if dictionary.get("roaming") else APIHelper.SKIP
        successful_connect = dictionary.get("successful-connect") if dictionary.get("successful-connect") else APIHelper.SKIP
        throughput = dictionary.get("throughput") if dictionary.get("throughput") else APIHelper.SKIP
        time_to_connect = dictionary.get("time-to-connect") if dictionary.get("time-to-connect") else APIHelper.SKIP
        # Return an object of this model
        return cls(site_id,
                   ap_availability,
                   ap_health,
                   capacity,
                   coverage,
                   num_aps,
                   num_clients,
                   roaming,
                   successful_connect,
                   throughput,
                   time_to_connect)
