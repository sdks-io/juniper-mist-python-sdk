# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.port_group import PortGroup


class Pics(object):

    """Implementation of the 'Pics' model.

    TODO: type model description here.

    Attributes:
        idx (int): TODO: type description here.
        port_groups (list of PortGroup): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "idx": 'idx',
        "port_groups": 'port_groups'
    }

    _optionals = [
        'idx',
        'port_groups',
    ]

    def __init__(self,
                 idx=APIHelper.SKIP,
                 port_groups=APIHelper.SKIP):
        """Constructor for the Pics class"""

        # Initialize members of the class
        if idx is not APIHelper.SKIP:
            self.idx = idx 
        if port_groups is not APIHelper.SKIP:
            self.port_groups = port_groups 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        idx = dictionary.get("idx") if dictionary.get("idx") else APIHelper.SKIP
        port_groups = None
        if dictionary.get('port_groups') is not None:
            port_groups = [PortGroup.from_dictionary(x) for x in dictionary.get('port_groups')]
        else:
            port_groups = APIHelper.SKIP
        # Return an object of this model
        return cls(idx,
                   port_groups)
