# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.content_2 import Content2


class User1(object):

    """Implementation of the 'User1' model.

    TODO: type model description here.

    Attributes:
        contents (list of Content2): TODO: type description here.
        match (string): TODO: type description here.
        user (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "contents": 'contents',
        "match": 'match',
        "user": 'user'
    }

    _optionals = [
        'contents',
        'match',
        'user',
    ]

    def __init__(self,
                 contents=APIHelper.SKIP,
                 match=APIHelper.SKIP,
                 user=APIHelper.SKIP):
        """Constructor for the User1 class"""

        # Initialize members of the class
        if contents is not APIHelper.SKIP:
            self.contents = contents 
        if match is not APIHelper.SKIP:
            self.match = match 
        if user is not APIHelper.SKIP:
            self.user = user 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        contents = None
        if dictionary.get('contents') is not None:
            contents = [Content2.from_dictionary(x) for x in dictionary.get('contents')]
        else:
            contents = APIHelper.SKIP
        match = dictionary.get("match") if dictionary.get("match") else APIHelper.SKIP
        user = dictionary.get("user") if dictionary.get("user") else APIHelper.SKIP
        # Return an object of this model
        return cls(contents,
                   match,
                   user)
