# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class NacRuleMatching(object):

    """Implementation of the 'nac_rule_matching' model.

    TODO: type model description here.

    Attributes:
        auth_type (AuthType2Enum): TODO: type description here.
        nactags (list of string): TODO: type description here.
        port_types (list of PortTypeEnum): TODO: type description here.
        site_ids (list of uuid|string): list of site ids to match
        sitegroup_ids (list of uuid|string): list of sitegroup ids to match
        vendor (list of string): list of vendors to match

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "auth_type": 'auth_type',
        "nactags": 'nactags',
        "port_types": 'port_types',
        "site_ids": 'site_ids',
        "sitegroup_ids": 'sitegroup_ids',
        "vendor": 'vendor'
    }

    _optionals = [
        'auth_type',
        'nactags',
        'port_types',
        'site_ids',
        'sitegroup_ids',
        'vendor',
    ]

    def __init__(self,
                 auth_type='cert',
                 nactags=APIHelper.SKIP,
                 port_types=APIHelper.SKIP,
                 site_ids=APIHelper.SKIP,
                 sitegroup_ids=APIHelper.SKIP,
                 vendor=APIHelper.SKIP):
        """Constructor for the NacRuleMatching class"""

        # Initialize members of the class
        self.auth_type = auth_type 
        if nactags is not APIHelper.SKIP:
            self.nactags = nactags 
        if port_types is not APIHelper.SKIP:
            self.port_types = port_types 
        if site_ids is not APIHelper.SKIP:
            self.site_ids = site_ids 
        if sitegroup_ids is not APIHelper.SKIP:
            self.sitegroup_ids = sitegroup_ids 
        if vendor is not APIHelper.SKIP:
            self.vendor = vendor 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        auth_type = dictionary.get("auth_type") if dictionary.get("auth_type") else 'cert'
        nactags = dictionary.get("nactags") if dictionary.get("nactags") else APIHelper.SKIP
        port_types = dictionary.get("port_types") if dictionary.get("port_types") else APIHelper.SKIP
        site_ids = dictionary.get("site_ids") if dictionary.get("site_ids") else APIHelper.SKIP
        sitegroup_ids = dictionary.get("sitegroup_ids") if dictionary.get("sitegroup_ids") else APIHelper.SKIP
        vendor = dictionary.get("vendor") if dictionary.get("vendor") else APIHelper.SKIP
        # Return an object of this model
        return cls(auth_type,
                   nactags,
                   port_types,
                   site_ids,
                   sitegroup_ids,
                   vendor)
