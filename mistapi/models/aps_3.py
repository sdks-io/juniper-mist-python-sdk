# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Aps3(object):

    """Implementation of the 'Aps3' model.

    TODO: type model description here.

    Attributes:
        action (Action8Enum): TODO: type description here.
        floorplan_id (string): TODO: type description here.
        height (float): TODO: type description here.
        mac (string): TODO: type description here.
        map_id (string): TODO: type description here.
        orientation (float): TODO: type description here.
        reason (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mac": 'mac',
        "action": 'action',
        "floorplan_id": 'floorplan_id',
        "height": 'height',
        "map_id": 'map_id',
        "orientation": 'orientation',
        "reason": 'reason'
    }

    _optionals = [
        'action',
        'floorplan_id',
        'height',
        'map_id',
        'orientation',
        'reason',
    ]

    def __init__(self,
                 mac=None,
                 action=APIHelper.SKIP,
                 floorplan_id=APIHelper.SKIP,
                 height=APIHelper.SKIP,
                 map_id=APIHelper.SKIP,
                 orientation=APIHelper.SKIP,
                 reason=APIHelper.SKIP):
        """Constructor for the Aps3 class"""

        # Initialize members of the class
        if action is not APIHelper.SKIP:
            self.action = action 
        if floorplan_id is not APIHelper.SKIP:
            self.floorplan_id = floorplan_id 
        if height is not APIHelper.SKIP:
            self.height = height 
        self.mac = mac 
        if map_id is not APIHelper.SKIP:
            self.map_id = map_id 
        if orientation is not APIHelper.SKIP:
            self.orientation = orientation 
        if reason is not APIHelper.SKIP:
            self.reason = reason 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        mac = dictionary.get("mac") if dictionary.get("mac") else None
        action = dictionary.get("action") if dictionary.get("action") else APIHelper.SKIP
        floorplan_id = dictionary.get("floorplan_id") if dictionary.get("floorplan_id") else APIHelper.SKIP
        height = dictionary.get("height") if dictionary.get("height") else APIHelper.SKIP
        map_id = dictionary.get("map_id") if dictionary.get("map_id") else APIHelper.SKIP
        orientation = dictionary.get("orientation") if dictionary.get("orientation") else APIHelper.SKIP
        reason = dictionary.get("reason") if dictionary.get("reason") else APIHelper.SKIP
        # Return an object of this model
        return cls(mac,
                   action,
                   floorplan_id,
                   height,
                   map_id,
                   orientation,
                   reason)
