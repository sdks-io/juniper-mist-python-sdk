# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Mgmt(object):

    """Implementation of the 'Mgmt' model.

    management-related properties

    Attributes:
        mxtunnel_ids (list of uuid|string): list of Mist Tunnels
        use_mxtunnel (bool): whether to use Mist Tunnel for mgmt connectivity,
            this takes precedence over use_wxtunnel
        use_wxtunnel (bool): whether to use wxtunnel for mgmt connectivity

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mxtunnel_ids": 'mxtunnel_ids',
        "use_mxtunnel": 'use_mxtunnel',
        "use_wxtunnel": 'use_wxtunnel'
    }

    _optionals = [
        'mxtunnel_ids',
        'use_mxtunnel',
        'use_wxtunnel',
    ]

    def __init__(self,
                 mxtunnel_ids=APIHelper.SKIP,
                 use_mxtunnel=False,
                 use_wxtunnel=False):
        """Constructor for the Mgmt class"""

        # Initialize members of the class
        if mxtunnel_ids is not APIHelper.SKIP:
            self.mxtunnel_ids = mxtunnel_ids 
        self.use_mxtunnel = use_mxtunnel 
        self.use_wxtunnel = use_wxtunnel 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        mxtunnel_ids = dictionary.get("mxtunnel_ids") if dictionary.get("mxtunnel_ids") else APIHelper.SKIP
        use_mxtunnel = dictionary.get("use_mxtunnel") if dictionary.get("use_mxtunnel") else False
        use_wxtunnel = dictionary.get("use_wxtunnel") if dictionary.get("use_wxtunnel") else False
        # Return an object of this model
        return cls(mxtunnel_ids,
                   use_mxtunnel,
                   use_wxtunnel)
