# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class JunosNetworks1(object):

    """Implementation of the 'junos_networks1' model.

    A network represents a network segment. It can either represent a VLAN
    (then usually ties to a L3 subnet), optionally associate it with a subnet
    which can later be used to create addition routes. Used for ports doing
    `family ethernet-switching`. It can also be a pure L3-subnet that can then
    be used against a port that with `family inet`.

    Attributes:
        dns (list of string): TODO: type description here.
        dns_suffix (list of string): TODO: type description here.
        gateway (string): TODO: type description here.
        ospf_interface_type (string): TODO: type description here.
        subnet (string): optional for pure switching, required when L3 /
            routing features are used
        vlan_id (int): TODO: type description here.
        zone (string): used for gateway

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "vlan_id": 'vlan_id',
        "dns": 'dns',
        "dns_suffix": 'dns_suffix',
        "gateway": 'gateway',
        "ospf_interface_type": 'ospf_interface_type',
        "subnet": 'subnet',
        "zone": 'zone'
    }

    _optionals = [
        'dns',
        'dns_suffix',
        'gateway',
        'ospf_interface_type',
        'subnet',
        'zone',
    ]

    def __init__(self,
                 vlan_id=None,
                 dns=APIHelper.SKIP,
                 dns_suffix=APIHelper.SKIP,
                 gateway=APIHelper.SKIP,
                 ospf_interface_type=APIHelper.SKIP,
                 subnet=APIHelper.SKIP,
                 zone=APIHelper.SKIP):
        """Constructor for the JunosNetworks1 class"""

        # Initialize members of the class
        if dns is not APIHelper.SKIP:
            self.dns = dns 
        if dns_suffix is not APIHelper.SKIP:
            self.dns_suffix = dns_suffix 
        if gateway is not APIHelper.SKIP:
            self.gateway = gateway 
        if ospf_interface_type is not APIHelper.SKIP:
            self.ospf_interface_type = ospf_interface_type 
        if subnet is not APIHelper.SKIP:
            self.subnet = subnet 
        self.vlan_id = vlan_id 
        if zone is not APIHelper.SKIP:
            self.zone = zone 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        vlan_id = dictionary.get("vlan_id") if dictionary.get("vlan_id") else None
        dns = dictionary.get("dns") if dictionary.get("dns") else APIHelper.SKIP
        dns_suffix = dictionary.get("dns_suffix") if dictionary.get("dns_suffix") else APIHelper.SKIP
        gateway = dictionary.get("gateway") if dictionary.get("gateway") else APIHelper.SKIP
        ospf_interface_type = dictionary.get("ospf_interface_type") if dictionary.get("ospf_interface_type") else APIHelper.SKIP
        subnet = dictionary.get("subnet") if dictionary.get("subnet") else APIHelper.SKIP
        zone = dictionary.get("zone") if dictionary.get("zone") else APIHelper.SKIP
        # Return an object of this model
        return cls(vlan_id,
                   dns,
                   dns_suffix,
                   gateway,
                   ospf_interface_type,
                   subnet,
                   zone)
