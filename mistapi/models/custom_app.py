# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class CustomApp(object):

    """Implementation of the 'CustomApp' model.

    TODO: type model description here.

    Attributes:
        app_type (string): TODO: type description here.
        hostname (list of string): TODO: type description here.
        name (string): TODO: type description here.
        protocol (Protocol5Enum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "app_type": 'app_type',
        "hostname": 'hostname',
        "name": 'name',
        "protocol": 'protocol'
    }

    _optionals = [
        'app_type',
        'hostname',
        'name',
        'protocol',
    ]

    def __init__(self,
                 app_type=APIHelper.SKIP,
                 hostname=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 protocol='http'):
        """Constructor for the CustomApp class"""

        # Initialize members of the class
        if app_type is not APIHelper.SKIP:
            self.app_type = app_type 
        if hostname is not APIHelper.SKIP:
            self.hostname = hostname 
        if name is not APIHelper.SKIP:
            self.name = name 
        self.protocol = protocol 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        app_type = dictionary.get("app_type") if dictionary.get("app_type") else APIHelper.SKIP
        hostname = dictionary.get("hostname") if dictionary.get("hostname") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        protocol = dictionary.get("protocol") if dictionary.get("protocol") else 'http'
        # Return an object of this model
        return cls(app_type,
                   hostname,
                   name,
                   protocol)
