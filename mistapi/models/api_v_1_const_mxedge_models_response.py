# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.generated_object import GeneratedObject


class ApiV1ConstMxedgeModelsResponse(object):

    """Implementation of the 'Api V1 Const Mxedge Models Response' model.

    TODO: type model description here.

    Attributes:
        custom_ports (bool): TODO: type description here.
        display (string): TODO: type description here.
        model (string): TODO: type description here.
        ports (dict): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "custom_ports": 'custom_ports',
        "display": 'display',
        "model": 'model',
        "ports": 'ports'
    }

    _optionals = [
        'custom_ports',
        'display',
        'model',
        'ports',
    ]

    def __init__(self,
                 custom_ports=APIHelper.SKIP,
                 display=APIHelper.SKIP,
                 model=APIHelper.SKIP,
                 ports=APIHelper.SKIP):
        """Constructor for the ApiV1ConstMxedgeModelsResponse class"""

        # Initialize members of the class
        if custom_ports is not APIHelper.SKIP:
            self.custom_ports = custom_ports 
        if display is not APIHelper.SKIP:
            self.display = display 
        if model is not APIHelper.SKIP:
            self.model = model 
        if ports is not APIHelper.SKIP:
            self.ports = ports 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        custom_ports = dictionary.get("custom_ports") if "custom_ports" in dictionary.keys() else APIHelper.SKIP
        display = dictionary.get("display") if dictionary.get("display") else APIHelper.SKIP
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        ports = GeneratedObject.from_dictionary(dictionary.get('ports')) if 'ports' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(custom_ports,
                   display,
                   model,
                   ports)
