# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class RouteExists(object):

    """Implementation of the 'RouteExists' model.

    TODO: type model description here.

    Attributes:
        route (string): TODO: type description here.
        vrf_name (string): name of the vrf instance it can also be the name of
            the VPN or wan if they

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "route": 'route',
        "vrf_name": 'vrf_name'
    }

    _optionals = [
        'route',
        'vrf_name',
    ]

    def __init__(self,
                 route=APIHelper.SKIP,
                 vrf_name='default'):
        """Constructor for the RouteExists class"""

        # Initialize members of the class
        if route is not APIHelper.SKIP:
            self.route = route 
        self.vrf_name = vrf_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        route = dictionary.get("route") if dictionary.get("route") else APIHelper.SKIP
        vrf_name = dictionary.get("vrf_name") if dictionary.get("vrf_name") else 'default'
        # Return an object of this model
        return cls(route,
                   vrf_name)
