# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.extra_routes_4 import ExtraRoutes4


class Ipsec(object):

    """Implementation of the 'Ipsec' model.

    TODO: type model description here.

    Attributes:
        dns_servers (list of string): TODO: type description here.
        dns_suffix (list of string): TODO: type description here.
        enabled (bool): TODO: type description here.
        extra_routes (list of ExtraRoutes4): TODO: type description here.
        split_tunnel (bool): TODO: type description here.
        use_mxedge (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "dns_servers": 'dns_servers',
        "dns_suffix": 'dns_suffix',
        "enabled": 'enabled',
        "extra_routes": 'extra_routes',
        "split_tunnel": 'split_tunnel',
        "use_mxedge": 'use_mxedge'
    }

    _optionals = [
        'dns_servers',
        'dns_suffix',
        'enabled',
        'extra_routes',
        'split_tunnel',
        'use_mxedge',
    ]

    _nullables = [
        'dns_servers',
    ]

    def __init__(self,
                 dns_servers=APIHelper.SKIP,
                 dns_suffix=APIHelper.SKIP,
                 enabled=APIHelper.SKIP,
                 extra_routes=APIHelper.SKIP,
                 split_tunnel=APIHelper.SKIP,
                 use_mxedge=APIHelper.SKIP):
        """Constructor for the Ipsec class"""

        # Initialize members of the class
        if dns_servers is not APIHelper.SKIP:
            self.dns_servers = dns_servers 
        if dns_suffix is not APIHelper.SKIP:
            self.dns_suffix = dns_suffix 
        if enabled is not APIHelper.SKIP:
            self.enabled = enabled 
        if extra_routes is not APIHelper.SKIP:
            self.extra_routes = extra_routes 
        if split_tunnel is not APIHelper.SKIP:
            self.split_tunnel = split_tunnel 
        if use_mxedge is not APIHelper.SKIP:
            self.use_mxedge = use_mxedge 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        dns_servers = dictionary.get("dns_servers") if "dns_servers" in dictionary.keys() else APIHelper.SKIP
        dns_suffix = dictionary.get("dns_suffix") if dictionary.get("dns_suffix") else APIHelper.SKIP
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else APIHelper.SKIP
        extra_routes = None
        if dictionary.get('extra_routes') is not None:
            extra_routes = [ExtraRoutes4.from_dictionary(x) for x in dictionary.get('extra_routes')]
        else:
            extra_routes = APIHelper.SKIP
        split_tunnel = dictionary.get("split_tunnel") if "split_tunnel" in dictionary.keys() else APIHelper.SKIP
        use_mxedge = dictionary.get("use_mxedge") if "use_mxedge" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(dns_servers,
                   dns_suffix,
                   enabled,
                   extra_routes,
                   split_tunnel,
                   use_mxedge)
