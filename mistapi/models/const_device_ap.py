# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.band_6 import Band6
from mistapi.models.extio import Extio
from mistapi.models.vble import Vble


class ConstDeviceAp(object):

    """Implementation of the 'const_device_ap' model.

    TODO: type model description here.

    Attributes:
        ap_type (string): TODO: type description here.
        band_24 (Band6): TODO: type description here.
        band_5 (Band6): TODO: type description here.
        band_6 (Band6): TODO: type description here.
        ce_dfs_ok (bool): TODO: type description here.
        cisco_pace (bool): TODO: type description here.
        description (string): TODO: type description here.
        disallowed_channels (dict): Property key is a list of country codes
            (e.g. "GB, DE")
        display (string): TODO: type description here.
        extio (dict): Property key is the GPIO port name (e.g. "D0", "A1")
        fcc_dfs_ok (bool): TODO: type description here.
        has_11_ax (bool): TODO: type description here.
        has_compass (bool): TODO: type description here.
        has_ext_ant (bool): TODO: type description here.
        has_extio (bool): TODO: type description here.
        has_height (bool): TODO: type description here.
        has_module_port (bool): TODO: type description here.
        has_poe_out (bool): TODO: type description here.
        has_scanning_radio (bool): TODO: type description here.
        has_selectable_radio (bool): TODO: type description here.
        has_usb (bool): TODO: type description here.
        has_vble (bool): TODO: type description here.
        has_wifi_band_24 (bool): TODO: type description here.
        has_wifi_band_5 (bool): TODO: type description here.
        has_wifi_band_6 (bool): TODO: type description here.
        max_poe_out (int): TODO: type description here.
        max_wlans (int): TODO: type description here.
        model (string): TODO: type description here.
        other_dfs_ok (bool): TODO: type description here.
        outdoor (bool): TODO: type description here.
        radios (dict): Property key is the radio number (e.g. r0, r1, ...).
            Property value is the RF band (e.g. "24", "5", ...)
        shared_scanning_radio (bool): TODO: type description here.
        mtype (Type8Enum): TODO: type description here.
        unmanaged (bool): TODO: type description here.
        vble (Vble): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ap_type": 'ap_type',
        "band_24": 'band24',
        "band_5": 'band5',
        "band_6": 'band6',
        "ce_dfs_ok": 'ce_dfs_ok',
        "cisco_pace": 'cisco_pace',
        "description": 'description',
        "disallowed_channels": 'disallowed_channels',
        "display": 'display',
        "extio": 'extio',
        "fcc_dfs_ok": 'fcc_dfs_ok',
        "has_11_ax": 'has_11ax',
        "has_compass": 'has_compass',
        "has_ext_ant": 'has_ext_ant',
        "has_extio": 'has_extio',
        "has_height": 'has_height',
        "has_module_port": 'has_module_port',
        "has_poe_out": 'has_poe_out',
        "has_scanning_radio": 'has_scanning_radio',
        "has_selectable_radio": 'has_selectable_radio',
        "has_usb": 'has_usb',
        "has_vble": 'has_vble',
        "has_wifi_band_24": 'has_wifi_band24',
        "has_wifi_band_5": 'has_wifi_band5',
        "has_wifi_band_6": 'has_wifi_band6',
        "max_poe_out": 'max_poe_out',
        "max_wlans": 'max_wlans',
        "model": 'model',
        "other_dfs_ok": 'other_dfs_ok',
        "outdoor": 'outdoor',
        "radios": 'radios',
        "shared_scanning_radio": 'shared_scanning_radio',
        "mtype": 'type',
        "unmanaged": 'unmanaged',
        "vble": 'vble'
    }

    _optionals = [
        'ap_type',
        'band_24',
        'band_5',
        'band_6',
        'ce_dfs_ok',
        'cisco_pace',
        'description',
        'disallowed_channels',
        'display',
        'extio',
        'fcc_dfs_ok',
        'has_11_ax',
        'has_compass',
        'has_ext_ant',
        'has_extio',
        'has_height',
        'has_module_port',
        'has_poe_out',
        'has_scanning_radio',
        'has_selectable_radio',
        'has_usb',
        'has_vble',
        'has_wifi_band_24',
        'has_wifi_band_5',
        'has_wifi_band_6',
        'max_poe_out',
        'max_wlans',
        'model',
        'other_dfs_ok',
        'outdoor',
        'radios',
        'shared_scanning_radio',
        'mtype',
        'unmanaged',
        'vble',
    ]

    def __init__(self,
                 ap_type=APIHelper.SKIP,
                 band_24=APIHelper.SKIP,
                 band_5=APIHelper.SKIP,
                 band_6=APIHelper.SKIP,
                 ce_dfs_ok=APIHelper.SKIP,
                 cisco_pace=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 disallowed_channels=APIHelper.SKIP,
                 display=APIHelper.SKIP,
                 extio=APIHelper.SKIP,
                 fcc_dfs_ok=APIHelper.SKIP,
                 has_11_ax=APIHelper.SKIP,
                 has_compass=APIHelper.SKIP,
                 has_ext_ant=APIHelper.SKIP,
                 has_extio=APIHelper.SKIP,
                 has_height=APIHelper.SKIP,
                 has_module_port=APIHelper.SKIP,
                 has_poe_out=APIHelper.SKIP,
                 has_scanning_radio=APIHelper.SKIP,
                 has_selectable_radio=APIHelper.SKIP,
                 has_usb=APIHelper.SKIP,
                 has_vble=APIHelper.SKIP,
                 has_wifi_band_24=APIHelper.SKIP,
                 has_wifi_band_5=APIHelper.SKIP,
                 has_wifi_band_6=APIHelper.SKIP,
                 max_poe_out=APIHelper.SKIP,
                 max_wlans=APIHelper.SKIP,
                 model=APIHelper.SKIP,
                 other_dfs_ok=APIHelper.SKIP,
                 outdoor=APIHelper.SKIP,
                 radios=APIHelper.SKIP,
                 shared_scanning_radio=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 unmanaged=APIHelper.SKIP,
                 vble=APIHelper.SKIP):
        """Constructor for the ConstDeviceAp class"""

        # Initialize members of the class
        if ap_type is not APIHelper.SKIP:
            self.ap_type = ap_type 
        if band_24 is not APIHelper.SKIP:
            self.band_24 = band_24 
        if band_5 is not APIHelper.SKIP:
            self.band_5 = band_5 
        if band_6 is not APIHelper.SKIP:
            self.band_6 = band_6 
        if ce_dfs_ok is not APIHelper.SKIP:
            self.ce_dfs_ok = ce_dfs_ok 
        if cisco_pace is not APIHelper.SKIP:
            self.cisco_pace = cisco_pace 
        if description is not APIHelper.SKIP:
            self.description = description 
        if disallowed_channels is not APIHelper.SKIP:
            self.disallowed_channels = disallowed_channels 
        if display is not APIHelper.SKIP:
            self.display = display 
        if extio is not APIHelper.SKIP:
            self.extio = extio 
        if fcc_dfs_ok is not APIHelper.SKIP:
            self.fcc_dfs_ok = fcc_dfs_ok 
        if has_11_ax is not APIHelper.SKIP:
            self.has_11_ax = has_11_ax 
        if has_compass is not APIHelper.SKIP:
            self.has_compass = has_compass 
        if has_ext_ant is not APIHelper.SKIP:
            self.has_ext_ant = has_ext_ant 
        if has_extio is not APIHelper.SKIP:
            self.has_extio = has_extio 
        if has_height is not APIHelper.SKIP:
            self.has_height = has_height 
        if has_module_port is not APIHelper.SKIP:
            self.has_module_port = has_module_port 
        if has_poe_out is not APIHelper.SKIP:
            self.has_poe_out = has_poe_out 
        if has_scanning_radio is not APIHelper.SKIP:
            self.has_scanning_radio = has_scanning_radio 
        if has_selectable_radio is not APIHelper.SKIP:
            self.has_selectable_radio = has_selectable_radio 
        if has_usb is not APIHelper.SKIP:
            self.has_usb = has_usb 
        if has_vble is not APIHelper.SKIP:
            self.has_vble = has_vble 
        if has_wifi_band_24 is not APIHelper.SKIP:
            self.has_wifi_band_24 = has_wifi_band_24 
        if has_wifi_band_5 is not APIHelper.SKIP:
            self.has_wifi_band_5 = has_wifi_band_5 
        if has_wifi_band_6 is not APIHelper.SKIP:
            self.has_wifi_band_6 = has_wifi_band_6 
        if max_poe_out is not APIHelper.SKIP:
            self.max_poe_out = max_poe_out 
        if max_wlans is not APIHelper.SKIP:
            self.max_wlans = max_wlans 
        if model is not APIHelper.SKIP:
            self.model = model 
        if other_dfs_ok is not APIHelper.SKIP:
            self.other_dfs_ok = other_dfs_ok 
        if outdoor is not APIHelper.SKIP:
            self.outdoor = outdoor 
        if radios is not APIHelper.SKIP:
            self.radios = radios 
        if shared_scanning_radio is not APIHelper.SKIP:
            self.shared_scanning_radio = shared_scanning_radio 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if unmanaged is not APIHelper.SKIP:
            self.unmanaged = unmanaged 
        if vble is not APIHelper.SKIP:
            self.vble = vble 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ap_type = dictionary.get("ap_type") if dictionary.get("ap_type") else APIHelper.SKIP
        band_24 = Band6.from_dictionary(dictionary.get('band24')) if 'band24' in dictionary.keys() else APIHelper.SKIP
        band_5 = Band6.from_dictionary(dictionary.get('band5')) if 'band5' in dictionary.keys() else APIHelper.SKIP
        band_6 = Band6.from_dictionary(dictionary.get('band6')) if 'band6' in dictionary.keys() else APIHelper.SKIP
        ce_dfs_ok = dictionary.get("ce_dfs_ok") if "ce_dfs_ok" in dictionary.keys() else APIHelper.SKIP
        cisco_pace = dictionary.get("cisco_pace") if "cisco_pace" in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        disallowed_channels = dictionary.get("disallowed_channels") if dictionary.get("disallowed_channels") else APIHelper.SKIP
        display = dictionary.get("display") if dictionary.get("display") else APIHelper.SKIP
        extio = Extio.from_dictionary(dictionary.get('extio')) if 'extio' in dictionary.keys() else APIHelper.SKIP
        fcc_dfs_ok = dictionary.get("fcc_dfs_ok") if "fcc_dfs_ok" in dictionary.keys() else APIHelper.SKIP
        has_11_ax = dictionary.get("has_11ax") if "has_11ax" in dictionary.keys() else APIHelper.SKIP
        has_compass = dictionary.get("has_compass") if "has_compass" in dictionary.keys() else APIHelper.SKIP
        has_ext_ant = dictionary.get("has_ext_ant") if "has_ext_ant" in dictionary.keys() else APIHelper.SKIP
        has_extio = dictionary.get("has_extio") if "has_extio" in dictionary.keys() else APIHelper.SKIP
        has_height = dictionary.get("has_height") if "has_height" in dictionary.keys() else APIHelper.SKIP
        has_module_port = dictionary.get("has_module_port") if "has_module_port" in dictionary.keys() else APIHelper.SKIP
        has_poe_out = dictionary.get("has_poe_out") if "has_poe_out" in dictionary.keys() else APIHelper.SKIP
        has_scanning_radio = dictionary.get("has_scanning_radio") if "has_scanning_radio" in dictionary.keys() else APIHelper.SKIP
        has_selectable_radio = dictionary.get("has_selectable_radio") if "has_selectable_radio" in dictionary.keys() else APIHelper.SKIP
        has_usb = dictionary.get("has_usb") if "has_usb" in dictionary.keys() else APIHelper.SKIP
        has_vble = dictionary.get("has_vble") if "has_vble" in dictionary.keys() else APIHelper.SKIP
        has_wifi_band_24 = dictionary.get("has_wifi_band24") if "has_wifi_band24" in dictionary.keys() else APIHelper.SKIP
        has_wifi_band_5 = dictionary.get("has_wifi_band5") if "has_wifi_band5" in dictionary.keys() else APIHelper.SKIP
        has_wifi_band_6 = dictionary.get("has_wifi_band6") if "has_wifi_band6" in dictionary.keys() else APIHelper.SKIP
        max_poe_out = dictionary.get("max_poe_out") if dictionary.get("max_poe_out") else APIHelper.SKIP
        max_wlans = dictionary.get("max_wlans") if dictionary.get("max_wlans") else APIHelper.SKIP
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        other_dfs_ok = dictionary.get("other_dfs_ok") if "other_dfs_ok" in dictionary.keys() else APIHelper.SKIP
        outdoor = dictionary.get("outdoor") if "outdoor" in dictionary.keys() else APIHelper.SKIP
        radios = dictionary.get("radios") if dictionary.get("radios") else APIHelper.SKIP
        shared_scanning_radio = dictionary.get("shared_scanning_radio") if "shared_scanning_radio" in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        unmanaged = dictionary.get("unmanaged") if "unmanaged" in dictionary.keys() else APIHelper.SKIP
        vble = Vble.from_dictionary(dictionary.get('vble')) if 'vble' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(ap_type,
                   band_24,
                   band_5,
                   band_6,
                   ce_dfs_ok,
                   cisco_pace,
                   description,
                   disallowed_channels,
                   display,
                   extio,
                   fcc_dfs_ok,
                   has_11_ax,
                   has_compass,
                   has_ext_ant,
                   has_extio,
                   has_height,
                   has_module_port,
                   has_poe_out,
                   has_scanning_radio,
                   has_selectable_radio,
                   has_usb,
                   has_vble,
                   has_wifi_band_24,
                   has_wifi_band_5,
                   has_wifi_band_6,
                   max_poe_out,
                   max_wlans,
                   model,
                   other_dfs_ok,
                   outdoor,
                   radios,
                   shared_scanning_radio,
                   mtype,
                   unmanaged,
                   vble)
