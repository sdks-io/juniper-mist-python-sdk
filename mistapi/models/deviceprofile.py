# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.ap_aeroscout import ApAeroscout
from mistapi.models.ap_ble import ApBle
from mistapi.models.ap_iot import ApIot
from mistapi.models.ap_ip import ApIp
from mistapi.models.ap_led import ApLed
from mistapi.models.ap_mesh import ApMesh
from mistapi.models.ap_radio import ApRadio
from mistapi.models.ap_switch import ApSwitch
from mistapi.models.ap_usb import ApUsb
from mistapi.models.dhcpd_config import DhcpdConfig
from mistapi.models.extra_routes_2 import ExtraRoutes2
from mistapi.models.gatewaytemplate_tunnel_configs import GatewaytemplateTunnelConfigs
from mistapi.models.idp_profiles import IdpProfiles
from mistapi.models.ip_configs import IpConfigs
from mistapi.models.junos_bgp_config import JunosBgpConfig
from mistapi.models.junos_oob_ip_config import JunosOobIpConfig
from mistapi.models.junos_routing_policy import JunosRoutingPolicy
from mistapi.models.network import Network
from mistapi.models.path_preferences import PathPreferences
from mistapi.models.port_config import PortConfig
from mistapi.models.pwr_config_1 import PwrConfig1
from mistapi.models.service_policy_2 import ServicePolicy2
from mistapi.models.template_gateway_matching import TemplateGatewayMatching


class Deviceprofile(object):

    """Implementation of the 'deviceprofile' model.

    TODO: type model description here.

    Attributes:
        aeroscout (ApAeroscout): Aeroscout AP settings
        ble_config (ApBle): BLE AP settings
        created_time (float): TODO: type description here.
        disable_eth_1 (bool): whether to disable eth1 port
        disable_eth_2 (bool): whether to disable eth2 port
        disable_eth_3 (bool): whether to disable eth3 port
        disable_module (bool): whether to disable module port
        for_site (bool): TODO: type description here.
        height (float): Device Only. Height, in meters, optional
        id (uuid|string): TODO: type description here.
        iot_config (ApIot): IoT AP settings
        ip_config (ApIp): IP AP settings
        led (ApLed): LED AP settings
        map_id (uuid|string): Device Only.. Map where the device belongs to
        mesh (ApMesh): Mesh AP settings
        modified_time (float): TODO: type description here.
        name (string): TODO: type description here.
        notes (string): Device Only. Any notes about this AP
        ntp_servers (list of string): TODO: type description here.
        org_id (uuid|string): TODO: type description here.
        orientation (float): Device Only. Orientation, 0-359, in degrees, up
            is 0, right is 90.
        orientation_overwrite (bool): whether the user overwrite the
            orientation
        poe_passthrough (bool): whether to enable power out through module
            port (for APH) or eth1 (for APL/BT11)
        port_config (PortConfig): The property key is the interface(s) name
            (e.g. "eth1,eth2")
        pwr_config (PwrConfig1): power related configs
        radio_config (ApRadio): Radio AP settings
        site_id (uuid|string): TODO: type description here.
        switch_config (ApSwitch): for people who want to fully control the
            vlans (advanced)
        mtype (Type16Enum): TODO: type description here.
        usb_config (ApUsb): USB AP settings Note: if native imagotag is
            enabled, BLE will be disabled automatically Note: legacy, new
            config moved to ESL Config.
        vars (object): a dictionary of name->value, the vars can then be used
            in Wlans. This can overwrite those from Site Vars
        x (float): Device Only. x in pixel
        y (float): Device Only. y in pixel
        additional_config_cmds (list of string): TODO: type description here.
        bgp_config (dict): TODO: type description here.
        dhcpd_config (dict): The property key is the network name
        extra_routes (dict): TODO: type description here.
        gateway_matching (TemplateGatewayMatching): Gateway matching
        idp_profiles (IdpProfiles): Property key is the profile name
        ip_configs (dict): The property key is the network name
        networks (dict): The property key is the network name
        oob_ip_config (JunosOobIpConfig): Junos out-of-band (vme/em0/fxp0) IP
            config
        path_preferences (dict): experimental
        routing_policies (dict): The property key is the routing policy name
        service_policies (list of ServicePolicy2): TODO: type description
            here.
        tunnel_configs (dict): Property key is the tunnel name

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "aeroscout": 'aeroscout',
        "ble_config": 'ble_config',
        "created_time": 'created_time',
        "disable_eth_1": 'disable_eth1',
        "disable_eth_2": 'disable_eth2',
        "disable_eth_3": 'disable_eth3',
        "disable_module": 'disable_module',
        "for_site": 'for_site',
        "height": 'height',
        "id": 'id',
        "iot_config": 'iot_config',
        "ip_config": 'ip_config',
        "led": 'led',
        "map_id": 'map_id',
        "mesh": 'mesh',
        "modified_time": 'modified_time',
        "name": 'name',
        "notes": 'notes',
        "ntp_servers": 'ntp_servers',
        "org_id": 'org_id',
        "orientation": 'orientation',
        "orientation_overwrite": 'orientation_overwrite',
        "poe_passthrough": 'poe_passthrough',
        "port_config": 'port_config',
        "pwr_config": 'pwr_config',
        "radio_config": 'radio_config',
        "site_id": 'site_id',
        "switch_config": 'switch_config',
        "mtype": 'type',
        "usb_config": 'usb_config',
        "vars": 'vars',
        "x": 'x',
        "y": 'y',
        "additional_config_cmds": 'additional_config_cmds',
        "bgp_config": 'bgp_config',
        "dhcpd_config": 'dhcpd_config',
        "extra_routes": 'extra_routes',
        "gateway_matching": 'gateway_matching',
        "idp_profiles": 'idp_profiles',
        "ip_configs": 'ip_configs',
        "networks": 'networks',
        "oob_ip_config": 'oob_ip_config',
        "path_preferences": 'path_preferences',
        "routing_policies": 'routing_policies',
        "service_policies": 'service_policies',
        "tunnel_configs": 'tunnel_configs'
    }

    _optionals = [
        'aeroscout',
        'ble_config',
        'created_time',
        'disable_eth_1',
        'disable_eth_2',
        'disable_eth_3',
        'disable_module',
        'for_site',
        'height',
        'id',
        'iot_config',
        'ip_config',
        'led',
        'map_id',
        'mesh',
        'modified_time',
        'name',
        'notes',
        'ntp_servers',
        'org_id',
        'orientation',
        'orientation_overwrite',
        'poe_passthrough',
        'port_config',
        'pwr_config',
        'radio_config',
        'site_id',
        'switch_config',
        'mtype',
        'usb_config',
        'vars',
        'x',
        'y',
        'additional_config_cmds',
        'bgp_config',
        'dhcpd_config',
        'extra_routes',
        'gateway_matching',
        'idp_profiles',
        'ip_configs',
        'networks',
        'oob_ip_config',
        'path_preferences',
        'routing_policies',
        'service_policies',
        'tunnel_configs',
    ]

    _nullables = [
        'height',
        'map_id',
        'name',
        'notes',
        'x',
        'y',
    ]

    def __init__(self,
                 aeroscout=APIHelper.SKIP,
                 ble_config=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 disable_eth_1=False,
                 disable_eth_2=False,
                 disable_eth_3=False,
                 disable_module=False,
                 for_site=APIHelper.SKIP,
                 height=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 iot_config=APIHelper.SKIP,
                 ip_config=APIHelper.SKIP,
                 led=APIHelper.SKIP,
                 map_id=APIHelper.SKIP,
                 mesh=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 notes=APIHelper.SKIP,
                 ntp_servers=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 orientation=APIHelper.SKIP,
                 orientation_overwrite=APIHelper.SKIP,
                 poe_passthrough=False,
                 port_config=APIHelper.SKIP,
                 pwr_config=APIHelper.SKIP,
                 radio_config=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 switch_config=APIHelper.SKIP,
                 mtype='ap',
                 usb_config=APIHelper.SKIP,
                 vars=APIHelper.SKIP,
                 x=APIHelper.SKIP,
                 y=APIHelper.SKIP,
                 additional_config_cmds=APIHelper.SKIP,
                 bgp_config=APIHelper.SKIP,
                 dhcpd_config=APIHelper.SKIP,
                 extra_routes=APIHelper.SKIP,
                 gateway_matching=APIHelper.SKIP,
                 idp_profiles=APIHelper.SKIP,
                 ip_configs=APIHelper.SKIP,
                 networks=APIHelper.SKIP,
                 oob_ip_config=APIHelper.SKIP,
                 path_preferences=APIHelper.SKIP,
                 routing_policies=APIHelper.SKIP,
                 service_policies=APIHelper.SKIP,
                 tunnel_configs=APIHelper.SKIP):
        """Constructor for the Deviceprofile class"""

        # Initialize members of the class
        if aeroscout is not APIHelper.SKIP:
            self.aeroscout = aeroscout 
        if ble_config is not APIHelper.SKIP:
            self.ble_config = ble_config 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        self.disable_eth_1 = disable_eth_1 
        self.disable_eth_2 = disable_eth_2 
        self.disable_eth_3 = disable_eth_3 
        self.disable_module = disable_module 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        if height is not APIHelper.SKIP:
            self.height = height 
        if id is not APIHelper.SKIP:
            self.id = id 
        if iot_config is not APIHelper.SKIP:
            self.iot_config = iot_config 
        if ip_config is not APIHelper.SKIP:
            self.ip_config = ip_config 
        if led is not APIHelper.SKIP:
            self.led = led 
        if map_id is not APIHelper.SKIP:
            self.map_id = map_id 
        if mesh is not APIHelper.SKIP:
            self.mesh = mesh 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        if name is not APIHelper.SKIP:
            self.name = name 
        if notes is not APIHelper.SKIP:
            self.notes = notes 
        if ntp_servers is not APIHelper.SKIP:
            self.ntp_servers = ntp_servers 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if orientation is not APIHelper.SKIP:
            self.orientation = orientation 
        if orientation_overwrite is not APIHelper.SKIP:
            self.orientation_overwrite = orientation_overwrite 
        self.poe_passthrough = poe_passthrough 
        if port_config is not APIHelper.SKIP:
            self.port_config = port_config 
        if pwr_config is not APIHelper.SKIP:
            self.pwr_config = pwr_config 
        if radio_config is not APIHelper.SKIP:
            self.radio_config = radio_config 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if switch_config is not APIHelper.SKIP:
            self.switch_config = switch_config 
        self.mtype = mtype 
        if usb_config is not APIHelper.SKIP:
            self.usb_config = usb_config 
        if vars is not APIHelper.SKIP:
            self.vars = vars 
        if x is not APIHelper.SKIP:
            self.x = x 
        if y is not APIHelper.SKIP:
            self.y = y 
        if additional_config_cmds is not APIHelper.SKIP:
            self.additional_config_cmds = additional_config_cmds 
        if bgp_config is not APIHelper.SKIP:
            self.bgp_config = bgp_config 
        if dhcpd_config is not APIHelper.SKIP:
            self.dhcpd_config = dhcpd_config 
        if extra_routes is not APIHelper.SKIP:
            self.extra_routes = extra_routes 
        if gateway_matching is not APIHelper.SKIP:
            self.gateway_matching = gateway_matching 
        if idp_profiles is not APIHelper.SKIP:
            self.idp_profiles = idp_profiles 
        if ip_configs is not APIHelper.SKIP:
            self.ip_configs = ip_configs 
        if networks is not APIHelper.SKIP:
            self.networks = networks 
        if oob_ip_config is not APIHelper.SKIP:
            self.oob_ip_config = oob_ip_config 
        if path_preferences is not APIHelper.SKIP:
            self.path_preferences = path_preferences 
        if routing_policies is not APIHelper.SKIP:
            self.routing_policies = routing_policies 
        if service_policies is not APIHelper.SKIP:
            self.service_policies = service_policies 
        if tunnel_configs is not APIHelper.SKIP:
            self.tunnel_configs = tunnel_configs 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        aeroscout = ApAeroscout.from_dictionary(dictionary.get('aeroscout')) if 'aeroscout' in dictionary.keys() else APIHelper.SKIP
        ble_config = ApBle.from_dictionary(dictionary.get('ble_config')) if 'ble_config' in dictionary.keys() else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        disable_eth_1 = dictionary.get("disable_eth1") if dictionary.get("disable_eth1") else False
        disable_eth_2 = dictionary.get("disable_eth2") if dictionary.get("disable_eth2") else False
        disable_eth_3 = dictionary.get("disable_eth3") if dictionary.get("disable_eth3") else False
        disable_module = dictionary.get("disable_module") if dictionary.get("disable_module") else False
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        height = dictionary.get("height") if "height" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        iot_config = ApIot.from_dictionary(dictionary.get('iot_config')) if 'iot_config' in dictionary.keys() else APIHelper.SKIP
        ip_config = ApIp.from_dictionary(dictionary.get('ip_config')) if 'ip_config' in dictionary.keys() else APIHelper.SKIP
        led = ApLed.from_dictionary(dictionary.get('led')) if 'led' in dictionary.keys() else APIHelper.SKIP
        map_id = dictionary.get("map_id") if "map_id" in dictionary.keys() else APIHelper.SKIP
        mesh = ApMesh.from_dictionary(dictionary.get('mesh')) if 'mesh' in dictionary.keys() else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        name = dictionary.get("name") if "name" in dictionary.keys() else APIHelper.SKIP
        notes = dictionary.get("notes") if "notes" in dictionary.keys() else APIHelper.SKIP
        ntp_servers = dictionary.get("ntp_servers") if dictionary.get("ntp_servers") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        orientation = dictionary.get("orientation") if dictionary.get("orientation") else APIHelper.SKIP
        orientation_overwrite = dictionary.get("orientation_overwrite") if "orientation_overwrite" in dictionary.keys() else APIHelper.SKIP
        poe_passthrough = dictionary.get("poe_passthrough") if dictionary.get("poe_passthrough") else False
        port_config = PortConfig.from_dictionary(dictionary.get('port_config')) if 'port_config' in dictionary.keys() else APIHelper.SKIP
        pwr_config = PwrConfig1.from_dictionary(dictionary.get('pwr_config')) if 'pwr_config' in dictionary.keys() else APIHelper.SKIP
        radio_config = ApRadio.from_dictionary(dictionary.get('radio_config')) if 'radio_config' in dictionary.keys() else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        switch_config = ApSwitch.from_dictionary(dictionary.get('switch_config')) if 'switch_config' in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else 'ap'
        usb_config = ApUsb.from_dictionary(dictionary.get('usb_config')) if 'usb_config' in dictionary.keys() else APIHelper.SKIP
        vars = dictionary.get("vars") if dictionary.get("vars") else APIHelper.SKIP
        x = dictionary.get("x") if "x" in dictionary.keys() else APIHelper.SKIP
        y = dictionary.get("y") if "y" in dictionary.keys() else APIHelper.SKIP
        additional_config_cmds = dictionary.get("additional_config_cmds") if dictionary.get("additional_config_cmds") else APIHelper.SKIP
        bgp_config = JunosBgpConfig.from_dictionary(dictionary.get('bgp_config')) if 'bgp_config' in dictionary.keys() else APIHelper.SKIP
        dhcpd_config = DhcpdConfig.from_dictionary(dictionary.get('dhcpd_config')) if 'dhcpd_config' in dictionary.keys() else APIHelper.SKIP
        extra_routes = ExtraRoutes2.from_dictionary(dictionary.get('extra_routes')) if 'extra_routes' in dictionary.keys() else APIHelper.SKIP
        gateway_matching = TemplateGatewayMatching.from_dictionary(dictionary.get('gateway_matching')) if 'gateway_matching' in dictionary.keys() else APIHelper.SKIP
        idp_profiles = IdpProfiles.from_dictionary(dictionary.get('idp_profiles')) if 'idp_profiles' in dictionary.keys() else APIHelper.SKIP
        ip_configs = IpConfigs.from_dictionary(dictionary.get('ip_configs')) if 'ip_configs' in dictionary.keys() else APIHelper.SKIP
        networks = Network.from_dictionary(dictionary.get('networks')) if 'networks' in dictionary.keys() else APIHelper.SKIP
        oob_ip_config = JunosOobIpConfig.from_dictionary(dictionary.get('oob_ip_config')) if 'oob_ip_config' in dictionary.keys() else APIHelper.SKIP
        path_preferences = PathPreferences.from_dictionary(dictionary.get('path_preferences')) if 'path_preferences' in dictionary.keys() else APIHelper.SKIP
        routing_policies = JunosRoutingPolicy.from_dictionary(dictionary.get('routing_policies')) if 'routing_policies' in dictionary.keys() else APIHelper.SKIP
        service_policies = None
        if dictionary.get('service_policies') is not None:
            service_policies = [ServicePolicy2.from_dictionary(x) for x in dictionary.get('service_policies')]
        else:
            service_policies = APIHelper.SKIP
        tunnel_configs = GatewaytemplateTunnelConfigs.from_dictionary(dictionary.get('tunnel_configs')) if 'tunnel_configs' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(aeroscout,
                   ble_config,
                   created_time,
                   disable_eth_1,
                   disable_eth_2,
                   disable_eth_3,
                   disable_module,
                   for_site,
                   height,
                   id,
                   iot_config,
                   ip_config,
                   led,
                   map_id,
                   mesh,
                   modified_time,
                   name,
                   notes,
                   ntp_servers,
                   org_id,
                   orientation,
                   orientation_overwrite,
                   poe_passthrough,
                   port_config,
                   pwr_config,
                   radio_config,
                   site_id,
                   switch_config,
                   mtype,
                   usb_config,
                   vars,
                   x,
                   y,
                   additional_config_cmds,
                   bgp_config,
                   dhcpd_config,
                   extra_routes,
                   gateway_matching,
                   idp_profiles,
                   ip_configs,
                   networks,
                   oob_ip_config,
                   path_preferences,
                   routing_policies,
                   service_policies,
                   tunnel_configs)
