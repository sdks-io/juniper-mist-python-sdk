# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.applies import Applies
from mistapi.models.exceptions import Exceptions


class Template(object):

    """Implementation of the 'template' model.

    Template

    Attributes:
        applies (Applies): where this template should be applied to, can be
            org_id, site_ids, sitegroup_ids
        created_time (float): TODO: type description here.
        deviceprofile_ids (list of uuid|string): list of Device Profile ids
        exceptions (Exceptions): where this template should not be applied to
            (takes precedence)
        filter_by_deviceprofile (bool): whether to further filter by Device
            Profile
        id (uuid|string): TODO: type description here.
        modified_time (float): TODO: type description here.
        name (string): TODO: type description here.
        org_id (uuid|string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "applies": 'applies',
        "created_time": 'created_time',
        "deviceprofile_ids": 'deviceprofile_ids',
        "exceptions": 'exceptions',
        "filter_by_deviceprofile": 'filter_by_deviceprofile',
        "id": 'id',
        "modified_time": 'modified_time',
        "org_id": 'org_id'
    }

    _optionals = [
        'applies',
        'created_time',
        'deviceprofile_ids',
        'exceptions',
        'filter_by_deviceprofile',
        'id',
        'modified_time',
        'org_id',
    ]

    def __init__(self,
                 name=None,
                 applies=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 deviceprofile_ids=APIHelper.SKIP,
                 exceptions=APIHelper.SKIP,
                 filter_by_deviceprofile=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 org_id=APIHelper.SKIP):
        """Constructor for the Template class"""

        # Initialize members of the class
        if applies is not APIHelper.SKIP:
            self.applies = applies 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if deviceprofile_ids is not APIHelper.SKIP:
            self.deviceprofile_ids = deviceprofile_ids 
        if exceptions is not APIHelper.SKIP:
            self.exceptions = exceptions 
        if filter_by_deviceprofile is not APIHelper.SKIP:
            self.filter_by_deviceprofile = filter_by_deviceprofile 
        if id is not APIHelper.SKIP:
            self.id = id 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        self.name = name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        applies = Applies.from_dictionary(dictionary.get('applies')) if 'applies' in dictionary.keys() else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        deviceprofile_ids = dictionary.get("deviceprofile_ids") if dictionary.get("deviceprofile_ids") else APIHelper.SKIP
        exceptions = Exceptions.from_dictionary(dictionary.get('exceptions')) if 'exceptions' in dictionary.keys() else APIHelper.SKIP
        filter_by_deviceprofile = dictionary.get("filter_by_deviceprofile") if "filter_by_deviceprofile" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   applies,
                   created_time,
                   deviceprofile_ids,
                   exceptions,
                   filter_by_deviceprofile,
                   id,
                   modified_time,
                   org_id)
