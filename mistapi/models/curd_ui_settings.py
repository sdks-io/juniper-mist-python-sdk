# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.default_time_range import DefaultTimeRange
from mistapi.models.tile import Tile


class CurdUiSettings(object):

    """Implementation of the 'curd_ui_settings' model.

    CURD UI Settings

    Attributes:
        created_time (float): TODO: type description here.
        default_scope_id (string): TODO: type description here.
        default_scope_type (string): TODO: type description here.
        default_time_range (DefaultTimeRange): TODO: type description here.
        description (string): TODO: type description here.
        for_site (bool): TODO: type description here.
        id (uuid|string): TODO: type description here.
        is_custom_databoard (bool): TODO: type description here.
        is_scope_linked (bool): TODO: type description here.
        is_time_range_linked (bool): TODO: type description here.
        modified_time (float): TODO: type description here.
        name (string): TODO: type description here.
        org_id (uuid|string): TODO: type description here.
        purpose (string): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        tiles (list of Tile): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "created_time": 'created_time',
        "description": 'description',
        "for_site": 'for_site',
        "id": 'id',
        "modified_time": 'modified_time',
        "org_id": 'org_id',
        "purpose": 'purpose',
        "site_id": 'site_id',
        "default_scope_id": 'defaultScopeId',
        "default_scope_type": 'defaultScopeType',
        "default_time_range": 'defaultTimeRange',
        "is_custom_databoard": 'isCustomDataboard',
        "is_scope_linked": 'isScopeLinked',
        "is_time_range_linked": 'isTimeRangeLinked',
        "name": 'name',
        "tiles": 'tiles'
    }

    _optionals = [
        'default_scope_id',
        'default_scope_type',
        'default_time_range',
        'is_custom_databoard',
        'is_scope_linked',
        'is_time_range_linked',
        'name',
        'tiles',
    ]

    def __init__(self,
                 created_time=None,
                 description=None,
                 for_site=None,
                 id=None,
                 modified_time=None,
                 org_id=None,
                 purpose=None,
                 site_id=None,
                 default_scope_id=APIHelper.SKIP,
                 default_scope_type=APIHelper.SKIP,
                 default_time_range=APIHelper.SKIP,
                 is_custom_databoard=APIHelper.SKIP,
                 is_scope_linked=APIHelper.SKIP,
                 is_time_range_linked=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 tiles=APIHelper.SKIP):
        """Constructor for the CurdUiSettings class"""

        # Initialize members of the class
        self.created_time = created_time 
        if default_scope_id is not APIHelper.SKIP:
            self.default_scope_id = default_scope_id 
        if default_scope_type is not APIHelper.SKIP:
            self.default_scope_type = default_scope_type 
        if default_time_range is not APIHelper.SKIP:
            self.default_time_range = default_time_range 
        self.description = description 
        self.for_site = for_site 
        self.id = id 
        if is_custom_databoard is not APIHelper.SKIP:
            self.is_custom_databoard = is_custom_databoard 
        if is_scope_linked is not APIHelper.SKIP:
            self.is_scope_linked = is_scope_linked 
        if is_time_range_linked is not APIHelper.SKIP:
            self.is_time_range_linked = is_time_range_linked 
        self.modified_time = modified_time 
        if name is not APIHelper.SKIP:
            self.name = name 
        self.org_id = org_id 
        self.purpose = purpose 
        self.site_id = site_id 
        if tiles is not APIHelper.SKIP:
            self.tiles = tiles 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        created_time = dictionary.get("created_time") if dictionary.get("created_time") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else None
        id = dictionary.get("id") if dictionary.get("id") else None
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else None
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else None
        purpose = dictionary.get("purpose") if dictionary.get("purpose") else None
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else None
        default_scope_id = dictionary.get("defaultScopeId") if dictionary.get("defaultScopeId") else APIHelper.SKIP
        default_scope_type = dictionary.get("defaultScopeType") if dictionary.get("defaultScopeType") else APIHelper.SKIP
        default_time_range = DefaultTimeRange.from_dictionary(dictionary.get('defaultTimeRange')) if 'defaultTimeRange' in dictionary.keys() else APIHelper.SKIP
        is_custom_databoard = dictionary.get("isCustomDataboard") if "isCustomDataboard" in dictionary.keys() else APIHelper.SKIP
        is_scope_linked = dictionary.get("isScopeLinked") if "isScopeLinked" in dictionary.keys() else APIHelper.SKIP
        is_time_range_linked = dictionary.get("isTimeRangeLinked") if "isTimeRangeLinked" in dictionary.keys() else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        tiles = None
        if dictionary.get('tiles') is not None:
            tiles = [Tile.from_dictionary(x) for x in dictionary.get('tiles')]
        else:
            tiles = APIHelper.SKIP
        # Return an object of this model
        return cls(created_time,
                   description,
                   for_site,
                   id,
                   modified_time,
                   org_id,
                   purpose,
                   site_id,
                   default_scope_id,
                   default_scope_type,
                   default_time_range,
                   is_custom_databoard,
                   is_scope_linked,
                   is_time_range_linked,
                   name,
                   tiles)
