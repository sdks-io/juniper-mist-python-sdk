# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ApiV1ConstTrafficTypesResponse(object):

    """Implementation of the 'Api V1 Const Traffic Types Response' model.

    TODO: type model description here.

    Attributes:
        dscp (float): TODO: type description here.
        failover_policy (string): TODO: type description here.
        name (string): TODO: type description here.
        traffic_class (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "dscp": 'dscp',
        "failover_policy": 'failover_policy',
        "name": 'name',
        "traffic_class": 'traffic_class'
    }

    def __init__(self,
                 dscp=None,
                 failover_policy=None,
                 name=None,
                 traffic_class=None):
        """Constructor for the ApiV1ConstTrafficTypesResponse class"""

        # Initialize members of the class
        self.dscp = dscp 
        self.failover_policy = failover_policy 
        self.name = name 
        self.traffic_class = traffic_class 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        dscp = dictionary.get("dscp") if dictionary.get("dscp") else None
        failover_policy = dictionary.get("failover_policy") if dictionary.get("failover_policy") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        traffic_class = dictionary.get("traffic_class") if dictionary.get("traffic_class") else None
        # Return an object of this model
        return cls(dscp,
                   failover_policy,
                   name,
                   traffic_class)
