# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.junos_storm_control import JunosStormControl


class JunosPortUsages(object):

    """Implementation of the 'junos_port_usages' model.

    Junos port usages

    Attributes:
        all_networks (bool): if `mode`==`trunk`, whether to trunk all
            network/vlans
        allow_dhcpd (bool): if DHCP snooping is enabled, whether DHCP server
            is allowed on the interfaces with. All the interfaces from port
            configs using this port usage are effected. Please notice that
            allow_dhcpd is a tri-state.  When it is not defined, it means
            using the systemâ€™s default setting which depends on whether the
            port is a access or trunk port.
        authentication_protocol (AuthenticationProtocol1Enum): can be set for
            non-mist-nac config when `enable_mac_auth`==`true`
        bypass_auth_when_server_down (bool): if `port_auth`==`dot1x`, whether
            to allow the device to connect if RADIUS server is down
        description (string): description
        disable_autoneg (bool): if speed and duplex are specified, whether to
            disable autonegotiation
        disabled (bool): whether the port is disabled
        duplex (Duplex2Enum): link connection mode, choices are auto
            (default), full, and half
        enable_mac_auth (bool): if `port_auth`==`dot1x`, whether to enable MAC
            Auth
        enable_qos (bool): TODO: type description here.
        guest_network (string): if `port_auth`==`dot1x`, which network to put
            the device into if the device cannot do dot1x. default is null
            (i.e. not allowed)
        mac_auth_only (bool): only effect once `enable_mac_auth`==`true`
        mac_limit (int): max number of mac addresses, default is 0 for
            unlimited, otherwise range is 1 or higher, with upper bound
            constrained by platform
        mode (Mode1Enum): access (default) / trunk
        mtu (int): media maximum transmission unit (MTU) is the largest data
            unit that can be forwarded without fragmentation. The default
            value is 1514.
        networks (list of string): if `mode`==`trunk`, the list of
            network/vlans
        persist_mac (bool): if `mode`==`access` and `port_auth`!=`dot1x`,
            whether the port should retain dynamically learned MAC addresses
        poe_disabled (bool): whether PoE capabilities are disabled for a port
        port_auth (string): if dot1x is desired, set to dot1x
        port_network (string): native network/vlan for untagged traffic
        rejected_network (bool): if `port_auth`==`dot1x`, when radius server
            reject / fails
        speed (string): speed, default is auto to automatically negotiate
            speed
        storm_control (JunosStormControl): Switch storm control
        stp_edge (bool): when enabled, the port is not expected to receive
            BPDU frames
        voip_network (string): network/vlan for voip traffic, must also set
            port_network. to authenticate device, set port_auth

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "all_networks": 'all_networks',
        "allow_dhcpd": 'allow_dhcpd',
        "authentication_protocol": 'authentication_protocol',
        "bypass_auth_when_server_down": 'bypass_auth_when_server_down',
        "description": 'description',
        "disable_autoneg": 'disable_autoneg',
        "disabled": 'disabled',
        "duplex": 'duplex',
        "enable_mac_auth": 'enable_mac_auth',
        "enable_qos": 'enable_qos',
        "guest_network": 'guest_network',
        "mac_auth_only": 'mac_auth_only',
        "mac_limit": 'mac_limit',
        "mode": 'mode',
        "mtu": 'mtu',
        "networks": 'networks',
        "persist_mac": 'persist_mac',
        "poe_disabled": 'poe_disabled',
        "port_auth": 'port_auth',
        "port_network": 'port_network',
        "rejected_network": 'rejected_network',
        "speed": 'speed',
        "storm_control": 'storm_control',
        "stp_edge": 'stp_edge',
        "voip_network": 'voip_network'
    }

    _optionals = [
        'all_networks',
        'allow_dhcpd',
        'authentication_protocol',
        'bypass_auth_when_server_down',
        'description',
        'disable_autoneg',
        'disabled',
        'duplex',
        'enable_mac_auth',
        'enable_qos',
        'guest_network',
        'mac_auth_only',
        'mac_limit',
        'mode',
        'mtu',
        'networks',
        'persist_mac',
        'poe_disabled',
        'port_auth',
        'port_network',
        'rejected_network',
        'speed',
        'storm_control',
        'stp_edge',
        'voip_network',
    ]

    def __init__(self,
                 all_networks=False,
                 allow_dhcpd=APIHelper.SKIP,
                 authentication_protocol='pap',
                 bypass_auth_when_server_down=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 disable_autoneg=False,
                 disabled=False,
                 duplex='auto',
                 enable_mac_auth=APIHelper.SKIP,
                 enable_qos=APIHelper.SKIP,
                 guest_network=APIHelper.SKIP,
                 mac_auth_only=APIHelper.SKIP,
                 mac_limit=0,
                 mode=APIHelper.SKIP,
                 mtu=APIHelper.SKIP,
                 networks=APIHelper.SKIP,
                 persist_mac=False,
                 poe_disabled=False,
                 port_auth=APIHelper.SKIP,
                 port_network=APIHelper.SKIP,
                 rejected_network=APIHelper.SKIP,
                 speed=APIHelper.SKIP,
                 storm_control=APIHelper.SKIP,
                 stp_edge=APIHelper.SKIP,
                 voip_network=APIHelper.SKIP):
        """Constructor for the JunosPortUsages class"""

        # Initialize members of the class
        self.all_networks = all_networks 
        if allow_dhcpd is not APIHelper.SKIP:
            self.allow_dhcpd = allow_dhcpd 
        self.authentication_protocol = authentication_protocol 
        if bypass_auth_when_server_down is not APIHelper.SKIP:
            self.bypass_auth_when_server_down = bypass_auth_when_server_down 
        if description is not APIHelper.SKIP:
            self.description = description 
        self.disable_autoneg = disable_autoneg 
        self.disabled = disabled 
        self.duplex = duplex 
        if enable_mac_auth is not APIHelper.SKIP:
            self.enable_mac_auth = enable_mac_auth 
        if enable_qos is not APIHelper.SKIP:
            self.enable_qos = enable_qos 
        if guest_network is not APIHelper.SKIP:
            self.guest_network = guest_network 
        if mac_auth_only is not APIHelper.SKIP:
            self.mac_auth_only = mac_auth_only 
        self.mac_limit = mac_limit 
        if mode is not APIHelper.SKIP:
            self.mode = mode 
        if mtu is not APIHelper.SKIP:
            self.mtu = mtu 
        if networks is not APIHelper.SKIP:
            self.networks = networks 
        self.persist_mac = persist_mac 
        self.poe_disabled = poe_disabled 
        if port_auth is not APIHelper.SKIP:
            self.port_auth = port_auth 
        if port_network is not APIHelper.SKIP:
            self.port_network = port_network 
        if rejected_network is not APIHelper.SKIP:
            self.rejected_network = rejected_network 
        if speed is not APIHelper.SKIP:
            self.speed = speed 
        if storm_control is not APIHelper.SKIP:
            self.storm_control = storm_control 
        if stp_edge is not APIHelper.SKIP:
            self.stp_edge = stp_edge 
        if voip_network is not APIHelper.SKIP:
            self.voip_network = voip_network 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        all_networks = dictionary.get("all_networks") if dictionary.get("all_networks") else False
        allow_dhcpd = dictionary.get("allow_dhcpd") if "allow_dhcpd" in dictionary.keys() else APIHelper.SKIP
        authentication_protocol = dictionary.get("authentication_protocol") if dictionary.get("authentication_protocol") else 'pap'
        bypass_auth_when_server_down = dictionary.get("bypass_auth_when_server_down") if "bypass_auth_when_server_down" in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        disable_autoneg = dictionary.get("disable_autoneg") if dictionary.get("disable_autoneg") else False
        disabled = dictionary.get("disabled") if dictionary.get("disabled") else False
        duplex = dictionary.get("duplex") if dictionary.get("duplex") else 'auto'
        enable_mac_auth = dictionary.get("enable_mac_auth") if "enable_mac_auth" in dictionary.keys() else APIHelper.SKIP
        enable_qos = dictionary.get("enable_qos") if "enable_qos" in dictionary.keys() else APIHelper.SKIP
        guest_network = dictionary.get("guest_network") if dictionary.get("guest_network") else APIHelper.SKIP
        mac_auth_only = dictionary.get("mac_auth_only") if "mac_auth_only" in dictionary.keys() else APIHelper.SKIP
        mac_limit = dictionary.get("mac_limit") if dictionary.get("mac_limit") else 0
        mode = dictionary.get("mode") if dictionary.get("mode") else APIHelper.SKIP
        mtu = dictionary.get("mtu") if dictionary.get("mtu") else APIHelper.SKIP
        networks = dictionary.get("networks") if dictionary.get("networks") else APIHelper.SKIP
        persist_mac = dictionary.get("persist_mac") if dictionary.get("persist_mac") else False
        poe_disabled = dictionary.get("poe_disabled") if dictionary.get("poe_disabled") else False
        port_auth = dictionary.get("port_auth") if dictionary.get("port_auth") else APIHelper.SKIP
        port_network = dictionary.get("port_network") if dictionary.get("port_network") else APIHelper.SKIP
        rejected_network = dictionary.get("rejected_network") if "rejected_network" in dictionary.keys() else APIHelper.SKIP
        speed = dictionary.get("speed") if dictionary.get("speed") else APIHelper.SKIP
        storm_control = JunosStormControl.from_dictionary(dictionary.get('storm_control')) if 'storm_control' in dictionary.keys() else APIHelper.SKIP
        stp_edge = dictionary.get("stp_edge") if "stp_edge" in dictionary.keys() else APIHelper.SKIP
        voip_network = dictionary.get("voip_network") if dictionary.get("voip_network") else APIHelper.SKIP
        # Return an object of this model
        return cls(all_networks,
                   allow_dhcpd,
                   authentication_protocol,
                   bypass_auth_when_server_down,
                   description,
                   disable_autoneg,
                   disabled,
                   duplex,
                   enable_mac_auth,
                   enable_qos,
                   guest_network,
                   mac_auth_only,
                   mac_limit,
                   mode,
                   mtu,
                   networks,
                   persist_mac,
                   poe_disabled,
                   port_auth,
                   port_network,
                   rejected_network,
                   speed,
                   storm_control,
                   stp_edge,
                   voip_network)
