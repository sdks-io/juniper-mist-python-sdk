# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Wifi(object):

    """Implementation of the 'Wifi' model.

    TODO: type model description here.

    Attributes:
        cisco_enabled (bool): TODO: type description here.
        disable_11_k (bool): TODO: type description here.
        disable_radios_when_power_constrained (bool): TODO: type description
            here.
        enable_arp_spoof (bool): TODO: type description here.
        enable_shared_radio_scanning (bool): TODO: type description here.
        enabled (bool): TODO: type description here.
        locate_connected (bool): TODO: type description here.
        locate_unconnected (bool): TODO: type description here.
        mesh_allow_dfs (bool): TODO: type description here.
        mesh_enable_crm (bool): TODO: type description here.
        mesh_enabled (bool): TODO: type description here.
        proxy_arp (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cisco_enabled": 'cisco_enabled',
        "disable_11_k": 'disable_11k',
        "disable_radios_when_power_constrained": 'disable_radios_when_power_constrained',
        "enable_arp_spoof": 'enable_arp_spoof',
        "enable_shared_radio_scanning": 'enable_shared_radio_scanning',
        "enabled": 'enabled',
        "locate_connected": 'locate_connected',
        "locate_unconnected": 'locate_unconnected',
        "mesh_allow_dfs": 'mesh_allow_dfs',
        "mesh_enable_crm": 'mesh_enable_crm',
        "mesh_enabled": 'mesh_enabled',
        "proxy_arp": 'proxy_arp'
    }

    _optionals = [
        'cisco_enabled',
        'disable_11_k',
        'disable_radios_when_power_constrained',
        'enable_arp_spoof',
        'enable_shared_radio_scanning',
        'enabled',
        'locate_connected',
        'locate_unconnected',
        'mesh_allow_dfs',
        'mesh_enable_crm',
        'mesh_enabled',
        'proxy_arp',
    ]

    def __init__(self,
                 cisco_enabled=APIHelper.SKIP,
                 disable_11_k=False,
                 disable_radios_when_power_constrained=APIHelper.SKIP,
                 enable_arp_spoof=APIHelper.SKIP,
                 enable_shared_radio_scanning=False,
                 enabled=True,
                 locate_connected=False,
                 locate_unconnected=False,
                 mesh_allow_dfs=False,
                 mesh_enable_crm=APIHelper.SKIP,
                 mesh_enabled=APIHelper.SKIP,
                 proxy_arp=False):
        """Constructor for the Wifi class"""

        # Initialize members of the class
        if cisco_enabled is not APIHelper.SKIP:
            self.cisco_enabled = cisco_enabled 
        self.disable_11_k = disable_11_k 
        if disable_radios_when_power_constrained is not APIHelper.SKIP:
            self.disable_radios_when_power_constrained = disable_radios_when_power_constrained 
        if enable_arp_spoof is not APIHelper.SKIP:
            self.enable_arp_spoof = enable_arp_spoof 
        self.enable_shared_radio_scanning = enable_shared_radio_scanning 
        self.enabled = enabled 
        self.locate_connected = locate_connected 
        self.locate_unconnected = locate_unconnected 
        self.mesh_allow_dfs = mesh_allow_dfs 
        if mesh_enable_crm is not APIHelper.SKIP:
            self.mesh_enable_crm = mesh_enable_crm 
        if mesh_enabled is not APIHelper.SKIP:
            self.mesh_enabled = mesh_enabled 
        self.proxy_arp = proxy_arp 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        cisco_enabled = dictionary.get("cisco_enabled") if "cisco_enabled" in dictionary.keys() else APIHelper.SKIP
        disable_11_k = dictionary.get("disable_11k") if dictionary.get("disable_11k") else False
        disable_radios_when_power_constrained = dictionary.get("disable_radios_when_power_constrained") if "disable_radios_when_power_constrained" in dictionary.keys() else APIHelper.SKIP
        enable_arp_spoof = dictionary.get("enable_arp_spoof") if "enable_arp_spoof" in dictionary.keys() else APIHelper.SKIP
        enable_shared_radio_scanning = dictionary.get("enable_shared_radio_scanning") if dictionary.get("enable_shared_radio_scanning") else False
        enabled = dictionary.get("enabled") if dictionary.get("enabled") else True
        locate_connected = dictionary.get("locate_connected") if dictionary.get("locate_connected") else False
        locate_unconnected = dictionary.get("locate_unconnected") if dictionary.get("locate_unconnected") else False
        mesh_allow_dfs = dictionary.get("mesh_allow_dfs") if dictionary.get("mesh_allow_dfs") else False
        mesh_enable_crm = dictionary.get("mesh_enable_crm") if "mesh_enable_crm" in dictionary.keys() else APIHelper.SKIP
        mesh_enabled = dictionary.get("mesh_enabled") if "mesh_enabled" in dictionary.keys() else APIHelper.SKIP
        proxy_arp = dictionary.get("proxy_arp") if dictionary.get("proxy_arp") else False
        # Return an object of this model
        return cls(cisco_enabled,
                   disable_11_k,
                   disable_radios_when_power_constrained,
                   enable_arp_spoof,
                   enable_shared_radio_scanning,
                   enabled,
                   locate_connected,
                   locate_unconnected,
                   mesh_allow_dfs,
                   mesh_enable_crm,
                   mesh_enabled,
                   proxy_arp)
