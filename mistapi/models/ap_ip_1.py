# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApIp1(object):

    """Implementation of the 'ap_ip1' model.

    IP AP settings

    Attributes:
        dns (list of string): if `type`==`static`
        dns_suffix (list of string): required if `type`==`static`
        gateway (string): required if `type`==`static`
        gateway_6 (string): TODO: type description here.
        ip (string): required if `type`==`static`
        ip_6 (string): TODO: type description here.
        mtu (int): TODO: type description here.
        netmask (string): required if `type`==`static`
        netmask_6 (string): TODO: type description here.
        mtype (Type2Enum): static / dhcp (default)
        type_6 (Type6Enum): TODO: type description here.
        vlan_id (int): management vlan id, default is 1 (untagged)
        network (string): the network where this mgmt IP reside, this will be
            used as default network for outbound-ssh, dns, ntp, dns, tacplus,
            radius, syslog, snmp
        use_mgmt_vrf (bool): for host-out traffic
            (NTP/TACPLUS/RADIUS/SYSLOG/SNMP)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "dns": 'dns',
        "dns_suffix": 'dns_suffix',
        "gateway": 'gateway',
        "gateway_6": 'gateway6',
        "ip": 'ip',
        "ip_6": 'ip6',
        "mtu": 'mtu',
        "netmask": 'netmask',
        "netmask_6": 'netmask6',
        "mtype": 'type',
        "type_6": 'type6',
        "vlan_id": 'vlan_id',
        "network": 'network',
        "use_mgmt_vrf": 'use_mgmt_vrf'
    }

    _optionals = [
        'dns',
        'dns_suffix',
        'gateway',
        'gateway_6',
        'ip',
        'ip_6',
        'mtu',
        'netmask',
        'netmask_6',
        'mtype',
        'type_6',
        'vlan_id',
        'network',
        'use_mgmt_vrf',
    ]

    def __init__(self,
                 dns=APIHelper.SKIP,
                 dns_suffix=APIHelper.SKIP,
                 gateway=APIHelper.SKIP,
                 gateway_6=APIHelper.SKIP,
                 ip=APIHelper.SKIP,
                 ip_6=APIHelper.SKIP,
                 mtu=APIHelper.SKIP,
                 netmask=APIHelper.SKIP,
                 netmask_6=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 type_6=APIHelper.SKIP,
                 vlan_id=1,
                 network=APIHelper.SKIP,
                 use_mgmt_vrf=False):
        """Constructor for the ApIp1 class"""

        # Initialize members of the class
        if dns is not APIHelper.SKIP:
            self.dns = dns 
        if dns_suffix is not APIHelper.SKIP:
            self.dns_suffix = dns_suffix 
        if gateway is not APIHelper.SKIP:
            self.gateway = gateway 
        if gateway_6 is not APIHelper.SKIP:
            self.gateway_6 = gateway_6 
        if ip is not APIHelper.SKIP:
            self.ip = ip 
        if ip_6 is not APIHelper.SKIP:
            self.ip_6 = ip_6 
        if mtu is not APIHelper.SKIP:
            self.mtu = mtu 
        if netmask is not APIHelper.SKIP:
            self.netmask = netmask 
        if netmask_6 is not APIHelper.SKIP:
            self.netmask_6 = netmask_6 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if type_6 is not APIHelper.SKIP:
            self.type_6 = type_6 
        self.vlan_id = vlan_id 
        if network is not APIHelper.SKIP:
            self.network = network 
        self.use_mgmt_vrf = use_mgmt_vrf 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        dns = dictionary.get("dns") if dictionary.get("dns") else APIHelper.SKIP
        dns_suffix = dictionary.get("dns_suffix") if dictionary.get("dns_suffix") else APIHelper.SKIP
        gateway = dictionary.get("gateway") if dictionary.get("gateway") else APIHelper.SKIP
        gateway_6 = dictionary.get("gateway6") if dictionary.get("gateway6") else APIHelper.SKIP
        ip = dictionary.get("ip") if dictionary.get("ip") else APIHelper.SKIP
        ip_6 = dictionary.get("ip6") if dictionary.get("ip6") else APIHelper.SKIP
        mtu = dictionary.get("mtu") if dictionary.get("mtu") else APIHelper.SKIP
        netmask = dictionary.get("netmask") if dictionary.get("netmask") else APIHelper.SKIP
        netmask_6 = dictionary.get("netmask6") if dictionary.get("netmask6") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        type_6 = dictionary.get("type6") if dictionary.get("type6") else APIHelper.SKIP
        vlan_id = dictionary.get("vlan_id") if dictionary.get("vlan_id") else 1
        network = dictionary.get("network") if dictionary.get("network") else APIHelper.SKIP
        use_mgmt_vrf = dictionary.get("use_mgmt_vrf") if dictionary.get("use_mgmt_vrf") else False
        # Return an object of this model
        return cls(dns,
                   dns_suffix,
                   gateway,
                   gateway_6,
                   ip,
                   ip_6,
                   mtu,
                   netmask,
                   netmask_6,
                   mtype,
                   type_6,
                   vlan_id,
                   network,
                   use_mgmt_vrf)
