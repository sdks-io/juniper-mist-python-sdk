# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class WlanPortal(object):

    """Implementation of the 'wlan_portal' model.

    portal wlan settings

    Attributes:
        allow_wlan_id_roam (bool): whether to allow guest roam between
            different wlan_ids (same ssid). requires cross_site enabled
        amazon_client_id (string): amazon OAuth2 client id. This is optional.
            If not provided, it will use a default one.
        amazon_client_secret (string): amazon OAuth2 client secret. If
            amazon_client_id was provided, provide a correspoinding value.
            Else leave blank.
        amazon_email_domains (list of string): Matches authenticated user
            email against provided domains. If null or [], all authenticated
            emails will be allowed.
        amazon_enabled (bool): whether amazon is enabled as a login method
        auth (Auth2Enum): authentication scheme
        azure_client_id (string): azure active directory app client id
        azure_client_secret (string): azure active directory app client
            secret
        azure_enabled (bool): whether Azure Active Directory is enabled as a
            login method
        azure_tenant_id (string): azure active directory tenant id.
        broadnet_password (string): when `sms_provider`==`broadnet`
        broadnet_sid (string): when `sms_provider`==`broadnet`
        broadnet_user_id (string): when `sms_provider`==`broadnet`
        bypass_when_cloud_down (bool): whether to bypass the guest portal when
            cloud not reachable (and apply the default policies)
        clickatell_api_key (string): when `sms_provider`==`clickatell`
        cross_site (bool): whether to allow guest to roam between sites of
            same org without reauthentication
        email_enabled (bool): whether email (access code verification) is
            enabled as a login method
        enabled (bool): whether guest portal is enabled
        expire (float): how long to remain authorized, in minutes
        external_portal_url (string): external portal URL (e.g.
            https://host/url) where we can append our query parameters to
        facebook_client_id (string): facebook OAuth2 app id. This is optional.
            If not provided, it will use a default one.
        facebook_client_secret (string): facebook OAuth2 app secret. If
            facebook_client_id was provided, provide a correspoinding value.
            Else leave blank.
        facebook_email_domains (list of string): Matches authenticated user
            email against provided domains. If null or [], all authenticated
            emails will be allowed.
        facebook_enabled (bool): whether facebook is enabled as a login
            method
        forward (bool): whether to forward the user to another URL after
            authorized
        forward_url (string): the URL to forward the user to
        google_client_id (string): Google OAuth2 app id. This is optional. If
            not provided, it will use a default one.
        google_client_secret (string): Google OAuth2 app secret. If
            google_client_id was provided, provide a correspoinding value.
            Else leave blank.
        google_email_domains (list of string): Matches authenticated user
            email against provided domains. If null or [], all authenticated
            emails will be allowed.
        google_enabled (bool): whether google is enabled as login method
        gupshup_password (string): when `sms_provider`==`gupshup`
        gupshup_userid (string): when `sms_provider`==`gupshup`
        microsoft_client_id (string): microsoft 365 OAuth2 client id. This is
            optional. If not provided, it will use a default one.
        microsoft_client_secret (string): microsoft 365 OAuth2 client secret.
            If microsoft_client_id was provided, provide a correspoinding
            value. Else leave blank.
        microsoft_email_domains (list of string): Matches authenticated user
            email against provided domains. If null or [], all authenticated
            emails will be allowed.
        microsoft_enabled (bool): whether microsoft 365 is enabled as a login
            method
        passphrase_enabled (bool): whether password is enabled
        password (string): passphrase
        portal_allowed_hostnames (string): list of hostnames without
            http(s):// (matched by substring)
        portal_allowed_subnets (string): list of CIDRs
        portal_api_secret (string): api secret (auto-generated) that can be
            used to sign guest authorization requests
        portal_denied_hostnames (string): list of hostnames without http(s)://
            (matched by substring), this takes precedence over
            portal_allowed_hostnames
        portal_image (string): Url of portal background image
        portal_sso_url (string): for SAML, this is used as the ACS URL
        predefined_sponsors_enabled (bool): whether to show list of sponsor
            emails mentioned in `sponsors` object as a dropdown. If both
            `sponsor_notify_all` and `predefined_sponsors_enabled` are false,
            behaviour is acc to `sponsor_email_domains`
        privacy (bool): TODO: type description here.
        puzzel_password (string): when `sms_provider`==`puzzel`
        puzzel_service_id (string): when `sms_provider`==`puzzel`
        puzzel_username (string): when `sms_provider`==`puzzel`
        sms_message_format (string): TODO: type description here.
        sms_enabled (bool): whether sms is enabled as a login method
        sms_provider (SmsProviderEnum): TODO: type description here.
        sponsor_auto_approve (bool): whether to automatically approve guest
            and allow sponsor to revoke guest access, needs
            predefined_sponsors_enabled enabled and sponsor_notify_all
            disabled
        sponsor_email_domains (list of string): list of domain allowed for
            sponsor email. Required if `sponsor_enabled` is `true` and
            `sponsors` is empty.
        sponsor_enabled (bool): whether sponsor is enabled
        sponsor_link_validity_duration (string): how long to remain valid
            sponsored guest request approve/deny link received in email, in
            minutes.
        sponsor_notify_all (bool): whether to notify all sponsors that are
            mentioned in `sponsors` object. Both `sponsor_notify_all` and
            `predefined_sponsors_enabled` should be true in order to notify
            sponsors. If true, email sent to 10 sponsors in no particular
            order.
        sponsor_status_notify (bool): if enabled, guest will get email about
            sponsor's action (approve/deny)
        sponsors (dict): object of allowed sponsors email with name. Required
            if `sponsor_enabled` is `true` and `sponsor_email_domains` is
            empty.
        sso_default_role (string): default role to assign if there’s no match.
            By default, an assertion is treated as invalid when there’s no
            role matched
        sso_forced_role (string): TODO: type description here.
        sso_idp_cert (string): IDP Cert (used to verify the signed response)
        sso_idp_sign_algo (string): signing algorithm for SAML Assertion
        sso_idp_sso_url (string): IDP Single-Sign-On URL
        sso_issuer (string): IDP issuer URL
        sso_nameid_format (SsoNameidFormatEnum): TODO: type description here.
        telstra_client_id (string): when `sms_provider`==`telstra`, Client ID
            provided by Telstra
        telstra_client_secret (string): when `sms_provider`==`telstra`, Client
            secret provided by Telstra
        thumbnail (string): Url of portal background image thumbnail
        twilio_auth_token (string): when `sms_provider`==`twilio`, Auth token
            account with twilio account
        twilio_phone_number (string): when `sms_provider`==`twilio`, Twilio
            phone number associated with the account. See example for accepted
            format.
        twilio_sid (string): when `sms_provider`==`twilio`, Account SID
            provided by Twilio

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "allow_wlan_id_roam": 'allow_wlan_id_roam',
        "amazon_client_id": 'amazon_client_id',
        "amazon_client_secret": 'amazon_client_secret',
        "amazon_email_domains": 'amazon_email_domains',
        "amazon_enabled": 'amazon_enabled',
        "auth": 'auth',
        "azure_client_id": 'azure_client_id',
        "azure_client_secret": 'azure_client_secret',
        "azure_enabled": 'azure_enabled',
        "azure_tenant_id": 'azure_tenant_id',
        "broadnet_password": 'broadnet_password',
        "broadnet_sid": 'broadnet_sid',
        "broadnet_user_id": 'broadnet_user_id',
        "bypass_when_cloud_down": 'bypass_when_cloud_down',
        "clickatell_api_key": 'clickatell_api_key',
        "cross_site": 'cross_site',
        "email_enabled": 'email_enabled',
        "enabled": 'enabled',
        "expire": 'expire',
        "external_portal_url": 'external_portal_url',
        "facebook_client_id": 'facebook_client_id',
        "facebook_client_secret": 'facebook_client_secret',
        "facebook_email_domains": 'facebook_email_domains',
        "facebook_enabled": 'facebook_enabled',
        "forward": 'forward',
        "forward_url": 'forward_url',
        "google_client_id": 'google_client_id',
        "google_client_secret": 'google_client_secret',
        "google_email_domains": 'google_email_domains',
        "google_enabled": 'google_enabled',
        "gupshup_password": 'gupshup_password',
        "gupshup_userid": 'gupshup_userid',
        "microsoft_client_id": 'microsoft_client_id',
        "microsoft_client_secret": 'microsoft_client_secret',
        "microsoft_email_domains": 'microsoft_email_domains',
        "microsoft_enabled": 'microsoft_enabled',
        "passphrase_enabled": 'passphrase_enabled',
        "password": 'password',
        "portal_allowed_hostnames": 'portal_allowed_hostnames',
        "portal_allowed_subnets": 'portal_allowed_subnets',
        "portal_api_secret": 'portal_api_secret',
        "portal_denied_hostnames": 'portal_denied_hostnames',
        "portal_image": 'portal_image',
        "portal_sso_url": 'portal_sso_url',
        "predefined_sponsors_enabled": 'predefined_sponsors_enabled',
        "privacy": 'privacy',
        "puzzel_password": 'puzzel_password',
        "puzzel_service_id": 'puzzel_service_id',
        "puzzel_username": 'puzzel_username',
        "sms_message_format": 'smsMessageFormat',
        "sms_enabled": 'sms_enabled',
        "sms_provider": 'sms_provider',
        "sponsor_auto_approve": 'sponsor_auto_approve',
        "sponsor_email_domains": 'sponsor_email_domains',
        "sponsor_enabled": 'sponsor_enabled',
        "sponsor_link_validity_duration": 'sponsor_link_validity_duration',
        "sponsor_notify_all": 'sponsor_notify_all',
        "sponsor_status_notify": 'sponsor_status_notify',
        "sponsors": 'sponsors',
        "sso_default_role": 'sso_default_role',
        "sso_forced_role": 'sso_forced_role',
        "sso_idp_cert": 'sso_idp_cert',
        "sso_idp_sign_algo": 'sso_idp_sign_algo',
        "sso_idp_sso_url": 'sso_idp_sso_url',
        "sso_issuer": 'sso_issuer',
        "sso_nameid_format": 'sso_nameid_format',
        "telstra_client_id": 'telstra_client_id',
        "telstra_client_secret": 'telstra_client_secret',
        "thumbnail": 'thumbnail',
        "twilio_auth_token": 'twilio_auth_token',
        "twilio_phone_number": 'twilio_phone_number',
        "twilio_sid": 'twilio_sid'
    }

    _optionals = [
        'allow_wlan_id_roam',
        'amazon_client_id',
        'amazon_client_secret',
        'amazon_email_domains',
        'amazon_enabled',
        'auth',
        'azure_client_id',
        'azure_client_secret',
        'azure_enabled',
        'azure_tenant_id',
        'broadnet_password',
        'broadnet_sid',
        'broadnet_user_id',
        'bypass_when_cloud_down',
        'clickatell_api_key',
        'cross_site',
        'email_enabled',
        'enabled',
        'expire',
        'external_portal_url',
        'facebook_client_id',
        'facebook_client_secret',
        'facebook_email_domains',
        'facebook_enabled',
        'forward',
        'forward_url',
        'google_client_id',
        'google_client_secret',
        'google_email_domains',
        'google_enabled',
        'gupshup_password',
        'gupshup_userid',
        'microsoft_client_id',
        'microsoft_client_secret',
        'microsoft_email_domains',
        'microsoft_enabled',
        'passphrase_enabled',
        'password',
        'portal_allowed_hostnames',
        'portal_allowed_subnets',
        'portal_api_secret',
        'portal_denied_hostnames',
        'portal_image',
        'portal_sso_url',
        'predefined_sponsors_enabled',
        'privacy',
        'puzzel_password',
        'puzzel_service_id',
        'puzzel_username',
        'sms_message_format',
        'sms_enabled',
        'sms_provider',
        'sponsor_auto_approve',
        'sponsor_email_domains',
        'sponsor_enabled',
        'sponsor_link_validity_duration',
        'sponsor_notify_all',
        'sponsor_status_notify',
        'sponsors',
        'sso_default_role',
        'sso_forced_role',
        'sso_idp_cert',
        'sso_idp_sign_algo',
        'sso_idp_sso_url',
        'sso_issuer',
        'sso_nameid_format',
        'telstra_client_id',
        'telstra_client_secret',
        'thumbnail',
        'twilio_auth_token',
        'twilio_phone_number',
        'twilio_sid',
    ]

    _nullables = [
        'amazon_client_id',
        'amazon_client_secret',
        'auth',
        'azure_client_id',
        'azure_client_secret',
        'azure_tenant_id',
        'facebook_client_id',
        'facebook_client_secret',
        'forward_url',
        'google_client_id',
        'google_client_secret',
        'microsoft_client_id',
        'microsoft_client_secret',
        'password',
        'twilio_auth_token',
        'twilio_phone_number',
        'twilio_sid',
    ]

    def __init__(self,
                 allow_wlan_id_roam=False,
                 amazon_client_id=APIHelper.SKIP,
                 amazon_client_secret=APIHelper.SKIP,
                 amazon_email_domains=APIHelper.SKIP,
                 amazon_enabled=APIHelper.SKIP,
                 auth='none',
                 azure_client_id=APIHelper.SKIP,
                 azure_client_secret=APIHelper.SKIP,
                 azure_enabled=APIHelper.SKIP,
                 azure_tenant_id=APIHelper.SKIP,
                 broadnet_password=APIHelper.SKIP,
                 broadnet_sid=APIHelper.SKIP,
                 broadnet_user_id=APIHelper.SKIP,
                 bypass_when_cloud_down=False,
                 clickatell_api_key=APIHelper.SKIP,
                 cross_site=False,
                 email_enabled=APIHelper.SKIP,
                 enabled=False,
                 expire=1440,
                 external_portal_url=APIHelper.SKIP,
                 facebook_client_id=APIHelper.SKIP,
                 facebook_client_secret=APIHelper.SKIP,
                 facebook_email_domains=APIHelper.SKIP,
                 facebook_enabled=APIHelper.SKIP,
                 forward=False,
                 forward_url=APIHelper.SKIP,
                 google_client_id=APIHelper.SKIP,
                 google_client_secret=APIHelper.SKIP,
                 google_email_domains=APIHelper.SKIP,
                 google_enabled=APIHelper.SKIP,
                 gupshup_password=APIHelper.SKIP,
                 gupshup_userid=APIHelper.SKIP,
                 microsoft_client_id=APIHelper.SKIP,
                 microsoft_client_secret=APIHelper.SKIP,
                 microsoft_email_domains=APIHelper.SKIP,
                 microsoft_enabled=APIHelper.SKIP,
                 passphrase_enabled=APIHelper.SKIP,
                 password=APIHelper.SKIP,
                 portal_allowed_hostnames=APIHelper.SKIP,
                 portal_allowed_subnets=APIHelper.SKIP,
                 portal_api_secret=APIHelper.SKIP,
                 portal_denied_hostnames=APIHelper.SKIP,
                 portal_image=APIHelper.SKIP,
                 portal_sso_url=APIHelper.SKIP,
                 predefined_sponsors_enabled=True,
                 privacy=APIHelper.SKIP,
                 puzzel_password=APIHelper.SKIP,
                 puzzel_service_id=APIHelper.SKIP,
                 puzzel_username=APIHelper.SKIP,
                 sms_message_format=APIHelper.SKIP,
                 sms_enabled=APIHelper.SKIP,
                 sms_provider='manual',
                 sponsor_auto_approve=False,
                 sponsor_email_domains=APIHelper.SKIP,
                 sponsor_enabled=APIHelper.SKIP,
                 sponsor_link_validity_duration=APIHelper.SKIP,
                 sponsor_notify_all=False,
                 sponsor_status_notify=False,
                 sponsors=APIHelper.SKIP,
                 sso_default_role=APIHelper.SKIP,
                 sso_forced_role=APIHelper.SKIP,
                 sso_idp_cert=APIHelper.SKIP,
                 sso_idp_sign_algo=APIHelper.SKIP,
                 sso_idp_sso_url=APIHelper.SKIP,
                 sso_issuer=APIHelper.SKIP,
                 sso_nameid_format='email',
                 telstra_client_id=APIHelper.SKIP,
                 telstra_client_secret=APIHelper.SKIP,
                 thumbnail=APIHelper.SKIP,
                 twilio_auth_token=APIHelper.SKIP,
                 twilio_phone_number=APIHelper.SKIP,
                 twilio_sid=APIHelper.SKIP):
        """Constructor for the WlanPortal class"""

        # Initialize members of the class
        self.allow_wlan_id_roam = allow_wlan_id_roam 
        if amazon_client_id is not APIHelper.SKIP:
            self.amazon_client_id = amazon_client_id 
        if amazon_client_secret is not APIHelper.SKIP:
            self.amazon_client_secret = amazon_client_secret 
        if amazon_email_domains is not APIHelper.SKIP:
            self.amazon_email_domains = amazon_email_domains 
        if amazon_enabled is not APIHelper.SKIP:
            self.amazon_enabled = amazon_enabled 
        self.auth = auth 
        if azure_client_id is not APIHelper.SKIP:
            self.azure_client_id = azure_client_id 
        if azure_client_secret is not APIHelper.SKIP:
            self.azure_client_secret = azure_client_secret 
        if azure_enabled is not APIHelper.SKIP:
            self.azure_enabled = azure_enabled 
        if azure_tenant_id is not APIHelper.SKIP:
            self.azure_tenant_id = azure_tenant_id 
        if broadnet_password is not APIHelper.SKIP:
            self.broadnet_password = broadnet_password 
        if broadnet_sid is not APIHelper.SKIP:
            self.broadnet_sid = broadnet_sid 
        if broadnet_user_id is not APIHelper.SKIP:
            self.broadnet_user_id = broadnet_user_id 
        self.bypass_when_cloud_down = bypass_when_cloud_down 
        if clickatell_api_key is not APIHelper.SKIP:
            self.clickatell_api_key = clickatell_api_key 
        self.cross_site = cross_site 
        if email_enabled is not APIHelper.SKIP:
            self.email_enabled = email_enabled 
        self.enabled = enabled 
        self.expire = expire 
        if external_portal_url is not APIHelper.SKIP:
            self.external_portal_url = external_portal_url 
        if facebook_client_id is not APIHelper.SKIP:
            self.facebook_client_id = facebook_client_id 
        if facebook_client_secret is not APIHelper.SKIP:
            self.facebook_client_secret = facebook_client_secret 
        if facebook_email_domains is not APIHelper.SKIP:
            self.facebook_email_domains = facebook_email_domains 
        if facebook_enabled is not APIHelper.SKIP:
            self.facebook_enabled = facebook_enabled 
        self.forward = forward 
        if forward_url is not APIHelper.SKIP:
            self.forward_url = forward_url 
        if google_client_id is not APIHelper.SKIP:
            self.google_client_id = google_client_id 
        if google_client_secret is not APIHelper.SKIP:
            self.google_client_secret = google_client_secret 
        if google_email_domains is not APIHelper.SKIP:
            self.google_email_domains = google_email_domains 
        if google_enabled is not APIHelper.SKIP:
            self.google_enabled = google_enabled 
        if gupshup_password is not APIHelper.SKIP:
            self.gupshup_password = gupshup_password 
        if gupshup_userid is not APIHelper.SKIP:
            self.gupshup_userid = gupshup_userid 
        if microsoft_client_id is not APIHelper.SKIP:
            self.microsoft_client_id = microsoft_client_id 
        if microsoft_client_secret is not APIHelper.SKIP:
            self.microsoft_client_secret = microsoft_client_secret 
        if microsoft_email_domains is not APIHelper.SKIP:
            self.microsoft_email_domains = microsoft_email_domains 
        if microsoft_enabled is not APIHelper.SKIP:
            self.microsoft_enabled = microsoft_enabled 
        if passphrase_enabled is not APIHelper.SKIP:
            self.passphrase_enabled = passphrase_enabled 
        if password is not APIHelper.SKIP:
            self.password = password 
        if portal_allowed_hostnames is not APIHelper.SKIP:
            self.portal_allowed_hostnames = portal_allowed_hostnames 
        if portal_allowed_subnets is not APIHelper.SKIP:
            self.portal_allowed_subnets = portal_allowed_subnets 
        if portal_api_secret is not APIHelper.SKIP:
            self.portal_api_secret = portal_api_secret 
        if portal_denied_hostnames is not APIHelper.SKIP:
            self.portal_denied_hostnames = portal_denied_hostnames 
        if portal_image is not APIHelper.SKIP:
            self.portal_image = portal_image 
        if portal_sso_url is not APIHelper.SKIP:
            self.portal_sso_url = portal_sso_url 
        self.predefined_sponsors_enabled = predefined_sponsors_enabled 
        if privacy is not APIHelper.SKIP:
            self.privacy = privacy 
        if puzzel_password is not APIHelper.SKIP:
            self.puzzel_password = puzzel_password 
        if puzzel_service_id is not APIHelper.SKIP:
            self.puzzel_service_id = puzzel_service_id 
        if puzzel_username is not APIHelper.SKIP:
            self.puzzel_username = puzzel_username 
        if sms_message_format is not APIHelper.SKIP:
            self.sms_message_format = sms_message_format 
        if sms_enabled is not APIHelper.SKIP:
            self.sms_enabled = sms_enabled 
        self.sms_provider = sms_provider 
        self.sponsor_auto_approve = sponsor_auto_approve 
        if sponsor_email_domains is not APIHelper.SKIP:
            self.sponsor_email_domains = sponsor_email_domains 
        if sponsor_enabled is not APIHelper.SKIP:
            self.sponsor_enabled = sponsor_enabled 
        if sponsor_link_validity_duration is not APIHelper.SKIP:
            self.sponsor_link_validity_duration = sponsor_link_validity_duration 
        self.sponsor_notify_all = sponsor_notify_all 
        self.sponsor_status_notify = sponsor_status_notify 
        if sponsors is not APIHelper.SKIP:
            self.sponsors = sponsors 
        if sso_default_role is not APIHelper.SKIP:
            self.sso_default_role = sso_default_role 
        if sso_forced_role is not APIHelper.SKIP:
            self.sso_forced_role = sso_forced_role 
        if sso_idp_cert is not APIHelper.SKIP:
            self.sso_idp_cert = sso_idp_cert 
        if sso_idp_sign_algo is not APIHelper.SKIP:
            self.sso_idp_sign_algo = sso_idp_sign_algo 
        if sso_idp_sso_url is not APIHelper.SKIP:
            self.sso_idp_sso_url = sso_idp_sso_url 
        if sso_issuer is not APIHelper.SKIP:
            self.sso_issuer = sso_issuer 
        self.sso_nameid_format = sso_nameid_format 
        if telstra_client_id is not APIHelper.SKIP:
            self.telstra_client_id = telstra_client_id 
        if telstra_client_secret is not APIHelper.SKIP:
            self.telstra_client_secret = telstra_client_secret 
        if thumbnail is not APIHelper.SKIP:
            self.thumbnail = thumbnail 
        if twilio_auth_token is not APIHelper.SKIP:
            self.twilio_auth_token = twilio_auth_token 
        if twilio_phone_number is not APIHelper.SKIP:
            self.twilio_phone_number = twilio_phone_number 
        if twilio_sid is not APIHelper.SKIP:
            self.twilio_sid = twilio_sid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        allow_wlan_id_roam = dictionary.get("allow_wlan_id_roam") if dictionary.get("allow_wlan_id_roam") else False
        amazon_client_id = dictionary.get("amazon_client_id") if "amazon_client_id" in dictionary.keys() else APIHelper.SKIP
        amazon_client_secret = dictionary.get("amazon_client_secret") if "amazon_client_secret" in dictionary.keys() else APIHelper.SKIP
        amazon_email_domains = dictionary.get("amazon_email_domains") if dictionary.get("amazon_email_domains") else APIHelper.SKIP
        amazon_enabled = dictionary.get("amazon_enabled") if "amazon_enabled" in dictionary.keys() else APIHelper.SKIP
        auth = dictionary.get("auth") if dictionary.get("auth") else 'none'
        azure_client_id = dictionary.get("azure_client_id") if "azure_client_id" in dictionary.keys() else APIHelper.SKIP
        azure_client_secret = dictionary.get("azure_client_secret") if "azure_client_secret" in dictionary.keys() else APIHelper.SKIP
        azure_enabled = dictionary.get("azure_enabled") if "azure_enabled" in dictionary.keys() else APIHelper.SKIP
        azure_tenant_id = dictionary.get("azure_tenant_id") if "azure_tenant_id" in dictionary.keys() else APIHelper.SKIP
        broadnet_password = dictionary.get("broadnet_password") if dictionary.get("broadnet_password") else APIHelper.SKIP
        broadnet_sid = dictionary.get("broadnet_sid") if dictionary.get("broadnet_sid") else APIHelper.SKIP
        broadnet_user_id = dictionary.get("broadnet_user_id") if dictionary.get("broadnet_user_id") else APIHelper.SKIP
        bypass_when_cloud_down = dictionary.get("bypass_when_cloud_down") if dictionary.get("bypass_when_cloud_down") else False
        clickatell_api_key = dictionary.get("clickatell_api_key") if dictionary.get("clickatell_api_key") else APIHelper.SKIP
        cross_site = dictionary.get("cross_site") if dictionary.get("cross_site") else False
        email_enabled = dictionary.get("email_enabled") if "email_enabled" in dictionary.keys() else APIHelper.SKIP
        enabled = dictionary.get("enabled") if dictionary.get("enabled") else False
        expire = dictionary.get("expire") if dictionary.get("expire") else 1440
        external_portal_url = dictionary.get("external_portal_url") if dictionary.get("external_portal_url") else APIHelper.SKIP
        facebook_client_id = dictionary.get("facebook_client_id") if "facebook_client_id" in dictionary.keys() else APIHelper.SKIP
        facebook_client_secret = dictionary.get("facebook_client_secret") if "facebook_client_secret" in dictionary.keys() else APIHelper.SKIP
        facebook_email_domains = dictionary.get("facebook_email_domains") if dictionary.get("facebook_email_domains") else APIHelper.SKIP
        facebook_enabled = dictionary.get("facebook_enabled") if "facebook_enabled" in dictionary.keys() else APIHelper.SKIP
        forward = dictionary.get("forward") if dictionary.get("forward") else False
        forward_url = dictionary.get("forward_url") if "forward_url" in dictionary.keys() else APIHelper.SKIP
        google_client_id = dictionary.get("google_client_id") if "google_client_id" in dictionary.keys() else APIHelper.SKIP
        google_client_secret = dictionary.get("google_client_secret") if "google_client_secret" in dictionary.keys() else APIHelper.SKIP
        google_email_domains = dictionary.get("google_email_domains") if dictionary.get("google_email_domains") else APIHelper.SKIP
        google_enabled = dictionary.get("google_enabled") if "google_enabled" in dictionary.keys() else APIHelper.SKIP
        gupshup_password = dictionary.get("gupshup_password") if dictionary.get("gupshup_password") else APIHelper.SKIP
        gupshup_userid = dictionary.get("gupshup_userid") if dictionary.get("gupshup_userid") else APIHelper.SKIP
        microsoft_client_id = dictionary.get("microsoft_client_id") if "microsoft_client_id" in dictionary.keys() else APIHelper.SKIP
        microsoft_client_secret = dictionary.get("microsoft_client_secret") if "microsoft_client_secret" in dictionary.keys() else APIHelper.SKIP
        microsoft_email_domains = dictionary.get("microsoft_email_domains") if dictionary.get("microsoft_email_domains") else APIHelper.SKIP
        microsoft_enabled = dictionary.get("microsoft_enabled") if "microsoft_enabled" in dictionary.keys() else APIHelper.SKIP
        passphrase_enabled = dictionary.get("passphrase_enabled") if "passphrase_enabled" in dictionary.keys() else APIHelper.SKIP
        password = dictionary.get("password") if "password" in dictionary.keys() else APIHelper.SKIP
        portal_allowed_hostnames = dictionary.get("portal_allowed_hostnames") if dictionary.get("portal_allowed_hostnames") else APIHelper.SKIP
        portal_allowed_subnets = dictionary.get("portal_allowed_subnets") if dictionary.get("portal_allowed_subnets") else APIHelper.SKIP
        portal_api_secret = dictionary.get("portal_api_secret") if dictionary.get("portal_api_secret") else APIHelper.SKIP
        portal_denied_hostnames = dictionary.get("portal_denied_hostnames") if dictionary.get("portal_denied_hostnames") else APIHelper.SKIP
        portal_image = dictionary.get("portal_image") if dictionary.get("portal_image") else APIHelper.SKIP
        portal_sso_url = dictionary.get("portal_sso_url") if dictionary.get("portal_sso_url") else APIHelper.SKIP
        predefined_sponsors_enabled = dictionary.get("predefined_sponsors_enabled") if dictionary.get("predefined_sponsors_enabled") else True
        privacy = dictionary.get("privacy") if "privacy" in dictionary.keys() else APIHelper.SKIP
        puzzel_password = dictionary.get("puzzel_password") if dictionary.get("puzzel_password") else APIHelper.SKIP
        puzzel_service_id = dictionary.get("puzzel_service_id") if dictionary.get("puzzel_service_id") else APIHelper.SKIP
        puzzel_username = dictionary.get("puzzel_username") if dictionary.get("puzzel_username") else APIHelper.SKIP
        sms_message_format = dictionary.get("smsMessageFormat") if dictionary.get("smsMessageFormat") else APIHelper.SKIP
        sms_enabled = dictionary.get("sms_enabled") if "sms_enabled" in dictionary.keys() else APIHelper.SKIP
        sms_provider = dictionary.get("sms_provider") if dictionary.get("sms_provider") else 'manual'
        sponsor_auto_approve = dictionary.get("sponsor_auto_approve") if dictionary.get("sponsor_auto_approve") else False
        sponsor_email_domains = dictionary.get("sponsor_email_domains") if dictionary.get("sponsor_email_domains") else APIHelper.SKIP
        sponsor_enabled = dictionary.get("sponsor_enabled") if "sponsor_enabled" in dictionary.keys() else APIHelper.SKIP
        sponsor_link_validity_duration = dictionary.get("sponsor_link_validity_duration") if dictionary.get("sponsor_link_validity_duration") else APIHelper.SKIP
        sponsor_notify_all = dictionary.get("sponsor_notify_all") if dictionary.get("sponsor_notify_all") else False
        sponsor_status_notify = dictionary.get("sponsor_status_notify") if dictionary.get("sponsor_status_notify") else False
        sponsors = dictionary.get("sponsors") if dictionary.get("sponsors") else APIHelper.SKIP
        sso_default_role = dictionary.get("sso_default_role") if dictionary.get("sso_default_role") else APIHelper.SKIP
        sso_forced_role = dictionary.get("sso_forced_role") if dictionary.get("sso_forced_role") else APIHelper.SKIP
        sso_idp_cert = dictionary.get("sso_idp_cert") if dictionary.get("sso_idp_cert") else APIHelper.SKIP
        sso_idp_sign_algo = dictionary.get("sso_idp_sign_algo") if dictionary.get("sso_idp_sign_algo") else APIHelper.SKIP
        sso_idp_sso_url = dictionary.get("sso_idp_sso_url") if dictionary.get("sso_idp_sso_url") else APIHelper.SKIP
        sso_issuer = dictionary.get("sso_issuer") if dictionary.get("sso_issuer") else APIHelper.SKIP
        sso_nameid_format = dictionary.get("sso_nameid_format") if dictionary.get("sso_nameid_format") else 'email'
        telstra_client_id = dictionary.get("telstra_client_id") if dictionary.get("telstra_client_id") else APIHelper.SKIP
        telstra_client_secret = dictionary.get("telstra_client_secret") if dictionary.get("telstra_client_secret") else APIHelper.SKIP
        thumbnail = dictionary.get("thumbnail") if dictionary.get("thumbnail") else APIHelper.SKIP
        twilio_auth_token = dictionary.get("twilio_auth_token") if "twilio_auth_token" in dictionary.keys() else APIHelper.SKIP
        twilio_phone_number = dictionary.get("twilio_phone_number") if "twilio_phone_number" in dictionary.keys() else APIHelper.SKIP
        twilio_sid = dictionary.get("twilio_sid") if "twilio_sid" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(allow_wlan_id_roam,
                   amazon_client_id,
                   amazon_client_secret,
                   amazon_email_domains,
                   amazon_enabled,
                   auth,
                   azure_client_id,
                   azure_client_secret,
                   azure_enabled,
                   azure_tenant_id,
                   broadnet_password,
                   broadnet_sid,
                   broadnet_user_id,
                   bypass_when_cloud_down,
                   clickatell_api_key,
                   cross_site,
                   email_enabled,
                   enabled,
                   expire,
                   external_portal_url,
                   facebook_client_id,
                   facebook_client_secret,
                   facebook_email_domains,
                   facebook_enabled,
                   forward,
                   forward_url,
                   google_client_id,
                   google_client_secret,
                   google_email_domains,
                   google_enabled,
                   gupshup_password,
                   gupshup_userid,
                   microsoft_client_id,
                   microsoft_client_secret,
                   microsoft_email_domains,
                   microsoft_enabled,
                   passphrase_enabled,
                   password,
                   portal_allowed_hostnames,
                   portal_allowed_subnets,
                   portal_api_secret,
                   portal_denied_hostnames,
                   portal_image,
                   portal_sso_url,
                   predefined_sponsors_enabled,
                   privacy,
                   puzzel_password,
                   puzzel_service_id,
                   puzzel_username,
                   sms_message_format,
                   sms_enabled,
                   sms_provider,
                   sponsor_auto_approve,
                   sponsor_email_domains,
                   sponsor_enabled,
                   sponsor_link_validity_duration,
                   sponsor_notify_all,
                   sponsor_status_notify,
                   sponsors,
                   sso_default_role,
                   sso_forced_role,
                   sso_idp_cert,
                   sso_idp_sign_algo,
                   sso_idp_sso_url,
                   sso_issuer,
                   sso_nameid_format,
                   telstra_client_id,
                   telstra_client_secret,
                   thumbnail,
                   twilio_auth_token,
                   twilio_phone_number,
                   twilio_sid)
