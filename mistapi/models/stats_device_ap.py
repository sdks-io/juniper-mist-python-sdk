# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.ble_config import BleConfig
from mistapi.models.ble_stat import BleStat
from mistapi.models.env_stat import EnvStat
from mistapi.models.esl_stat import EslStat
from mistapi.models.fwupdate import Fwupdate
from mistapi.models.iot_stat import IotStat
from mistapi.models.ip_config import IpConfig
from mistapi.models.ip_stat import IpStat
from mistapi.models.l_2_tp_stat import L2tpStat
from mistapi.models.last_trouble import LastTrouble
from mistapi.models.led import Led
from mistapi.models.lldp_stat import LldpStat
from mistapi.models.mesh_downlinks import MeshDownlinks
from mistapi.models.mesh_uplink import MeshUplink
from mistapi.models.port_stat import PortStat
from mistapi.models.radio_config import RadioConfig
from mistapi.models.radio_stat import RadioStat


class StatsDeviceAp(object):

    """Implementation of the 'stats_device_ap' model.

    AP statistics

    Attributes:
        ble_config (BleConfig): TODO: type description here.
        ble_stat (BleStat): TODO: type description here.
        cert_expiry (float): TODO: type description here.
        env_stat (EnvStat): device environment, including CPU temperature,
            Ambient temperature, Humidity, Attitude, Pressure, Accelerometers,
            Magnetometers and vCore Voltage
        esl_stat (EslStat): TODO: type description here.
        ext_ip (string): TODO: type description here.
        fwupdate (Fwupdate): TODO: type description here.
        iot_stat (IotStat): TODO: type description here.
        ip (string): TODO: type description here.
        ip_config (IpConfig): TODO: type description here.
        ip_stat (IpStat): TODO: type description here.
        l_2_tp_stat (dict): l2tp tunnel status (key is the wxtunnel_id)
        last_seen (float): last seen timestamp
        last_trouble (LastTrouble): TODO: type description here.
        led (Led): TODO: type description here.
        lldp_stat (LldpStat): LLDP Stat (neighbor information, power
            negotiations)
        locating (bool): TODO: type description here.
        locked (bool): whether this AP is considered locked (placement /
            orientation has been vetted)
        mac (string): device mac
        map_id (uuid|string): TODO: type description here.
        mesh_downlinks (dict): TODO: type description here.
        mesh_uplink (MeshUplink): TODO: type description here.
        model (string): device model
        mount (string): TODO: type description here.
        name (string): TODO: type description here.
        num_clients (int): how many wireless clients are currently connected
        port_stat (dict): TODO: type description here.
        power_budget (float): in mW, surplus if positie or deficit if
            negative
        power_constrained (bool): whether insufficient power
        power_opmode (string): constrained mode
        power_src (string): DC Input / PoE 802.3at / PoE 802.3af / LLDP / ?
            (unknown)
        radio_config (RadioConfig): TODO: type description here.
        radio_stat (RadioStat): a map of radio stats, key can be band_24 /
            band_5
        rx_bps (float): TODO: type description here.
        rx_bytes (int): TODO: type description here.
        rx_pkts (int): TODO: type description here.
        serial (string): serial
        status (Status4Enum): TODO: type description here.
        tx_bps (float): TODO: type description here.
        tx_bytes (float): TODO: type description here.
        tx_pkts (float): TODO: type description here.
        mtype (string): device type, ap / ble
        uptime (float): how long, in seconds, has the device been up (or
            rebooted)
        version (string): TODO: type description here.
        x (float): TODO: type description here.
        y (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mac": 'mac',
        "model": 'model',
        "ble_config": 'ble_config',
        "ble_stat": 'ble_stat',
        "cert_expiry": 'cert_expiry',
        "env_stat": 'env_stat',
        "esl_stat": 'esl_stat',
        "ext_ip": 'ext_ip',
        "fwupdate": 'fwupdate',
        "iot_stat": 'iot_stat',
        "ip": 'ip',
        "ip_config": 'ip_config',
        "ip_stat": 'ip_stat',
        "l_2_tp_stat": 'l2tp_stat',
        "last_seen": 'last_seen',
        "last_trouble": 'last_trouble',
        "led": 'led',
        "lldp_stat": 'lldp_stat',
        "locating": 'locating',
        "locked": 'locked',
        "map_id": 'map_id',
        "mesh_downlinks": 'mesh_downlinks',
        "mesh_uplink": 'mesh_uplink',
        "mount": 'mount',
        "name": 'name',
        "num_clients": 'num_clients',
        "port_stat": 'port_stat',
        "power_budget": 'power_budget',
        "power_constrained": 'power_constrained',
        "power_opmode": 'power_opmode',
        "power_src": 'power_src',
        "radio_config": 'radio_config',
        "radio_stat": 'radio_stat',
        "rx_bps": 'rx_bps',
        "rx_bytes": 'rx_bytes',
        "rx_pkts": 'rx_pkts',
        "serial": 'serial',
        "status": 'status',
        "tx_bps": 'tx_bps',
        "tx_bytes": 'tx_bytes',
        "tx_pkts": 'tx_pkts',
        "mtype": 'type',
        "uptime": 'uptime',
        "version": 'version',
        "x": 'x',
        "y": 'y'
    }

    _optionals = [
        'ble_config',
        'ble_stat',
        'cert_expiry',
        'env_stat',
        'esl_stat',
        'ext_ip',
        'fwupdate',
        'iot_stat',
        'ip',
        'ip_config',
        'ip_stat',
        'l_2_tp_stat',
        'last_seen',
        'last_trouble',
        'led',
        'lldp_stat',
        'locating',
        'locked',
        'map_id',
        'mesh_downlinks',
        'mesh_uplink',
        'mount',
        'name',
        'num_clients',
        'port_stat',
        'power_budget',
        'power_constrained',
        'power_opmode',
        'power_src',
        'radio_config',
        'radio_stat',
        'rx_bps',
        'rx_bytes',
        'rx_pkts',
        'serial',
        'status',
        'tx_bps',
        'tx_bytes',
        'tx_pkts',
        'mtype',
        'uptime',
        'version',
        'x',
        'y',
    ]

    def __init__(self,
                 mac=None,
                 model=None,
                 ble_config=APIHelper.SKIP,
                 ble_stat=APIHelper.SKIP,
                 cert_expiry=APIHelper.SKIP,
                 env_stat=APIHelper.SKIP,
                 esl_stat=APIHelper.SKIP,
                 ext_ip=APIHelper.SKIP,
                 fwupdate=APIHelper.SKIP,
                 iot_stat=APIHelper.SKIP,
                 ip=APIHelper.SKIP,
                 ip_config=APIHelper.SKIP,
                 ip_stat=APIHelper.SKIP,
                 l_2_tp_stat=APIHelper.SKIP,
                 last_seen=APIHelper.SKIP,
                 last_trouble=APIHelper.SKIP,
                 led=APIHelper.SKIP,
                 lldp_stat=APIHelper.SKIP,
                 locating=APIHelper.SKIP,
                 locked=APIHelper.SKIP,
                 map_id=APIHelper.SKIP,
                 mesh_downlinks=APIHelper.SKIP,
                 mesh_uplink=APIHelper.SKIP,
                 mount=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 num_clients=APIHelper.SKIP,
                 port_stat=APIHelper.SKIP,
                 power_budget=APIHelper.SKIP,
                 power_constrained=APIHelper.SKIP,
                 power_opmode=APIHelper.SKIP,
                 power_src=APIHelper.SKIP,
                 radio_config=APIHelper.SKIP,
                 radio_stat=APIHelper.SKIP,
                 rx_bps=APIHelper.SKIP,
                 rx_bytes=APIHelper.SKIP,
                 rx_pkts=APIHelper.SKIP,
                 serial=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 tx_bps=APIHelper.SKIP,
                 tx_bytes=APIHelper.SKIP,
                 tx_pkts=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 uptime=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 x=APIHelper.SKIP,
                 y=APIHelper.SKIP):
        """Constructor for the StatsDeviceAp class"""

        # Initialize members of the class
        if ble_config is not APIHelper.SKIP:
            self.ble_config = ble_config 
        if ble_stat is not APIHelper.SKIP:
            self.ble_stat = ble_stat 
        if cert_expiry is not APIHelper.SKIP:
            self.cert_expiry = cert_expiry 
        if env_stat is not APIHelper.SKIP:
            self.env_stat = env_stat 
        if esl_stat is not APIHelper.SKIP:
            self.esl_stat = esl_stat 
        if ext_ip is not APIHelper.SKIP:
            self.ext_ip = ext_ip 
        if fwupdate is not APIHelper.SKIP:
            self.fwupdate = fwupdate 
        if iot_stat is not APIHelper.SKIP:
            self.iot_stat = iot_stat 
        if ip is not APIHelper.SKIP:
            self.ip = ip 
        if ip_config is not APIHelper.SKIP:
            self.ip_config = ip_config 
        if ip_stat is not APIHelper.SKIP:
            self.ip_stat = ip_stat 
        if l_2_tp_stat is not APIHelper.SKIP:
            self.l_2_tp_stat = l_2_tp_stat 
        if last_seen is not APIHelper.SKIP:
            self.last_seen = last_seen 
        if last_trouble is not APIHelper.SKIP:
            self.last_trouble = last_trouble 
        if led is not APIHelper.SKIP:
            self.led = led 
        if lldp_stat is not APIHelper.SKIP:
            self.lldp_stat = lldp_stat 
        if locating is not APIHelper.SKIP:
            self.locating = locating 
        if locked is not APIHelper.SKIP:
            self.locked = locked 
        self.mac = mac 
        if map_id is not APIHelper.SKIP:
            self.map_id = map_id 
        if mesh_downlinks is not APIHelper.SKIP:
            self.mesh_downlinks = mesh_downlinks 
        if mesh_uplink is not APIHelper.SKIP:
            self.mesh_uplink = mesh_uplink 
        self.model = model 
        if mount is not APIHelper.SKIP:
            self.mount = mount 
        if name is not APIHelper.SKIP:
            self.name = name 
        if num_clients is not APIHelper.SKIP:
            self.num_clients = num_clients 
        if port_stat is not APIHelper.SKIP:
            self.port_stat = port_stat 
        if power_budget is not APIHelper.SKIP:
            self.power_budget = power_budget 
        if power_constrained is not APIHelper.SKIP:
            self.power_constrained = power_constrained 
        if power_opmode is not APIHelper.SKIP:
            self.power_opmode = power_opmode 
        if power_src is not APIHelper.SKIP:
            self.power_src = power_src 
        if radio_config is not APIHelper.SKIP:
            self.radio_config = radio_config 
        if radio_stat is not APIHelper.SKIP:
            self.radio_stat = radio_stat 
        if rx_bps is not APIHelper.SKIP:
            self.rx_bps = rx_bps 
        if rx_bytes is not APIHelper.SKIP:
            self.rx_bytes = rx_bytes 
        if rx_pkts is not APIHelper.SKIP:
            self.rx_pkts = rx_pkts 
        if serial is not APIHelper.SKIP:
            self.serial = serial 
        if status is not APIHelper.SKIP:
            self.status = status 
        if tx_bps is not APIHelper.SKIP:
            self.tx_bps = tx_bps 
        if tx_bytes is not APIHelper.SKIP:
            self.tx_bytes = tx_bytes 
        if tx_pkts is not APIHelper.SKIP:
            self.tx_pkts = tx_pkts 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if uptime is not APIHelper.SKIP:
            self.uptime = uptime 
        if version is not APIHelper.SKIP:
            self.version = version 
        if x is not APIHelper.SKIP:
            self.x = x 
        if y is not APIHelper.SKIP:
            self.y = y 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        mac = dictionary.get("mac") if dictionary.get("mac") else None
        model = dictionary.get("model") if dictionary.get("model") else None
        ble_config = BleConfig.from_dictionary(dictionary.get('ble_config')) if 'ble_config' in dictionary.keys() else APIHelper.SKIP
        ble_stat = BleStat.from_dictionary(dictionary.get('ble_stat')) if 'ble_stat' in dictionary.keys() else APIHelper.SKIP
        cert_expiry = dictionary.get("cert_expiry") if dictionary.get("cert_expiry") else APIHelper.SKIP
        env_stat = EnvStat.from_dictionary(dictionary.get('env_stat')) if 'env_stat' in dictionary.keys() else APIHelper.SKIP
        esl_stat = EslStat.from_dictionary(dictionary.get('esl_stat')) if 'esl_stat' in dictionary.keys() else APIHelper.SKIP
        ext_ip = dictionary.get("ext_ip") if dictionary.get("ext_ip") else APIHelper.SKIP
        fwupdate = Fwupdate.from_dictionary(dictionary.get('fwupdate')) if 'fwupdate' in dictionary.keys() else APIHelper.SKIP
        iot_stat = IotStat.from_dictionary(dictionary.get('iot_stat')) if 'iot_stat' in dictionary.keys() else APIHelper.SKIP
        ip = dictionary.get("ip") if dictionary.get("ip") else APIHelper.SKIP
        ip_config = IpConfig.from_dictionary(dictionary.get('ip_config')) if 'ip_config' in dictionary.keys() else APIHelper.SKIP
        ip_stat = IpStat.from_dictionary(dictionary.get('ip_stat')) if 'ip_stat' in dictionary.keys() else APIHelper.SKIP
        l_2_tp_stat = L2tpStat.from_dictionary(dictionary.get('l2tp_stat')) if 'l2tp_stat' in dictionary.keys() else APIHelper.SKIP
        last_seen = dictionary.get("last_seen") if dictionary.get("last_seen") else APIHelper.SKIP
        last_trouble = LastTrouble.from_dictionary(dictionary.get('last_trouble')) if 'last_trouble' in dictionary.keys() else APIHelper.SKIP
        led = Led.from_dictionary(dictionary.get('led')) if 'led' in dictionary.keys() else APIHelper.SKIP
        lldp_stat = LldpStat.from_dictionary(dictionary.get('lldp_stat')) if 'lldp_stat' in dictionary.keys() else APIHelper.SKIP
        locating = dictionary.get("locating") if "locating" in dictionary.keys() else APIHelper.SKIP
        locked = dictionary.get("locked") if "locked" in dictionary.keys() else APIHelper.SKIP
        map_id = dictionary.get("map_id") if dictionary.get("map_id") else APIHelper.SKIP
        mesh_downlinks = MeshDownlinks.from_dictionary(dictionary.get('mesh_downlinks')) if 'mesh_downlinks' in dictionary.keys() else APIHelper.SKIP
        mesh_uplink = MeshUplink.from_dictionary(dictionary.get('mesh_uplink')) if 'mesh_uplink' in dictionary.keys() else APIHelper.SKIP
        mount = dictionary.get("mount") if dictionary.get("mount") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        num_clients = dictionary.get("num_clients") if dictionary.get("num_clients") else APIHelper.SKIP
        port_stat = PortStat.from_dictionary(dictionary.get('port_stat')) if 'port_stat' in dictionary.keys() else APIHelper.SKIP
        power_budget = dictionary.get("power_budget") if dictionary.get("power_budget") else APIHelper.SKIP
        power_constrained = dictionary.get("power_constrained") if "power_constrained" in dictionary.keys() else APIHelper.SKIP
        power_opmode = dictionary.get("power_opmode") if dictionary.get("power_opmode") else APIHelper.SKIP
        power_src = dictionary.get("power_src") if dictionary.get("power_src") else APIHelper.SKIP
        radio_config = RadioConfig.from_dictionary(dictionary.get('radio_config')) if 'radio_config' in dictionary.keys() else APIHelper.SKIP
        radio_stat = RadioStat.from_dictionary(dictionary.get('radio_stat')) if 'radio_stat' in dictionary.keys() else APIHelper.SKIP
        rx_bps = dictionary.get("rx_bps") if dictionary.get("rx_bps") else APIHelper.SKIP
        rx_bytes = dictionary.get("rx_bytes") if dictionary.get("rx_bytes") else APIHelper.SKIP
        rx_pkts = dictionary.get("rx_pkts") if dictionary.get("rx_pkts") else APIHelper.SKIP
        serial = dictionary.get("serial") if dictionary.get("serial") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        tx_bps = dictionary.get("tx_bps") if dictionary.get("tx_bps") else APIHelper.SKIP
        tx_bytes = dictionary.get("tx_bytes") if dictionary.get("tx_bytes") else APIHelper.SKIP
        tx_pkts = dictionary.get("tx_pkts") if dictionary.get("tx_pkts") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        uptime = dictionary.get("uptime") if dictionary.get("uptime") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        x = dictionary.get("x") if dictionary.get("x") else APIHelper.SKIP
        y = dictionary.get("y") if dictionary.get("y") else APIHelper.SKIP
        # Return an object of this model
        return cls(mac,
                   model,
                   ble_config,
                   ble_stat,
                   cert_expiry,
                   env_stat,
                   esl_stat,
                   ext_ip,
                   fwupdate,
                   iot_stat,
                   ip,
                   ip_config,
                   ip_stat,
                   l_2_tp_stat,
                   last_seen,
                   last_trouble,
                   led,
                   lldp_stat,
                   locating,
                   locked,
                   map_id,
                   mesh_downlinks,
                   mesh_uplink,
                   mount,
                   name,
                   num_clients,
                   port_stat,
                   power_budget,
                   power_constrained,
                   power_opmode,
                   power_src,
                   radio_config,
                   radio_stat,
                   rx_bps,
                   rx_bytes,
                   rx_pkts,
                   serial,
                   status,
                   tx_bps,
                   tx_bytes,
                   tx_pkts,
                   mtype,
                   uptime,
                   version,
                   x,
                   y)
