# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApMesh(object):

    """Implementation of the 'ap_mesh' model.

    Mesh AP settings

    Attributes:
        enabled (bool): whether mesh is enabled on this AP
        group (int): mesh group, base AP(s) will only allow remote AP(s) in
            the same mesh group to join, 1-9, optional
        role (Role1Enum): base / remote

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enabled": 'enabled',
        "group": 'group',
        "role": 'role'
    }

    _optionals = [
        'enabled',
        'group',
        'role',
    ]

    _nullables = [
        'group',
    ]

    def __init__(self,
                 enabled=False,
                 group=APIHelper.SKIP,
                 role=APIHelper.SKIP):
        """Constructor for the ApMesh class"""

        # Initialize members of the class
        self.enabled = enabled 
        if group is not APIHelper.SKIP:
            self.group = group 
        if role is not APIHelper.SKIP:
            self.role = role 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        enabled = dictionary.get("enabled") if dictionary.get("enabled") else False
        group = dictionary.get("group") if "group" in dictionary.keys() else APIHelper.SKIP
        role = dictionary.get("role") if dictionary.get("role") else APIHelper.SKIP
        # Return an object of this model
        return cls(enabled,
                   group,
                   role)
