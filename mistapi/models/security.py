# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Security(object):

    """Implementation of the 'Security' model.

    TODO: type model description here.

    Attributes:
        disable_local_ssh (bool): whether to disable local SSH (by default,
            local SSH is enabled with allow_mist in Org is enabled
        fips_zeroize_password (string): password required to zeroize devices
            (FIPS) on site level
        limit_ssh_access (bool): whether to allow certain SSH keys to SSH into
            the AP (see Site:Setting)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "disable_local_ssh": 'disable_local_ssh',
        "fips_zeroize_password": 'fips_zeroize_password',
        "limit_ssh_access": 'limit_ssh_access'
    }

    _optionals = [
        'disable_local_ssh',
        'fips_zeroize_password',
        'limit_ssh_access',
    ]

    def __init__(self,
                 disable_local_ssh=APIHelper.SKIP,
                 fips_zeroize_password=APIHelper.SKIP,
                 limit_ssh_access=False):
        """Constructor for the Security class"""

        # Initialize members of the class
        if disable_local_ssh is not APIHelper.SKIP:
            self.disable_local_ssh = disable_local_ssh 
        if fips_zeroize_password is not APIHelper.SKIP:
            self.fips_zeroize_password = fips_zeroize_password 
        self.limit_ssh_access = limit_ssh_access 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        disable_local_ssh = dictionary.get("disable_local_ssh") if "disable_local_ssh" in dictionary.keys() else APIHelper.SKIP
        fips_zeroize_password = dictionary.get("fips_zeroize_password") if dictionary.get("fips_zeroize_password") else APIHelper.SKIP
        limit_ssh_access = dictionary.get("limit_ssh_access") if dictionary.get("limit_ssh_access") else False
        # Return an object of this model
        return cls(disable_local_ssh,
                   fips_zeroize_password,
                   limit_ssh_access)
