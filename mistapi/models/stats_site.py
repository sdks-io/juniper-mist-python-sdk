# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.latlng_2 import Latlng2


class StatsSite(object):

    """Implementation of the 'stats_site' model.

    Site statistics

    Attributes:
        address (string): TODO: type description here.
        alarmtemplate_id (uuid|string): TODO: type description here.
        country_code (string): TODO: type description here.
        created_time (float): TODO: type description here.
        id (uuid|string): TODO: type description here.
        lat (float): TODO: type description here.
        latlng (Latlng2): TODO: type description here.
        lng (float): TODO: type description here.
        modified_time (float): TODO: type description here.
        msp_id (string): TODO: type description here.
        name (string): TODO: type description here.
        networktemplate_id (uuid|string): TODO: type description here.
        num_ap (int): TODO: type description here.
        num_ap_connected (int): TODO: type description here.
        num_clients (int): TODO: type description here.
        num_devices (int): TODO: type description here.
        num_devices_connected (int): TODO: type description here.
        num_gateway (int): TODO: type description here.
        num_gateway_connected (int): TODO: type description here.
        num_switch (int): TODO: type description here.
        num_switch_connected (int): TODO: type description here.
        org_id (uuid|string): TODO: type description here.
        rftemplate_id (uuid|string): TODO: type description here.
        secpolicy_id (object): TODO: type description here.
        sitegroup_ids (list of uuid|string): TODO: type description here.
        timezone (string): TODO: type description here.
        tzoffset (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "address": 'address',
        "alarmtemplate_id": 'alarmtemplate_id',
        "country_code": 'country_code',
        "created_time": 'created_time',
        "id": 'id',
        "lat": 'lat',
        "latlng": 'latlng',
        "lng": 'lng',
        "modified_time": 'modified_time',
        "msp_id": 'msp_id',
        "name": 'name',
        "networktemplate_id": 'networktemplate_id',
        "num_ap": 'num_ap',
        "num_ap_connected": 'num_ap_connected',
        "num_clients": 'num_clients',
        "num_devices": 'num_devices',
        "num_devices_connected": 'num_devices_connected',
        "num_gateway": 'num_gateway',
        "num_gateway_connected": 'num_gateway_connected',
        "num_switch": 'num_switch',
        "num_switch_connected": 'num_switch_connected',
        "org_id": 'org_id',
        "rftemplate_id": 'rftemplate_id',
        "sitegroup_ids": 'sitegroup_ids',
        "timezone": 'timezone',
        "tzoffset": 'tzoffset',
        "secpolicy_id": 'secpolicy_id'
    }

    _optionals = [
        'secpolicy_id',
    ]

    def __init__(self,
                 address=None,
                 alarmtemplate_id=None,
                 country_code=None,
                 created_time=None,
                 id=None,
                 lat=None,
                 latlng=None,
                 lng=None,
                 modified_time=None,
                 msp_id=None,
                 name=None,
                 networktemplate_id=None,
                 num_ap=None,
                 num_ap_connected=None,
                 num_clients=None,
                 num_devices=None,
                 num_devices_connected=None,
                 num_gateway=None,
                 num_gateway_connected=None,
                 num_switch=None,
                 num_switch_connected=None,
                 org_id=None,
                 rftemplate_id=None,
                 sitegroup_ids=None,
                 timezone=None,
                 tzoffset=None,
                 secpolicy_id=APIHelper.SKIP):
        """Constructor for the StatsSite class"""

        # Initialize members of the class
        self.address = address 
        self.alarmtemplate_id = alarmtemplate_id 
        self.country_code = country_code 
        self.created_time = created_time 
        self.id = id 
        self.lat = lat 
        self.latlng = latlng 
        self.lng = lng 
        self.modified_time = modified_time 
        self.msp_id = msp_id 
        self.name = name 
        self.networktemplate_id = networktemplate_id 
        self.num_ap = num_ap 
        self.num_ap_connected = num_ap_connected 
        self.num_clients = num_clients 
        self.num_devices = num_devices 
        self.num_devices_connected = num_devices_connected 
        self.num_gateway = num_gateway 
        self.num_gateway_connected = num_gateway_connected 
        self.num_switch = num_switch 
        self.num_switch_connected = num_switch_connected 
        self.org_id = org_id 
        self.rftemplate_id = rftemplate_id 
        if secpolicy_id is not APIHelper.SKIP:
            self.secpolicy_id = secpolicy_id 
        self.sitegroup_ids = sitegroup_ids 
        self.timezone = timezone 
        self.tzoffset = tzoffset 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        address = dictionary.get("address") if dictionary.get("address") else None
        alarmtemplate_id = dictionary.get("alarmtemplate_id") if dictionary.get("alarmtemplate_id") else None
        country_code = dictionary.get("country_code") if dictionary.get("country_code") else None
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        lat = dictionary.get("lat") if dictionary.get("lat") else None
        latlng = Latlng2.from_dictionary(dictionary.get('latlng')) if dictionary.get('latlng') else None
        lng = dictionary.get("lng") if dictionary.get("lng") else None
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else None
        msp_id = dictionary.get("msp_id") if dictionary.get("msp_id") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        networktemplate_id = dictionary.get("networktemplate_id") if dictionary.get("networktemplate_id") else None
        num_ap = dictionary.get("num_ap") if dictionary.get("num_ap") else None
        num_ap_connected = dictionary.get("num_ap_connected") if dictionary.get("num_ap_connected") else None
        num_clients = dictionary.get("num_clients") if dictionary.get("num_clients") else None
        num_devices = dictionary.get("num_devices") if dictionary.get("num_devices") else None
        num_devices_connected = dictionary.get("num_devices_connected") if dictionary.get("num_devices_connected") else None
        num_gateway = dictionary.get("num_gateway") if dictionary.get("num_gateway") else None
        num_gateway_connected = dictionary.get("num_gateway_connected") if dictionary.get("num_gateway_connected") else None
        num_switch = dictionary.get("num_switch") if dictionary.get("num_switch") else None
        num_switch_connected = dictionary.get("num_switch_connected") if dictionary.get("num_switch_connected") else None
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else None
        rftemplate_id = dictionary.get("rftemplate_id") if dictionary.get("rftemplate_id") else None
        sitegroup_ids = dictionary.get("sitegroup_ids") if dictionary.get("sitegroup_ids") else None
        timezone = dictionary.get("timezone") if dictionary.get("timezone") else None
        tzoffset = dictionary.get("tzoffset") if dictionary.get("tzoffset") else None
        secpolicy_id = dictionary.get("secpolicy_id") if dictionary.get("secpolicy_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(address,
                   alarmtemplate_id,
                   country_code,
                   created_time,
                   id,
                   lat,
                   latlng,
                   lng,
                   modified_time,
                   msp_id,
                   name,
                   networktemplate_id,
                   num_ap,
                   num_ap_connected,
                   num_clients,
                   num_devices,
                   num_devices_connected,
                   num_gateway,
                   num_gateway_connected,
                   num_switch,
                   num_switch_connected,
                   org_id,
                   rftemplate_id,
                   sitegroup_ids,
                   timezone,
                   tzoffset,
                   secpolicy_id)
