# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Transform(object):

    """Implementation of the 'Transform' model.

    If `transform` is provided, all the locations of the objects on the map
    (AP, Zone, Vbeacon, Beacon) will be transformed as well (relative to the
    new Map)

    Attributes:
        rotate (float): TODO: type description here.
        scale (float): TODO: type description here.
        x (float): TODO: type description here.
        y (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "rotate": 'rotate',
        "scale": 'scale',
        "x": 'x',
        "y": 'y'
    }

    _optionals = [
        'rotate',
        'scale',
        'x',
        'y',
    ]

    def __init__(self,
                 rotate=APIHelper.SKIP,
                 scale=APIHelper.SKIP,
                 x=APIHelper.SKIP,
                 y=APIHelper.SKIP):
        """Constructor for the Transform class"""

        # Initialize members of the class
        if rotate is not APIHelper.SKIP:
            self.rotate = rotate 
        if scale is not APIHelper.SKIP:
            self.scale = scale 
        if x is not APIHelper.SKIP:
            self.x = x 
        if y is not APIHelper.SKIP:
            self.y = y 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        rotate = dictionary.get("rotate") if dictionary.get("rotate") else APIHelper.SKIP
        scale = dictionary.get("scale") if dictionary.get("scale") else APIHelper.SKIP
        x = dictionary.get("x") if dictionary.get("x") else APIHelper.SKIP
        y = dictionary.get("y") if dictionary.get("y") else APIHelper.SKIP
        # Return an object of this model
        return cls(rotate,
                   scale,
                   x,
                   y)
