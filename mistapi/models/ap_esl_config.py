# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApEslConfig(object):

    """Implementation of the 'ap_esl_config' model.

    TODO: type model description here.

    Attributes:
        cacert (string): Only if `type`==`imagotag` or `type`==`native`
        channel (int): Only if `type`==`imagotag` or `type`==`native`
        enabled (bool): usb_config is ignored if esl_config enabled
        host (string): Only if `type`==`imagotag` or `type`==`native`
        port (int): Only if `type`==`imagotag` or `type`==`native`
        mtype (Type1Enum): note: ble_config will be ingored if esl_config is
            enabled and with native mode.
        verify_cert (bool): Only if `type`==`imagotag` or `type`==`native`
        vlan_id (int): Only if `type`==`solum` or `type`==`hansho`

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cacert": 'cacert',
        "channel": 'channel',
        "enabled": 'enabled',
        "host": 'host',
        "port": 'port',
        "mtype": 'type',
        "verify_cert": 'verify_cert',
        "vlan_id": 'vlan_id'
    }

    _optionals = [
        'cacert',
        'channel',
        'enabled',
        'host',
        'port',
        'mtype',
        'verify_cert',
        'vlan_id',
    ]

    def __init__(self,
                 cacert=APIHelper.SKIP,
                 channel=APIHelper.SKIP,
                 enabled=False,
                 host=APIHelper.SKIP,
                 port=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 verify_cert=APIHelper.SKIP,
                 vlan_id=1):
        """Constructor for the ApEslConfig class"""

        # Initialize members of the class
        if cacert is not APIHelper.SKIP:
            self.cacert = cacert 
        if channel is not APIHelper.SKIP:
            self.channel = channel 
        self.enabled = enabled 
        if host is not APIHelper.SKIP:
            self.host = host 
        if port is not APIHelper.SKIP:
            self.port = port 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if verify_cert is not APIHelper.SKIP:
            self.verify_cert = verify_cert 
        self.vlan_id = vlan_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        cacert = dictionary.get("cacert") if dictionary.get("cacert") else APIHelper.SKIP
        channel = dictionary.get("channel") if dictionary.get("channel") else APIHelper.SKIP
        enabled = dictionary.get("enabled") if dictionary.get("enabled") else False
        host = dictionary.get("host") if dictionary.get("host") else APIHelper.SKIP
        port = dictionary.get("port") if dictionary.get("port") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        verify_cert = dictionary.get("verify_cert") if "verify_cert" in dictionary.keys() else APIHelper.SKIP
        vlan_id = dictionary.get("vlan_id") if dictionary.get("vlan_id") else 1
        # Return an object of this model
        return cls(cacert,
                   channel,
                   enabled,
                   host,
                   port,
                   mtype,
                   verify_cert,
                   vlan_id)
