# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class User(object):

    """Implementation of the 'User' model.

    TODO: type model description here.

    Attributes:
        authentication_password (string): Not required if
            `authentication_type`==`authentication-none` include alphabetic,
            numeric, and special characters, but it cannot include control
            characters.
        authentication_type (AuthenticationTypeEnum): sha224, sha256, sha384,
            sha512 are supported in 21.1 and newer release
        encryption_password (string): Not required if
            `encryption_type`==`privacy-none` include alphabetic, numeric, and
            special characters, but it cannot include control characters
        encryption_type (EncryptionTypeEnum): TODO: type description here.
        name (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "authentication_password": 'authentication_password',
        "authentication_type": 'authentication_type',
        "encryption_password": 'encryption_password',
        "encryption_type": 'encryption_type',
        "name": 'name'
    }

    _optionals = [
        'authentication_password',
        'authentication_type',
        'encryption_password',
        'encryption_type',
        'name',
    ]

    def __init__(self,
                 authentication_password=APIHelper.SKIP,
                 authentication_type=APIHelper.SKIP,
                 encryption_password=APIHelper.SKIP,
                 encryption_type=APIHelper.SKIP,
                 name=APIHelper.SKIP):
        """Constructor for the User class"""

        # Initialize members of the class
        if authentication_password is not APIHelper.SKIP:
            self.authentication_password = authentication_password 
        if authentication_type is not APIHelper.SKIP:
            self.authentication_type = authentication_type 
        if encryption_password is not APIHelper.SKIP:
            self.encryption_password = encryption_password 
        if encryption_type is not APIHelper.SKIP:
            self.encryption_type = encryption_type 
        if name is not APIHelper.SKIP:
            self.name = name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        authentication_password = dictionary.get("authentication_password") if dictionary.get("authentication_password") else APIHelper.SKIP
        authentication_type = dictionary.get("authentication_type") if dictionary.get("authentication_type") else APIHelper.SKIP
        encryption_password = dictionary.get("encryption_password") if dictionary.get("encryption_password") else APIHelper.SKIP
        encryption_type = dictionary.get("encryption_type") if dictionary.get("encryption_type") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        # Return an object of this model
        return cls(authentication_password,
                   authentication_type,
                   encryption_password,
                   encryption_type,
                   name)
