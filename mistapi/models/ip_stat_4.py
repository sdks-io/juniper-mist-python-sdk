# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class IpStat4(object):

    """Implementation of the 'IpStat4' model.

    OOBM IP stats

    Attributes:
        ip (string): TODO: type description here.
        ips (dict): Property key is the interface name. IPs for each net
            interface
        macs (dict): Property key is the interface name. MAC for each net
            interface

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ip": 'ip',
        "ips": 'ips',
        "macs": 'macs'
    }

    _optionals = [
        'ip',
        'ips',
        'macs',
    ]

    def __init__(self,
                 ip=APIHelper.SKIP,
                 ips=APIHelper.SKIP,
                 macs=APIHelper.SKIP):
        """Constructor for the IpStat4 class"""

        # Initialize members of the class
        if ip is not APIHelper.SKIP:
            self.ip = ip 
        if ips is not APIHelper.SKIP:
            self.ips = ips 
        if macs is not APIHelper.SKIP:
            self.macs = macs 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ip = dictionary.get("ip") if dictionary.get("ip") else APIHelper.SKIP
        ips = dictionary.get("ips") if dictionary.get("ips") else APIHelper.SKIP
        macs = dictionary.get("macs") if dictionary.get("macs") else APIHelper.SKIP
        # Return an object of this model
        return cls(ip,
                   ips,
                   macs)
