# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.privileges import Privileges


class Apitoken(object):

    """Implementation of the 'apitoken' model.

    API Token

    Attributes:
        created_by (string): for Org token only. email of the token creator /
            null if creator is deleted
        created_time (int): TODO: type description here.
        id (uuid|string): TODO: type description here.
        key (string): TODO: type description here.
        last_used (int): TODO: type description here.
        name (string): name of the token
        org_id (uuid|string): TODO: type description here.
        privileges (list of Privileges): list of privileges the token has on
            the orgs/sites

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "created_by": 'created_by',
        "created_time": 'created_time',
        "id": 'id',
        "key": 'key',
        "last_used": 'last_used',
        "name": 'name',
        "org_id": 'org_id',
        "privileges": 'privileges'
    }

    _optionals = [
        'created_by',
        'created_time',
        'id',
        'key',
        'last_used',
        'name',
        'org_id',
        'privileges',
    ]

    _nullables = [
        'created_by',
        'last_used',
    ]

    def __init__(self,
                 created_by=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 key=APIHelper.SKIP,
                 last_used=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 privileges=APIHelper.SKIP):
        """Constructor for the Apitoken class"""

        # Initialize members of the class
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if id is not APIHelper.SKIP:
            self.id = id 
        if key is not APIHelper.SKIP:
            self.key = key 
        if last_used is not APIHelper.SKIP:
            self.last_used = last_used 
        if name is not APIHelper.SKIP:
            self.name = name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if privileges is not APIHelper.SKIP:
            self.privileges = privileges 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        created_by = dictionary.get("created_by") if "created_by" in dictionary.keys() else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        key = dictionary.get("key") if dictionary.get("key") else APIHelper.SKIP
        last_used = dictionary.get("last_used") if "last_used" in dictionary.keys() else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        privileges = None
        if dictionary.get('privileges') is not None:
            privileges = [Privileges.from_dictionary(x) for x in dictionary.get('privileges')]
        else:
            privileges = APIHelper.SKIP
        # Return an object of this model
        return cls(created_by,
                   created_time,
                   id,
                   key,
                   last_used,
                   name,
                   org_id,
                   privileges)
