# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class WlanPortalTemplate(object):

    """Implementation of the 'wlan_portal_template' model.

    portal template wlan settings

    Attributes:
        access_code_alternate_email (string): “Please provide valid alternate
            email”
        alignment (string): defines alignment on portal. “left” is default.
        auth_button_amazon (string): label for Amazon auth button
        auth_button_azure (string): label for Azure auth button
        auth_button_email (string): label for Email auth button
        auth_button_facebook (string): label for Facebook auth button
        auth_button_google (string): label for Google auth button
        auth_button_microsoft (string): label for Microsoft auth button
        auth_button_passphrase (string): label for passphrase auth button
        auth_button_sms (string): label for SMS auth button
        auth_button_sponsor (string): label for Sponsor auth button
        auth_label (string): “Connect to WiFi with”
        back_link (string): label of the link to go back to /logon
        color (string): “#1074bc”
        color_dark (string): “#0b5183”
        color_light (string): “#3589c6”
        company (bool): whether company field is required
        company_error (string): error message when company not provided
        company_label (string): label of company field
        email (bool): whether email field is required
        email_access_domain_error (string): error message when a user has
            valid social login but doesn’t match specified email domains.
        email_cancel (string): Label for cancel confirmation code submission
            using email auth
        email_code_cancel (string): TODO: type description here.
        email_code_error (string): “Please provide valid alternate email”
        email_code_field_label (string): “Confirmation Code”
        email_code_message (string): “Enter the access number that was sent to
            your email address.”
        email_code_submit (string): “Sign In
        email_code_title (string): “Access Code”
        email_error (string): error message when email not provided
        email_field_label (string): “Enter your email address”
        email_label (string): label of email field
        email_message (string): “We will email you an authentication code
            which you can use to connect to the WiFi network.”
        email_submit (string): Label for confirmation code submit button using
            email auth
        email_title (string): “Sign in with Email”
        field_1 (bool): whether to ask field1
        field_1_error (string): error message when field1 not provided
        field_1_label (string): label of field1
        field_1_required (bool): whether field1 is required field
        field_2 (bool): whether to ask field2
        field_2_error (string): error message when field2 not provided
        field_2_label (string): label of field2
        field_2_required (bool): whether field2 is required field
        field_3 (bool): whether to ask field3
        field_3_error (string): error message when field3 not provided
        field_3_label (string): label of field3
        field_3_required (bool): whether field3 is required field
        field_4 (bool): whether to ask field4
        field_4_error (string): error message when field4 not provided
        field_4_label (string): label of field4
        field_4_required (bool): whether field4 is required field
        message (string): “Please enjoy the complimentary Wifi”
        name (bool): whether name field is required
        name_error (string): error message when name not provided
        name_label (string): label of name field
        optout (bool): whether to display “Do Not Store My Personal
            Information”
        optout_label (string): label for “Do Not Store My Personal
            Information”
        page_title (string): “Welcome”
        passphrase_cancel (string): “Cancel”
        passphrase_error (string): error message when invalid passphrase is
            provided
        passphrase_label (string): Passphrase
        passphrase_message (string): “Login using passphrase”
        passphrase_submit (string): “Sign in”
        passphrase_title (string): Title for passphrase details page
        powered_by (bool): whether to show “Powered by Mist”
        required_field_label (string): label to denote required field
        sign_in_label (string): label of the button to /signin
        sms_carrier_default (string): “Please Select”
        sms_carrier_error (string): “Please select a mobile carrier”
        sms_carrier_field_label (string): label for mobile carrier drop-down
            list
        sms_code_cancel (string): Label for cancel confirmation code
            submission
        sms_code_error (string): error message when confirmation code is
            invalid
        sms_code_field_label (string): “Confirmation Code”
        sms_code_message (string): “Enter the confirmation code”
        sms_code_submit (string): Label for confirmation code submit button
        sms_code_title (string): “Access Code”
        sms_country_field_label (string): “Country Code”
        sms_country_format (string): “+1”
        sms_have_access_code (string): Label for checkbox to specify that the
            user has access code
        sms_message_format (string): format of access code sms message.
            {{code}} and {{duration}} are place holders and should be retained
            as is.
        sms_number_cancel (string): label for canceling mobile details for SMS
            auth
        sms_number_error (string): “Invalid Mobile Number”
        sms_number_field_label (string): label for field to provide mobile
            number
        sms_number_format (string): “2125551212 (digits only)”
        sms_number_message (string): “We will send an access code to your
            mobile number which you can use to connect to the WiFi network.
            Message and data rates may apply.”
        sms_number_submit (string): label for submit button for code
            generation
        sms_number_title (string): Title for phone number details
        sms_username_format (string): “username”
        sms_validity_duration (int): how long confirmation code should be
            considered valid (in minutes)
        sponsor_back_link (string): “Go back and edit request form”
        sponsor_cancel (string): “Cancel”
        sponsor_email (string): label for Sponsor Email
        sponsor_email_error (string): “Please provide valid sponsor email”
        sponsor_email_template (string): html template to replace/override
            default sponsor email template  Sponsor Email Template supports
            following template variables:   * `approve_url`: Renders URL to
            approve the request; optionally &minutes=N query param can be
            appended to change the Authorization period of the guest, where N
            is a valid integer denoting number of minutes a guest remains
            authorized  * `deny_url`: Renders URL to reject the request  *
            `guest_email`: Renders Email ID of the guest  * `guest_name`:
            Renders Name of the guest  * `field1`: Renders value of the Custom
            Field 1  * `field2`: Renders value of the Custom Field 2  *
            `sponsor_link_validity_duration`: Renders validity time of the
            request (i.e. Approve/Deny URL)  * `auth_expire_minutes`: Renders
            Wlan-level configured Guest Authorization Expiration time period
            (in minutes), If not configured then default (1 day in minutes)
        sponsor_info_approved (string): “Your request was approved by”
        sponsor_info_denied (string): “Your request was denied by”
        sponsor_info_pending (string): “Your notification has been sent to”
        sponsor_name (string): label for Sponsor Name
        sponsor_name_error (string): “Please provide sponsor’s name”
        sponsor_note_pending (string): “Please wait for them to acknowledge.”
        sponsor_request_access (string): ‘submit button label request Wifi
            Access and notify sponsor about guest request
        sponsor_select_email (string): “Select Sponsor”
        sponsor_status_approved (string): text to display if sponsor approves
            request
        sponsor_status_denied (string): text to display when sponsor denies
            request
        sponsor_status_pending (string): text to display if request is still
            pending
        sponsor_submit (string): submit button label to notify sponsor about
            guest request
        sponsors_error (string): “Please select a sponsor”
        sponsors_info_approved (string): “Your request was approved”
        sponsors_info_denied (string): “Your request was denied”
        sponsors_info_pending (string): “Your notification has been sent to
            the sponsors”
        tos (bool): TODO: type description here.
        tos_accept_label (string): prefix of the label of the link to go to
            /tos
        tos_error (string): error message when tos not accepted
        tos_link (string): label of the link to go to /tos
        tos_text (string): text of the Terms of Service

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "page_title": 'pageTitle',
        "access_code_alternate_email": 'accessCodeAlternateEmail',
        "alignment": 'alignment',
        "auth_button_amazon": 'authButtonAmazon',
        "auth_button_azure": 'authButtonAzure',
        "auth_button_email": 'authButtonEmail',
        "auth_button_facebook": 'authButtonFacebook',
        "auth_button_google": 'authButtonGoogle',
        "auth_button_microsoft": 'authButtonMicrosoft',
        "auth_button_passphrase": 'authButtonPassphrase',
        "auth_button_sms": 'authButtonSms',
        "auth_button_sponsor": 'authButtonSponsor',
        "auth_label": 'authLabel',
        "back_link": 'backLink',
        "color": 'color',
        "color_dark": 'colorDark',
        "color_light": 'colorLight',
        "company": 'company',
        "company_error": 'companyError',
        "company_label": 'companyLabel',
        "email": 'email',
        "email_access_domain_error": 'emailAccessDomainError',
        "email_cancel": 'emailCancel',
        "email_code_cancel": 'emailCodeCancel',
        "email_code_error": 'emailCodeError',
        "email_code_field_label": 'emailCodeFieldLabel',
        "email_code_message": 'emailCodeMessage',
        "email_code_submit": 'emailCodeSubmit',
        "email_code_title": 'emailCodeTitle',
        "email_error": 'emailError',
        "email_field_label": 'emailFieldLabel',
        "email_label": 'emailLabel',
        "email_message": 'emailMessage',
        "email_submit": 'emailSubmit',
        "email_title": 'emailTitle',
        "field_1": 'field1',
        "field_1_error": 'field1Error',
        "field_1_label": 'field1Label',
        "field_1_required": 'field1Required',
        "field_2": 'field2',
        "field_2_error": 'field2Error',
        "field_2_label": 'field2Label',
        "field_2_required": 'field2Required',
        "field_3": 'field3',
        "field_3_error": 'field3Error',
        "field_3_label": 'field3Label',
        "field_3_required": 'field3Required',
        "field_4": 'field4',
        "field_4_error": 'field4Error',
        "field_4_label": 'field4Label',
        "field_4_required": 'field4Required',
        "message": 'message',
        "name": 'name',
        "name_error": 'nameError',
        "name_label": 'nameLabel',
        "optout": 'optout',
        "optout_label": 'optoutLabel',
        "passphrase_cancel": 'passphraseCancel',
        "passphrase_error": 'passphraseError',
        "passphrase_label": 'passphraseLabel',
        "passphrase_message": 'passphraseMessage',
        "passphrase_submit": 'passphraseSubmit',
        "passphrase_title": 'passphraseTitle',
        "powered_by": 'poweredBy',
        "required_field_label": 'requiredFieldLabel',
        "sign_in_label": 'signInLabel',
        "sms_carrier_default": 'smsCarrierDefault',
        "sms_carrier_error": 'smsCarrierError',
        "sms_carrier_field_label": 'smsCarrierFieldLabel',
        "sms_code_cancel": 'smsCodeCancel',
        "sms_code_error": 'smsCodeError',
        "sms_code_field_label": 'smsCodeFieldLabel',
        "sms_code_message": 'smsCodeMessage',
        "sms_code_submit": 'smsCodeSubmit',
        "sms_code_title": 'smsCodeTitle',
        "sms_country_field_label": 'smsCountryFieldLabel',
        "sms_country_format": 'smsCountryFormat',
        "sms_have_access_code": 'smsHaveAccessCode',
        "sms_message_format": 'smsMessageFormat',
        "sms_number_cancel": 'smsNumberCancel',
        "sms_number_error": 'smsNumberError',
        "sms_number_field_label": 'smsNumberFieldLabel',
        "sms_number_format": 'smsNumberFormat',
        "sms_number_message": 'smsNumberMessage',
        "sms_number_submit": 'smsNumberSubmit',
        "sms_number_title": 'smsNumberTitle',
        "sms_username_format": 'smsUsernameFormat',
        "sms_validity_duration": 'smsValidityDuration',
        "sponsor_back_link": 'sponsorBackLink',
        "sponsor_cancel": 'sponsorCancel',
        "sponsor_email": 'sponsorEmail',
        "sponsor_email_error": 'sponsorEmailError',
        "sponsor_email_template": 'sponsorEmailTemplate',
        "sponsor_info_approved": 'sponsorInfoApproved',
        "sponsor_info_denied": 'sponsorInfoDenied',
        "sponsor_info_pending": 'sponsorInfoPending',
        "sponsor_name": 'sponsorName',
        "sponsor_name_error": 'sponsorNameError',
        "sponsor_note_pending": 'sponsorNotePending',
        "sponsor_request_access": 'sponsorRequestAccess',
        "sponsor_select_email": 'sponsorSelectEmail',
        "sponsor_status_approved": 'sponsorStatusApproved',
        "sponsor_status_denied": 'sponsorStatusDenied',
        "sponsor_status_pending": 'sponsorStatusPending',
        "sponsor_submit": 'sponsorSubmit',
        "sponsors_error": 'sponsorsError',
        "sponsors_info_approved": 'sponsorsInfoApproved',
        "sponsors_info_denied": 'sponsorsInfoDenied',
        "sponsors_info_pending": 'sponsorsInfoPending',
        "tos": 'tos',
        "tos_accept_label": 'tosAcceptLabel',
        "tos_error": 'tosError',
        "tos_link": 'tosLink',
        "tos_text": 'tosText'
    }

    _optionals = [
        'access_code_alternate_email',
        'alignment',
        'auth_button_amazon',
        'auth_button_azure',
        'auth_button_email',
        'auth_button_facebook',
        'auth_button_google',
        'auth_button_microsoft',
        'auth_button_passphrase',
        'auth_button_sms',
        'auth_button_sponsor',
        'auth_label',
        'back_link',
        'color',
        'color_dark',
        'color_light',
        'company',
        'company_error',
        'company_label',
        'email',
        'email_access_domain_error',
        'email_cancel',
        'email_code_cancel',
        'email_code_error',
        'email_code_field_label',
        'email_code_message',
        'email_code_submit',
        'email_code_title',
        'email_error',
        'email_field_label',
        'email_label',
        'email_message',
        'email_submit',
        'email_title',
        'field_1',
        'field_1_error',
        'field_1_label',
        'field_1_required',
        'field_2',
        'field_2_error',
        'field_2_label',
        'field_2_required',
        'field_3',
        'field_3_error',
        'field_3_label',
        'field_3_required',
        'field_4',
        'field_4_error',
        'field_4_label',
        'field_4_required',
        'message',
        'name',
        'name_error',
        'name_label',
        'optout',
        'optout_label',
        'passphrase_cancel',
        'passphrase_error',
        'passphrase_label',
        'passphrase_message',
        'passphrase_submit',
        'passphrase_title',
        'powered_by',
        'required_field_label',
        'sign_in_label',
        'sms_carrier_default',
        'sms_carrier_error',
        'sms_carrier_field_label',
        'sms_code_cancel',
        'sms_code_error',
        'sms_code_field_label',
        'sms_code_message',
        'sms_code_submit',
        'sms_code_title',
        'sms_country_field_label',
        'sms_country_format',
        'sms_have_access_code',
        'sms_message_format',
        'sms_number_cancel',
        'sms_number_error',
        'sms_number_field_label',
        'sms_number_format',
        'sms_number_message',
        'sms_number_submit',
        'sms_number_title',
        'sms_username_format',
        'sms_validity_duration',
        'sponsor_back_link',
        'sponsor_cancel',
        'sponsor_email',
        'sponsor_email_error',
        'sponsor_email_template',
        'sponsor_info_approved',
        'sponsor_info_denied',
        'sponsor_info_pending',
        'sponsor_name',
        'sponsor_name_error',
        'sponsor_note_pending',
        'sponsor_request_access',
        'sponsor_select_email',
        'sponsor_status_approved',
        'sponsor_status_denied',
        'sponsor_status_pending',
        'sponsor_submit',
        'sponsors_error',
        'sponsors_info_approved',
        'sponsors_info_denied',
        'sponsors_info_pending',
        'tos',
        'tos_accept_label',
        'tos_error',
        'tos_link',
        'tos_text',
    ]

    def __init__(self,
                 page_title=None,
                 access_code_alternate_email=APIHelper.SKIP,
                 alignment=APIHelper.SKIP,
                 auth_button_amazon=APIHelper.SKIP,
                 auth_button_azure=APIHelper.SKIP,
                 auth_button_email=APIHelper.SKIP,
                 auth_button_facebook=APIHelper.SKIP,
                 auth_button_google=APIHelper.SKIP,
                 auth_button_microsoft=APIHelper.SKIP,
                 auth_button_passphrase=APIHelper.SKIP,
                 auth_button_sms=APIHelper.SKIP,
                 auth_button_sponsor=APIHelper.SKIP,
                 auth_label=APIHelper.SKIP,
                 back_link=APIHelper.SKIP,
                 color=APIHelper.SKIP,
                 color_dark=APIHelper.SKIP,
                 color_light=APIHelper.SKIP,
                 company=False,
                 company_error=APIHelper.SKIP,
                 company_label=APIHelper.SKIP,
                 email=False,
                 email_access_domain_error=APIHelper.SKIP,
                 email_cancel=APIHelper.SKIP,
                 email_code_cancel=APIHelper.SKIP,
                 email_code_error=APIHelper.SKIP,
                 email_code_field_label=APIHelper.SKIP,
                 email_code_message=APIHelper.SKIP,
                 email_code_submit=APIHelper.SKIP,
                 email_code_title=APIHelper.SKIP,
                 email_error=APIHelper.SKIP,
                 email_field_label=APIHelper.SKIP,
                 email_label=APIHelper.SKIP,
                 email_message=APIHelper.SKIP,
                 email_submit=APIHelper.SKIP,
                 email_title=APIHelper.SKIP,
                 field_1=APIHelper.SKIP,
                 field_1_error=APIHelper.SKIP,
                 field_1_label=APIHelper.SKIP,
                 field_1_required=APIHelper.SKIP,
                 field_2=APIHelper.SKIP,
                 field_2_error=APIHelper.SKIP,
                 field_2_label=APIHelper.SKIP,
                 field_2_required=APIHelper.SKIP,
                 field_3=APIHelper.SKIP,
                 field_3_error=APIHelper.SKIP,
                 field_3_label=APIHelper.SKIP,
                 field_3_required=APIHelper.SKIP,
                 field_4=APIHelper.SKIP,
                 field_4_error=APIHelper.SKIP,
                 field_4_label=APIHelper.SKIP,
                 field_4_required=APIHelper.SKIP,
                 message=APIHelper.SKIP,
                 name=False,
                 name_error=APIHelper.SKIP,
                 name_label=APIHelper.SKIP,
                 optout=APIHelper.SKIP,
                 optout_label=APIHelper.SKIP,
                 passphrase_cancel=APIHelper.SKIP,
                 passphrase_error=APIHelper.SKIP,
                 passphrase_label=APIHelper.SKIP,
                 passphrase_message=APIHelper.SKIP,
                 passphrase_submit=APIHelper.SKIP,
                 passphrase_title=APIHelper.SKIP,
                 powered_by=True,
                 required_field_label=APIHelper.SKIP,
                 sign_in_label=APIHelper.SKIP,
                 sms_carrier_default=APIHelper.SKIP,
                 sms_carrier_error=APIHelper.SKIP,
                 sms_carrier_field_label=APIHelper.SKIP,
                 sms_code_cancel=APIHelper.SKIP,
                 sms_code_error=APIHelper.SKIP,
                 sms_code_field_label=APIHelper.SKIP,
                 sms_code_message=APIHelper.SKIP,
                 sms_code_submit=APIHelper.SKIP,
                 sms_code_title=APIHelper.SKIP,
                 sms_country_field_label=APIHelper.SKIP,
                 sms_country_format=APIHelper.SKIP,
                 sms_have_access_code=APIHelper.SKIP,
                 sms_message_format=APIHelper.SKIP,
                 sms_number_cancel=APIHelper.SKIP,
                 sms_number_error=APIHelper.SKIP,
                 sms_number_field_label=APIHelper.SKIP,
                 sms_number_format=APIHelper.SKIP,
                 sms_number_message=APIHelper.SKIP,
                 sms_number_submit=APIHelper.SKIP,
                 sms_number_title=APIHelper.SKIP,
                 sms_username_format=APIHelper.SKIP,
                 sms_validity_duration=APIHelper.SKIP,
                 sponsor_back_link=APIHelper.SKIP,
                 sponsor_cancel=APIHelper.SKIP,
                 sponsor_email=APIHelper.SKIP,
                 sponsor_email_error=APIHelper.SKIP,
                 sponsor_email_template=APIHelper.SKIP,
                 sponsor_info_approved=APIHelper.SKIP,
                 sponsor_info_denied=APIHelper.SKIP,
                 sponsor_info_pending=APIHelper.SKIP,
                 sponsor_name=APIHelper.SKIP,
                 sponsor_name_error=APIHelper.SKIP,
                 sponsor_note_pending=APIHelper.SKIP,
                 sponsor_request_access=APIHelper.SKIP,
                 sponsor_select_email=APIHelper.SKIP,
                 sponsor_status_approved=APIHelper.SKIP,
                 sponsor_status_denied=APIHelper.SKIP,
                 sponsor_status_pending=APIHelper.SKIP,
                 sponsor_submit=APIHelper.SKIP,
                 sponsors_error=APIHelper.SKIP,
                 sponsors_info_approved=APIHelper.SKIP,
                 sponsors_info_denied=APIHelper.SKIP,
                 sponsors_info_pending=APIHelper.SKIP,
                 tos=True,
                 tos_accept_label=APIHelper.SKIP,
                 tos_error=APIHelper.SKIP,
                 tos_link=APIHelper.SKIP,
                 tos_text=APIHelper.SKIP):
        """Constructor for the WlanPortalTemplate class"""

        # Initialize members of the class
        if access_code_alternate_email is not APIHelper.SKIP:
            self.access_code_alternate_email = access_code_alternate_email 
        if alignment is not APIHelper.SKIP:
            self.alignment = alignment 
        if auth_button_amazon is not APIHelper.SKIP:
            self.auth_button_amazon = auth_button_amazon 
        if auth_button_azure is not APIHelper.SKIP:
            self.auth_button_azure = auth_button_azure 
        if auth_button_email is not APIHelper.SKIP:
            self.auth_button_email = auth_button_email 
        if auth_button_facebook is not APIHelper.SKIP:
            self.auth_button_facebook = auth_button_facebook 
        if auth_button_google is not APIHelper.SKIP:
            self.auth_button_google = auth_button_google 
        if auth_button_microsoft is not APIHelper.SKIP:
            self.auth_button_microsoft = auth_button_microsoft 
        if auth_button_passphrase is not APIHelper.SKIP:
            self.auth_button_passphrase = auth_button_passphrase 
        if auth_button_sms is not APIHelper.SKIP:
            self.auth_button_sms = auth_button_sms 
        if auth_button_sponsor is not APIHelper.SKIP:
            self.auth_button_sponsor = auth_button_sponsor 
        if auth_label is not APIHelper.SKIP:
            self.auth_label = auth_label 
        if back_link is not APIHelper.SKIP:
            self.back_link = back_link 
        if color is not APIHelper.SKIP:
            self.color = color 
        if color_dark is not APIHelper.SKIP:
            self.color_dark = color_dark 
        if color_light is not APIHelper.SKIP:
            self.color_light = color_light 
        self.company = company 
        if company_error is not APIHelper.SKIP:
            self.company_error = company_error 
        if company_label is not APIHelper.SKIP:
            self.company_label = company_label 
        self.email = email 
        if email_access_domain_error is not APIHelper.SKIP:
            self.email_access_domain_error = email_access_domain_error 
        if email_cancel is not APIHelper.SKIP:
            self.email_cancel = email_cancel 
        if email_code_cancel is not APIHelper.SKIP:
            self.email_code_cancel = email_code_cancel 
        if email_code_error is not APIHelper.SKIP:
            self.email_code_error = email_code_error 
        if email_code_field_label is not APIHelper.SKIP:
            self.email_code_field_label = email_code_field_label 
        if email_code_message is not APIHelper.SKIP:
            self.email_code_message = email_code_message 
        if email_code_submit is not APIHelper.SKIP:
            self.email_code_submit = email_code_submit 
        if email_code_title is not APIHelper.SKIP:
            self.email_code_title = email_code_title 
        if email_error is not APIHelper.SKIP:
            self.email_error = email_error 
        if email_field_label is not APIHelper.SKIP:
            self.email_field_label = email_field_label 
        if email_label is not APIHelper.SKIP:
            self.email_label = email_label 
        if email_message is not APIHelper.SKIP:
            self.email_message = email_message 
        if email_submit is not APIHelper.SKIP:
            self.email_submit = email_submit 
        if email_title is not APIHelper.SKIP:
            self.email_title = email_title 
        if field_1 is not APIHelper.SKIP:
            self.field_1 = field_1 
        if field_1_error is not APIHelper.SKIP:
            self.field_1_error = field_1_error 
        if field_1_label is not APIHelper.SKIP:
            self.field_1_label = field_1_label 
        if field_1_required is not APIHelper.SKIP:
            self.field_1_required = field_1_required 
        if field_2 is not APIHelper.SKIP:
            self.field_2 = field_2 
        if field_2_error is not APIHelper.SKIP:
            self.field_2_error = field_2_error 
        if field_2_label is not APIHelper.SKIP:
            self.field_2_label = field_2_label 
        if field_2_required is not APIHelper.SKIP:
            self.field_2_required = field_2_required 
        if field_3 is not APIHelper.SKIP:
            self.field_3 = field_3 
        if field_3_error is not APIHelper.SKIP:
            self.field_3_error = field_3_error 
        if field_3_label is not APIHelper.SKIP:
            self.field_3_label = field_3_label 
        if field_3_required is not APIHelper.SKIP:
            self.field_3_required = field_3_required 
        if field_4 is not APIHelper.SKIP:
            self.field_4 = field_4 
        if field_4_error is not APIHelper.SKIP:
            self.field_4_error = field_4_error 
        if field_4_label is not APIHelper.SKIP:
            self.field_4_label = field_4_label 
        if field_4_required is not APIHelper.SKIP:
            self.field_4_required = field_4_required 
        if message is not APIHelper.SKIP:
            self.message = message 
        self.name = name 
        if name_error is not APIHelper.SKIP:
            self.name_error = name_error 
        if name_label is not APIHelper.SKIP:
            self.name_label = name_label 
        if optout is not APIHelper.SKIP:
            self.optout = optout 
        if optout_label is not APIHelper.SKIP:
            self.optout_label = optout_label 
        self.page_title = page_title 
        if passphrase_cancel is not APIHelper.SKIP:
            self.passphrase_cancel = passphrase_cancel 
        if passphrase_error is not APIHelper.SKIP:
            self.passphrase_error = passphrase_error 
        if passphrase_label is not APIHelper.SKIP:
            self.passphrase_label = passphrase_label 
        if passphrase_message is not APIHelper.SKIP:
            self.passphrase_message = passphrase_message 
        if passphrase_submit is not APIHelper.SKIP:
            self.passphrase_submit = passphrase_submit 
        if passphrase_title is not APIHelper.SKIP:
            self.passphrase_title = passphrase_title 
        self.powered_by = powered_by 
        if required_field_label is not APIHelper.SKIP:
            self.required_field_label = required_field_label 
        if sign_in_label is not APIHelper.SKIP:
            self.sign_in_label = sign_in_label 
        if sms_carrier_default is not APIHelper.SKIP:
            self.sms_carrier_default = sms_carrier_default 
        if sms_carrier_error is not APIHelper.SKIP:
            self.sms_carrier_error = sms_carrier_error 
        if sms_carrier_field_label is not APIHelper.SKIP:
            self.sms_carrier_field_label = sms_carrier_field_label 
        if sms_code_cancel is not APIHelper.SKIP:
            self.sms_code_cancel = sms_code_cancel 
        if sms_code_error is not APIHelper.SKIP:
            self.sms_code_error = sms_code_error 
        if sms_code_field_label is not APIHelper.SKIP:
            self.sms_code_field_label = sms_code_field_label 
        if sms_code_message is not APIHelper.SKIP:
            self.sms_code_message = sms_code_message 
        if sms_code_submit is not APIHelper.SKIP:
            self.sms_code_submit = sms_code_submit 
        if sms_code_title is not APIHelper.SKIP:
            self.sms_code_title = sms_code_title 
        if sms_country_field_label is not APIHelper.SKIP:
            self.sms_country_field_label = sms_country_field_label 
        if sms_country_format is not APIHelper.SKIP:
            self.sms_country_format = sms_country_format 
        if sms_have_access_code is not APIHelper.SKIP:
            self.sms_have_access_code = sms_have_access_code 
        if sms_message_format is not APIHelper.SKIP:
            self.sms_message_format = sms_message_format 
        if sms_number_cancel is not APIHelper.SKIP:
            self.sms_number_cancel = sms_number_cancel 
        if sms_number_error is not APIHelper.SKIP:
            self.sms_number_error = sms_number_error 
        if sms_number_field_label is not APIHelper.SKIP:
            self.sms_number_field_label = sms_number_field_label 
        if sms_number_format is not APIHelper.SKIP:
            self.sms_number_format = sms_number_format 
        if sms_number_message is not APIHelper.SKIP:
            self.sms_number_message = sms_number_message 
        if sms_number_submit is not APIHelper.SKIP:
            self.sms_number_submit = sms_number_submit 
        if sms_number_title is not APIHelper.SKIP:
            self.sms_number_title = sms_number_title 
        if sms_username_format is not APIHelper.SKIP:
            self.sms_username_format = sms_username_format 
        if sms_validity_duration is not APIHelper.SKIP:
            self.sms_validity_duration = sms_validity_duration 
        if sponsor_back_link is not APIHelper.SKIP:
            self.sponsor_back_link = sponsor_back_link 
        if sponsor_cancel is not APIHelper.SKIP:
            self.sponsor_cancel = sponsor_cancel 
        if sponsor_email is not APIHelper.SKIP:
            self.sponsor_email = sponsor_email 
        if sponsor_email_error is not APIHelper.SKIP:
            self.sponsor_email_error = sponsor_email_error 
        if sponsor_email_template is not APIHelper.SKIP:
            self.sponsor_email_template = sponsor_email_template 
        if sponsor_info_approved is not APIHelper.SKIP:
            self.sponsor_info_approved = sponsor_info_approved 
        if sponsor_info_denied is not APIHelper.SKIP:
            self.sponsor_info_denied = sponsor_info_denied 
        if sponsor_info_pending is not APIHelper.SKIP:
            self.sponsor_info_pending = sponsor_info_pending 
        if sponsor_name is not APIHelper.SKIP:
            self.sponsor_name = sponsor_name 
        if sponsor_name_error is not APIHelper.SKIP:
            self.sponsor_name_error = sponsor_name_error 
        if sponsor_note_pending is not APIHelper.SKIP:
            self.sponsor_note_pending = sponsor_note_pending 
        if sponsor_request_access is not APIHelper.SKIP:
            self.sponsor_request_access = sponsor_request_access 
        if sponsor_select_email is not APIHelper.SKIP:
            self.sponsor_select_email = sponsor_select_email 
        if sponsor_status_approved is not APIHelper.SKIP:
            self.sponsor_status_approved = sponsor_status_approved 
        if sponsor_status_denied is not APIHelper.SKIP:
            self.sponsor_status_denied = sponsor_status_denied 
        if sponsor_status_pending is not APIHelper.SKIP:
            self.sponsor_status_pending = sponsor_status_pending 
        if sponsor_submit is not APIHelper.SKIP:
            self.sponsor_submit = sponsor_submit 
        if sponsors_error is not APIHelper.SKIP:
            self.sponsors_error = sponsors_error 
        if sponsors_info_approved is not APIHelper.SKIP:
            self.sponsors_info_approved = sponsors_info_approved 
        if sponsors_info_denied is not APIHelper.SKIP:
            self.sponsors_info_denied = sponsors_info_denied 
        if sponsors_info_pending is not APIHelper.SKIP:
            self.sponsors_info_pending = sponsors_info_pending 
        self.tos = tos 
        if tos_accept_label is not APIHelper.SKIP:
            self.tos_accept_label = tos_accept_label 
        if tos_error is not APIHelper.SKIP:
            self.tos_error = tos_error 
        if tos_link is not APIHelper.SKIP:
            self.tos_link = tos_link 
        if tos_text is not APIHelper.SKIP:
            self.tos_text = tos_text 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        page_title = dictionary.get("pageTitle") if dictionary.get("pageTitle") else None
        access_code_alternate_email = dictionary.get("accessCodeAlternateEmail") if dictionary.get("accessCodeAlternateEmail") else APIHelper.SKIP
        alignment = dictionary.get("alignment") if dictionary.get("alignment") else APIHelper.SKIP
        auth_button_amazon = dictionary.get("authButtonAmazon") if dictionary.get("authButtonAmazon") else APIHelper.SKIP
        auth_button_azure = dictionary.get("authButtonAzure") if dictionary.get("authButtonAzure") else APIHelper.SKIP
        auth_button_email = dictionary.get("authButtonEmail") if dictionary.get("authButtonEmail") else APIHelper.SKIP
        auth_button_facebook = dictionary.get("authButtonFacebook") if dictionary.get("authButtonFacebook") else APIHelper.SKIP
        auth_button_google = dictionary.get("authButtonGoogle") if dictionary.get("authButtonGoogle") else APIHelper.SKIP
        auth_button_microsoft = dictionary.get("authButtonMicrosoft") if dictionary.get("authButtonMicrosoft") else APIHelper.SKIP
        auth_button_passphrase = dictionary.get("authButtonPassphrase") if dictionary.get("authButtonPassphrase") else APIHelper.SKIP
        auth_button_sms = dictionary.get("authButtonSms") if dictionary.get("authButtonSms") else APIHelper.SKIP
        auth_button_sponsor = dictionary.get("authButtonSponsor") if dictionary.get("authButtonSponsor") else APIHelper.SKIP
        auth_label = dictionary.get("authLabel") if dictionary.get("authLabel") else APIHelper.SKIP
        back_link = dictionary.get("backLink") if dictionary.get("backLink") else APIHelper.SKIP
        color = dictionary.get("color") if dictionary.get("color") else APIHelper.SKIP
        color_dark = dictionary.get("colorDark") if dictionary.get("colorDark") else APIHelper.SKIP
        color_light = dictionary.get("colorLight") if dictionary.get("colorLight") else APIHelper.SKIP
        company = dictionary.get("company") if dictionary.get("company") else False
        company_error = dictionary.get("companyError") if dictionary.get("companyError") else APIHelper.SKIP
        company_label = dictionary.get("companyLabel") if dictionary.get("companyLabel") else APIHelper.SKIP
        email = dictionary.get("email") if dictionary.get("email") else False
        email_access_domain_error = dictionary.get("emailAccessDomainError") if dictionary.get("emailAccessDomainError") else APIHelper.SKIP
        email_cancel = dictionary.get("emailCancel") if dictionary.get("emailCancel") else APIHelper.SKIP
        email_code_cancel = dictionary.get("emailCodeCancel") if dictionary.get("emailCodeCancel") else APIHelper.SKIP
        email_code_error = dictionary.get("emailCodeError") if dictionary.get("emailCodeError") else APIHelper.SKIP
        email_code_field_label = dictionary.get("emailCodeFieldLabel") if dictionary.get("emailCodeFieldLabel") else APIHelper.SKIP
        email_code_message = dictionary.get("emailCodeMessage") if dictionary.get("emailCodeMessage") else APIHelper.SKIP
        email_code_submit = dictionary.get("emailCodeSubmit") if dictionary.get("emailCodeSubmit") else APIHelper.SKIP
        email_code_title = dictionary.get("emailCodeTitle") if dictionary.get("emailCodeTitle") else APIHelper.SKIP
        email_error = dictionary.get("emailError") if dictionary.get("emailError") else APIHelper.SKIP
        email_field_label = dictionary.get("emailFieldLabel") if dictionary.get("emailFieldLabel") else APIHelper.SKIP
        email_label = dictionary.get("emailLabel") if dictionary.get("emailLabel") else APIHelper.SKIP
        email_message = dictionary.get("emailMessage") if dictionary.get("emailMessage") else APIHelper.SKIP
        email_submit = dictionary.get("emailSubmit") if dictionary.get("emailSubmit") else APIHelper.SKIP
        email_title = dictionary.get("emailTitle") if dictionary.get("emailTitle") else APIHelper.SKIP
        field_1 = dictionary.get("field1") if "field1" in dictionary.keys() else APIHelper.SKIP
        field_1_error = dictionary.get("field1Error") if dictionary.get("field1Error") else APIHelper.SKIP
        field_1_label = dictionary.get("field1Label") if dictionary.get("field1Label") else APIHelper.SKIP
        field_1_required = dictionary.get("field1Required") if "field1Required" in dictionary.keys() else APIHelper.SKIP
        field_2 = dictionary.get("field2") if "field2" in dictionary.keys() else APIHelper.SKIP
        field_2_error = dictionary.get("field2Error") if dictionary.get("field2Error") else APIHelper.SKIP
        field_2_label = dictionary.get("field2Label") if dictionary.get("field2Label") else APIHelper.SKIP
        field_2_required = dictionary.get("field2Required") if "field2Required" in dictionary.keys() else APIHelper.SKIP
        field_3 = dictionary.get("field3") if "field3" in dictionary.keys() else APIHelper.SKIP
        field_3_error = dictionary.get("field3Error") if dictionary.get("field3Error") else APIHelper.SKIP
        field_3_label = dictionary.get("field3Label") if dictionary.get("field3Label") else APIHelper.SKIP
        field_3_required = dictionary.get("field3Required") if "field3Required" in dictionary.keys() else APIHelper.SKIP
        field_4 = dictionary.get("field4") if "field4" in dictionary.keys() else APIHelper.SKIP
        field_4_error = dictionary.get("field4Error") if dictionary.get("field4Error") else APIHelper.SKIP
        field_4_label = dictionary.get("field4Label") if dictionary.get("field4Label") else APIHelper.SKIP
        field_4_required = dictionary.get("field4Required") if "field4Required" in dictionary.keys() else APIHelper.SKIP
        message = dictionary.get("message") if dictionary.get("message") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else False
        name_error = dictionary.get("nameError") if dictionary.get("nameError") else APIHelper.SKIP
        name_label = dictionary.get("nameLabel") if dictionary.get("nameLabel") else APIHelper.SKIP
        optout = dictionary.get("optout") if "optout" in dictionary.keys() else APIHelper.SKIP
        optout_label = dictionary.get("optoutLabel") if dictionary.get("optoutLabel") else APIHelper.SKIP
        passphrase_cancel = dictionary.get("passphraseCancel") if dictionary.get("passphraseCancel") else APIHelper.SKIP
        passphrase_error = dictionary.get("passphraseError") if dictionary.get("passphraseError") else APIHelper.SKIP
        passphrase_label = dictionary.get("passphraseLabel") if dictionary.get("passphraseLabel") else APIHelper.SKIP
        passphrase_message = dictionary.get("passphraseMessage") if dictionary.get("passphraseMessage") else APIHelper.SKIP
        passphrase_submit = dictionary.get("passphraseSubmit") if dictionary.get("passphraseSubmit") else APIHelper.SKIP
        passphrase_title = dictionary.get("passphraseTitle") if dictionary.get("passphraseTitle") else APIHelper.SKIP
        powered_by = dictionary.get("poweredBy") if dictionary.get("poweredBy") else True
        required_field_label = dictionary.get("requiredFieldLabel") if dictionary.get("requiredFieldLabel") else APIHelper.SKIP
        sign_in_label = dictionary.get("signInLabel") if dictionary.get("signInLabel") else APIHelper.SKIP
        sms_carrier_default = dictionary.get("smsCarrierDefault") if dictionary.get("smsCarrierDefault") else APIHelper.SKIP
        sms_carrier_error = dictionary.get("smsCarrierError") if dictionary.get("smsCarrierError") else APIHelper.SKIP
        sms_carrier_field_label = dictionary.get("smsCarrierFieldLabel") if dictionary.get("smsCarrierFieldLabel") else APIHelper.SKIP
        sms_code_cancel = dictionary.get("smsCodeCancel") if dictionary.get("smsCodeCancel") else APIHelper.SKIP
        sms_code_error = dictionary.get("smsCodeError") if dictionary.get("smsCodeError") else APIHelper.SKIP
        sms_code_field_label = dictionary.get("smsCodeFieldLabel") if dictionary.get("smsCodeFieldLabel") else APIHelper.SKIP
        sms_code_message = dictionary.get("smsCodeMessage") if dictionary.get("smsCodeMessage") else APIHelper.SKIP
        sms_code_submit = dictionary.get("smsCodeSubmit") if dictionary.get("smsCodeSubmit") else APIHelper.SKIP
        sms_code_title = dictionary.get("smsCodeTitle") if dictionary.get("smsCodeTitle") else APIHelper.SKIP
        sms_country_field_label = dictionary.get("smsCountryFieldLabel") if dictionary.get("smsCountryFieldLabel") else APIHelper.SKIP
        sms_country_format = dictionary.get("smsCountryFormat") if dictionary.get("smsCountryFormat") else APIHelper.SKIP
        sms_have_access_code = dictionary.get("smsHaveAccessCode") if dictionary.get("smsHaveAccessCode") else APIHelper.SKIP
        sms_message_format = dictionary.get("smsMessageFormat") if dictionary.get("smsMessageFormat") else APIHelper.SKIP
        sms_number_cancel = dictionary.get("smsNumberCancel") if dictionary.get("smsNumberCancel") else APIHelper.SKIP
        sms_number_error = dictionary.get("smsNumberError") if dictionary.get("smsNumberError") else APIHelper.SKIP
        sms_number_field_label = dictionary.get("smsNumberFieldLabel") if dictionary.get("smsNumberFieldLabel") else APIHelper.SKIP
        sms_number_format = dictionary.get("smsNumberFormat") if dictionary.get("smsNumberFormat") else APIHelper.SKIP
        sms_number_message = dictionary.get("smsNumberMessage") if dictionary.get("smsNumberMessage") else APIHelper.SKIP
        sms_number_submit = dictionary.get("smsNumberSubmit") if dictionary.get("smsNumberSubmit") else APIHelper.SKIP
        sms_number_title = dictionary.get("smsNumberTitle") if dictionary.get("smsNumberTitle") else APIHelper.SKIP
        sms_username_format = dictionary.get("smsUsernameFormat") if dictionary.get("smsUsernameFormat") else APIHelper.SKIP
        sms_validity_duration = dictionary.get("smsValidityDuration") if dictionary.get("smsValidityDuration") else APIHelper.SKIP
        sponsor_back_link = dictionary.get("sponsorBackLink") if dictionary.get("sponsorBackLink") else APIHelper.SKIP
        sponsor_cancel = dictionary.get("sponsorCancel") if dictionary.get("sponsorCancel") else APIHelper.SKIP
        sponsor_email = dictionary.get("sponsorEmail") if dictionary.get("sponsorEmail") else APIHelper.SKIP
        sponsor_email_error = dictionary.get("sponsorEmailError") if dictionary.get("sponsorEmailError") else APIHelper.SKIP
        sponsor_email_template = dictionary.get("sponsorEmailTemplate") if dictionary.get("sponsorEmailTemplate") else APIHelper.SKIP
        sponsor_info_approved = dictionary.get("sponsorInfoApproved") if dictionary.get("sponsorInfoApproved") else APIHelper.SKIP
        sponsor_info_denied = dictionary.get("sponsorInfoDenied") if dictionary.get("sponsorInfoDenied") else APIHelper.SKIP
        sponsor_info_pending = dictionary.get("sponsorInfoPending") if dictionary.get("sponsorInfoPending") else APIHelper.SKIP
        sponsor_name = dictionary.get("sponsorName") if dictionary.get("sponsorName") else APIHelper.SKIP
        sponsor_name_error = dictionary.get("sponsorNameError") if dictionary.get("sponsorNameError") else APIHelper.SKIP
        sponsor_note_pending = dictionary.get("sponsorNotePending") if dictionary.get("sponsorNotePending") else APIHelper.SKIP
        sponsor_request_access = dictionary.get("sponsorRequestAccess") if dictionary.get("sponsorRequestAccess") else APIHelper.SKIP
        sponsor_select_email = dictionary.get("sponsorSelectEmail") if dictionary.get("sponsorSelectEmail") else APIHelper.SKIP
        sponsor_status_approved = dictionary.get("sponsorStatusApproved") if dictionary.get("sponsorStatusApproved") else APIHelper.SKIP
        sponsor_status_denied = dictionary.get("sponsorStatusDenied") if dictionary.get("sponsorStatusDenied") else APIHelper.SKIP
        sponsor_status_pending = dictionary.get("sponsorStatusPending") if dictionary.get("sponsorStatusPending") else APIHelper.SKIP
        sponsor_submit = dictionary.get("sponsorSubmit") if dictionary.get("sponsorSubmit") else APIHelper.SKIP
        sponsors_error = dictionary.get("sponsorsError") if dictionary.get("sponsorsError") else APIHelper.SKIP
        sponsors_info_approved = dictionary.get("sponsorsInfoApproved") if dictionary.get("sponsorsInfoApproved") else APIHelper.SKIP
        sponsors_info_denied = dictionary.get("sponsorsInfoDenied") if dictionary.get("sponsorsInfoDenied") else APIHelper.SKIP
        sponsors_info_pending = dictionary.get("sponsorsInfoPending") if dictionary.get("sponsorsInfoPending") else APIHelper.SKIP
        tos = dictionary.get("tos") if dictionary.get("tos") else True
        tos_accept_label = dictionary.get("tosAcceptLabel") if dictionary.get("tosAcceptLabel") else APIHelper.SKIP
        tos_error = dictionary.get("tosError") if dictionary.get("tosError") else APIHelper.SKIP
        tos_link = dictionary.get("tosLink") if dictionary.get("tosLink") else APIHelper.SKIP
        tos_text = dictionary.get("tosText") if dictionary.get("tosText") else APIHelper.SKIP
        # Return an object of this model
        return cls(page_title,
                   access_code_alternate_email,
                   alignment,
                   auth_button_amazon,
                   auth_button_azure,
                   auth_button_email,
                   auth_button_facebook,
                   auth_button_google,
                   auth_button_microsoft,
                   auth_button_passphrase,
                   auth_button_sms,
                   auth_button_sponsor,
                   auth_label,
                   back_link,
                   color,
                   color_dark,
                   color_light,
                   company,
                   company_error,
                   company_label,
                   email,
                   email_access_domain_error,
                   email_cancel,
                   email_code_cancel,
                   email_code_error,
                   email_code_field_label,
                   email_code_message,
                   email_code_submit,
                   email_code_title,
                   email_error,
                   email_field_label,
                   email_label,
                   email_message,
                   email_submit,
                   email_title,
                   field_1,
                   field_1_error,
                   field_1_label,
                   field_1_required,
                   field_2,
                   field_2_error,
                   field_2_label,
                   field_2_required,
                   field_3,
                   field_3_error,
                   field_3_label,
                   field_3_required,
                   field_4,
                   field_4_error,
                   field_4_label,
                   field_4_required,
                   message,
                   name,
                   name_error,
                   name_label,
                   optout,
                   optout_label,
                   passphrase_cancel,
                   passphrase_error,
                   passphrase_label,
                   passphrase_message,
                   passphrase_submit,
                   passphrase_title,
                   powered_by,
                   required_field_label,
                   sign_in_label,
                   sms_carrier_default,
                   sms_carrier_error,
                   sms_carrier_field_label,
                   sms_code_cancel,
                   sms_code_error,
                   sms_code_field_label,
                   sms_code_message,
                   sms_code_submit,
                   sms_code_title,
                   sms_country_field_label,
                   sms_country_format,
                   sms_have_access_code,
                   sms_message_format,
                   sms_number_cancel,
                   sms_number_error,
                   sms_number_field_label,
                   sms_number_format,
                   sms_number_message,
                   sms_number_submit,
                   sms_number_title,
                   sms_username_format,
                   sms_validity_duration,
                   sponsor_back_link,
                   sponsor_cancel,
                   sponsor_email,
                   sponsor_email_error,
                   sponsor_email_template,
                   sponsor_info_approved,
                   sponsor_info_denied,
                   sponsor_info_pending,
                   sponsor_name,
                   sponsor_name_error,
                   sponsor_note_pending,
                   sponsor_request_access,
                   sponsor_select_email,
                   sponsor_status_approved,
                   sponsor_status_denied,
                   sponsor_status_pending,
                   sponsor_submit,
                   sponsors_error,
                   sponsors_info_approved,
                   sponsors_info_denied,
                   sponsors_info_pending,
                   tos,
                   tos_accept_label,
                   tos_error,
                   tos_link,
                   tos_text)
