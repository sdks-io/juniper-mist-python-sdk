# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.dhcpd_config import DhcpdConfig
from mistapi.models.extra_routes_2 import ExtraRoutes2
from mistapi.models.gatewaytemplate_tunnel_configs import GatewaytemplateTunnelConfigs
from mistapi.models.idp_profiles import IdpProfiles
from mistapi.models.ip_configs import IpConfigs
from mistapi.models.junos_bgp_config import JunosBgpConfig
from mistapi.models.junos_oob_ip_config import JunosOobIpConfig
from mistapi.models.junos_port_config_gateway import JunosPortConfigGateway
from mistapi.models.junos_routing_policy import JunosRoutingPolicy
from mistapi.models.network import Network
from mistapi.models.path_preferences import PathPreferences
from mistapi.models.service_policy_2 import ServicePolicy2
from mistapi.models.template_gateway_matching import TemplateGatewayMatching


class Gatewaytemplate(object):

    """Implementation of the 'gatewaytemplate' model.

    Gateway Template is applied to a site for gateway(s) in a site.

    Attributes:
        additional_config_cmds (list of string): TODO: type description here.
        bgp_config (dict): TODO: type description here.
        created_time (float): TODO: type description here.
        dhcpd_config (dict): The property key is the network name
        extra_routes (dict): TODO: type description here.
        gateway_matching (TemplateGatewayMatching): Gateway matching
        id (uuid|string): TODO: type description here.
        idp_profiles (IdpProfiles): Property key is the profile name
        ip_configs (dict): The property key is the network name
        modified_time (float): TODO: type description here.
        name (string): TODO: type description here.
        networks (dict): The property key is the network name
        oob_ip_config (JunosOobIpConfig): Junos out-of-band (vme/em0/fxp0) IP
            config
        org_id (uuid|string): TODO: type description here.
        path_preferences (dict): experimental
        port_config (dict): The property key is the port(s) name or range
            (e.g. "ge-0/0/0-10")
        routing_policies (dict): The property key is the routing policy name
        service_policies (list of ServicePolicy2): TODO: type description
            here.
        tunnel_configs (dict): Property key is the tunnel name
        mtype (Type21Enum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "additional_config_cmds": 'additional_config_cmds',
        "bgp_config": 'bgp_config',
        "created_time": 'created_time',
        "dhcpd_config": 'dhcpd_config',
        "extra_routes": 'extra_routes',
        "gateway_matching": 'gateway_matching',
        "id": 'id',
        "idp_profiles": 'idp_profiles',
        "ip_configs": 'ip_configs',
        "modified_time": 'modified_time',
        "networks": 'networks',
        "oob_ip_config": 'oob_ip_config',
        "org_id": 'org_id',
        "path_preferences": 'path_preferences',
        "port_config": 'port_config',
        "routing_policies": 'routing_policies',
        "service_policies": 'service_policies',
        "tunnel_configs": 'tunnel_configs',
        "mtype": 'type'
    }

    _optionals = [
        'additional_config_cmds',
        'bgp_config',
        'created_time',
        'dhcpd_config',
        'extra_routes',
        'gateway_matching',
        'id',
        'idp_profiles',
        'ip_configs',
        'modified_time',
        'networks',
        'oob_ip_config',
        'org_id',
        'path_preferences',
        'port_config',
        'routing_policies',
        'service_policies',
        'tunnel_configs',
        'mtype',
    ]

    def __init__(self,
                 name=None,
                 additional_config_cmds=APIHelper.SKIP,
                 bgp_config=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 dhcpd_config=APIHelper.SKIP,
                 extra_routes=APIHelper.SKIP,
                 gateway_matching=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 idp_profiles=APIHelper.SKIP,
                 ip_configs=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 networks=APIHelper.SKIP,
                 oob_ip_config=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 path_preferences=APIHelper.SKIP,
                 port_config=APIHelper.SKIP,
                 routing_policies=APIHelper.SKIP,
                 service_policies=APIHelper.SKIP,
                 tunnel_configs=APIHelper.SKIP,
                 mtype='standalone'):
        """Constructor for the Gatewaytemplate class"""

        # Initialize members of the class
        if additional_config_cmds is not APIHelper.SKIP:
            self.additional_config_cmds = additional_config_cmds 
        if bgp_config is not APIHelper.SKIP:
            self.bgp_config = bgp_config 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if dhcpd_config is not APIHelper.SKIP:
            self.dhcpd_config = dhcpd_config 
        if extra_routes is not APIHelper.SKIP:
            self.extra_routes = extra_routes 
        if gateway_matching is not APIHelper.SKIP:
            self.gateway_matching = gateway_matching 
        if id is not APIHelper.SKIP:
            self.id = id 
        if idp_profiles is not APIHelper.SKIP:
            self.idp_profiles = idp_profiles 
        if ip_configs is not APIHelper.SKIP:
            self.ip_configs = ip_configs 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        self.name = name 
        if networks is not APIHelper.SKIP:
            self.networks = networks 
        if oob_ip_config is not APIHelper.SKIP:
            self.oob_ip_config = oob_ip_config 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if path_preferences is not APIHelper.SKIP:
            self.path_preferences = path_preferences 
        if port_config is not APIHelper.SKIP:
            self.port_config = port_config 
        if routing_policies is not APIHelper.SKIP:
            self.routing_policies = routing_policies 
        if service_policies is not APIHelper.SKIP:
            self.service_policies = service_policies 
        if tunnel_configs is not APIHelper.SKIP:
            self.tunnel_configs = tunnel_configs 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        additional_config_cmds = dictionary.get("additional_config_cmds") if dictionary.get("additional_config_cmds") else APIHelper.SKIP
        bgp_config = JunosBgpConfig.from_dictionary(dictionary.get('bgp_config')) if 'bgp_config' in dictionary.keys() else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        dhcpd_config = DhcpdConfig.from_dictionary(dictionary.get('dhcpd_config')) if 'dhcpd_config' in dictionary.keys() else APIHelper.SKIP
        extra_routes = ExtraRoutes2.from_dictionary(dictionary.get('extra_routes')) if 'extra_routes' in dictionary.keys() else APIHelper.SKIP
        gateway_matching = TemplateGatewayMatching.from_dictionary(dictionary.get('gateway_matching')) if 'gateway_matching' in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        idp_profiles = IdpProfiles.from_dictionary(dictionary.get('idp_profiles')) if 'idp_profiles' in dictionary.keys() else APIHelper.SKIP
        ip_configs = IpConfigs.from_dictionary(dictionary.get('ip_configs')) if 'ip_configs' in dictionary.keys() else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        networks = Network.from_dictionary(dictionary.get('networks')) if 'networks' in dictionary.keys() else APIHelper.SKIP
        oob_ip_config = JunosOobIpConfig.from_dictionary(dictionary.get('oob_ip_config')) if 'oob_ip_config' in dictionary.keys() else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        path_preferences = PathPreferences.from_dictionary(dictionary.get('path_preferences')) if 'path_preferences' in dictionary.keys() else APIHelper.SKIP
        port_config = JunosPortConfigGateway.from_dictionary(dictionary.get('port_config')) if 'port_config' in dictionary.keys() else APIHelper.SKIP
        routing_policies = JunosRoutingPolicy.from_dictionary(dictionary.get('routing_policies')) if 'routing_policies' in dictionary.keys() else APIHelper.SKIP
        service_policies = None
        if dictionary.get('service_policies') is not None:
            service_policies = [ServicePolicy2.from_dictionary(x) for x in dictionary.get('service_policies')]
        else:
            service_policies = APIHelper.SKIP
        tunnel_configs = GatewaytemplateTunnelConfigs.from_dictionary(dictionary.get('tunnel_configs')) if 'tunnel_configs' in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else 'standalone'
        # Return an object of this model
        return cls(name,
                   additional_config_cmds,
                   bgp_config,
                   created_time,
                   dhcpd_config,
                   extra_routes,
                   gateway_matching,
                   id,
                   idp_profiles,
                   ip_configs,
                   modified_time,
                   networks,
                   oob_ip_config,
                   org_id,
                   path_preferences,
                   port_config,
                   routing_policies,
                   service_policies,
                   tunnel_configs,
                   mtype)
