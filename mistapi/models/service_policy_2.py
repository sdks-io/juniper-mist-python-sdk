# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.ewf import Ewf
from mistapi.models.junos_idp_config import JunosIdpConfig


class ServicePolicy2(object):

    """Implementation of the 'ServicePolicy2' model.

    TODO: type model description here.

    Attributes:
        action (Action1Enum): TODO: type description here.
        ewf (list of Ewf): TODO: type description here.
        idp (JunosIdpConfig): TODO: type description here.
        local_routing (bool): access within the same VRF
        name (string): TODO: type description here.
        path_preferences (string): by default, we derive all paths available
            and use them optionally, you can customize by using
            `path_preference`
        servicepolicy_id (uuid|string): used to link servicepolicy defined at
            org level and overwrite some attributes
        services (list of string): TODO: type description here.
        tenants (list of string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "action": 'action',
        "ewf": 'ewf',
        "idp": 'idp',
        "local_routing": 'local_routing',
        "name": 'name',
        "path_preferences": 'path_preferences',
        "servicepolicy_id": 'servicepolicy_id',
        "services": 'services',
        "tenants": 'tenants'
    }

    _optionals = [
        'action',
        'ewf',
        'idp',
        'local_routing',
        'name',
        'path_preferences',
        'servicepolicy_id',
        'services',
        'tenants',
    ]

    def __init__(self,
                 action='allow',
                 ewf=APIHelper.SKIP,
                 idp=APIHelper.SKIP,
                 local_routing=False,
                 name=APIHelper.SKIP,
                 path_preferences=APIHelper.SKIP,
                 servicepolicy_id=APIHelper.SKIP,
                 services=APIHelper.SKIP,
                 tenants=APIHelper.SKIP):
        """Constructor for the ServicePolicy2 class"""

        # Initialize members of the class
        self.action = action 
        if ewf is not APIHelper.SKIP:
            self.ewf = ewf 
        if idp is not APIHelper.SKIP:
            self.idp = idp 
        self.local_routing = local_routing 
        if name is not APIHelper.SKIP:
            self.name = name 
        if path_preferences is not APIHelper.SKIP:
            self.path_preferences = path_preferences 
        if servicepolicy_id is not APIHelper.SKIP:
            self.servicepolicy_id = servicepolicy_id 
        if services is not APIHelper.SKIP:
            self.services = services 
        if tenants is not APIHelper.SKIP:
            self.tenants = tenants 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        action = dictionary.get("action") if dictionary.get("action") else 'allow'
        ewf = None
        if dictionary.get('ewf') is not None:
            ewf = [Ewf.from_dictionary(x) for x in dictionary.get('ewf')]
        else:
            ewf = APIHelper.SKIP
        idp = JunosIdpConfig.from_dictionary(dictionary.get('idp')) if 'idp' in dictionary.keys() else APIHelper.SKIP
        local_routing = dictionary.get("local_routing") if dictionary.get("local_routing") else False
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        path_preferences = dictionary.get("path_preferences") if dictionary.get("path_preferences") else APIHelper.SKIP
        servicepolicy_id = dictionary.get("servicepolicy_id") if dictionary.get("servicepolicy_id") else APIHelper.SKIP
        services = dictionary.get("services") if dictionary.get("services") else APIHelper.SKIP
        tenants = dictionary.get("tenants") if dictionary.get("tenants") else APIHelper.SKIP
        # Return an object of this model
        return cls(action,
                   ewf,
                   idp,
                   local_routing,
                   name,
                   path_preferences,
                   servicepolicy_id,
                   services,
                   tenants)
