# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.community import Community
from mistapi.models.neighbors import Neighbors


class JunosBgpConfig(object):

    """Implementation of the 'junos_bgp_config' model.

    TODO: type model description here.

    Attributes:
        auth_key (string): TODO: type description here.
        bfd_minimum_interval (int): default: * 1000 if `type`==`external`` *
            350  `type`==`internal`
        communities (list of Community): TODO: type description here.
        disable_bfd (bool): BFD provides faster path failure detection and is
            enabled by default
        export (string): TODO: type description here.
        export_policy (string): default export policies if no per-neighbor
            policies defined
        graceful_restart_time (int): `0` means disable
        hold_time (int): TODO: type description here.
        mimport (string): TODO: type description here.
        import_policy (string): default import policies if no per-neighbor
            policies defined
        imported_networks (list of string): if policies definition requires
            this network to exist, this "attaches" the networks to the gateway
            List of networks that will be learned from this BGP peer
        local_as (int): TODO: type description here.
        neighbor_as (int): TODO: type description here.
        neighbors (dict): if per-neighbor as is desired. Property key is the
            neighbor address
        networks (list of string): if `type`!=`external`or
            `via`==`wan`networks where we expect BGP neighbor to connect
            to/from
        no_readvertise_to_overlay (bool): by default, we'll re-advertise all
            learned BGP routers toward overlay
        mtype (Type17Enum): TODO: type description here.
        via (ViaEnum): network name
        vpn_name (string): TODO: type description here.
        wan_name (string): if `via`==`wan`

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "auth_key": 'auth_key',
        "bfd_minimum_interval": 'bfd_minimum_interval',
        "communities": 'communities',
        "disable_bfd": 'disable_bfd',
        "export": 'export',
        "export_policy": 'export_policy',
        "graceful_restart_time": 'graceful_restart_time',
        "hold_time": 'hold_time',
        "mimport": 'import',
        "import_policy": 'import_policy',
        "imported_networks": 'imported_networks',
        "local_as": 'local_as',
        "neighbor_as": 'neighbor_as',
        "neighbors": 'neighbors',
        "networks": 'networks',
        "no_readvertise_to_overlay": 'no_readvertise_to_overlay',
        "mtype": 'type',
        "via": 'via',
        "vpn_name": 'vpn_name',
        "wan_name": 'wan_name'
    }

    _optionals = [
        'auth_key',
        'bfd_minimum_interval',
        'communities',
        'disable_bfd',
        'export',
        'export_policy',
        'graceful_restart_time',
        'hold_time',
        'mimport',
        'import_policy',
        'imported_networks',
        'local_as',
        'neighbor_as',
        'neighbors',
        'networks',
        'no_readvertise_to_overlay',
        'mtype',
        'via',
        'vpn_name',
        'wan_name',
    ]

    def __init__(self,
                 auth_key=APIHelper.SKIP,
                 bfd_minimum_interval=0,
                 communities=APIHelper.SKIP,
                 disable_bfd=False,
                 export=APIHelper.SKIP,
                 export_policy=APIHelper.SKIP,
                 graceful_restart_time=0,
                 hold_time=90,
                 mimport=APIHelper.SKIP,
                 import_policy=APIHelper.SKIP,
                 imported_networks=APIHelper.SKIP,
                 local_as=APIHelper.SKIP,
                 neighbor_as=APIHelper.SKIP,
                 neighbors=APIHelper.SKIP,
                 networks=APIHelper.SKIP,
                 no_readvertise_to_overlay=False,
                 mtype=APIHelper.SKIP,
                 via='lan',
                 vpn_name=APIHelper.SKIP,
                 wan_name=APIHelper.SKIP):
        """Constructor for the JunosBgpConfig class"""

        # Initialize members of the class
        if auth_key is not APIHelper.SKIP:
            self.auth_key = auth_key 
        self.bfd_minimum_interval = bfd_minimum_interval 
        if communities is not APIHelper.SKIP:
            self.communities = communities 
        self.disable_bfd = disable_bfd 
        if export is not APIHelper.SKIP:
            self.export = export 
        if export_policy is not APIHelper.SKIP:
            self.export_policy = export_policy 
        self.graceful_restart_time = graceful_restart_time 
        self.hold_time = hold_time 
        if mimport is not APIHelper.SKIP:
            self.mimport = mimport 
        if import_policy is not APIHelper.SKIP:
            self.import_policy = import_policy 
        if imported_networks is not APIHelper.SKIP:
            self.imported_networks = imported_networks 
        if local_as is not APIHelper.SKIP:
            self.local_as = local_as 
        if neighbor_as is not APIHelper.SKIP:
            self.neighbor_as = neighbor_as 
        if neighbors is not APIHelper.SKIP:
            self.neighbors = neighbors 
        if networks is not APIHelper.SKIP:
            self.networks = networks 
        self.no_readvertise_to_overlay = no_readvertise_to_overlay 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        self.via = via 
        if vpn_name is not APIHelper.SKIP:
            self.vpn_name = vpn_name 
        if wan_name is not APIHelper.SKIP:
            self.wan_name = wan_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        auth_key = dictionary.get("auth_key") if dictionary.get("auth_key") else APIHelper.SKIP
        bfd_minimum_interval = dictionary.get("bfd_minimum_interval") if dictionary.get("bfd_minimum_interval") else 0
        communities = None
        if dictionary.get('communities') is not None:
            communities = [Community.from_dictionary(x) for x in dictionary.get('communities')]
        else:
            communities = APIHelper.SKIP
        disable_bfd = dictionary.get("disable_bfd") if dictionary.get("disable_bfd") else False
        export = dictionary.get("export") if dictionary.get("export") else APIHelper.SKIP
        export_policy = dictionary.get("export_policy") if dictionary.get("export_policy") else APIHelper.SKIP
        graceful_restart_time = dictionary.get("graceful_restart_time") if dictionary.get("graceful_restart_time") else 0
        hold_time = dictionary.get("hold_time") if dictionary.get("hold_time") else 90
        mimport = dictionary.get("import") if dictionary.get("import") else APIHelper.SKIP
        import_policy = dictionary.get("import_policy") if dictionary.get("import_policy") else APIHelper.SKIP
        imported_networks = dictionary.get("imported_networks") if dictionary.get("imported_networks") else APIHelper.SKIP
        local_as = dictionary.get("local_as") if dictionary.get("local_as") else APIHelper.SKIP
        neighbor_as = dictionary.get("neighbor_as") if dictionary.get("neighbor_as") else APIHelper.SKIP
        neighbors = Neighbors.from_dictionary(dictionary.get('neighbors')) if 'neighbors' in dictionary.keys() else APIHelper.SKIP
        networks = dictionary.get("networks") if dictionary.get("networks") else APIHelper.SKIP
        no_readvertise_to_overlay = dictionary.get("no_readvertise_to_overlay") if dictionary.get("no_readvertise_to_overlay") else False
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        via = dictionary.get("via") if dictionary.get("via") else 'lan'
        vpn_name = dictionary.get("vpn_name") if dictionary.get("vpn_name") else APIHelper.SKIP
        wan_name = dictionary.get("wan_name") if dictionary.get("wan_name") else APIHelper.SKIP
        # Return an object of this model
        return cls(auth_key,
                   bfd_minimum_interval,
                   communities,
                   disable_bfd,
                   export,
                   export_policy,
                   graceful_restart_time,
                   hold_time,
                   mimport,
                   import_policy,
                   imported_networks,
                   local_as,
                   neighbor_as,
                   neighbors,
                   networks,
                   no_readvertise_to_overlay,
                   mtype,
                   via,
                   vpn_name,
                   wan_name)
