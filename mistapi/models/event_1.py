# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.service_packet import ServicePacket


class Event1(object):

    """Implementation of the 'Event1' model.

    TODO: type model description here.

    Attributes:
        asset_id (uuid|string): asset id
        beam (int): antenna index, from 1-8, clock-wise starting from the LED
        device_id (uuid|string): device where the asset reading is from
        ibeacon_major (int): iBeacon major
        ibeacon_minor (int): iBeacon minor
        ibeacon_uuid (uuid|string): iBeacon UUID
        mac (string): MAC of the beacon
        map_id (uuid|string): map id
        mfg_company_id (float): optional, BLE manufacturing company ID
        mfg_data (string): optional, BLE manufacturing data in hex byte-string
            format (ie: “112233AABBCC”)
        rssi (float): signal strength
        service_data_data (string): optional, data from service data
        service_data_last_rx_time (int): optional, last data transmit time
            from service data
        service_data_rx_cnt (int): optional, data transmit count from service
            data
        service_data_uuid (uuid|string): optional, UUID from service data
        service_packets (list of ServicePacket): list of service data packets
            heard from the asset/ beacon
        site_id (uuid|string): site id
        timestamp (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "asset_id": 'asset_id',
        "beam": 'beam',
        "device_id": 'device_id',
        "mac": 'mac',
        "map_id": 'map_id',
        "mfg_company_id": 'mfg_company_id',
        "mfg_data": 'mfg_data',
        "rssi": 'rssi',
        "site_id": 'site_id',
        "timestamp": 'timestamp',
        "ibeacon_major": 'ibeacon_major',
        "ibeacon_minor": 'ibeacon_minor',
        "ibeacon_uuid": 'ibeacon_uuid',
        "service_data_data": 'service_data_data',
        "service_data_last_rx_time": 'service_data_last_rx_time',
        "service_data_rx_cnt": 'service_data_rx_cnt',
        "service_data_uuid": 'service_data_uuid',
        "service_packets": 'service_packets'
    }

    _optionals = [
        'ibeacon_major',
        'ibeacon_minor',
        'ibeacon_uuid',
        'service_data_data',
        'service_data_last_rx_time',
        'service_data_rx_cnt',
        'service_data_uuid',
        'service_packets',
    ]

    def __init__(self,
                 asset_id=None,
                 beam=None,
                 device_id=None,
                 mac=None,
                 map_id=None,
                 mfg_company_id=None,
                 mfg_data=None,
                 rssi=None,
                 site_id=None,
                 timestamp=None,
                 ibeacon_major=APIHelper.SKIP,
                 ibeacon_minor=APIHelper.SKIP,
                 ibeacon_uuid=APIHelper.SKIP,
                 service_data_data=APIHelper.SKIP,
                 service_data_last_rx_time=APIHelper.SKIP,
                 service_data_rx_cnt=APIHelper.SKIP,
                 service_data_uuid=APIHelper.SKIP,
                 service_packets=APIHelper.SKIP):
        """Constructor for the Event1 class"""

        # Initialize members of the class
        self.asset_id = asset_id 
        self.beam = beam 
        self.device_id = device_id 
        if ibeacon_major is not APIHelper.SKIP:
            self.ibeacon_major = ibeacon_major 
        if ibeacon_minor is not APIHelper.SKIP:
            self.ibeacon_minor = ibeacon_minor 
        if ibeacon_uuid is not APIHelper.SKIP:
            self.ibeacon_uuid = ibeacon_uuid 
        self.mac = mac 
        self.map_id = map_id 
        self.mfg_company_id = mfg_company_id 
        self.mfg_data = mfg_data 
        self.rssi = rssi 
        if service_data_data is not APIHelper.SKIP:
            self.service_data_data = service_data_data 
        if service_data_last_rx_time is not APIHelper.SKIP:
            self.service_data_last_rx_time = service_data_last_rx_time 
        if service_data_rx_cnt is not APIHelper.SKIP:
            self.service_data_rx_cnt = service_data_rx_cnt 
        if service_data_uuid is not APIHelper.SKIP:
            self.service_data_uuid = service_data_uuid 
        if service_packets is not APIHelper.SKIP:
            self.service_packets = service_packets 
        self.site_id = site_id 
        self.timestamp = timestamp 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        asset_id = dictionary.get("asset_id") if dictionary.get("asset_id") else None
        beam = dictionary.get("beam") if dictionary.get("beam") else None
        device_id = dictionary.get("device_id") if dictionary.get("device_id") else None
        mac = dictionary.get("mac") if dictionary.get("mac") else None
        map_id = dictionary.get("map_id") if dictionary.get("map_id") else None
        mfg_company_id = dictionary.get("mfg_company_id") if dictionary.get("mfg_company_id") else None
        mfg_data = dictionary.get("mfg_data") if dictionary.get("mfg_data") else None
        rssi = dictionary.get("rssi") if dictionary.get("rssi") else None
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        ibeacon_major = dictionary.get("ibeacon_major") if dictionary.get("ibeacon_major") else APIHelper.SKIP
        ibeacon_minor = dictionary.get("ibeacon_minor") if dictionary.get("ibeacon_minor") else APIHelper.SKIP
        ibeacon_uuid = dictionary.get("ibeacon_uuid") if dictionary.get("ibeacon_uuid") else APIHelper.SKIP
        service_data_data = dictionary.get("service_data_data") if dictionary.get("service_data_data") else APIHelper.SKIP
        service_data_last_rx_time = dictionary.get("service_data_last_rx_time") if dictionary.get("service_data_last_rx_time") else APIHelper.SKIP
        service_data_rx_cnt = dictionary.get("service_data_rx_cnt") if dictionary.get("service_data_rx_cnt") else APIHelper.SKIP
        service_data_uuid = dictionary.get("service_data_uuid") if dictionary.get("service_data_uuid") else APIHelper.SKIP
        service_packets = None
        if dictionary.get('service_packets') is not None:
            service_packets = [ServicePacket.from_dictionary(x) for x in dictionary.get('service_packets')]
        else:
            service_packets = APIHelper.SKIP
        # Return an object of this model
        return cls(asset_id,
                   beam,
                   device_id,
                   mac,
                   map_id,
                   mfg_company_id,
                   mfg_data,
                   rssi,
                   site_id,
                   timestamp,
                   ibeacon_major,
                   ibeacon_minor,
                   ibeacon_uuid,
                   service_data_data,
                   service_data_last_rx_time,
                   service_data_rx_cnt,
                   service_data_uuid,
                   service_packets)
