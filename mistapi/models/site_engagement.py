# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.dwell_tag_names import DwellTagNames
from mistapi.models.dwell_tags import DwellTags
from mistapi.models.hours import Hours


class SiteEngagement(object):

    """Implementation of the 'site_engagement' model.

    **Note**: if hours does not exist, it’s treated as everyday of the week,
    00:00-23:59. Currently we don’t allow multiple ranges for the same day
    **Note**: default values for `dwell_tags`: passerby (1,300) bounce (301,
    14400) engaged (14401, 28800) stationed (28801, 42000)
    **Note**: default values for `dwell_tag_names`: passerby = “Passerby”,
    bounce = “Visitor”, engaged = “Associates”, stationed = “Assets”

    Attributes:
        dwell_tag_names (DwellTagNames): TODO: type description here.
        dwell_tags (DwellTags): add tags to visits within the duration (in
            seconds), available tags (passerby, bounce, engaged, stationed)
        hours (Hours): hours of operation filter, the available days (mon,
            tue, wed, thu, fri, sat, sun).   **Note**: If the dow is not
            defined then it’s treated as 00:00-23:59.
        max_dwell (int): max time, default is 43200(12h), max is 68400 (18h)
        min_dwell (int): min time

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "dwell_tag_names": 'dwell_tag_names',
        "dwell_tags": 'dwell_tags',
        "hours": 'hours',
        "max_dwell": 'max_dwell',
        "min_dwell": 'min_dwell'
    }

    _optionals = [
        'dwell_tags',
        'hours',
        'max_dwell',
        'min_dwell',
    ]

    def __init__(self,
                 dwell_tag_names=None,
                 dwell_tags=APIHelper.SKIP,
                 hours=APIHelper.SKIP,
                 max_dwell=43200,
                 min_dwell=APIHelper.SKIP):
        """Constructor for the SiteEngagement class"""

        # Initialize members of the class
        self.dwell_tag_names = dwell_tag_names 
        if dwell_tags is not APIHelper.SKIP:
            self.dwell_tags = dwell_tags 
        if hours is not APIHelper.SKIP:
            self.hours = hours 
        self.max_dwell = max_dwell 
        if min_dwell is not APIHelper.SKIP:
            self.min_dwell = min_dwell 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        dwell_tag_names = DwellTagNames.from_dictionary(dictionary.get('dwell_tag_names')) if dictionary.get('dwell_tag_names') else None
        dwell_tags = DwellTags.from_dictionary(dictionary.get('dwell_tags')) if 'dwell_tags' in dictionary.keys() else APIHelper.SKIP
        hours = Hours.from_dictionary(dictionary.get('hours')) if 'hours' in dictionary.keys() else APIHelper.SKIP
        max_dwell = dictionary.get("max_dwell") if dictionary.get("max_dwell") else 43200
        min_dwell = dictionary.get("min_dwell") if dictionary.get("min_dwell") else APIHelper.SKIP
        # Return an object of this model
        return cls(dwell_tag_names,
                   dwell_tags,
                   hours,
                   max_dwell,
                   min_dwell)
