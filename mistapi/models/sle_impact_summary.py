# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.models.ap import Ap
from mistapi.models.band_9 import Band9
from mistapi.models.device_o import DeviceO
from mistapi.models.device_type import DeviceType
from mistapi.models.wlan_1 import Wlan1


class SleImpactSummary(object):

    """Implementation of the 'sle_impact_summary' model.

    TODO: type model description here.

    Attributes:
        ap (list of Ap): TODO: type description here.
        band (list of Band9): TODO: type description here.
        classifier (string): TODO: type description here.
        device_os (list of DeviceO): TODO: type description here.
        device_type (list of DeviceType): TODO: type description here.
        end (float): TODO: type description here.
        failure (string): TODO: type description here.
        metric (string): TODO: type description here.
        start (float): TODO: type description here.
        wlan (list of Wlan1): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ap": 'ap',
        "band": 'band',
        "classifier": 'classifier',
        "device_os": 'device_os',
        "device_type": 'device_type',
        "end": 'end',
        "failure": 'failure',
        "metric": 'metric',
        "start": 'start',
        "wlan": 'wlan'
    }

    def __init__(self,
                 ap=None,
                 band=None,
                 classifier=None,
                 device_os=None,
                 device_type=None,
                 end=None,
                 failure=None,
                 metric=None,
                 start=None,
                 wlan=None):
        """Constructor for the SleImpactSummary class"""

        # Initialize members of the class
        self.ap = ap 
        self.band = band 
        self.classifier = classifier 
        self.device_os = device_os 
        self.device_type = device_type 
        self.end = end 
        self.failure = failure 
        self.metric = metric 
        self.start = start 
        self.wlan = wlan 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ap = None
        if dictionary.get('ap') is not None:
            ap = [Ap.from_dictionary(x) for x in dictionary.get('ap')]
        band = None
        if dictionary.get('band') is not None:
            band = [Band9.from_dictionary(x) for x in dictionary.get('band')]
        classifier = dictionary.get("classifier") if dictionary.get("classifier") else None
        device_os = None
        if dictionary.get('device_os') is not None:
            device_os = [DeviceO.from_dictionary(x) for x in dictionary.get('device_os')]
        device_type = None
        if dictionary.get('device_type') is not None:
            device_type = [DeviceType.from_dictionary(x) for x in dictionary.get('device_type')]
        end = dictionary.get("end") if dictionary.get("end") else None
        failure = dictionary.get("failure") if dictionary.get("failure") else None
        metric = dictionary.get("metric") if dictionary.get("metric") else None
        start = dictionary.get("start") if dictionary.get("start") else None
        wlan = None
        if dictionary.get('wlan') is not None:
            wlan = [Wlan1.from_dictionary(x) for x in dictionary.get('wlan')]
        # Return an object of this model
        return cls(ap,
                   band,
                   classifier,
                   device_os,
                   device_type,
                   end,
                   failure,
                   metric,
                   start,
                   wlan)
