# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.details_5 import Details5


class VersionCompliance2(object):

    """Implementation of the 'VersionCompliance2' model.

    TODO: type model description here.

    Attributes:
        details (Details5): TODO: type description here.
        score (int): TODO: type description here.
        total_switch_count (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "details": 'details',
        "score": 'score',
        "total_switch_count": 'total_switch_count'
    }

    _optionals = [
        'details',
        'score',
        'total_switch_count',
    ]

    def __init__(self,
                 details=APIHelper.SKIP,
                 score=APIHelper.SKIP,
                 total_switch_count=APIHelper.SKIP):
        """Constructor for the VersionCompliance2 class"""

        # Initialize members of the class
        if details is not APIHelper.SKIP:
            self.details = details 
        if score is not APIHelper.SKIP:
            self.score = score 
        if total_switch_count is not APIHelper.SKIP:
            self.total_switch_count = total_switch_count 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        details = Details5.from_dictionary(dictionary.get('details')) if 'details' in dictionary.keys() else APIHelper.SKIP
        score = dictionary.get("score") if dictionary.get("score") else APIHelper.SKIP
        total_switch_count = dictionary.get("total_switch_count") if dictionary.get("total_switch_count") else APIHelper.SKIP
        # Return an object of this model
        return cls(details,
                   score,
                   total_switch_count)
