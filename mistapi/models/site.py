# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.latlng_1 import Latlng1


class Site(object):

    """Implementation of the 'site' model.

    Site

    Attributes:
        address (string): full address of the site
        alarmtemplate_id (uuid|string): Alarm Template ID, this takes
            precedence over the Org-level alarmtemplate_id
        aptemplate_id (string): AP Template ID, used by APs
        country_code (string): country code for the site (for AP config
            generation), in two-character
        created_time (float): TODO: type description here.
        gatewaytemplate_id (uuid|string): Gateway Template ID, used by
            gateways
        id (uuid|string): TODO: type description here.
        latlng (Latlng1): site location
        modified_time (float): TODO: type description here.
        name (string): TODO: type description here.
        networktemplate_id (uuid|string): Network Template ID, this takes
            precedence over Site Settings
        notes (string): optional, any notes about the site
        org_id (uuid|string): TODO: type description here.
        rftemplate_id (uuid|string): RF Template ID, this takes precedence
            over Site Settings
        secpolicy_id (uuid|string): SecPolicy ID
        sitegroup_ids (list of uuid|string): sitegroups this site belongs to
        sitetemplate_id (uuid|string): Site Template ID
        timezone (string): Timezone the site is at

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "address": 'address',
        "alarmtemplate_id": 'alarmtemplate_id',
        "aptemplate_id": 'aptemplate_id',
        "country_code": 'country_code',
        "created_time": 'created_time',
        "gatewaytemplate_id": 'gatewaytemplate_id',
        "id": 'id',
        "latlng": 'latlng',
        "modified_time": 'modified_time',
        "networktemplate_id": 'networktemplate_id',
        "notes": 'notes',
        "org_id": 'org_id',
        "rftemplate_id": 'rftemplate_id',
        "secpolicy_id": 'secpolicy_id',
        "sitegroup_ids": 'sitegroup_ids',
        "sitetemplate_id": 'sitetemplate_id',
        "timezone": 'timezone'
    }

    _optionals = [
        'address',
        'alarmtemplate_id',
        'aptemplate_id',
        'country_code',
        'created_time',
        'gatewaytemplate_id',
        'id',
        'latlng',
        'modified_time',
        'networktemplate_id',
        'notes',
        'org_id',
        'rftemplate_id',
        'secpolicy_id',
        'sitegroup_ids',
        'sitetemplate_id',
        'timezone',
    ]

    _nullables = [
        'alarmtemplate_id',
        'gatewaytemplate_id',
        'networktemplate_id',
        'rftemplate_id',
        'secpolicy_id',
    ]

    def __init__(self,
                 name=None,
                 address=APIHelper.SKIP,
                 alarmtemplate_id=APIHelper.SKIP,
                 aptemplate_id=APIHelper.SKIP,
                 country_code=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 gatewaytemplate_id=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 latlng=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 networktemplate_id=APIHelper.SKIP,
                 notes=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 rftemplate_id=APIHelper.SKIP,
                 secpolicy_id=APIHelper.SKIP,
                 sitegroup_ids=APIHelper.SKIP,
                 sitetemplate_id=APIHelper.SKIP,
                 timezone=APIHelper.SKIP):
        """Constructor for the Site class"""

        # Initialize members of the class
        if address is not APIHelper.SKIP:
            self.address = address 
        if alarmtemplate_id is not APIHelper.SKIP:
            self.alarmtemplate_id = alarmtemplate_id 
        if aptemplate_id is not APIHelper.SKIP:
            self.aptemplate_id = aptemplate_id 
        if country_code is not APIHelper.SKIP:
            self.country_code = country_code 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if gatewaytemplate_id is not APIHelper.SKIP:
            self.gatewaytemplate_id = gatewaytemplate_id 
        if id is not APIHelper.SKIP:
            self.id = id 
        if latlng is not APIHelper.SKIP:
            self.latlng = latlng 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        self.name = name 
        if networktemplate_id is not APIHelper.SKIP:
            self.networktemplate_id = networktemplate_id 
        if notes is not APIHelper.SKIP:
            self.notes = notes 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if rftemplate_id is not APIHelper.SKIP:
            self.rftemplate_id = rftemplate_id 
        if secpolicy_id is not APIHelper.SKIP:
            self.secpolicy_id = secpolicy_id 
        if sitegroup_ids is not APIHelper.SKIP:
            self.sitegroup_ids = sitegroup_ids 
        if sitetemplate_id is not APIHelper.SKIP:
            self.sitetemplate_id = sitetemplate_id 
        if timezone is not APIHelper.SKIP:
            self.timezone = timezone 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        address = dictionary.get("address") if dictionary.get("address") else APIHelper.SKIP
        alarmtemplate_id = dictionary.get("alarmtemplate_id") if "alarmtemplate_id" in dictionary.keys() else APIHelper.SKIP
        aptemplate_id = dictionary.get("aptemplate_id") if dictionary.get("aptemplate_id") else APIHelper.SKIP
        country_code = dictionary.get("country_code") if dictionary.get("country_code") else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        gatewaytemplate_id = dictionary.get("gatewaytemplate_id") if "gatewaytemplate_id" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        latlng = Latlng1.from_dictionary(dictionary.get('latlng')) if 'latlng' in dictionary.keys() else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        networktemplate_id = dictionary.get("networktemplate_id") if "networktemplate_id" in dictionary.keys() else APIHelper.SKIP
        notes = dictionary.get("notes") if dictionary.get("notes") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        rftemplate_id = dictionary.get("rftemplate_id") if "rftemplate_id" in dictionary.keys() else APIHelper.SKIP
        secpolicy_id = dictionary.get("secpolicy_id") if "secpolicy_id" in dictionary.keys() else APIHelper.SKIP
        sitegroup_ids = dictionary.get("sitegroup_ids") if dictionary.get("sitegroup_ids") else APIHelper.SKIP
        sitetemplate_id = dictionary.get("sitetemplate_id") if dictionary.get("sitetemplate_id") else APIHelper.SKIP
        timezone = dictionary.get("timezone") if dictionary.get("timezone") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   address,
                   alarmtemplate_id,
                   aptemplate_id,
                   country_code,
                   created_time,
                   gatewaytemplate_id,
                   id,
                   latlng,
                   modified_time,
                   networktemplate_id,
                   notes,
                   org_id,
                   rftemplate_id,
                   secpolicy_id,
                   sitegroup_ids,
                   sitetemplate_id,
                   timezone)
