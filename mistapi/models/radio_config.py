# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.band_52 import Band52


class RadioConfig(object):

    """Implementation of the 'RadioConfig' model.

    TODO: type model description here.

    Attributes:
        band_24 (Band52): TODO: type description here.
        band_5 (Band52): TODO: type description here.
        band_6 (Band52): TODO: type description here.
        scanning_enabled (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "band_24": 'band_24',
        "band_5": 'band_5',
        "band_6": 'band_6',
        "scanning_enabled": 'scanning_enabled'
    }

    _optionals = [
        'band_24',
        'band_5',
        'band_6',
        'scanning_enabled',
    ]

    def __init__(self,
                 band_24=APIHelper.SKIP,
                 band_5=APIHelper.SKIP,
                 band_6=APIHelper.SKIP,
                 scanning_enabled=APIHelper.SKIP):
        """Constructor for the RadioConfig class"""

        # Initialize members of the class
        if band_24 is not APIHelper.SKIP:
            self.band_24 = band_24 
        if band_5 is not APIHelper.SKIP:
            self.band_5 = band_5 
        if band_6 is not APIHelper.SKIP:
            self.band_6 = band_6 
        if scanning_enabled is not APIHelper.SKIP:
            self.scanning_enabled = scanning_enabled 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        band_24 = Band52.from_dictionary(dictionary.get('band_24')) if 'band_24' in dictionary.keys() else APIHelper.SKIP
        band_5 = Band52.from_dictionary(dictionary.get('band_5')) if 'band_5' in dictionary.keys() else APIHelper.SKIP
        band_6 = Band52.from_dictionary(dictionary.get('band_6')) if 'band_6' in dictionary.keys() else APIHelper.SKIP
        scanning_enabled = dictionary.get("scanning_enabled") if "scanning_enabled" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(band_24,
                   band_5,
                   band_6,
                   scanning_enabled)
