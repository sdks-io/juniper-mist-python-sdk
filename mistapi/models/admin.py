# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.privileges import Privileges


class Admin(object):

    """Implementation of the 'admin' model.

    Admin

    Attributes:
        admin_id (uuid|string): TODO: type description here.
        email (string): TODO: type description here.
        enable_two_factor (bool): TODO: type description here.
        first_name (string): for an invite, this is the original first name
            used
        hours (int): how long the invite should be valid
        last_name (string): for an invite, this is the original last name
            used
        oauth_google (bool): TODO: type description here.
        phone (string): phone number (numbers only, including country code)
        phone_2 (string): secondary phone number (numbers only, including
            country code)
        privileges (list of Privileges): list of privileges the admin has on
            the MSP / Orgs / OrgGroups
        session_expiry (int): TODO: type description here.
        tags (list of string): TODO: type description here.
        two_factor_verified (bool): two factor status
        via_sso (string): an admin alogin via_sso is more restircted.
            (password and email cannot be changed)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "email": 'email',
        "first_name": 'first_name',
        "last_name": 'last_name',
        "admin_id": 'admin_id',
        "enable_two_factor": 'enable_two_factor',
        "hours": 'hours',
        "oauth_google": 'oauth_google',
        "phone": 'phone',
        "phone_2": 'phone2',
        "privileges": 'privileges',
        "session_expiry": 'session_expiry',
        "tags": 'tags',
        "two_factor_verified": 'two_factor_verified',
        "via_sso": 'via_sso'
    }

    _optionals = [
        'admin_id',
        'enable_two_factor',
        'hours',
        'oauth_google',
        'phone',
        'phone_2',
        'privileges',
        'session_expiry',
        'tags',
        'two_factor_verified',
        'via_sso',
    ]

    def __init__(self,
                 email=None,
                 first_name=None,
                 last_name=None,
                 admin_id=APIHelper.SKIP,
                 enable_two_factor=APIHelper.SKIP,
                 hours=24,
                 oauth_google=APIHelper.SKIP,
                 phone=APIHelper.SKIP,
                 phone_2=APIHelper.SKIP,
                 privileges=APIHelper.SKIP,
                 session_expiry=APIHelper.SKIP,
                 tags=APIHelper.SKIP,
                 two_factor_verified=APIHelper.SKIP,
                 via_sso=APIHelper.SKIP):
        """Constructor for the Admin class"""

        # Initialize members of the class
        if admin_id is not APIHelper.SKIP:
            self.admin_id = admin_id 
        self.email = email 
        if enable_two_factor is not APIHelper.SKIP:
            self.enable_two_factor = enable_two_factor 
        self.first_name = first_name 
        self.hours = hours 
        self.last_name = last_name 
        if oauth_google is not APIHelper.SKIP:
            self.oauth_google = oauth_google 
        if phone is not APIHelper.SKIP:
            self.phone = phone 
        if phone_2 is not APIHelper.SKIP:
            self.phone_2 = phone_2 
        if privileges is not APIHelper.SKIP:
            self.privileges = privileges 
        if session_expiry is not APIHelper.SKIP:
            self.session_expiry = session_expiry 
        if tags is not APIHelper.SKIP:
            self.tags = tags 
        if two_factor_verified is not APIHelper.SKIP:
            self.two_factor_verified = two_factor_verified 
        if via_sso is not APIHelper.SKIP:
            self.via_sso = via_sso 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        email = dictionary.get("email") if dictionary.get("email") else None
        first_name = dictionary.get("first_name") if dictionary.get("first_name") else None
        last_name = dictionary.get("last_name") if dictionary.get("last_name") else None
        admin_id = dictionary.get("admin_id") if dictionary.get("admin_id") else APIHelper.SKIP
        enable_two_factor = dictionary.get("enable_two_factor") if "enable_two_factor" in dictionary.keys() else APIHelper.SKIP
        hours = dictionary.get("hours") if dictionary.get("hours") else 24
        oauth_google = dictionary.get("oauth_google") if "oauth_google" in dictionary.keys() else APIHelper.SKIP
        phone = dictionary.get("phone") if dictionary.get("phone") else APIHelper.SKIP
        phone_2 = dictionary.get("phone2") if dictionary.get("phone2") else APIHelper.SKIP
        privileges = None
        if dictionary.get('privileges') is not None:
            privileges = [Privileges.from_dictionary(x) for x in dictionary.get('privileges')]
        else:
            privileges = APIHelper.SKIP
        session_expiry = dictionary.get("session_expiry") if dictionary.get("session_expiry") else APIHelper.SKIP
        tags = dictionary.get("tags") if dictionary.get("tags") else APIHelper.SKIP
        two_factor_verified = dictionary.get("two_factor_verified") if "two_factor_verified" in dictionary.keys() else APIHelper.SKIP
        via_sso = dictionary.get("via_sso") if dictionary.get("via_sso") else APIHelper.SKIP
        # Return an object of this model
        return cls(email,
                   first_name,
                   last_name,
                   admin_id,
                   enable_two_factor,
                   hours,
                   oauth_google,
                   phone,
                   phone_2,
                   privileges,
                   session_expiry,
                   tags,
                   two_factor_verified,
                   via_sso)
