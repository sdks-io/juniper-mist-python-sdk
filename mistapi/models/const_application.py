# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ConstApplication(object):

    """Implementation of the 'ConstApplication' model.

    TODO: type model description here.

    Attributes:
        app_id (bool): TODO: type description here.
        app_image_url (string): TODO: type description here.
        app_probe (bool): TODO: type description here.
        group (string): TODO: type description here.
        key (string): TODO: type description here.
        name (string): TODO: type description here.
        signature_based (bool): TODO: type description here.
        ssr_app_id (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "app_id": 'app_id',
        "app_image_url": 'app_image_url',
        "app_probe": 'app_probe',
        "group": 'group',
        "key": 'key',
        "name": 'name',
        "signature_based": 'signature_based',
        "ssr_app_id": 'ssr_app_id'
    }

    _optionals = [
        'app_id',
        'app_image_url',
        'app_probe',
        'group',
        'key',
        'name',
        'signature_based',
        'ssr_app_id',
    ]

    def __init__(self,
                 app_id=APIHelper.SKIP,
                 app_image_url=APIHelper.SKIP,
                 app_probe=APIHelper.SKIP,
                 group=APIHelper.SKIP,
                 key=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 signature_based=APIHelper.SKIP,
                 ssr_app_id=APIHelper.SKIP):
        """Constructor for the ConstApplication class"""

        # Initialize members of the class
        if app_id is not APIHelper.SKIP:
            self.app_id = app_id 
        if app_image_url is not APIHelper.SKIP:
            self.app_image_url = app_image_url 
        if app_probe is not APIHelper.SKIP:
            self.app_probe = app_probe 
        if group is not APIHelper.SKIP:
            self.group = group 
        if key is not APIHelper.SKIP:
            self.key = key 
        if name is not APIHelper.SKIP:
            self.name = name 
        if signature_based is not APIHelper.SKIP:
            self.signature_based = signature_based 
        if ssr_app_id is not APIHelper.SKIP:
            self.ssr_app_id = ssr_app_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        app_id = dictionary.get("app_id") if "app_id" in dictionary.keys() else APIHelper.SKIP
        app_image_url = dictionary.get("app_image_url") if dictionary.get("app_image_url") else APIHelper.SKIP
        app_probe = dictionary.get("app_probe") if "app_probe" in dictionary.keys() else APIHelper.SKIP
        group = dictionary.get("group") if dictionary.get("group") else APIHelper.SKIP
        key = dictionary.get("key") if dictionary.get("key") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        signature_based = dictionary.get("signature_based") if "signature_based" in dictionary.keys() else APIHelper.SKIP
        ssr_app_id = dictionary.get("ssr_app_id") if "ssr_app_id" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(app_id,
                   app_image_url,
                   app_probe,
                   group,
                   key,
                   name,
                   signature_based,
                   ssr_app_id)
