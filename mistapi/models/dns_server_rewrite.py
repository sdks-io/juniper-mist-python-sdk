# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class DnsServerRewrite(object):

    """Implementation of the 'DnsServerRewrite' model.

    for radius_group-based DNS server (rewrite DNS request depending on the
    Group RADIUS server returns)

    Attributes:
        enabled (bool): TODO: type description here.
        radius_groups (object): map between radius_group and the desired DNS
            server (IPv4 only)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enabled": 'enabled',
        "radius_groups": 'radius_groups'
    }

    _optionals = [
        'enabled',
        'radius_groups',
    ]

    def __init__(self,
                 enabled=APIHelper.SKIP,
                 radius_groups=APIHelper.SKIP):
        """Constructor for the DnsServerRewrite class"""

        # Initialize members of the class
        if enabled is not APIHelper.SKIP:
            self.enabled = enabled 
        if radius_groups is not APIHelper.SKIP:
            self.radius_groups = radius_groups 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else APIHelper.SKIP
        radius_groups = dictionary.get("radius_groups") if dictionary.get("radius_groups") else APIHelper.SKIP
        # Return an object of this model
        return cls(enabled,
                   radius_groups)
