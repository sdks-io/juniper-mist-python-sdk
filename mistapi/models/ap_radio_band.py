# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApRadioBand(object):

    """Implementation of the 'ap_radio_band' model.

    Radio Band AP settings

    Attributes:
        allow_rrm_disable (bool): TODO: type description here.
        ant_gain (int): TODO: type description here.
        antenna_mode (AntennaModeEnum): TODO: type description here.
        bandwidth (BandwidthEnum): channel width for the band, 20 / 40 / 80 /
            160, 80 is only applicable for band_5 and 160 is only for band_6,
            ignored if channel is 0
        channel (int): For Device. (primary) channel for the band, 0 means
            using the Site Setting
        channels (list of int): For RFTemplates. List of channels, null or
            empty array means auto
        disabled (bool): whether to disable the radio
        power (int): TX power of the radio. For Devices, 0 mean using the Site
            Setting
        power_max (int): when power=0, max tx power to use, HW-specific values
            will be used if not set
        power_min (int): when power=0, min tx power to use, HW-specific values
            will be used if not set
        preamble (PreambleEnum): TODO: type description here.
        usage (UsageEnum): for band_24 radio

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "allow_rrm_disable": 'allow_rrm_disable',
        "ant_gain": 'ant_gain',
        "antenna_mode": 'antenna_mode',
        "bandwidth": 'bandwidth',
        "channel": 'channel',
        "channels": 'channels',
        "disabled": 'disabled',
        "power": 'power',
        "power_max": 'power_max',
        "power_min": 'power_min',
        "preamble": 'preamble',
        "usage": 'usage'
    }

    _optionals = [
        'allow_rrm_disable',
        'ant_gain',
        'antenna_mode',
        'bandwidth',
        'channel',
        'channels',
        'disabled',
        'power',
        'power_max',
        'power_min',
        'preamble',
        'usage',
    ]

    _nullables = [
        'ant_gain',
        'channel',
        'channels',
        'power',
        'power_max',
        'power_min',
    ]

    def __init__(self,
                 allow_rrm_disable=APIHelper.SKIP,
                 ant_gain=APIHelper.SKIP,
                 antenna_mode='default',
                 bandwidth=APIHelper.SKIP,
                 channel=APIHelper.SKIP,
                 channels=APIHelper.SKIP,
                 disabled=APIHelper.SKIP,
                 power=APIHelper.SKIP,
                 power_max=APIHelper.SKIP,
                 power_min=APIHelper.SKIP,
                 preamble='short',
                 usage='24'):
        """Constructor for the ApRadioBand class"""

        # Initialize members of the class
        if allow_rrm_disable is not APIHelper.SKIP:
            self.allow_rrm_disable = allow_rrm_disable 
        if ant_gain is not APIHelper.SKIP:
            self.ant_gain = ant_gain 
        self.antenna_mode = antenna_mode 
        if bandwidth is not APIHelper.SKIP:
            self.bandwidth = bandwidth 
        if channel is not APIHelper.SKIP:
            self.channel = channel 
        if channels is not APIHelper.SKIP:
            self.channels = channels 
        if disabled is not APIHelper.SKIP:
            self.disabled = disabled 
        if power is not APIHelper.SKIP:
            self.power = power 
        if power_max is not APIHelper.SKIP:
            self.power_max = power_max 
        if power_min is not APIHelper.SKIP:
            self.power_min = power_min 
        self.preamble = preamble 
        self.usage = usage 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        allow_rrm_disable = dictionary.get("allow_rrm_disable") if "allow_rrm_disable" in dictionary.keys() else APIHelper.SKIP
        ant_gain = dictionary.get("ant_gain") if "ant_gain" in dictionary.keys() else APIHelper.SKIP
        antenna_mode = dictionary.get("antenna_mode") if dictionary.get("antenna_mode") else 'default'
        bandwidth = dictionary.get("bandwidth") if dictionary.get("bandwidth") else APIHelper.SKIP
        channel = dictionary.get("channel") if "channel" in dictionary.keys() else APIHelper.SKIP
        channels = dictionary.get("channels") if "channels" in dictionary.keys() else APIHelper.SKIP
        disabled = dictionary.get("disabled") if "disabled" in dictionary.keys() else APIHelper.SKIP
        power = dictionary.get("power") if "power" in dictionary.keys() else APIHelper.SKIP
        power_max = dictionary.get("power_max") if "power_max" in dictionary.keys() else APIHelper.SKIP
        power_min = dictionary.get("power_min") if "power_min" in dictionary.keys() else APIHelper.SKIP
        preamble = dictionary.get("preamble") if dictionary.get("preamble") else 'short'
        usage = dictionary.get("usage") if dictionary.get("usage") else '24'
        # Return an object of this model
        return cls(allow_rrm_disable,
                   ant_gain,
                   antenna_mode,
                   bandwidth,
                   channel,
                   channels,
                   disabled,
                   power,
                   power_max,
                   power_min,
                   preamble,
                   usage)
