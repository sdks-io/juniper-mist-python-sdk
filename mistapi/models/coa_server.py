# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class CoaServer(object):

    """Implementation of the 'coa_server' model.

    CoA Server

    Attributes:
        disable_event_timestamp_check (bool): TODO: type description here.
        enabled (bool): TODO: type description here.
        ip (string): TODO: type description here.
        port (string): TODO: type description here.
        secret (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "disable_event_timestamp_check": 'disable_event_timestamp_check',
        "enabled": 'enabled',
        "ip": 'ip',
        "port": 'port',
        "secret": 'secret'
    }

    def __init__(self,
                 disable_event_timestamp_check=None,
                 enabled=None,
                 ip=None,
                 port=None,
                 secret=None):
        """Constructor for the CoaServer class"""

        # Initialize members of the class
        self.disable_event_timestamp_check = disable_event_timestamp_check 
        self.enabled = enabled 
        self.ip = ip 
        self.port = port 
        self.secret = secret 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        disable_event_timestamp_check = dictionary.get("disable_event_timestamp_check") if "disable_event_timestamp_check" in dictionary.keys() else None
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else None
        ip = dictionary.get("ip") if dictionary.get("ip") else None
        port = dictionary.get("port") if dictionary.get("port") else None
        secret = dictionary.get("secret") if dictionary.get("secret") else None
        # Return an object of this model
        return cls(disable_event_timestamp_check,
                   enabled,
                   ip,
                   port,
                   secret)
