# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.traffic_shaping_1 import TrafficShaping1


class VpnPaths(object):

    """Implementation of the 'VpnPaths' model.

    TODO: type model description here.

    Attributes:
        bfd_profile (BfdProfileEnum): TODO: type description here.
        bfd_use_tunnel_mode (bool): whether to use tunnel mode. SSR only
        role (Role2Enum): TODO: type description here.
        traffic_shaping (TrafficShaping1): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bfd_profile": 'bfd_profile',
        "bfd_use_tunnel_mode": 'bfd_use_tunnel_mode',
        "role": 'role',
        "traffic_shaping": 'traffic_shaping'
    }

    _optionals = [
        'bfd_profile',
        'bfd_use_tunnel_mode',
        'role',
        'traffic_shaping',
    ]

    def __init__(self,
                 bfd_profile='broadband',
                 bfd_use_tunnel_mode=False,
                 role='spoke',
                 traffic_shaping=APIHelper.SKIP):
        """Constructor for the VpnPaths class"""

        # Initialize members of the class
        self.bfd_profile = bfd_profile 
        self.bfd_use_tunnel_mode = bfd_use_tunnel_mode 
        self.role = role 
        if traffic_shaping is not APIHelper.SKIP:
            self.traffic_shaping = traffic_shaping 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        bfd_profile = dictionary.get("bfd_profile") if dictionary.get("bfd_profile") else 'broadband'
        bfd_use_tunnel_mode = dictionary.get("bfd_use_tunnel_mode") if dictionary.get("bfd_use_tunnel_mode") else False
        role = dictionary.get("role") if dictionary.get("role") else 'spoke'
        traffic_shaping = TrafficShaping1.from_dictionary(dictionary.get('traffic_shaping')) if 'traffic_shaping' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(bfd_profile,
                   bfd_use_tunnel_mode,
                   role,
                   traffic_shaping)
