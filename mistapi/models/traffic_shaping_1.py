# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class TrafficShaping1(object):

    """Implementation of the 'TrafficShaping1' model.

    TODO: type model description here.

    Attributes:
        class_percentage (list of int): percentages for differet class of
            traffic: high / medium / low / best-effort sum must be equal to
            100
        enabled (bool): TODO: type description here.
        max_tx_kbps (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "class_percentage": 'class_percentage',
        "enabled": 'enabled',
        "max_tx_kbps": 'max_tx_kbps'
    }

    _optionals = [
        'class_percentage',
        'enabled',
        'max_tx_kbps',
    ]

    def __init__(self,
                 class_percentage=APIHelper.SKIP,
                 enabled=APIHelper.SKIP,
                 max_tx_kbps=APIHelper.SKIP):
        """Constructor for the TrafficShaping1 class"""

        # Initialize members of the class
        if class_percentage is not APIHelper.SKIP:
            self.class_percentage = class_percentage 
        if enabled is not APIHelper.SKIP:
            self.enabled = enabled 
        if max_tx_kbps is not APIHelper.SKIP:
            self.max_tx_kbps = max_tx_kbps 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        class_percentage = dictionary.get("class_percentage") if dictionary.get("class_percentage") else APIHelper.SKIP
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else APIHelper.SKIP
        max_tx_kbps = dictionary.get("max_tx_kbps") if dictionary.get("max_tx_kbps") else APIHelper.SKIP
        # Return an object of this model
        return cls(class_percentage,
                   enabled,
                   max_tx_kbps)
