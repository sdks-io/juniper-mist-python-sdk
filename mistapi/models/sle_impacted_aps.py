# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.models.aps_1 import Aps1


class SleImpactedAps(object):

    """Implementation of the 'sle_impacted_aps' model.

    TODO: type model description here.

    Attributes:
        aps (list of Aps1): TODO: type description here.
        classifier (string): TODO: type description here.
        end (float): TODO: type description here.
        failure (string): TODO: type description here.
        limit (float): TODO: type description here.
        metric (string): TODO: type description here.
        page (float): TODO: type description here.
        start (float): TODO: type description here.
        total_count (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "aps": 'aps',
        "classifier": 'classifier',
        "end": 'end',
        "failure": 'failure',
        "limit": 'limit',
        "metric": 'metric',
        "page": 'page',
        "start": 'start',
        "total_count": 'total_count'
    }

    def __init__(self,
                 aps=None,
                 classifier=None,
                 end=None,
                 failure=None,
                 limit=None,
                 metric=None,
                 page=None,
                 start=None,
                 total_count=None):
        """Constructor for the SleImpactedAps class"""

        # Initialize members of the class
        self.aps = aps 
        self.classifier = classifier 
        self.end = end 
        self.failure = failure 
        self.limit = limit 
        self.metric = metric 
        self.page = page 
        self.start = start 
        self.total_count = total_count 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        aps = None
        if dictionary.get('aps') is not None:
            aps = [Aps1.from_dictionary(x) for x in dictionary.get('aps')]
        classifier = dictionary.get("classifier") if dictionary.get("classifier") else None
        end = dictionary.get("end") if dictionary.get("end") else None
        failure = dictionary.get("failure") if dictionary.get("failure") else None
        limit = dictionary.get("limit") if dictionary.get("limit") else None
        metric = dictionary.get("metric") if dictionary.get("metric") else None
        page = dictionary.get("page") if dictionary.get("page") else None
        start = dictionary.get("start") if dictionary.get("start") else None
        total_count = dictionary.get("total_count") if dictionary.get("total_count") else None
        # Return an object of this model
        return cls(aps,
                   classifier,
                   end,
                   failure,
                   limit,
                   metric,
                   page,
                   start,
                   total_count)
