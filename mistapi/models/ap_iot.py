# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.ap_iot_input import ApIotInput
from mistapi.models.ap_iot_output import ApIotOutput


class ApIot(object):

    """Implementation of the 'ap_iot' model.

    IoT AP settings

    Attributes:
        a_1 (ApIotOutput): IoT output AP settings
        a_2 (ApIotOutput): IoT output AP settings
        a_3 (ApIotOutput): IoT output AP settings
        a_4 (ApIotOutput): IoT output AP settings
        di_1 (ApIotInput): IoT Input AP settings
        di_2 (ApIotInput): IoT Input AP settings
        do (ApIotOutput): IoT output AP settings

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "a_1": 'A1',
        "a_2": 'A2',
        "a_3": 'A3',
        "a_4": 'A4',
        "di_1": 'DI1',
        "di_2": 'DI2',
        "do": 'DO'
    }

    _optionals = [
        'a_1',
        'a_2',
        'a_3',
        'a_4',
        'di_1',
        'di_2',
        'do',
    ]

    def __init__(self,
                 a_1=APIHelper.SKIP,
                 a_2=APIHelper.SKIP,
                 a_3=APIHelper.SKIP,
                 a_4=APIHelper.SKIP,
                 di_1=APIHelper.SKIP,
                 di_2=APIHelper.SKIP,
                 do=APIHelper.SKIP):
        """Constructor for the ApIot class"""

        # Initialize members of the class
        if a_1 is not APIHelper.SKIP:
            self.a_1 = a_1 
        if a_2 is not APIHelper.SKIP:
            self.a_2 = a_2 
        if a_3 is not APIHelper.SKIP:
            self.a_3 = a_3 
        if a_4 is not APIHelper.SKIP:
            self.a_4 = a_4 
        if di_1 is not APIHelper.SKIP:
            self.di_1 = di_1 
        if di_2 is not APIHelper.SKIP:
            self.di_2 = di_2 
        if do is not APIHelper.SKIP:
            self.do = do 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        a_1 = ApIotOutput.from_dictionary(dictionary.get('A1')) if 'A1' in dictionary.keys() else APIHelper.SKIP
        a_2 = ApIotOutput.from_dictionary(dictionary.get('A2')) if 'A2' in dictionary.keys() else APIHelper.SKIP
        a_3 = ApIotOutput.from_dictionary(dictionary.get('A3')) if 'A3' in dictionary.keys() else APIHelper.SKIP
        a_4 = ApIotOutput.from_dictionary(dictionary.get('A4')) if 'A4' in dictionary.keys() else APIHelper.SKIP
        di_1 = ApIotInput.from_dictionary(dictionary.get('DI1')) if 'DI1' in dictionary.keys() else APIHelper.SKIP
        di_2 = ApIotInput.from_dictionary(dictionary.get('DI2')) if 'DI2' in dictionary.keys() else APIHelper.SKIP
        do = ApIotOutput.from_dictionary(dictionary.get('DO')) if 'DO' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(a_1,
                   a_2,
                   a_3,
                   a_4,
                   di_1,
                   di_2,
                   do)
