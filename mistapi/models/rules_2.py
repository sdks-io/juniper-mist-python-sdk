# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Rules2(object):

    """Implementation of the 'Rules2' model.

    TODO: type model description here.

    Attributes:
        equals (string): TODO: type description here.
        equals_any (list of string): use `equals_any` to match any item in a
            list
        expression (string): "[0:3]":"abcdef" -> "abc" "split(.)[1]": "a.b.c"
            -> "b" "split(-)[1][0:3]: "a1234-b5678-c90" -> "b56"
        src (SrcEnum): TODO: type description here.
        usage (string): `port_usage` name

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "src": 'src',
        "equals": 'equals',
        "equals_any": 'equals_any',
        "expression": 'expression',
        "usage": 'usage'
    }

    _optionals = [
        'equals',
        'equals_any',
        'expression',
        'usage',
    ]

    def __init__(self,
                 src=None,
                 equals=APIHelper.SKIP,
                 equals_any=APIHelper.SKIP,
                 expression=APIHelper.SKIP,
                 usage=APIHelper.SKIP):
        """Constructor for the Rules2 class"""

        # Initialize members of the class
        if equals is not APIHelper.SKIP:
            self.equals = equals 
        if equals_any is not APIHelper.SKIP:
            self.equals_any = equals_any 
        if expression is not APIHelper.SKIP:
            self.expression = expression 
        self.src = src 
        if usage is not APIHelper.SKIP:
            self.usage = usage 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        src = dictionary.get("src") if dictionary.get("src") else None
        equals = dictionary.get("equals") if dictionary.get("equals") else APIHelper.SKIP
        equals_any = dictionary.get("equals_any") if dictionary.get("equals_any") else APIHelper.SKIP
        expression = dictionary.get("expression") if dictionary.get("expression") else APIHelper.SKIP
        usage = dictionary.get("usage") if dictionary.get("usage") else APIHelper.SKIP
        # Return an object of this model
        return cls(src,
                   equals,
                   equals_any,
                   expression,
                   usage)
