# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.server import Server


class Radsec(object):

    """Implementation of the 'radsec' model.

    Radsec settings

    Attributes:
        enabled (bool): TODO: type description here.
        idle_timeout (int): TODO: type description here.
        mxcluster_ids (list of uuid|string): To use Org mxedges when this WLAN
            does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s)
            identified by mxcluster_ids
        proxy_hosts (list of string): default is
            site.mxedge.radsec.proxy_hosts which must be a superset of all
            wlans[*].radsec.proxy_hosts when radsec.proxy_hosts are not used,
            tunnel peers (org or site mxedges) are used irrespective of
            use_site_mxedge
        server_name (string): name of the server to verify (against the
            cacerts in Org Setting). Only if not Mist Edge.
        servers (list of Server): List of Radsec Servers. Only if not Mist
            Edge.
        use_mxedge (bool): use mxedge(s) as radsecproxy
        use_site_mxedge (bool): To use Site mxedges when this WLAN does not
            use mxtunnel

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enabled": 'enabled',
        "idle_timeout": 'idle_timeout',
        "mxcluster_ids": 'mxcluster_ids',
        "proxy_hosts": 'proxy_hosts',
        "server_name": 'server_name',
        "servers": 'servers',
        "use_mxedge": 'use_mxedge',
        "use_site_mxedge": 'use_site_mxedge'
    }

    _optionals = [
        'enabled',
        'idle_timeout',
        'mxcluster_ids',
        'proxy_hosts',
        'server_name',
        'servers',
        'use_mxedge',
        'use_site_mxedge',
    ]

    def __init__(self,
                 enabled=APIHelper.SKIP,
                 idle_timeout=APIHelper.SKIP,
                 mxcluster_ids=APIHelper.SKIP,
                 proxy_hosts=APIHelper.SKIP,
                 server_name=APIHelper.SKIP,
                 servers=APIHelper.SKIP,
                 use_mxedge=APIHelper.SKIP,
                 use_site_mxedge=False):
        """Constructor for the Radsec class"""

        # Initialize members of the class
        if enabled is not APIHelper.SKIP:
            self.enabled = enabled 
        if idle_timeout is not APIHelper.SKIP:
            self.idle_timeout = idle_timeout 
        if mxcluster_ids is not APIHelper.SKIP:
            self.mxcluster_ids = mxcluster_ids 
        if proxy_hosts is not APIHelper.SKIP:
            self.proxy_hosts = proxy_hosts 
        if server_name is not APIHelper.SKIP:
            self.server_name = server_name 
        if servers is not APIHelper.SKIP:
            self.servers = servers 
        if use_mxedge is not APIHelper.SKIP:
            self.use_mxedge = use_mxedge 
        self.use_site_mxedge = use_site_mxedge 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else APIHelper.SKIP
        idle_timeout = dictionary.get("idle_timeout") if dictionary.get("idle_timeout") else APIHelper.SKIP
        mxcluster_ids = dictionary.get("mxcluster_ids") if dictionary.get("mxcluster_ids") else APIHelper.SKIP
        proxy_hosts = dictionary.get("proxy_hosts") if dictionary.get("proxy_hosts") else APIHelper.SKIP
        server_name = dictionary.get("server_name") if dictionary.get("server_name") else APIHelper.SKIP
        servers = None
        if dictionary.get('servers') is not None:
            servers = [Server.from_dictionary(x) for x in dictionary.get('servers')]
        else:
            servers = APIHelper.SKIP
        use_mxedge = dictionary.get("use_mxedge") if "use_mxedge" in dictionary.keys() else APIHelper.SKIP
        use_site_mxedge = dictionary.get("use_site_mxedge") if dictionary.get("use_site_mxedge") else False
        # Return an object of this model
        return cls(enabled,
                   idle_timeout,
                   mxcluster_ids,
                   proxy_hosts,
                   server_name,
                   servers,
                   use_mxedge,
                   use_site_mxedge)
