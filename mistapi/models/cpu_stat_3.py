# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.cpus import Cpus


class CpuStat3(object):

    """Implementation of the 'CpuStat3' model.

    CPU/core stats list

    Attributes:
        cpus (dict): TODO: type description here.
        idle (int): percentage of Idle, Idle/(Idle + Busy) since last
            sampling
        interrupt (int): percentage of Interrupt, (Irq + SoftIrq)/(Idle +
            Busy) since last sampling
        system (int): percentage of System, System/(Idle + Busy) since last
            sampling
        usage (int): percentage of load, Busy/(Idle + Busy) since last
            sampling
        user (int): percentage of User, User/(Idle + Busy) since last
            sampling

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cpus": 'cpus',
        "idle": 'idle',
        "interrupt": 'interrupt',
        "system": 'system',
        "usage": 'usage',
        "user": 'user'
    }

    _optionals = [
        'cpus',
        'idle',
        'interrupt',
        'system',
        'usage',
        'user',
    ]

    def __init__(self,
                 cpus=APIHelper.SKIP,
                 idle=APIHelper.SKIP,
                 interrupt=APIHelper.SKIP,
                 system=APIHelper.SKIP,
                 usage=APIHelper.SKIP,
                 user=APIHelper.SKIP):
        """Constructor for the CpuStat3 class"""

        # Initialize members of the class
        if cpus is not APIHelper.SKIP:
            self.cpus = cpus 
        if idle is not APIHelper.SKIP:
            self.idle = idle 
        if interrupt is not APIHelper.SKIP:
            self.interrupt = interrupt 
        if system is not APIHelper.SKIP:
            self.system = system 
        if usage is not APIHelper.SKIP:
            self.usage = usage 
        if user is not APIHelper.SKIP:
            self.user = user 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        cpus = Cpus.from_dictionary(dictionary.get('cpus')) if 'cpus' in dictionary.keys() else APIHelper.SKIP
        idle = dictionary.get("idle") if dictionary.get("idle") else APIHelper.SKIP
        interrupt = dictionary.get("interrupt") if dictionary.get("interrupt") else APIHelper.SKIP
        system = dictionary.get("system") if dictionary.get("system") else APIHelper.SKIP
        usage = dictionary.get("usage") if dictionary.get("usage") else APIHelper.SKIP
        user = dictionary.get("user") if dictionary.get("user") else APIHelper.SKIP
        # Return an object of this model
        return cls(cpus,
                   idle,
                   interrupt,
                   system,
                   usage,
                   user)
