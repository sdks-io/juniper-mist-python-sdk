# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApiV1SitesDevicesServicePingRequest(object):

    """Implementation of the 'Api V1 Sites Devices Service Ping Request' model.

    TODO: type model description here.

    Attributes:
        count (int): TODO: type description here.
        host (string): TODO: type description here.
        service (string): ping packet takes the same path as the service
        size (int): TODO: type description here.
        tenant (string): tenant context in which the packet is sent

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "host": 'host',
        "service": 'service',
        "count": 'count',
        "size": 'size',
        "tenant": 'tenant'
    }

    _optionals = [
        'count',
        'size',
        'tenant',
    ]

    def __init__(self,
                 host=None,
                 service=None,
                 count=10,
                 size=56,
                 tenant=APIHelper.SKIP):
        """Constructor for the ApiV1SitesDevicesServicePingRequest class"""

        # Initialize members of the class
        self.count = count 
        self.host = host 
        self.service = service 
        self.size = size 
        if tenant is not APIHelper.SKIP:
            self.tenant = tenant 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        host = dictionary.get("host") if dictionary.get("host") else None
        service = dictionary.get("service") if dictionary.get("service") else None
        count = dictionary.get("count") if dictionary.get("count") else 10
        size = dictionary.get("size") if dictionary.get("size") else 56
        tenant = dictionary.get("tenant") if dictionary.get("tenant") else APIHelper.SKIP
        # Return an object of this model
        return cls(host,
                   service,
                   count,
                   size,
                   tenant)
