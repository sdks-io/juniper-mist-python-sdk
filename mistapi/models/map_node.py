# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.position import Position


class MapNode(object):

    """Implementation of the 'map_node' model.

    Nodes on maps

    Attributes:
        edges (dict): TODO: type description here.
        name (string): TODO: type description here.
        position (Position): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "edges": 'edges',
        "position": 'position'
    }

    _optionals = [
        'edges',
        'position',
    ]

    def __init__(self,
                 name=None,
                 edges=APIHelper.SKIP,
                 position=APIHelper.SKIP):
        """Constructor for the MapNode class"""

        # Initialize members of the class
        if edges is not APIHelper.SKIP:
            self.edges = edges 
        self.name = name 
        if position is not APIHelper.SKIP:
            self.position = position 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        edges = dictionary.get("edges") if dictionary.get("edges") else APIHelper.SKIP
        position = Position.from_dictionary(dictionary.get('position')) if 'position' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   edges,
                   position)
