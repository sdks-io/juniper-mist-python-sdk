# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Delivery(object):

    """Implementation of the 'delivery' model.

    Delivery object to configure the alarm delivery

    Attributes:
        additional_emails (list of string): List of additional email string to
            deliver the alarms via emails
        enabled (bool): Whether to enable the alarm delivery via emails or
            not
        to_org_admins (bool): Whether to deliver the alarms via emails to Org
            admins or not
        to_site_admins (bool): Whether to deliver the alarms via emails to
            Site admins or not

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enabled": 'enabled',
        "additional_emails": 'additional_emails',
        "to_org_admins": 'to_org_admins',
        "to_site_admins": 'to_site_admins'
    }

    _optionals = [
        'additional_emails',
        'to_org_admins',
        'to_site_admins',
    ]

    def __init__(self,
                 enabled=None,
                 additional_emails=APIHelper.SKIP,
                 to_org_admins=APIHelper.SKIP,
                 to_site_admins=APIHelper.SKIP):
        """Constructor for the Delivery class"""

        # Initialize members of the class
        if additional_emails is not APIHelper.SKIP:
            self.additional_emails = additional_emails 
        self.enabled = enabled 
        if to_org_admins is not APIHelper.SKIP:
            self.to_org_admins = to_org_admins 
        if to_site_admins is not APIHelper.SKIP:
            self.to_site_admins = to_site_admins 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else None
        additional_emails = dictionary.get("additional_emails") if dictionary.get("additional_emails") else APIHelper.SKIP
        to_org_admins = dictionary.get("to_org_admins") if "to_org_admins" in dictionary.keys() else APIHelper.SKIP
        to_site_admins = dictionary.get("to_site_admins") if "to_site_admins" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(enabled,
                   additional_emails,
                   to_org_admins,
                   to_site_admins)
