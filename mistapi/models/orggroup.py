# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Orggroup(object):

    """Implementation of the 'orggroup' model.

    Organizations Group

    Attributes:
        created_time (float): TODO: type description here.
        id (uuid|string): TODO: type description here.
        modified_time (float): TODO: type description here.
        msp_id (uuid|string): TODO: type description here.
        name (string): TODO: type description here.
        org_ids (list of uuid|string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "created_time": 'created_time',
        "id": 'id',
        "modified_time": 'modified_time',
        "msp_id": 'msp_id',
        "org_ids": 'org_ids'
    }

    _optionals = [
        'created_time',
        'id',
        'modified_time',
        'msp_id',
        'org_ids',
    ]

    def __init__(self,
                 name=None,
                 created_time=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 msp_id=APIHelper.SKIP,
                 org_ids=APIHelper.SKIP):
        """Constructor for the Orggroup class"""

        # Initialize members of the class
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if id is not APIHelper.SKIP:
            self.id = id 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        if msp_id is not APIHelper.SKIP:
            self.msp_id = msp_id 
        self.name = name 
        if org_ids is not APIHelper.SKIP:
            self.org_ids = org_ids 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        msp_id = dictionary.get("msp_id") if dictionary.get("msp_id") else APIHelper.SKIP
        org_ids = dictionary.get("org_ids") if dictionary.get("org_ids") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   created_time,
                   id,
                   modified_time,
                   msp_id,
                   org_ids)
