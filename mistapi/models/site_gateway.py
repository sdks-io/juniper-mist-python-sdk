# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.app_probing_1 import AppProbing1
from mistapi.models.auto_signature_update import AutoSignatureUpdate


class SiteGateway(object):

    """Implementation of the 'site_gateway' model.

    Gateway Site settings

    Attributes:
        admin_sshkeys (list of string): for SSR only, as direct root access is
            not allowed
        app_probing (AppProbing1): TODO: type description here.
        app_usage (bool): consumes uplink bandwidth, requires WA license
        auto_signature_update (AutoSignatureUpdate): TODO: type description
            here.
        config_revert_timer (float): he rollback timer for commit confirmed
        probe_hosts (list of string): TODO: type description here.
        root_password (string): for SRX only
        security_log_source_address (string): TODO: type description here.
        security_log_source_interface (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "admin_sshkeys": 'admin_sshkeys',
        "app_probing": 'app_probing',
        "app_usage": 'app_usage',
        "auto_signature_update": 'auto_signature_update',
        "config_revert_timer": 'config_revert_timer',
        "probe_hosts": 'probe_hosts',
        "root_password": 'root_password',
        "security_log_source_address": 'security_log_source_address',
        "security_log_source_interface": 'security_log_source_interface'
    }

    _optionals = [
        'admin_sshkeys',
        'app_probing',
        'app_usage',
        'auto_signature_update',
        'config_revert_timer',
        'probe_hosts',
        'root_password',
        'security_log_source_address',
        'security_log_source_interface',
    ]

    def __init__(self,
                 admin_sshkeys=APIHelper.SKIP,
                 app_probing=APIHelper.SKIP,
                 app_usage=APIHelper.SKIP,
                 auto_signature_update=APIHelper.SKIP,
                 config_revert_timer=10,
                 probe_hosts=APIHelper.SKIP,
                 root_password=APIHelper.SKIP,
                 security_log_source_address=APIHelper.SKIP,
                 security_log_source_interface=APIHelper.SKIP):
        """Constructor for the SiteGateway class"""

        # Initialize members of the class
        if admin_sshkeys is not APIHelper.SKIP:
            self.admin_sshkeys = admin_sshkeys 
        if app_probing is not APIHelper.SKIP:
            self.app_probing = app_probing 
        if app_usage is not APIHelper.SKIP:
            self.app_usage = app_usage 
        if auto_signature_update is not APIHelper.SKIP:
            self.auto_signature_update = auto_signature_update 
        self.config_revert_timer = config_revert_timer 
        if probe_hosts is not APIHelper.SKIP:
            self.probe_hosts = probe_hosts 
        if root_password is not APIHelper.SKIP:
            self.root_password = root_password 
        if security_log_source_address is not APIHelper.SKIP:
            self.security_log_source_address = security_log_source_address 
        if security_log_source_interface is not APIHelper.SKIP:
            self.security_log_source_interface = security_log_source_interface 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        admin_sshkeys = dictionary.get("admin_sshkeys") if dictionary.get("admin_sshkeys") else APIHelper.SKIP
        app_probing = AppProbing1.from_dictionary(dictionary.get('app_probing')) if 'app_probing' in dictionary.keys() else APIHelper.SKIP
        app_usage = dictionary.get("app_usage") if "app_usage" in dictionary.keys() else APIHelper.SKIP
        auto_signature_update = AutoSignatureUpdate.from_dictionary(dictionary.get('auto_signature_update')) if 'auto_signature_update' in dictionary.keys() else APIHelper.SKIP
        config_revert_timer = dictionary.get("config_revert_timer") if dictionary.get("config_revert_timer") else 10
        probe_hosts = dictionary.get("probe_hosts") if dictionary.get("probe_hosts") else APIHelper.SKIP
        root_password = dictionary.get("root_password") if dictionary.get("root_password") else APIHelper.SKIP
        security_log_source_address = dictionary.get("security_log_source_address") if dictionary.get("security_log_source_address") else APIHelper.SKIP
        security_log_source_interface = dictionary.get("security_log_source_interface") if dictionary.get("security_log_source_interface") else APIHelper.SKIP
        # Return an object of this model
        return cls(admin_sshkeys,
                   app_probing,
                   app_usage,
                   auto_signature_update,
                   config_revert_timer,
                   probe_hosts,
                   root_password,
                   security_log_source_address,
                   security_log_source_interface)
