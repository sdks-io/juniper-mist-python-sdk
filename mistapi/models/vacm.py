# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.access import Access
from mistapi.models.security_to_group import SecurityToGroup


class Vacm(object):

    """Implementation of the 'Vacm' model.

    TODO: type model description here.

    Attributes:
        access (list of Access): TODO: type description here.
        security_to_group (SecurityToGroup): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "access": 'access',
        "security_to_group": 'security_to_group'
    }

    _optionals = [
        'access',
        'security_to_group',
    ]

    def __init__(self,
                 access=APIHelper.SKIP,
                 security_to_group=APIHelper.SKIP):
        """Constructor for the Vacm class"""

        # Initialize members of the class
        if access is not APIHelper.SKIP:
            self.access = access 
        if security_to_group is not APIHelper.SKIP:
            self.security_to_group = security_to_group 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        access = None
        if dictionary.get('access') is not None:
            access = [Access.from_dictionary(x) for x in dictionary.get('access')]
        else:
            access = APIHelper.SKIP
        security_to_group = SecurityToGroup.from_dictionary(dictionary.get('security_to_group')) if 'security_to_group' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(access,
                   security_to_group)
