# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Rtsa(object):

    """Implementation of the 'Rtsa' model.

    managed mobility

    Attributes:
        app_waking (bool): TODO: type description here.
        disable_dead_reckoning (bool): TODO: type description here.
        disable_pressure_sensor (bool): TODO: type description here.
        enabled (bool): TODO: type description here.
        track_asset (bool): asset tracking related

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "app_waking": 'app_waking',
        "disable_dead_reckoning": 'disable_dead_reckoning',
        "disable_pressure_sensor": 'disable_pressure_sensor',
        "enabled": 'enabled',
        "track_asset": 'track_asset'
    }

    _optionals = [
        'app_waking',
        'disable_dead_reckoning',
        'disable_pressure_sensor',
        'enabled',
        'track_asset',
    ]

    def __init__(self,
                 app_waking=False,
                 disable_dead_reckoning=APIHelper.SKIP,
                 disable_pressure_sensor=APIHelper.SKIP,
                 enabled=APIHelper.SKIP,
                 track_asset=APIHelper.SKIP):
        """Constructor for the Rtsa class"""

        # Initialize members of the class
        self.app_waking = app_waking 
        if disable_dead_reckoning is not APIHelper.SKIP:
            self.disable_dead_reckoning = disable_dead_reckoning 
        if disable_pressure_sensor is not APIHelper.SKIP:
            self.disable_pressure_sensor = disable_pressure_sensor 
        if enabled is not APIHelper.SKIP:
            self.enabled = enabled 
        if track_asset is not APIHelper.SKIP:
            self.track_asset = track_asset 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        app_waking = dictionary.get("app_waking") if dictionary.get("app_waking") else False
        disable_dead_reckoning = dictionary.get("disable_dead_reckoning") if "disable_dead_reckoning" in dictionary.keys() else APIHelper.SKIP
        disable_pressure_sensor = dictionary.get("disable_pressure_sensor") if "disable_pressure_sensor" in dictionary.keys() else APIHelper.SKIP
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else APIHelper.SKIP
        track_asset = dictionary.get("track_asset") if "track_asset" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(app_waking,
                   disable_dead_reckoning,
                   disable_pressure_sensor,
                   enabled,
                   track_asset)
