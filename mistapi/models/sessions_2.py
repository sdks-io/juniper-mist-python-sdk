# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Sessions2(object):

    """Implementation of the 'Sessions2' model.

    TODO: type model description here.

    Attributes:
        ap_as_session_id (string): if `use_ap_as_session_ids`==`true`, only
            apmac is supported right now. This is the name WLAN should use for
            wxtunnel_remote_id
        comment (string): optional, user-specified string for display purpose
        enable_cookie (bool): TODO: type description here.
        ethertype (EthertypeEnum): TODO: type description here.
        local_session_id (int): 1-4294967295
        pseudo_802_1_ad_enabled (bool): optional. Enables the pseudo 802.1ad
            QinQ mode where the AP device drops the outer vlan tag (QinQ).
            This mode is useful when tunneling Mist APâ€™s to some aggregation
            routers.
        remote_id (string): remote-id of the session, has to be unique in the
            same tunnel
        remote_session_id (int): 1-4294967295
        use_ap_as_session_ids (bool): whether to use AP (last 4 bytes of MAC
            currently) as session ids

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ap_as_session_id": 'ap_as_session_id',
        "comment": 'comment',
        "enable_cookie": 'enable_cookie',
        "ethertype": 'ethertype',
        "local_session_id": 'local_session_id',
        "pseudo_802_1_ad_enabled": 'pseudo_802-1ad_enabled',
        "remote_id": 'remote_id',
        "remote_session_id": 'remote_session_id',
        "use_ap_as_session_ids": 'use_ap_as_session_ids'
    }

    _optionals = [
        'ap_as_session_id',
        'comment',
        'enable_cookie',
        'ethertype',
        'local_session_id',
        'pseudo_802_1_ad_enabled',
        'remote_id',
        'remote_session_id',
        'use_ap_as_session_ids',
    ]

    def __init__(self,
                 ap_as_session_id=APIHelper.SKIP,
                 comment=APIHelper.SKIP,
                 enable_cookie=APIHelper.SKIP,
                 ethertype=APIHelper.SKIP,
                 local_session_id=APIHelper.SKIP,
                 pseudo_802_1_ad_enabled=False,
                 remote_id=APIHelper.SKIP,
                 remote_session_id=APIHelper.SKIP,
                 use_ap_as_session_ids=False):
        """Constructor for the Sessions2 class"""

        # Initialize members of the class
        if ap_as_session_id is not APIHelper.SKIP:
            self.ap_as_session_id = ap_as_session_id 
        if comment is not APIHelper.SKIP:
            self.comment = comment 
        if enable_cookie is not APIHelper.SKIP:
            self.enable_cookie = enable_cookie 
        if ethertype is not APIHelper.SKIP:
            self.ethertype = ethertype 
        if local_session_id is not APIHelper.SKIP:
            self.local_session_id = local_session_id 
        self.pseudo_802_1_ad_enabled = pseudo_802_1_ad_enabled 
        if remote_id is not APIHelper.SKIP:
            self.remote_id = remote_id 
        if remote_session_id is not APIHelper.SKIP:
            self.remote_session_id = remote_session_id 
        self.use_ap_as_session_ids = use_ap_as_session_ids 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ap_as_session_id = dictionary.get("ap_as_session_id") if dictionary.get("ap_as_session_id") else APIHelper.SKIP
        comment = dictionary.get("comment") if dictionary.get("comment") else APIHelper.SKIP
        enable_cookie = dictionary.get("enable_cookie") if "enable_cookie" in dictionary.keys() else APIHelper.SKIP
        ethertype = dictionary.get("ethertype") if dictionary.get("ethertype") else APIHelper.SKIP
        local_session_id = dictionary.get("local_session_id") if dictionary.get("local_session_id") else APIHelper.SKIP
        pseudo_802_1_ad_enabled = dictionary.get("pseudo_802-1ad_enabled") if dictionary.get("pseudo_802-1ad_enabled") else False
        remote_id = dictionary.get("remote_id") if dictionary.get("remote_id") else APIHelper.SKIP
        remote_session_id = dictionary.get("remote_session_id") if dictionary.get("remote_session_id") else APIHelper.SKIP
        use_ap_as_session_ids = dictionary.get("use_ap_as_session_ids") if dictionary.get("use_ap_as_session_ids") else False
        # Return an object of this model
        return cls(ap_as_session_id,
                   comment,
                   enable_cookie,
                   ethertype,
                   local_session_id,
                   pseudo_802_1_ad_enabled,
                   remote_id,
                   remote_session_id,
                   use_ap_as_session_ids)
