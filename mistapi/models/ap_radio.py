# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.ap_radio_band import ApRadioBand


class ApRadio(object):

    """Implementation of the 'ap_radio' model.

    Radio AP settings

    Attributes:
        allow_rrm_disable (bool): TODO: type description here.
        ant_gain_24 (int): antenna gain for 2.4G - for models with external
            antenna only
        ant_gain_5 (int): antenna gain for 5G - for models with external
            antenna only
        ant_gain_6 (int): antenna gain for 6G - for models with external
            antenna only
        antenna_mode (AntennaModeEnum): TODO: type description here.
        band_24 (ApRadioBand): Radio Band AP settings
        band_24_usage (Band24UsageEnum): if `band_24_usage`==`5`, by default,
            band_5 properties is used, if specific channel/bandwidth/power/...
            is desired, use the "band_5_on_24_radio"
        band_5 (ApRadioBand): Radio Band AP settings
        band_5_on_24_radio (ApRadioBand): Radio Band AP settings
        band_6 (ApRadioBand): Radio Band AP settings
        indoor_use (bool): to make an outdoor operate indoor.  for an
            outdoor-ap, some channels are disallowed by default, this allows
            the user to use it as an indoor-ap
        scanning_enabled (bool): whether scanning radio is enabled

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "allow_rrm_disable": 'allow_rrm_disable',
        "ant_gain_24": 'ant_gain_24',
        "ant_gain_5": 'ant_gain_5',
        "ant_gain_6": 'ant_gain_6',
        "antenna_mode": 'antenna_mode',
        "band_24": 'band_24',
        "band_24_usage": 'band_24_usage',
        "band_5": 'band_5',
        "band_5_on_24_radio": 'band_5_on_24_radio',
        "band_6": 'band_6',
        "indoor_use": 'indoor_use',
        "scanning_enabled": 'scanning_enabled'
    }

    _optionals = [
        'allow_rrm_disable',
        'ant_gain_24',
        'ant_gain_5',
        'ant_gain_6',
        'antenna_mode',
        'band_24',
        'band_24_usage',
        'band_5',
        'band_5_on_24_radio',
        'band_6',
        'indoor_use',
        'scanning_enabled',
    ]

    def __init__(self,
                 allow_rrm_disable=False,
                 ant_gain_24=APIHelper.SKIP,
                 ant_gain_5=APIHelper.SKIP,
                 ant_gain_6=APIHelper.SKIP,
                 antenna_mode='default',
                 band_24=APIHelper.SKIP,
                 band_24_usage='24',
                 band_5=APIHelper.SKIP,
                 band_5_on_24_radio=APIHelper.SKIP,
                 band_6=APIHelper.SKIP,
                 indoor_use=False,
                 scanning_enabled=APIHelper.SKIP):
        """Constructor for the ApRadio class"""

        # Initialize members of the class
        self.allow_rrm_disable = allow_rrm_disable 
        if ant_gain_24 is not APIHelper.SKIP:
            self.ant_gain_24 = ant_gain_24 
        if ant_gain_5 is not APIHelper.SKIP:
            self.ant_gain_5 = ant_gain_5 
        if ant_gain_6 is not APIHelper.SKIP:
            self.ant_gain_6 = ant_gain_6 
        self.antenna_mode = antenna_mode 
        if band_24 is not APIHelper.SKIP:
            self.band_24 = band_24 
        self.band_24_usage = band_24_usage 
        if band_5 is not APIHelper.SKIP:
            self.band_5 = band_5 
        if band_5_on_24_radio is not APIHelper.SKIP:
            self.band_5_on_24_radio = band_5_on_24_radio 
        if band_6 is not APIHelper.SKIP:
            self.band_6 = band_6 
        self.indoor_use = indoor_use 
        if scanning_enabled is not APIHelper.SKIP:
            self.scanning_enabled = scanning_enabled 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        allow_rrm_disable = dictionary.get("allow_rrm_disable") if dictionary.get("allow_rrm_disable") else False
        ant_gain_24 = dictionary.get("ant_gain_24") if dictionary.get("ant_gain_24") else APIHelper.SKIP
        ant_gain_5 = dictionary.get("ant_gain_5") if dictionary.get("ant_gain_5") else APIHelper.SKIP
        ant_gain_6 = dictionary.get("ant_gain_6") if dictionary.get("ant_gain_6") else APIHelper.SKIP
        antenna_mode = dictionary.get("antenna_mode") if dictionary.get("antenna_mode") else 'default'
        band_24 = ApRadioBand.from_dictionary(dictionary.get('band_24')) if 'band_24' in dictionary.keys() else APIHelper.SKIP
        band_24_usage = dictionary.get("band_24_usage") if dictionary.get("band_24_usage") else '24'
        band_5 = ApRadioBand.from_dictionary(dictionary.get('band_5')) if 'band_5' in dictionary.keys() else APIHelper.SKIP
        band_5_on_24_radio = ApRadioBand.from_dictionary(dictionary.get('band_5_on_24_radio')) if 'band_5_on_24_radio' in dictionary.keys() else APIHelper.SKIP
        band_6 = ApRadioBand.from_dictionary(dictionary.get('band_6')) if 'band_6' in dictionary.keys() else APIHelper.SKIP
        indoor_use = dictionary.get("indoor_use") if dictionary.get("indoor_use") else False
        scanning_enabled = dictionary.get("scanning_enabled") if "scanning_enabled" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(allow_rrm_disable,
                   ant_gain_24,
                   ant_gain_5,
                   ant_gain_6,
                   antenna_mode,
                   band_24,
                   band_24_usage,
                   band_5,
                   band_5_on_24_radio,
                   band_6,
                   indoor_use,
                   scanning_enabled)
