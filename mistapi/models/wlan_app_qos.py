# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.apps import Apps
from mistapi.models.other import Other


class WlanAppQos(object):

    """Implementation of the 'wlan_app_qos' model.

    app qos wlan settings

    Attributes:
        apps (Apps): TODO: type description here.
        enabled (bool): TODO: type description here.
        others (list of Other): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "apps": 'apps',
        "enabled": 'enabled',
        "others": 'others'
    }

    _optionals = [
        'apps',
        'enabled',
        'others',
    ]

    def __init__(self,
                 apps=APIHelper.SKIP,
                 enabled=APIHelper.SKIP,
                 others=APIHelper.SKIP):
        """Constructor for the WlanAppQos class"""

        # Initialize members of the class
        if apps is not APIHelper.SKIP:
            self.apps = apps 
        if enabled is not APIHelper.SKIP:
            self.enabled = enabled 
        if others is not APIHelper.SKIP:
            self.others = others 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        apps = Apps.from_dictionary(dictionary.get('apps')) if 'apps' in dictionary.keys() else APIHelper.SKIP
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else APIHelper.SKIP
        others = None
        if dictionary.get('others') is not None:
            others = [Other.from_dictionary(x) for x in dictionary.get('others')]
        else:
            others = APIHelper.SKIP
        # Return an object of this model
        return cls(apps,
                   enabled,
                   others)
