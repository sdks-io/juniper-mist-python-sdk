# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.route_exists import RouteExists
from mistapi.models.vpn_path_sla import VpnPathSla


class Matching1(object):

    """Implementation of the 'Matching1' model.

    zero or more criteria/filter can be specified to match the term, all
    criteria have to be met

    Attributes:
        as_path (list of string): takes regular expression
        community (list of string): TODO: type description here.
        network (list of string): TODO: type description here.
        prefix (list of string): zero or more criteria/filter can be specified
            to match the term, all criteria have to be met
        protocol (list of string): `direct`, `bgp`, `osp`, ...
        route_exists (RouteExists): TODO: type description here.
        vpn_neighbor_mac (list of string): overlay-facing criteria (used for
            bgp_config where via=vpn)
        vpn_path (list of string): overlay-facing criteria (used for
            bgp_config where via=vpn) ordered-
        vpn_path_sla (VpnPathSla): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "as_path": 'as_path',
        "community": 'community',
        "network": 'network',
        "prefix": 'prefix',
        "protocol": 'protocol',
        "route_exists": 'route_exists',
        "vpn_neighbor_mac": 'vpn_neighbor_mac',
        "vpn_path": 'vpn_path',
        "vpn_path_sla": 'vpn_path_sla'
    }

    _optionals = [
        'as_path',
        'community',
        'network',
        'prefix',
        'protocol',
        'route_exists',
        'vpn_neighbor_mac',
        'vpn_path',
        'vpn_path_sla',
    ]

    def __init__(self,
                 as_path=APIHelper.SKIP,
                 community=APIHelper.SKIP,
                 network=APIHelper.SKIP,
                 prefix=APIHelper.SKIP,
                 protocol=APIHelper.SKIP,
                 route_exists=APIHelper.SKIP,
                 vpn_neighbor_mac=APIHelper.SKIP,
                 vpn_path=APIHelper.SKIP,
                 vpn_path_sla=APIHelper.SKIP):
        """Constructor for the Matching1 class"""

        # Initialize members of the class
        if as_path is not APIHelper.SKIP:
            self.as_path = as_path 
        if community is not APIHelper.SKIP:
            self.community = community 
        if network is not APIHelper.SKIP:
            self.network = network 
        if prefix is not APIHelper.SKIP:
            self.prefix = prefix 
        if protocol is not APIHelper.SKIP:
            self.protocol = protocol 
        if route_exists is not APIHelper.SKIP:
            self.route_exists = route_exists 
        if vpn_neighbor_mac is not APIHelper.SKIP:
            self.vpn_neighbor_mac = vpn_neighbor_mac 
        if vpn_path is not APIHelper.SKIP:
            self.vpn_path = vpn_path 
        if vpn_path_sla is not APIHelper.SKIP:
            self.vpn_path_sla = vpn_path_sla 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        as_path = dictionary.get("as_path") if dictionary.get("as_path") else APIHelper.SKIP
        community = dictionary.get("community") if dictionary.get("community") else APIHelper.SKIP
        network = dictionary.get("network") if dictionary.get("network") else APIHelper.SKIP
        prefix = dictionary.get("prefix") if dictionary.get("prefix") else APIHelper.SKIP
        protocol = dictionary.get("protocol") if dictionary.get("protocol") else APIHelper.SKIP
        route_exists = RouteExists.from_dictionary(dictionary.get('route_exists')) if 'route_exists' in dictionary.keys() else APIHelper.SKIP
        vpn_neighbor_mac = dictionary.get("vpn_neighbor_mac") if dictionary.get("vpn_neighbor_mac") else APIHelper.SKIP
        vpn_path = dictionary.get("vpn_path") if dictionary.get("vpn_path") else APIHelper.SKIP
        vpn_path_sla = VpnPathSla.from_dictionary(dictionary.get('vpn_path_sla')) if 'vpn_path_sla' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(as_path,
                   community,
                   network,
                   prefix,
                   protocol,
                   route_exists,
                   vpn_neighbor_mac,
                   vpn_path,
                   vpn_path_sla)
