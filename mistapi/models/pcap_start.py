# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class PcapStart(object):

    """Implementation of the 'PcapStart' model.

    TODO: type model description here.

    Attributes:
        ap_count (int): TODO: type description here.
        aps (list of string): TODO: type description here.
        client_mac (string): TODO: type description here.
        duration (float): TODO: type description here.
        enabled (bool): TODO: type description here.
        expiry (float): TODO: type description here.
        format (string): TODO: type description here.
        id (uuid|string): TODO: type description here.
        include_mcast (bool): TODO: type description here.
        invalid_aps (object): TODO: type description here.
        max_pkt_len (int): TODO: type description here.
        num_packets (int): TODO: type description here.
        org_id (uuid|string): TODO: type description here.
        raw (bool): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        ssid (string): TODO: type description here.
        tcpdump_parser_expression (string): TODO: type description here.
        timestamp (float): TODO: type description here.
        mtype (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "org_id": 'org_id',
        "site_id": 'site_id',
        "timestamp": 'timestamp',
        "mtype": 'type',
        "ap_count": 'ap_count',
        "aps": 'aps',
        "client_mac": 'client_mac',
        "duration": 'duration',
        "enabled": 'enabled',
        "expiry": 'expiry',
        "format": 'format',
        "include_mcast": 'include_mcast',
        "invalid_aps": 'invalid_aps',
        "max_pkt_len": 'max_pkt_len',
        "num_packets": 'num_packets',
        "raw": 'raw',
        "ssid": 'ssid',
        "tcpdump_parser_expression": 'tcpdump_parser_expression'
    }

    _optionals = [
        'ap_count',
        'aps',
        'client_mac',
        'duration',
        'enabled',
        'expiry',
        'format',
        'include_mcast',
        'invalid_aps',
        'max_pkt_len',
        'num_packets',
        'raw',
        'ssid',
        'tcpdump_parser_expression',
    ]

    _nullables = [
        'client_mac',
        'ssid',
        'tcpdump_parser_expression',
    ]

    def __init__(self,
                 id=None,
                 org_id=None,
                 site_id=None,
                 timestamp=None,
                 mtype=None,
                 ap_count=APIHelper.SKIP,
                 aps=APIHelper.SKIP,
                 client_mac=APIHelper.SKIP,
                 duration=APIHelper.SKIP,
                 enabled=APIHelper.SKIP,
                 expiry=APIHelper.SKIP,
                 format=APIHelper.SKIP,
                 include_mcast=APIHelper.SKIP,
                 invalid_aps=APIHelper.SKIP,
                 max_pkt_len=APIHelper.SKIP,
                 num_packets=APIHelper.SKIP,
                 raw=APIHelper.SKIP,
                 ssid=APIHelper.SKIP,
                 tcpdump_parser_expression=APIHelper.SKIP):
        """Constructor for the PcapStart class"""

        # Initialize members of the class
        if ap_count is not APIHelper.SKIP:
            self.ap_count = ap_count 
        if aps is not APIHelper.SKIP:
            self.aps = aps 
        if client_mac is not APIHelper.SKIP:
            self.client_mac = client_mac 
        if duration is not APIHelper.SKIP:
            self.duration = duration 
        if enabled is not APIHelper.SKIP:
            self.enabled = enabled 
        if expiry is not APIHelper.SKIP:
            self.expiry = expiry 
        if format is not APIHelper.SKIP:
            self.format = format 
        self.id = id 
        if include_mcast is not APIHelper.SKIP:
            self.include_mcast = include_mcast 
        if invalid_aps is not APIHelper.SKIP:
            self.invalid_aps = invalid_aps 
        if max_pkt_len is not APIHelper.SKIP:
            self.max_pkt_len = max_pkt_len 
        if num_packets is not APIHelper.SKIP:
            self.num_packets = num_packets 
        self.org_id = org_id 
        if raw is not APIHelper.SKIP:
            self.raw = raw 
        self.site_id = site_id 
        if ssid is not APIHelper.SKIP:
            self.ssid = ssid 
        if tcpdump_parser_expression is not APIHelper.SKIP:
            self.tcpdump_parser_expression = tcpdump_parser_expression 
        self.timestamp = timestamp 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else None
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else None
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        ap_count = dictionary.get("ap_count") if dictionary.get("ap_count") else APIHelper.SKIP
        aps = dictionary.get("aps") if dictionary.get("aps") else APIHelper.SKIP
        client_mac = dictionary.get("client_mac") if "client_mac" in dictionary.keys() else APIHelper.SKIP
        duration = dictionary.get("duration") if dictionary.get("duration") else APIHelper.SKIP
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else APIHelper.SKIP
        expiry = dictionary.get("expiry") if dictionary.get("expiry") else APIHelper.SKIP
        format = dictionary.get("format") if dictionary.get("format") else APIHelper.SKIP
        include_mcast = dictionary.get("include_mcast") if "include_mcast" in dictionary.keys() else APIHelper.SKIP
        invalid_aps = dictionary.get("invalid_aps") if dictionary.get("invalid_aps") else APIHelper.SKIP
        max_pkt_len = dictionary.get("max_pkt_len") if dictionary.get("max_pkt_len") else APIHelper.SKIP
        num_packets = dictionary.get("num_packets") if dictionary.get("num_packets") else APIHelper.SKIP
        raw = dictionary.get("raw") if "raw" in dictionary.keys() else APIHelper.SKIP
        ssid = dictionary.get("ssid") if "ssid" in dictionary.keys() else APIHelper.SKIP
        tcpdump_parser_expression = dictionary.get("tcpdump_parser_expression") if "tcpdump_parser_expression" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   org_id,
                   site_id,
                   timestamp,
                   mtype,
                   ap_count,
                   aps,
                   client_mac,
                   duration,
                   enabled,
                   expiry,
                   format,
                   include_mcast,
                   invalid_aps,
                   max_pkt_len,
                   num_packets,
                   raw,
                   ssid,
                   tcpdump_parser_expression)
