# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class MemoryStat3(object):

    """Implementation of the 'MemoryStat3' model.

    Memory usage

    Attributes:
        active (int): The amount of memory, in kibibytes, that has been used
            more recently and is usually not reclaimed unless absolutely
            necessary.
        available (int): An estimate of how much memory is available for
            starting new applications, without swapping.
        buffers (int): The amount, in kibibytes, of temporary storage for raw
            disk blocks.
        cached (int): The amount of physical RAM, in kibibytes, used as cache
            memory.
        free (int): The amount of physical RAM, in kibibytes, left unused by
            the system
        inactive (int): The amount of memory, in kibibytes, that has been used
            less recently and is more eligible to be reclaimed for other
            purposes.
        swap_cached (int): The amount of memory, in kibibytes, that has once
            been moved into swap, then back into the main memory, but still
            also remains in the swapfile.
        swap_free (int): The total amount of swap free, in kibibytes.
        swap_total (int): The total amount of swap available, in kibibytes.
        total (int): Total amount of usable RAM, in kibibytes, which is
            physical RAM minus a number of reserved bits and the kernel binary
            code
        usage (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "active": 'active',
        "available": 'available',
        "buffers": 'buffers',
        "cached": 'cached',
        "free": 'free',
        "inactive": 'inactive',
        "swap_cached": 'swap_cached',
        "swap_free": 'swap_free',
        "swap_total": 'swap_total',
        "total": 'total',
        "usage": 'usage'
    }

    _optionals = [
        'active',
        'available',
        'buffers',
        'cached',
        'free',
        'inactive',
        'swap_cached',
        'swap_free',
        'swap_total',
        'total',
        'usage',
    ]

    def __init__(self,
                 active=APIHelper.SKIP,
                 available=APIHelper.SKIP,
                 buffers=APIHelper.SKIP,
                 cached=APIHelper.SKIP,
                 free=APIHelper.SKIP,
                 inactive=APIHelper.SKIP,
                 swap_cached=APIHelper.SKIP,
                 swap_free=APIHelper.SKIP,
                 swap_total=APIHelper.SKIP,
                 total=APIHelper.SKIP,
                 usage=APIHelper.SKIP):
        """Constructor for the MemoryStat3 class"""

        # Initialize members of the class
        if active is not APIHelper.SKIP:
            self.active = active 
        if available is not APIHelper.SKIP:
            self.available = available 
        if buffers is not APIHelper.SKIP:
            self.buffers = buffers 
        if cached is not APIHelper.SKIP:
            self.cached = cached 
        if free is not APIHelper.SKIP:
            self.free = free 
        if inactive is not APIHelper.SKIP:
            self.inactive = inactive 
        if swap_cached is not APIHelper.SKIP:
            self.swap_cached = swap_cached 
        if swap_free is not APIHelper.SKIP:
            self.swap_free = swap_free 
        if swap_total is not APIHelper.SKIP:
            self.swap_total = swap_total 
        if total is not APIHelper.SKIP:
            self.total = total 
        if usage is not APIHelper.SKIP:
            self.usage = usage 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        active = dictionary.get("active") if dictionary.get("active") else APIHelper.SKIP
        available = dictionary.get("available") if dictionary.get("available") else APIHelper.SKIP
        buffers = dictionary.get("buffers") if dictionary.get("buffers") else APIHelper.SKIP
        cached = dictionary.get("cached") if dictionary.get("cached") else APIHelper.SKIP
        free = dictionary.get("free") if dictionary.get("free") else APIHelper.SKIP
        inactive = dictionary.get("inactive") if dictionary.get("inactive") else APIHelper.SKIP
        swap_cached = dictionary.get("swap_cached") if dictionary.get("swap_cached") else APIHelper.SKIP
        swap_free = dictionary.get("swap_free") if dictionary.get("swap_free") else APIHelper.SKIP
        swap_total = dictionary.get("swap_total") if dictionary.get("swap_total") else APIHelper.SKIP
        total = dictionary.get("total") if dictionary.get("total") else APIHelper.SKIP
        usage = dictionary.get("usage") if dictionary.get("usage") else APIHelper.SKIP
        # Return an object of this model
        return cls(active,
                   available,
                   buffers,
                   cached,
                   free,
                   inactive,
                   swap_cached,
                   swap_free,
                   swap_total,
                   total,
                   usage)
