# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class PrefixList(object):

    """Implementation of the 'PrefixList' model.

    TODO: type model description here.

    Attributes:
        context_prefix (string): only required if `type`==`context_prefix`
        notify_view (string): refer to view name
        read_view (string): refer to view name
        security_level (SecurityLevelEnum): TODO: type description here.
        security_model (SecurityModel1Enum): TODO: type description here.
        mtype (Type27Enum): TODO: type description here.
        write_view (string): refer to view name

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "context_prefix": 'context_prefix',
        "notify_view": 'notify_view',
        "read_view": 'read_view',
        "security_level": 'security_level',
        "security_model": 'security_model',
        "mtype": 'type',
        "write_view": 'write_view'
    }

    _optionals = [
        'context_prefix',
        'notify_view',
        'read_view',
        'security_level',
        'security_model',
        'mtype',
        'write_view',
    ]

    def __init__(self,
                 context_prefix=APIHelper.SKIP,
                 notify_view=APIHelper.SKIP,
                 read_view=APIHelper.SKIP,
                 security_level=APIHelper.SKIP,
                 security_model=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 write_view=APIHelper.SKIP):
        """Constructor for the PrefixList class"""

        # Initialize members of the class
        if context_prefix is not APIHelper.SKIP:
            self.context_prefix = context_prefix 
        if notify_view is not APIHelper.SKIP:
            self.notify_view = notify_view 
        if read_view is not APIHelper.SKIP:
            self.read_view = read_view 
        if security_level is not APIHelper.SKIP:
            self.security_level = security_level 
        if security_model is not APIHelper.SKIP:
            self.security_model = security_model 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if write_view is not APIHelper.SKIP:
            self.write_view = write_view 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        context_prefix = dictionary.get("context_prefix") if dictionary.get("context_prefix") else APIHelper.SKIP
        notify_view = dictionary.get("notify_view") if dictionary.get("notify_view") else APIHelper.SKIP
        read_view = dictionary.get("read_view") if dictionary.get("read_view") else APIHelper.SKIP
        security_level = dictionary.get("security_level") if dictionary.get("security_level") else APIHelper.SKIP
        security_model = dictionary.get("security_model") if dictionary.get("security_model") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        write_view = dictionary.get("write_view") if dictionary.get("write_view") else APIHelper.SKIP
        # Return an object of this model
        return cls(context_prefix,
                   notify_view,
                   read_view,
                   security_level,
                   security_model,
                   mtype,
                   write_view)
