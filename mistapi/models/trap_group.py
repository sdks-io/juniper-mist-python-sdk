# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class TrapGroup(object):

    """Implementation of the 'TrapGroup' model.

    TODO: type model description here.

    Attributes:
        categories (list of string): TODO: type description here.
        group_name (string): Categories list can refer to
            https://www.juniper.net/documentation/software/topics/task/configur
            ation/snmp-trap-groups-configuring-junos-nm.html
        targets (list of string): TODO: type description here.
        version (Version1Enum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "categories": 'categories',
        "group_name": 'group_name',
        "targets": 'targets',
        "version": 'version'
    }

    _optionals = [
        'categories',
        'group_name',
        'targets',
        'version',
    ]

    def __init__(self,
                 categories=APIHelper.SKIP,
                 group_name=APIHelper.SKIP,
                 targets=APIHelper.SKIP,
                 version='v2'):
        """Constructor for the TrapGroup class"""

        # Initialize members of the class
        if categories is not APIHelper.SKIP:
            self.categories = categories 
        if group_name is not APIHelper.SKIP:
            self.group_name = group_name 
        if targets is not APIHelper.SKIP:
            self.targets = targets 
        self.version = version 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        categories = dictionary.get("categories") if dictionary.get("categories") else APIHelper.SKIP
        group_name = dictionary.get("group_name") if dictionary.get("group_name") else APIHelper.SKIP
        targets = dictionary.get("targets") if dictionary.get("targets") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else 'v2'
        # Return an object of this model
        return cls(categories,
                   group_name,
                   targets,
                   version)
