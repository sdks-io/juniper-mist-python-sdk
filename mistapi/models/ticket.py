# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.comment import Comment


class Ticket(object):

    """Implementation of the 'ticket' model.

    Support Ticket

    Attributes:
        case_number (string): TODO: type description here.
        comments (list of Comment): TODO: type description here.
        created_at (int): TODO: type description here.
        id (uuid|string): TODO: type description here.
        requester (string): TODO: type description here.
        requester_email (string): email of the requester
        status (Status5Enum): Status open: ticket is open, Mist is working on
            it  * pending: ticket is open and Requester attention is needed
            (e.g. Mist is asking for some more information)  * solved: ticket
            is marked as solved / considered by Mist (requester can update it,
            causing it to re-open; or rate it)  * closed: ticket is archived
            and cannot be changed
        subject (string): TODO: type description here.
        mtype (string): question (default) / bug / critical
        updated_at (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "subject": 'subject',
        "mtype": 'type',
        "case_number": 'case_number',
        "comments": 'comments',
        "created_at": 'created_at',
        "id": 'id',
        "requester": 'requester',
        "requester_email": 'requester_email',
        "status": 'status',
        "updated_at": 'updated_at'
    }

    _optionals = [
        'case_number',
        'comments',
        'created_at',
        'id',
        'requester',
        'requester_email',
        'status',
        'updated_at',
    ]

    def __init__(self,
                 subject=None,
                 mtype=None,
                 case_number=APIHelper.SKIP,
                 comments=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 requester=APIHelper.SKIP,
                 requester_email=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 updated_at=APIHelper.SKIP):
        """Constructor for the Ticket class"""

        # Initialize members of the class
        if case_number is not APIHelper.SKIP:
            self.case_number = case_number 
        if comments is not APIHelper.SKIP:
            self.comments = comments 
        if created_at is not APIHelper.SKIP:
            self.created_at = created_at 
        if id is not APIHelper.SKIP:
            self.id = id 
        if requester is not APIHelper.SKIP:
            self.requester = requester 
        if requester_email is not APIHelper.SKIP:
            self.requester_email = requester_email 
        if status is not APIHelper.SKIP:
            self.status = status 
        self.subject = subject 
        self.mtype = mtype 
        if updated_at is not APIHelper.SKIP:
            self.updated_at = updated_at 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        subject = dictionary.get("subject") if dictionary.get("subject") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        case_number = dictionary.get("case_number") if dictionary.get("case_number") else APIHelper.SKIP
        comments = None
        if dictionary.get('comments') is not None:
            comments = [Comment.from_dictionary(x) for x in dictionary.get('comments')]
        else:
            comments = APIHelper.SKIP
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        requester = dictionary.get("requester") if dictionary.get("requester") else APIHelper.SKIP
        requester_email = dictionary.get("requester_email") if dictionary.get("requester_email") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        updated_at = dictionary.get("updated_at") if dictionary.get("updated_at") else APIHelper.SKIP
        # Return an object of this model
        return cls(subject,
                   mtype,
                   case_number,
                   comments,
                   created_at,
                   id,
                   requester,
                   requester_email,
                   status,
                   updated_at)
