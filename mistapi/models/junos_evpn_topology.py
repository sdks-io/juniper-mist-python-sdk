# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.switches_1 import Switches1


class JunosEvpnTopology(object):

    """Implementation of the 'junos_evpn_topology' model.

    TODO: type model description here.

    Attributes:
        id (string): TODO: type description here.
        name (string): TODO: type description here.
        pod_names (dict): Property key is the pod number
        switches (list of Switches1): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "switches": 'switches',
        "id": 'id',
        "name": 'name',
        "pod_names": 'pod_names'
    }

    _optionals = [
        'id',
        'name',
        'pod_names',
    ]

    def __init__(self,
                 switches=None,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 pod_names=APIHelper.SKIP):
        """Constructor for the JunosEvpnTopology class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if pod_names is not APIHelper.SKIP:
            self.pod_names = pod_names 
        self.switches = switches 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        switches = None
        if dictionary.get('switches') is not None:
            switches = [Switches1.from_dictionary(x) for x in dictionary.get('switches')]
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        pod_names = dictionary.get("pod_names") if dictionary.get("pod_names") else APIHelper.SKIP
        # Return an object of this model
        return cls(switches,
                   id,
                   name,
                   pod_names)
