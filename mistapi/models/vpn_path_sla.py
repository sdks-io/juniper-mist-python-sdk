# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class VpnPathSla(object):

    """Implementation of the 'VpnPathSla' model.

    TODO: type model description here.

    Attributes:
        max_jitter (int): TODO: type description here.
        max_latency (int): TODO: type description here.
        max_loss (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "max_jitter": 'max_jitter',
        "max_latency": 'max_latency',
        "max_loss": 'max_loss'
    }

    _optionals = [
        'max_jitter',
        'max_latency',
        'max_loss',
    ]

    _nullables = [
        'max_jitter',
        'max_latency',
        'max_loss',
    ]

    def __init__(self,
                 max_jitter=APIHelper.SKIP,
                 max_latency=APIHelper.SKIP,
                 max_loss=APIHelper.SKIP):
        """Constructor for the VpnPathSla class"""

        # Initialize members of the class
        if max_jitter is not APIHelper.SKIP:
            self.max_jitter = max_jitter 
        if max_latency is not APIHelper.SKIP:
            self.max_latency = max_latency 
        if max_loss is not APIHelper.SKIP:
            self.max_loss = max_loss 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        max_jitter = dictionary.get("max_jitter") if "max_jitter" in dictionary.keys() else APIHelper.SKIP
        max_latency = dictionary.get("max_latency") if "max_latency" in dictionary.keys() else APIHelper.SKIP
        max_loss = dictionary.get("max_loss") if "max_loss" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(max_jitter,
                   max_latency,
                   max_loss)
