# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.upgrade_1 import Upgrade1


class Upgrade(object):

    """Implementation of the 'Upgrade' model.

    TODO: type model description here.

    Attributes:
        site_id (uuid|string): TODO: type description here.
        upgrade (Upgrade1): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "site_id": 'site_id',
        "upgrade": 'upgrade'
    }

    _optionals = [
        'site_id',
        'upgrade',
    ]

    def __init__(self,
                 site_id=APIHelper.SKIP,
                 upgrade=APIHelper.SKIP):
        """Constructor for the Upgrade class"""

        # Initialize members of the class
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if upgrade is not APIHelper.SKIP:
            self.upgrade = upgrade 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        upgrade = Upgrade1.from_dictionary(dictionary.get('upgrade')) if 'upgrade' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(site_id,
                   upgrade)
