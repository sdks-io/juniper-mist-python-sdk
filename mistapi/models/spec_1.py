# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Spec1(object):

    """Implementation of the 'Spec1' model.

    TODO: type model description here.

    Attributes:
        port_range (string): TODO: type description here.
        protocol (string): `https`/ `tcp` / `udp` / `icmp` / `gre` / `any` /
            `:protocol_number`. `protocol_number` is between 1-254

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "port_range": 'port_range',
        "protocol": 'protocol'
    }

    _optionals = [
        'port_range',
        'protocol',
    ]

    def __init__(self,
                 port_range=APIHelper.SKIP,
                 protocol='any'):
        """Constructor for the Spec1 class"""

        # Initialize members of the class
        if port_range is not APIHelper.SKIP:
            self.port_range = port_range 
        self.protocol = protocol 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        port_range = dictionary.get("port_range") if dictionary.get("port_range") else APIHelper.SKIP
        protocol = dictionary.get("protocol") if dictionary.get("protocol") else 'any'
        # Return an object of this model
        return cls(port_range,
                   protocol)
