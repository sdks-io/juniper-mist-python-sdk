# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Event3(object):

    """Implementation of the 'Event3' model.

    TODO: type model description here.

    Attributes:
        ap (string): mac address of the AP the client connected to
        ap_name (string): user-friendly name of the AP the client connected
            to.
        band (string): 5GHz or 2.4GHz band
        bssid (string): TODO: type description here.
        connect (int): time when the user connects
        connect_float (float): floating point connect timestamp with
            millisecond precision
        mac (string): the clientâ€™s mac
        org_id (uuid|string): TODO: type description here.
        rssi (float): RSSI when the client associated
        site_id (uuid|string): TODO: type description here.
        site_name (string): TODO: type description here.
        ssid (string): ESSID
        timestamp (float): TODO: type description here.
        version (float): schema version of this message
        wlan_id (uuid|string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ap": 'ap',
        "ap_name": 'ap_name',
        "band": 'band',
        "bssid": 'bssid',
        "connect": 'connect',
        "connect_float": 'connect_float',
        "mac": 'mac',
        "org_id": 'org_id',
        "rssi": 'rssi',
        "site_id": 'site_id',
        "site_name": 'site_name',
        "ssid": 'ssid',
        "timestamp": 'timestamp',
        "version": 'version',
        "wlan_id": 'wlan_id'
    }

    def __init__(self,
                 ap=None,
                 ap_name=None,
                 band=None,
                 bssid=None,
                 connect=None,
                 connect_float=None,
                 mac=None,
                 org_id=None,
                 rssi=None,
                 site_id=None,
                 site_name=None,
                 ssid=None,
                 timestamp=None,
                 version=None,
                 wlan_id=None):
        """Constructor for the Event3 class"""

        # Initialize members of the class
        self.ap = ap 
        self.ap_name = ap_name 
        self.band = band 
        self.bssid = bssid 
        self.connect = connect 
        self.connect_float = connect_float 
        self.mac = mac 
        self.org_id = org_id 
        self.rssi = rssi 
        self.site_id = site_id 
        self.site_name = site_name 
        self.ssid = ssid 
        self.timestamp = timestamp 
        self.version = version 
        self.wlan_id = wlan_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ap = dictionary.get("ap") if dictionary.get("ap") else None
        ap_name = dictionary.get("ap_name") if dictionary.get("ap_name") else None
        band = dictionary.get("band") if dictionary.get("band") else None
        bssid = dictionary.get("bssid") if dictionary.get("bssid") else None
        connect = dictionary.get("connect") if dictionary.get("connect") else None
        connect_float = dictionary.get("connect_float") if dictionary.get("connect_float") else None
        mac = dictionary.get("mac") if dictionary.get("mac") else None
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else None
        rssi = dictionary.get("rssi") if dictionary.get("rssi") else None
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else None
        site_name = dictionary.get("site_name") if dictionary.get("site_name") else None
        ssid = dictionary.get("ssid") if dictionary.get("ssid") else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        version = dictionary.get("version") if dictionary.get("version") else None
        wlan_id = dictionary.get("wlan_id") if dictionary.get("wlan_id") else None
        # Return an object of this model
        return cls(ap,
                   ap_name,
                   band,
                   bssid,
                   connect,
                   connect_float,
                   mac,
                   org_id,
                   rssi,
                   site_id,
                   site_name,
                   ssid,
                   timestamp,
                   version,
                   wlan_id)
