# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class SiteWifi(object):

    """Implementation of the 'site_wifi' model.

    Wi-Fi site settings

    Attributes:
        cisco_enabled (bool): TODO: type description here.
        disable_11_k (bool): whether to disable 11k
        disable_radios_when_power_constrained (bool): TODO: type description
            here.
        enable_arp_spoof_check (bool): when proxy_arp is enabled, check for
            arp spoofing.
        enable_channel_144 (bool): whether to enable channel 144 (some older
            clients may not support it)
        enable_shared_radio_scanning (bool): TODO: type description here.
        enable_vna (bool): enable Virtual Network Assistant (using SUB-VNA
            license)
        enabled (bool): enable WIFI feature (using SUB-MAN license)
        locate_connected (bool): whether to locate connected clients
        locate_unconnected (bool): whether to locate unconnected clients
        mesh_allow_dfs (bool): whether to allow Mesh to use DFS channels. For
            DFS channels, Remote Mesh AP would have to do CAC when scanning
            for new Base AP, which is slow and will distrupt the connection.
            If roaming is desired, keep it disabled.
        mesh_enable_crm (bool): used to enable/disable CRM
        mesh_enabled (bool): whether to enable Mesh feature for the site
        mesh_psk (string): optional passphrase of mesh networking, default is
            generated randomly
        mesh_ssid (string): optional ssid of mesh networking, default is based
            on site_id
        proxy_arp (ProxyArpEnum): default / enabled / disabled

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cisco_enabled": 'cisco_enabled',
        "disable_11_k": 'disable_11k',
        "disable_radios_when_power_constrained": 'disable_radios_when_power_constrained',
        "enable_arp_spoof_check": 'enable_arp_spoof_check',
        "enable_channel_144": 'enable_channel_144',
        "enable_shared_radio_scanning": 'enable_shared_radio_scanning',
        "enable_vna": 'enable_vna',
        "enabled": 'enabled',
        "locate_connected": 'locate_connected',
        "locate_unconnected": 'locate_unconnected',
        "mesh_allow_dfs": 'mesh_allow_dfs',
        "mesh_enable_crm": 'mesh_enable_crm',
        "mesh_enabled": 'mesh_enabled',
        "mesh_psk": 'mesh_psk',
        "mesh_ssid": 'mesh_ssid',
        "proxy_arp": 'proxy_arp'
    }

    _optionals = [
        'cisco_enabled',
        'disable_11_k',
        'disable_radios_when_power_constrained',
        'enable_arp_spoof_check',
        'enable_channel_144',
        'enable_shared_radio_scanning',
        'enable_vna',
        'enabled',
        'locate_connected',
        'locate_unconnected',
        'mesh_allow_dfs',
        'mesh_enable_crm',
        'mesh_enabled',
        'mesh_psk',
        'mesh_ssid',
        'proxy_arp',
    ]

    def __init__(self,
                 cisco_enabled=APIHelper.SKIP,
                 disable_11_k=False,
                 disable_radios_when_power_constrained=APIHelper.SKIP,
                 enable_arp_spoof_check=False,
                 enable_channel_144=False,
                 enable_shared_radio_scanning=APIHelper.SKIP,
                 enable_vna=False,
                 enabled=True,
                 locate_connected=False,
                 locate_unconnected=False,
                 mesh_allow_dfs=False,
                 mesh_enable_crm=APIHelper.SKIP,
                 mesh_enabled=False,
                 mesh_psk=APIHelper.SKIP,
                 mesh_ssid=APIHelper.SKIP,
                 proxy_arp=APIHelper.SKIP):
        """Constructor for the SiteWifi class"""

        # Initialize members of the class
        if cisco_enabled is not APIHelper.SKIP:
            self.cisco_enabled = cisco_enabled 
        self.disable_11_k = disable_11_k 
        if disable_radios_when_power_constrained is not APIHelper.SKIP:
            self.disable_radios_when_power_constrained = disable_radios_when_power_constrained 
        self.enable_arp_spoof_check = enable_arp_spoof_check 
        self.enable_channel_144 = enable_channel_144 
        if enable_shared_radio_scanning is not APIHelper.SKIP:
            self.enable_shared_radio_scanning = enable_shared_radio_scanning 
        self.enable_vna = enable_vna 
        self.enabled = enabled 
        self.locate_connected = locate_connected 
        self.locate_unconnected = locate_unconnected 
        self.mesh_allow_dfs = mesh_allow_dfs 
        if mesh_enable_crm is not APIHelper.SKIP:
            self.mesh_enable_crm = mesh_enable_crm 
        self.mesh_enabled = mesh_enabled 
        if mesh_psk is not APIHelper.SKIP:
            self.mesh_psk = mesh_psk 
        if mesh_ssid is not APIHelper.SKIP:
            self.mesh_ssid = mesh_ssid 
        if proxy_arp is not APIHelper.SKIP:
            self.proxy_arp = proxy_arp 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        cisco_enabled = dictionary.get("cisco_enabled") if "cisco_enabled" in dictionary.keys() else APIHelper.SKIP
        disable_11_k = dictionary.get("disable_11k") if dictionary.get("disable_11k") else False
        disable_radios_when_power_constrained = dictionary.get("disable_radios_when_power_constrained") if "disable_radios_when_power_constrained" in dictionary.keys() else APIHelper.SKIP
        enable_arp_spoof_check = dictionary.get("enable_arp_spoof_check") if dictionary.get("enable_arp_spoof_check") else False
        enable_channel_144 = dictionary.get("enable_channel_144") if dictionary.get("enable_channel_144") else False
        enable_shared_radio_scanning = dictionary.get("enable_shared_radio_scanning") if "enable_shared_radio_scanning" in dictionary.keys() else APIHelper.SKIP
        enable_vna = dictionary.get("enable_vna") if dictionary.get("enable_vna") else False
        enabled = dictionary.get("enabled") if dictionary.get("enabled") else True
        locate_connected = dictionary.get("locate_connected") if dictionary.get("locate_connected") else False
        locate_unconnected = dictionary.get("locate_unconnected") if dictionary.get("locate_unconnected") else False
        mesh_allow_dfs = dictionary.get("mesh_allow_dfs") if dictionary.get("mesh_allow_dfs") else False
        mesh_enable_crm = dictionary.get("mesh_enable_crm") if "mesh_enable_crm" in dictionary.keys() else APIHelper.SKIP
        mesh_enabled = dictionary.get("mesh_enabled") if dictionary.get("mesh_enabled") else False
        mesh_psk = dictionary.get("mesh_psk") if dictionary.get("mesh_psk") else APIHelper.SKIP
        mesh_ssid = dictionary.get("mesh_ssid") if dictionary.get("mesh_ssid") else APIHelper.SKIP
        proxy_arp = dictionary.get("proxy_arp") if dictionary.get("proxy_arp") else APIHelper.SKIP
        # Return an object of this model
        return cls(cisco_enabled,
                   disable_11_k,
                   disable_radios_when_power_constrained,
                   enable_arp_spoof_check,
                   enable_channel_144,
                   enable_shared_radio_scanning,
                   enable_vna,
                   enabled,
                   locate_connected,
                   locate_unconnected,
                   mesh_allow_dfs,
                   mesh_enable_crm,
                   mesh_enabled,
                   mesh_psk,
                   mesh_ssid,
                   proxy_arp)
