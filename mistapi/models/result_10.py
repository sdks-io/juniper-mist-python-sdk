# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Result10(object):

    """Implementation of the 'Result10' model.

    TODO: type model description here.

    Attributes:
        ap (string): TODO: type description here.
        band (string): TODO: type description here.
        client_manufacture (string): TODO: type description here.
        connect (float): TODO: type description here.
        disconnect (float): TODO: type description here.
        duration (float): TODO: type description here.
        mac (string): TODO: type description here.
        org_id (uuid|string): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        ssid (string): TODO: type description here.
        tags (list of string): TODO: type description here.
        timestamp (float): TODO: type description here.
        wlan_id (uuid|string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ap": 'ap',
        "band": 'band',
        "client_manufacture": 'client_manufacture',
        "connect": 'connect',
        "disconnect": 'disconnect',
        "duration": 'duration',
        "mac": 'mac',
        "org_id": 'org_id',
        "site_id": 'site_id',
        "ssid": 'ssid',
        "timestamp": 'timestamp',
        "wlan_id": 'wlan_id',
        "tags": 'tags'
    }

    _optionals = [
        'tags',
    ]

    def __init__(self,
                 ap=None,
                 band=None,
                 client_manufacture=None,
                 connect=None,
                 disconnect=None,
                 duration=None,
                 mac=None,
                 org_id=None,
                 site_id=None,
                 ssid=None,
                 timestamp=None,
                 wlan_id=None,
                 tags=APIHelper.SKIP):
        """Constructor for the Result10 class"""

        # Initialize members of the class
        self.ap = ap 
        self.band = band 
        self.client_manufacture = client_manufacture 
        self.connect = connect 
        self.disconnect = disconnect 
        self.duration = duration 
        self.mac = mac 
        self.org_id = org_id 
        self.site_id = site_id 
        self.ssid = ssid 
        if tags is not APIHelper.SKIP:
            self.tags = tags 
        self.timestamp = timestamp 
        self.wlan_id = wlan_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ap = dictionary.get("ap") if dictionary.get("ap") else None
        band = dictionary.get("band") if dictionary.get("band") else None
        client_manufacture = dictionary.get("client_manufacture") if dictionary.get("client_manufacture") else None
        connect = dictionary.get("connect") if dictionary.get("connect") else None
        disconnect = dictionary.get("disconnect") if dictionary.get("disconnect") else None
        duration = dictionary.get("duration") if dictionary.get("duration") else None
        mac = dictionary.get("mac") if dictionary.get("mac") else None
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else None
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else None
        ssid = dictionary.get("ssid") if dictionary.get("ssid") else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        wlan_id = dictionary.get("wlan_id") if dictionary.get("wlan_id") else None
        tags = dictionary.get("tags") if dictionary.get("tags") else APIHelper.SKIP
        # Return an object of this model
        return cls(ap,
                   band,
                   client_manufacture,
                   connect,
                   disconnect,
                   duration,
                   mac,
                   org_id,
                   site_id,
                   ssid,
                   timestamp,
                   wlan_id,
                   tags)
