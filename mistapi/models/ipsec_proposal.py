# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class IpsecProposal(object):

    """Implementation of the 'IpsecProposal' model.

    TODO: type model description here.

    Attributes:
        auth_algo (AuthAlgoEnum): TODO: type description here.
        dh_group (DhGroup1Enum): Only if: * `provider`== `custom-ipsec`
            Values: * 1  * 2 (1024-bit)  * 5 * 14 (default, 2048-bit)  * 15
            (3072-bit)  * 16 (4096-bit) * 19 (256-bit ECP) * 20 (384-bit ECP)
            * 21 (521-bit ECP)  * 24 (2048-bit ECP)
        enc_algo (EncAlgoEnum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "auth_algo": 'auth_algo',
        "dh_group": 'dh_group',
        "enc_algo": 'enc_algo'
    }

    _optionals = [
        'auth_algo',
        'dh_group',
        'enc_algo',
    ]

    _nullables = [
        'enc_algo',
    ]

    def __init__(self,
                 auth_algo=APIHelper.SKIP,
                 dh_group='14',
                 enc_algo='aes256'):
        """Constructor for the IpsecProposal class"""

        # Initialize members of the class
        if auth_algo is not APIHelper.SKIP:
            self.auth_algo = auth_algo 
        self.dh_group = dh_group 
        self.enc_algo = enc_algo 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        auth_algo = dictionary.get("auth_algo") if dictionary.get("auth_algo") else APIHelper.SKIP
        dh_group = dictionary.get("dh_group") if dictionary.get("dh_group") else '14'
        enc_algo = dictionary.get("enc_algo") if dictionary.get("enc_algo") else 'aes256'
        # Return an object of this model
        return cls(auth_algo,
                   dh_group,
                   enc_algo)
