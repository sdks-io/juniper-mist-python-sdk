# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApBle(object):

    """Implementation of the 'ap_ble' model.

    BLE AP settings

    Attributes:
        beacon_enabled (bool): whether Mist beacons is enabled
        beacon_rate (int): required if `beacon_rate_mode`==`custom`, 1-10, in
            number-beacons-per-second
        beacon_rate_mode (BeaconRateModeEnum): TODO: type description here.
        beam_disabled (list of int): list of AP BLE location beam numbers
            (1-8) which should be disabled at the AP and not transmit location
            information (where beam 1 is oriented at the top the AP, growing
            counter-clock-wise, with 9 being the omni BLE beam)
        custom_ble_packet_enabled (bool): can be enabled if
            `beacon_enabled`==`true`, whether to send custom packet
        custom_ble_packet_frame (string): The custom frame to be sent out in
            this beacon. The frame must be a hexstring
        custom_ble_packet_freq_msec (int): Frequency (msec) of data emitted by
            custom ble beacon
        eddystone_uid_adv_power (int): advertised TX Power, -100 to 20 (dBm),
            omit this attribute to use default
        eddystone_uid_beams (string): TODO: type description here.
        eddystone_uid_enabled (bool): only if `beacon_enabled`==`false`,
            Whether Eddystone-UID beacon is enabled
        eddystone_uid_freq_msec (int): Frequency (msec) of data emmit by
            Eddystone-UID beacon
        eddystone_uid_instance (string): Eddystone-UID instance for the
            device
        eddystone_uid_namespace (string): Eddystone-UID namespace
        eddystone_url_adv_power (int): advertised TX Power, -100 to 20 (dBm),
            omit this attribute to use default
        eddystone_url_beams (string): TODO: type description here.
        eddystone_url_enabled (bool): only if `beacon_enabled`==`false`,
            Whether Eddystone-URL beacon is enabled
        eddystone_url_freq_msec (int): Frequency (msec) of data emit by
            Eddystone-UID beacon
        eddystone_url_url (string): URL pointed by Eddystone-URL beacon
        ibeacon_adv_power (int): advertised TX Power, -100 to 20 (dBm), omit
            this attribute to use default
        ibeacon_beams (string): TODO: type description here.
        ibeacon_enabled (bool): can be enabled if `beacon_enabled`==`true`,
            whether to send iBeacon
        ibeacon_freq_msec (int): Frequency (msec) of data emmit for iBeacon
        ibeacon_major (int): Major number for iBeacon
        ibeacon_minor (int): Minor number for iBeacon
        ibeacon_uuid (uuid|string): optional, if not specified, the same UUID
            as the beacon will be used
        power (int): required if `power_mode`==`custom`
        power_mode (string): default / custom

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "beacon_enabled": 'beacon_enabled',
        "beacon_rate": 'beacon_rate',
        "beacon_rate_mode": 'beacon_rate_mode',
        "beam_disabled": 'beam_disabled',
        "custom_ble_packet_enabled": 'custom_ble_packet_enabled',
        "custom_ble_packet_frame": 'custom_ble_packet_frame',
        "custom_ble_packet_freq_msec": 'custom_ble_packet_freq_msec',
        "eddystone_uid_adv_power": 'eddystone_uid_adv_power',
        "eddystone_uid_beams": 'eddystone_uid_beams',
        "eddystone_uid_enabled": 'eddystone_uid_enabled',
        "eddystone_uid_freq_msec": 'eddystone_uid_freq_msec',
        "eddystone_uid_instance": 'eddystone_uid_instance',
        "eddystone_uid_namespace": 'eddystone_uid_namespace',
        "eddystone_url_adv_power": 'eddystone_url_adv_power',
        "eddystone_url_beams": 'eddystone_url_beams',
        "eddystone_url_enabled": 'eddystone_url_enabled',
        "eddystone_url_freq_msec": 'eddystone_url_freq_msec',
        "eddystone_url_url": 'eddystone_url_url',
        "ibeacon_adv_power": 'ibeacon_adv_power',
        "ibeacon_beams": 'ibeacon_beams',
        "ibeacon_enabled": 'ibeacon_enabled',
        "ibeacon_freq_msec": 'ibeacon_freq_msec',
        "ibeacon_major": 'ibeacon_major',
        "ibeacon_minor": 'ibeacon_minor',
        "ibeacon_uuid": 'ibeacon_uuid',
        "power": 'power',
        "power_mode": 'power_mode'
    }

    _optionals = [
        'beacon_enabled',
        'beacon_rate',
        'beacon_rate_mode',
        'beam_disabled',
        'custom_ble_packet_enabled',
        'custom_ble_packet_frame',
        'custom_ble_packet_freq_msec',
        'eddystone_uid_adv_power',
        'eddystone_uid_beams',
        'eddystone_uid_enabled',
        'eddystone_uid_freq_msec',
        'eddystone_uid_instance',
        'eddystone_uid_namespace',
        'eddystone_url_adv_power',
        'eddystone_url_beams',
        'eddystone_url_enabled',
        'eddystone_url_freq_msec',
        'eddystone_url_url',
        'ibeacon_adv_power',
        'ibeacon_beams',
        'ibeacon_enabled',
        'ibeacon_freq_msec',
        'ibeacon_major',
        'ibeacon_minor',
        'ibeacon_uuid',
        'power',
        'power_mode',
    ]

    def __init__(self,
                 beacon_enabled=True,
                 beacon_rate=APIHelper.SKIP,
                 beacon_rate_mode='default',
                 beam_disabled=APIHelper.SKIP,
                 custom_ble_packet_enabled=False,
                 custom_ble_packet_frame=APIHelper.SKIP,
                 custom_ble_packet_freq_msec=APIHelper.SKIP,
                 eddystone_uid_adv_power=APIHelper.SKIP,
                 eddystone_uid_beams=APIHelper.SKIP,
                 eddystone_uid_enabled=APIHelper.SKIP,
                 eddystone_uid_freq_msec=APIHelper.SKIP,
                 eddystone_uid_instance=APIHelper.SKIP,
                 eddystone_uid_namespace=APIHelper.SKIP,
                 eddystone_url_adv_power=APIHelper.SKIP,
                 eddystone_url_beams=APIHelper.SKIP,
                 eddystone_url_enabled=APIHelper.SKIP,
                 eddystone_url_freq_msec=APIHelper.SKIP,
                 eddystone_url_url=APIHelper.SKIP,
                 ibeacon_adv_power=APIHelper.SKIP,
                 ibeacon_beams=APIHelper.SKIP,
                 ibeacon_enabled=False,
                 ibeacon_freq_msec=APIHelper.SKIP,
                 ibeacon_major=APIHelper.SKIP,
                 ibeacon_minor=APIHelper.SKIP,
                 ibeacon_uuid=APIHelper.SKIP,
                 power=9,
                 power_mode=APIHelper.SKIP):
        """Constructor for the ApBle class"""

        # Initialize members of the class
        self.beacon_enabled = beacon_enabled 
        if beacon_rate is not APIHelper.SKIP:
            self.beacon_rate = beacon_rate 
        self.beacon_rate_mode = beacon_rate_mode 
        if beam_disabled is not APIHelper.SKIP:
            self.beam_disabled = beam_disabled 
        self.custom_ble_packet_enabled = custom_ble_packet_enabled 
        if custom_ble_packet_frame is not APIHelper.SKIP:
            self.custom_ble_packet_frame = custom_ble_packet_frame 
        if custom_ble_packet_freq_msec is not APIHelper.SKIP:
            self.custom_ble_packet_freq_msec = custom_ble_packet_freq_msec 
        if eddystone_uid_adv_power is not APIHelper.SKIP:
            self.eddystone_uid_adv_power = eddystone_uid_adv_power 
        if eddystone_uid_beams is not APIHelper.SKIP:
            self.eddystone_uid_beams = eddystone_uid_beams 
        if eddystone_uid_enabled is not APIHelper.SKIP:
            self.eddystone_uid_enabled = eddystone_uid_enabled 
        if eddystone_uid_freq_msec is not APIHelper.SKIP:
            self.eddystone_uid_freq_msec = eddystone_uid_freq_msec 
        if eddystone_uid_instance is not APIHelper.SKIP:
            self.eddystone_uid_instance = eddystone_uid_instance 
        if eddystone_uid_namespace is not APIHelper.SKIP:
            self.eddystone_uid_namespace = eddystone_uid_namespace 
        if eddystone_url_adv_power is not APIHelper.SKIP:
            self.eddystone_url_adv_power = eddystone_url_adv_power 
        if eddystone_url_beams is not APIHelper.SKIP:
            self.eddystone_url_beams = eddystone_url_beams 
        if eddystone_url_enabled is not APIHelper.SKIP:
            self.eddystone_url_enabled = eddystone_url_enabled 
        if eddystone_url_freq_msec is not APIHelper.SKIP:
            self.eddystone_url_freq_msec = eddystone_url_freq_msec 
        if eddystone_url_url is not APIHelper.SKIP:
            self.eddystone_url_url = eddystone_url_url 
        if ibeacon_adv_power is not APIHelper.SKIP:
            self.ibeacon_adv_power = ibeacon_adv_power 
        if ibeacon_beams is not APIHelper.SKIP:
            self.ibeacon_beams = ibeacon_beams 
        self.ibeacon_enabled = ibeacon_enabled 
        if ibeacon_freq_msec is not APIHelper.SKIP:
            self.ibeacon_freq_msec = ibeacon_freq_msec 
        if ibeacon_major is not APIHelper.SKIP:
            self.ibeacon_major = ibeacon_major 
        if ibeacon_minor is not APIHelper.SKIP:
            self.ibeacon_minor = ibeacon_minor 
        if ibeacon_uuid is not APIHelper.SKIP:
            self.ibeacon_uuid = ibeacon_uuid 
        self.power = power 
        if power_mode is not APIHelper.SKIP:
            self.power_mode = power_mode 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        beacon_enabled = dictionary.get("beacon_enabled") if dictionary.get("beacon_enabled") else True
        beacon_rate = dictionary.get("beacon_rate") if dictionary.get("beacon_rate") else APIHelper.SKIP
        beacon_rate_mode = dictionary.get("beacon_rate_mode") if dictionary.get("beacon_rate_mode") else 'default'
        beam_disabled = dictionary.get("beam_disabled") if dictionary.get("beam_disabled") else APIHelper.SKIP
        custom_ble_packet_enabled = dictionary.get("custom_ble_packet_enabled") if dictionary.get("custom_ble_packet_enabled") else False
        custom_ble_packet_frame = dictionary.get("custom_ble_packet_frame") if dictionary.get("custom_ble_packet_frame") else APIHelper.SKIP
        custom_ble_packet_freq_msec = dictionary.get("custom_ble_packet_freq_msec") if dictionary.get("custom_ble_packet_freq_msec") else APIHelper.SKIP
        eddystone_uid_adv_power = dictionary.get("eddystone_uid_adv_power") if dictionary.get("eddystone_uid_adv_power") else APIHelper.SKIP
        eddystone_uid_beams = dictionary.get("eddystone_uid_beams") if dictionary.get("eddystone_uid_beams") else APIHelper.SKIP
        eddystone_uid_enabled = dictionary.get("eddystone_uid_enabled") if "eddystone_uid_enabled" in dictionary.keys() else APIHelper.SKIP
        eddystone_uid_freq_msec = dictionary.get("eddystone_uid_freq_msec") if dictionary.get("eddystone_uid_freq_msec") else APIHelper.SKIP
        eddystone_uid_instance = dictionary.get("eddystone_uid_instance") if dictionary.get("eddystone_uid_instance") else APIHelper.SKIP
        eddystone_uid_namespace = dictionary.get("eddystone_uid_namespace") if dictionary.get("eddystone_uid_namespace") else APIHelper.SKIP
        eddystone_url_adv_power = dictionary.get("eddystone_url_adv_power") if dictionary.get("eddystone_url_adv_power") else APIHelper.SKIP
        eddystone_url_beams = dictionary.get("eddystone_url_beams") if dictionary.get("eddystone_url_beams") else APIHelper.SKIP
        eddystone_url_enabled = dictionary.get("eddystone_url_enabled") if "eddystone_url_enabled" in dictionary.keys() else APIHelper.SKIP
        eddystone_url_freq_msec = dictionary.get("eddystone_url_freq_msec") if dictionary.get("eddystone_url_freq_msec") else APIHelper.SKIP
        eddystone_url_url = dictionary.get("eddystone_url_url") if dictionary.get("eddystone_url_url") else APIHelper.SKIP
        ibeacon_adv_power = dictionary.get("ibeacon_adv_power") if dictionary.get("ibeacon_adv_power") else APIHelper.SKIP
        ibeacon_beams = dictionary.get("ibeacon_beams") if dictionary.get("ibeacon_beams") else APIHelper.SKIP
        ibeacon_enabled = dictionary.get("ibeacon_enabled") if dictionary.get("ibeacon_enabled") else False
        ibeacon_freq_msec = dictionary.get("ibeacon_freq_msec") if dictionary.get("ibeacon_freq_msec") else APIHelper.SKIP
        ibeacon_major = dictionary.get("ibeacon_major") if dictionary.get("ibeacon_major") else APIHelper.SKIP
        ibeacon_minor = dictionary.get("ibeacon_minor") if dictionary.get("ibeacon_minor") else APIHelper.SKIP
        ibeacon_uuid = dictionary.get("ibeacon_uuid") if dictionary.get("ibeacon_uuid") else APIHelper.SKIP
        power = dictionary.get("power") if dictionary.get("power") else 9
        power_mode = dictionary.get("power_mode") if dictionary.get("power_mode") else APIHelper.SKIP
        # Return an object of this model
        return cls(beacon_enabled,
                   beacon_rate,
                   beacon_rate_mode,
                   beam_disabled,
                   custom_ble_packet_enabled,
                   custom_ble_packet_frame,
                   custom_ble_packet_freq_msec,
                   eddystone_uid_adv_power,
                   eddystone_uid_beams,
                   eddystone_uid_enabled,
                   eddystone_uid_freq_msec,
                   eddystone_uid_instance,
                   eddystone_uid_namespace,
                   eddystone_url_adv_power,
                   eddystone_url_beams,
                   eddystone_url_enabled,
                   eddystone_url_freq_msec,
                   eddystone_url_url,
                   ibeacon_adv_power,
                   ibeacon_beams,
                   ibeacon_enabled,
                   ibeacon_freq_msec,
                   ibeacon_major,
                   ibeacon_minor,
                   ibeacon_uuid,
                   power,
                   power_mode)
