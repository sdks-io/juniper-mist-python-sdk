# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class DeviceUpgrade(object):

    """Implementation of the 'device_upgrade' model.

    TODO: type model description here.

    Attributes:
        canary_phases (list of int): phases for canary deployment. Each phase
            represents percentage of AP’s that need to be upgraded. default is
            [1, 10, 50, 100]
        device_ids (list of string): TODO: type description here.
        enable_p_2_p (bool): whether to allow local AP-to-AP FW upgrade
        force (bool): true will force upgrade when requested version is same
            as running version
        max_failure_percentage (float): percentage of failures allowed across
            the entire upgrade(not applicable for `big_bang`)
        max_failures (list of int): number of failures allowed within each
            phase(applicable for `canary` or `rrm`). Will be used if provided,
            else max_failure_percentage will be used
        models (list of string): TODO: type description here.
        p_2_p_cluster_size (int): TODO: type description here.
        p_2_p_parallelism (int): number of parallel p2p download batches to
            creat
        reboot (bool): Reboot device immediately after upgrade is completed
            (Available on Junos OS devices)
        reboot_at (float): reboot start time in epoch seconds, default is
            `start_time`
        rrm_first_batch_percentage (int): percentage of AP’s that need to be
            present in the first rrm batch
        rrm_max_batch_percentage (int): max percentage of AP’s that need to be
            present in each rrm batch
        rrm_mesh_upgrade (string): sequential or parallel (default parallel).
            Whether to upgrade mesh AP’s parallelly or sequentially at the end
            of the upgrade
        rrm_node_order (RrmNodeOrderEnum): Used in rrm to determine whether to
            start upgrade from fringe or center AP’s
        rrm_slow_ramp (bool): true will make rrm batch sizes slowly ramp up
        snapshot (bool): Perform recovery snapshot after device is rebooted
            (Available on Junos OS devices)
        start_time (float): upgrade start time in epoch seconds, default is
            now
        strategy (StrategyEnum): `big_bang` (upgrade all at once), `serial`
            (one at a time), `canary` or `rrm`
        version (string): specific version / stable

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "canary_phases": 'canary_phases',
        "device_ids": 'device_ids',
        "enable_p_2_p": 'enable_p2p',
        "force": 'force',
        "max_failure_percentage": 'max_failure_percentage',
        "max_failures": 'max_failures',
        "models": 'models',
        "p_2_p_cluster_size": 'p2p_cluster_size',
        "p_2_p_parallelism": 'p2p_parallelism',
        "reboot": 'reboot',
        "reboot_at": 'reboot_at',
        "rrm_first_batch_percentage": 'rrm_first_batch_percentage',
        "rrm_max_batch_percentage": 'rrm_max_batch_percentage',
        "rrm_mesh_upgrade": 'rrm_mesh_upgrade',
        "rrm_node_order": 'rrm_node_order',
        "rrm_slow_ramp": 'rrm_slow_ramp',
        "snapshot": 'snapshot',
        "start_time": 'start_time',
        "strategy": 'strategy',
        "version": 'version'
    }

    _optionals = [
        'canary_phases',
        'device_ids',
        'enable_p_2_p',
        'force',
        'max_failure_percentage',
        'max_failures',
        'models',
        'p_2_p_cluster_size',
        'p_2_p_parallelism',
        'reboot',
        'reboot_at',
        'rrm_first_batch_percentage',
        'rrm_max_batch_percentage',
        'rrm_mesh_upgrade',
        'rrm_node_order',
        'rrm_slow_ramp',
        'snapshot',
        'start_time',
        'strategy',
        'version',
    ]

    def __init__(self,
                 canary_phases=None,
                 device_ids=APIHelper.SKIP,
                 enable_p_2_p=APIHelper.SKIP,
                 force=False,
                 max_failure_percentage=5,
                 max_failures=APIHelper.SKIP,
                 models=APIHelper.SKIP,
                 p_2_p_cluster_size=10,
                 p_2_p_parallelism=APIHelper.SKIP,
                 reboot=False,
                 reboot_at=APIHelper.SKIP,
                 rrm_first_batch_percentage=APIHelper.SKIP,
                 rrm_max_batch_percentage=APIHelper.SKIP,
                 rrm_mesh_upgrade=APIHelper.SKIP,
                 rrm_node_order='fringe_to_center',
                 rrm_slow_ramp=APIHelper.SKIP,
                 snapshot=False,
                 start_time=APIHelper.SKIP,
                 strategy='big_bang',
                 version='latest'):
        """Constructor for the DeviceUpgrade class"""

        # Initialize members of the class
        self.canary_phases = canary_phases 
        if device_ids is not APIHelper.SKIP:
            self.device_ids = device_ids 
        if enable_p_2_p is not APIHelper.SKIP:
            self.enable_p_2_p = enable_p_2_p 
        self.force = force 
        self.max_failure_percentage = max_failure_percentage 
        if max_failures is not APIHelper.SKIP:
            self.max_failures = max_failures 
        if models is not APIHelper.SKIP:
            self.models = models 
        self.p_2_p_cluster_size = p_2_p_cluster_size 
        if p_2_p_parallelism is not APIHelper.SKIP:
            self.p_2_p_parallelism = p_2_p_parallelism 
        self.reboot = reboot 
        if reboot_at is not APIHelper.SKIP:
            self.reboot_at = reboot_at 
        if rrm_first_batch_percentage is not APIHelper.SKIP:
            self.rrm_first_batch_percentage = rrm_first_batch_percentage 
        if rrm_max_batch_percentage is not APIHelper.SKIP:
            self.rrm_max_batch_percentage = rrm_max_batch_percentage 
        if rrm_mesh_upgrade is not APIHelper.SKIP:
            self.rrm_mesh_upgrade = rrm_mesh_upgrade 
        self.rrm_node_order = rrm_node_order 
        if rrm_slow_ramp is not APIHelper.SKIP:
            self.rrm_slow_ramp = rrm_slow_ramp 
        self.snapshot = snapshot 
        if start_time is not APIHelper.SKIP:
            self.start_time = start_time 
        self.strategy = strategy 
        self.version = version 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        canary_phases = dictionary.get("canary_phases") if dictionary.get("canary_phases") else None
        device_ids = dictionary.get("device_ids") if dictionary.get("device_ids") else APIHelper.SKIP
        enable_p_2_p = dictionary.get("enable_p2p") if "enable_p2p" in dictionary.keys() else APIHelper.SKIP
        force = dictionary.get("force") if dictionary.get("force") else False
        max_failure_percentage = dictionary.get("max_failure_percentage") if dictionary.get("max_failure_percentage") else 5
        max_failures = dictionary.get("max_failures") if dictionary.get("max_failures") else APIHelper.SKIP
        models = dictionary.get("models") if dictionary.get("models") else APIHelper.SKIP
        p_2_p_cluster_size = dictionary.get("p2p_cluster_size") if dictionary.get("p2p_cluster_size") else 10
        p_2_p_parallelism = dictionary.get("p2p_parallelism") if dictionary.get("p2p_parallelism") else APIHelper.SKIP
        reboot = dictionary.get("reboot") if dictionary.get("reboot") else False
        reboot_at = dictionary.get("reboot_at") if dictionary.get("reboot_at") else APIHelper.SKIP
        rrm_first_batch_percentage = dictionary.get("rrm_first_batch_percentage") if dictionary.get("rrm_first_batch_percentage") else APIHelper.SKIP
        rrm_max_batch_percentage = dictionary.get("rrm_max_batch_percentage") if dictionary.get("rrm_max_batch_percentage") else APIHelper.SKIP
        rrm_mesh_upgrade = dictionary.get("rrm_mesh_upgrade") if dictionary.get("rrm_mesh_upgrade") else APIHelper.SKIP
        rrm_node_order = dictionary.get("rrm_node_order") if dictionary.get("rrm_node_order") else 'fringe_to_center'
        rrm_slow_ramp = dictionary.get("rrm_slow_ramp") if "rrm_slow_ramp" in dictionary.keys() else APIHelper.SKIP
        snapshot = dictionary.get("snapshot") if dictionary.get("snapshot") else False
        start_time = dictionary.get("start_time") if dictionary.get("start_time") else APIHelper.SKIP
        strategy = dictionary.get("strategy") if dictionary.get("strategy") else 'big_bang'
        version = dictionary.get("version") if dictionary.get("version") else 'latest'
        # Return an object of this model
        return cls(canary_phases,
                   device_ids,
                   enable_p_2_p,
                   force,
                   max_failure_percentage,
                   max_failures,
                   models,
                   p_2_p_cluster_size,
                   p_2_p_parallelism,
                   reboot,
                   reboot_at,
                   rrm_first_batch_percentage,
                   rrm_max_batch_percentage,
                   rrm_mesh_upgrade,
                   rrm_node_order,
                   rrm_slow_ramp,
                   snapshot,
                   start_time,
                   strategy,
                   version)
