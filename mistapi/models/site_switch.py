# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.protect_re_2 import ProtectRe2
from mistapi.models.tacacs import Tacacs


class SiteSwitch(object):

    """Implementation of the 'site_switch' model.

    Switch site settings

    Attributes:
        ap_affinity_threshold (int): ap_affinity_threshold
            ap_affinity_threshold can be added as a field under site/setting.
            By default this value is set to 12. If the field is set in both
            site/setting and org/setting, the value from site/setting will be
            used.
        config_revert_timer (float): the rollback timer for commit confirmed
        dhcp_option_fqdn (bool): Enable to provide the FQDN with DHCP option
            81
        mxedge_proxy_host (string): TODO: type description here.
        mxedge_proxy_port (int): TODO: type description here.
        protect_re (ProtectRe2): restrict inbound-traffic to host  (draft)
        root_password (string): TODO: type description here.
        tacacs (Tacacs): TODO: type description here.
        use_mxedge_proxy (bool): to use mxedge as proxy

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ap_affinity_threshold": 'ap_affinity_threshold',
        "config_revert_timer": 'config_revert_timer',
        "dhcp_option_fqdn": 'dhcp_option_fqdn',
        "mxedge_proxy_host": 'mxedge_proxy_host',
        "mxedge_proxy_port": 'mxedge_proxy_port',
        "protect_re": 'protect_re',
        "root_password": 'root_password',
        "tacacs": 'tacacs',
        "use_mxedge_proxy": 'use_mxedge_proxy'
    }

    _optionals = [
        'ap_affinity_threshold',
        'config_revert_timer',
        'dhcp_option_fqdn',
        'mxedge_proxy_host',
        'mxedge_proxy_port',
        'protect_re',
        'root_password',
        'tacacs',
        'use_mxedge_proxy',
    ]

    def __init__(self,
                 ap_affinity_threshold=10,
                 config_revert_timer=10,
                 dhcp_option_fqdn=False,
                 mxedge_proxy_host=APIHelper.SKIP,
                 mxedge_proxy_port=2222,
                 protect_re=APIHelper.SKIP,
                 root_password=APIHelper.SKIP,
                 tacacs=APIHelper.SKIP,
                 use_mxedge_proxy=APIHelper.SKIP):
        """Constructor for the SiteSwitch class"""

        # Initialize members of the class
        self.ap_affinity_threshold = ap_affinity_threshold 
        self.config_revert_timer = config_revert_timer 
        self.dhcp_option_fqdn = dhcp_option_fqdn 
        if mxedge_proxy_host is not APIHelper.SKIP:
            self.mxedge_proxy_host = mxedge_proxy_host 
        self.mxedge_proxy_port = mxedge_proxy_port 
        if protect_re is not APIHelper.SKIP:
            self.protect_re = protect_re 
        if root_password is not APIHelper.SKIP:
            self.root_password = root_password 
        if tacacs is not APIHelper.SKIP:
            self.tacacs = tacacs 
        if use_mxedge_proxy is not APIHelper.SKIP:
            self.use_mxedge_proxy = use_mxedge_proxy 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ap_affinity_threshold = dictionary.get("ap_affinity_threshold") if dictionary.get("ap_affinity_threshold") else 10
        config_revert_timer = dictionary.get("config_revert_timer") if dictionary.get("config_revert_timer") else 10
        dhcp_option_fqdn = dictionary.get("dhcp_option_fqdn") if dictionary.get("dhcp_option_fqdn") else False
        mxedge_proxy_host = dictionary.get("mxedge_proxy_host") if dictionary.get("mxedge_proxy_host") else APIHelper.SKIP
        mxedge_proxy_port = dictionary.get("mxedge_proxy_port") if dictionary.get("mxedge_proxy_port") else 2222
        protect_re = ProtectRe2.from_dictionary(dictionary.get('protect_re')) if 'protect_re' in dictionary.keys() else APIHelper.SKIP
        root_password = dictionary.get("root_password") if dictionary.get("root_password") else APIHelper.SKIP
        tacacs = Tacacs.from_dictionary(dictionary.get('tacacs')) if 'tacacs' in dictionary.keys() else APIHelper.SKIP
        use_mxedge_proxy = dictionary.get("use_mxedge_proxy") if "use_mxedge_proxy" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(ap_affinity_threshold,
                   config_revert_timer,
                   dhcp_option_fqdn,
                   mxedge_proxy_host,
                   mxedge_proxy_port,
                   protect_re,
                   root_password,
                   tacacs,
                   use_mxedge_proxy)
