# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class SleThreshold(object):

    """Implementation of the 'sle_threshold' model.

    TODO: type model description here.

    Attributes:
        default (float): TODO: type description here.
        direction (string): TODO: type description here.
        maximum (float): TODO: type description here.
        metric (string): TODO: type description here.
        minimum (float): TODO: type description here.
        threshold (string): TODO: type description here.
        units (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "default": 'default',
        "direction": 'direction',
        "maximum": 'maximum',
        "metric": 'metric',
        "minimum": 'minimum',
        "threshold": 'threshold',
        "units": 'units'
    }

    _optionals = [
        'default',
        'direction',
        'maximum',
        'metric',
        'minimum',
        'threshold',
        'units',
    ]

    def __init__(self,
                 default=APIHelper.SKIP,
                 direction=APIHelper.SKIP,
                 maximum=APIHelper.SKIP,
                 metric=APIHelper.SKIP,
                 minimum=APIHelper.SKIP,
                 threshold=APIHelper.SKIP,
                 units=APIHelper.SKIP):
        """Constructor for the SleThreshold class"""

        # Initialize members of the class
        if default is not APIHelper.SKIP:
            self.default = default 
        if direction is not APIHelper.SKIP:
            self.direction = direction 
        if maximum is not APIHelper.SKIP:
            self.maximum = maximum 
        if metric is not APIHelper.SKIP:
            self.metric = metric 
        if minimum is not APIHelper.SKIP:
            self.minimum = minimum 
        if threshold is not APIHelper.SKIP:
            self.threshold = threshold 
        if units is not APIHelper.SKIP:
            self.units = units 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        default = dictionary.get("default") if dictionary.get("default") else APIHelper.SKIP
        direction = dictionary.get("direction") if dictionary.get("direction") else APIHelper.SKIP
        maximum = dictionary.get("maximum") if dictionary.get("maximum") else APIHelper.SKIP
        metric = dictionary.get("metric") if dictionary.get("metric") else APIHelper.SKIP
        minimum = dictionary.get("minimum") if dictionary.get("minimum") else APIHelper.SKIP
        threshold = dictionary.get("threshold") if dictionary.get("threshold") else APIHelper.SKIP
        units = dictionary.get("units") if dictionary.get("units") else APIHelper.SKIP
        # Return an object of this model
        return cls(default,
                   direction,
                   maximum,
                   metric,
                   minimum,
                   threshold,
                   units)
