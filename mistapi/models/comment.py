# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.attachment import Attachment


class Comment(object):

    """Implementation of the 'Comment' model.

    TODO: type model description here.

    Attributes:
        attachments (list of Attachment): TODO: type description here.
        author (string): TODO: type description here.
        comment (string): TODO: type description here.
        created_at (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "author": 'author',
        "comment": 'comment',
        "created_at": 'created_at',
        "attachments": 'attachments'
    }

    _optionals = [
        'attachments',
    ]

    def __init__(self,
                 author=None,
                 comment=None,
                 created_at=None,
                 attachments=APIHelper.SKIP):
        """Constructor for the Comment class"""

        # Initialize members of the class
        if attachments is not APIHelper.SKIP:
            self.attachments = attachments 
        self.author = author 
        self.comment = comment 
        self.created_at = created_at 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        author = dictionary.get("author") if dictionary.get("author") else None
        comment = dictionary.get("comment") if dictionary.get("comment") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        attachments = None
        if dictionary.get('attachments') is not None:
            attachments = [Attachment.from_dictionary(x) for x in dictionary.get('attachments')]
        else:
            attachments = APIHelper.SKIP
        # Return an object of this model
        return cls(author,
                   comment,
                   created_at,
                   attachments)
