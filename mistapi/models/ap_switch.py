# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.ap_switch_setting import ApSwitchSetting


class ApSwitch(object):

    """Implementation of the 'ap_switch' model.

    for people who want to fully control the vlans (advanced)

    Attributes:
        enabled (bool): TODO: type description here.
        eth_0 (ApSwitchSetting): TODO: type description here.
        eth_1 (ApSwitchSetting): TODO: type description here.
        eth_2 (ApSwitchSetting): TODO: type description here.
        eth_3 (ApSwitchSetting): TODO: type description here.
        module (ApSwitchSetting): TODO: type description here.
        wds (ApSwitchSetting): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enabled": 'enabled',
        "eth_0": 'eth0',
        "eth_1": 'eth1',
        "eth_2": 'eth2',
        "eth_3": 'eth3',
        "module": 'module',
        "wds": 'wds'
    }

    _optionals = [
        'enabled',
        'eth_0',
        'eth_1',
        'eth_2',
        'eth_3',
        'module',
        'wds',
    ]

    def __init__(self,
                 enabled=False,
                 eth_0=APIHelper.SKIP,
                 eth_1=APIHelper.SKIP,
                 eth_2=APIHelper.SKIP,
                 eth_3=APIHelper.SKIP,
                 module=APIHelper.SKIP,
                 wds=APIHelper.SKIP):
        """Constructor for the ApSwitch class"""

        # Initialize members of the class
        self.enabled = enabled 
        if eth_0 is not APIHelper.SKIP:
            self.eth_0 = eth_0 
        if eth_1 is not APIHelper.SKIP:
            self.eth_1 = eth_1 
        if eth_2 is not APIHelper.SKIP:
            self.eth_2 = eth_2 
        if eth_3 is not APIHelper.SKIP:
            self.eth_3 = eth_3 
        if module is not APIHelper.SKIP:
            self.module = module 
        if wds is not APIHelper.SKIP:
            self.wds = wds 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        enabled = dictionary.get("enabled") if dictionary.get("enabled") else False
        eth_0 = ApSwitchSetting.from_dictionary(dictionary.get('eth0')) if 'eth0' in dictionary.keys() else APIHelper.SKIP
        eth_1 = ApSwitchSetting.from_dictionary(dictionary.get('eth1')) if 'eth1' in dictionary.keys() else APIHelper.SKIP
        eth_2 = ApSwitchSetting.from_dictionary(dictionary.get('eth2')) if 'eth2' in dictionary.keys() else APIHelper.SKIP
        eth_3 = ApSwitchSetting.from_dictionary(dictionary.get('eth3')) if 'eth3' in dictionary.keys() else APIHelper.SKIP
        module = ApSwitchSetting.from_dictionary(dictionary.get('module')) if 'module' in dictionary.keys() else APIHelper.SKIP
        wds = ApSwitchSetting.from_dictionary(dictionary.get('wds')) if 'wds' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(enabled,
                   eth_0,
                   eth_1,
                   eth_2,
                   eth_3,
                   module,
                   wds)
