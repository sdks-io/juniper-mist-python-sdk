# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.models.classifier import Classifier
from mistapi.models.impact_1 import Impact1


class SleClassifierSummary(object):

    """Implementation of the 'sle_classifier_summary' model.

    TODO: type model description here.

    Attributes:
        classifier (Classifier): TODO: type description here.
        end (float): TODO: type description here.
        failures (list of object): TODO: type description here.
        impact (Impact1): TODO: type description here.
        metric (string): TODO: type description here.
        start (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "classifier": 'classifier',
        "end": 'end',
        "failures": 'failures',
        "impact": 'impact',
        "metric": 'metric',
        "start": 'start'
    }

    def __init__(self,
                 classifier=None,
                 end=None,
                 failures=None,
                 impact=None,
                 metric=None,
                 start=None):
        """Constructor for the SleClassifierSummary class"""

        # Initialize members of the class
        self.classifier = classifier 
        self.end = end 
        self.failures = failures 
        self.impact = impact 
        self.metric = metric 
        self.start = start 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        classifier = Classifier.from_dictionary(dictionary.get('classifier')) if dictionary.get('classifier') else None
        end = dictionary.get("end") if dictionary.get("end") else None
        failures = dictionary.get("failures") if dictionary.get("failures") else None
        impact = Impact1.from_dictionary(dictionary.get('impact')) if dictionary.get('impact') else None
        metric = dictionary.get("metric") if dictionary.get("metric") else None
        start = dictionary.get("start") if dictionary.get("start") else None
        # Return an object of this model
        return cls(classifier,
                   end,
                   failures,
                   impact,
                   metric,
                   start)
