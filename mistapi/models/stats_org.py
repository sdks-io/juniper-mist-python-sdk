# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.models.sle_1 import Sle1


class StatsOrg(object):

    """Implementation of the 'stats_org' model.

    Org statistics

    Attributes:
        alarmtemplate_id (uuid|string): TODO: type description here.
        allow_mist (bool): TODO: type description here.
        created_time (float): TODO: type description here.
        id (uuid|string): TODO: type description here.
        modified_time (float): TODO: type description here.
        msp_id (uuid|string): TODO: type description here.
        name (string): TODO: type description here.
        num_devices (int): TODO: type description here.
        num_devices_connected (int): TODO: type description here.
        num_devices_disconnected (int): TODO: type description here.
        num_inventory (int): TODO: type description here.
        num_sites (int): TODO: type description here.
        orggroup_ids (list of uuid|string): TODO: type description here.
        session_expiry (int): TODO: type description here.
        sle (list of Sle1): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "alarmtemplate_id": 'alarmtemplate_id',
        "allow_mist": 'allow_mist',
        "created_time": 'created_time',
        "id": 'id',
        "modified_time": 'modified_time',
        "msp_id": 'msp_id',
        "name": 'name',
        "num_devices": 'num_devices',
        "num_devices_connected": 'num_devices_connected',
        "num_devices_disconnected": 'num_devices_disconnected',
        "num_inventory": 'num_inventory',
        "num_sites": 'num_sites',
        "orggroup_ids": 'orggroup_ids',
        "session_expiry": 'session_expiry',
        "sle": 'sle'
    }

    def __init__(self,
                 alarmtemplate_id=None,
                 allow_mist=None,
                 created_time=None,
                 id=None,
                 modified_time=None,
                 msp_id=None,
                 name=None,
                 num_devices=None,
                 num_devices_connected=None,
                 num_devices_disconnected=None,
                 num_inventory=None,
                 num_sites=None,
                 orggroup_ids=None,
                 session_expiry=None,
                 sle=None):
        """Constructor for the StatsOrg class"""

        # Initialize members of the class
        self.alarmtemplate_id = alarmtemplate_id 
        self.allow_mist = allow_mist 
        self.created_time = created_time 
        self.id = id 
        self.modified_time = modified_time 
        self.msp_id = msp_id 
        self.name = name 
        self.num_devices = num_devices 
        self.num_devices_connected = num_devices_connected 
        self.num_devices_disconnected = num_devices_disconnected 
        self.num_inventory = num_inventory 
        self.num_sites = num_sites 
        self.orggroup_ids = orggroup_ids 
        self.session_expiry = session_expiry 
        self.sle = sle 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        alarmtemplate_id = dictionary.get("alarmtemplate_id") if dictionary.get("alarmtemplate_id") else None
        allow_mist = dictionary.get("allow_mist") if "allow_mist" in dictionary.keys() else None
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else None
        msp_id = dictionary.get("msp_id") if dictionary.get("msp_id") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        num_devices = dictionary.get("num_devices") if dictionary.get("num_devices") else None
        num_devices_connected = dictionary.get("num_devices_connected") if dictionary.get("num_devices_connected") else None
        num_devices_disconnected = dictionary.get("num_devices_disconnected") if dictionary.get("num_devices_disconnected") else None
        num_inventory = dictionary.get("num_inventory") if dictionary.get("num_inventory") else None
        num_sites = dictionary.get("num_sites") if dictionary.get("num_sites") else None
        orggroup_ids = dictionary.get("orggroup_ids") if dictionary.get("orggroup_ids") else None
        session_expiry = dictionary.get("session_expiry") if dictionary.get("session_expiry") else None
        sle = None
        if dictionary.get('sle') is not None:
            sle = [Sle1.from_dictionary(x) for x in dictionary.get('sle')]
        # Return an object of this model
        return cls(alarmtemplate_id,
                   allow_mist,
                   created_time,
                   id,
                   modified_time,
                   msp_id,
                   name,
                   num_devices,
                   num_devices_connected,
                   num_devices_disconnected,
                   num_inventory,
                   num_sites,
                   orggroup_ids,
                   session_expiry,
                   sle)
