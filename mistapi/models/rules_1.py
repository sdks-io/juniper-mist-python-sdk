# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.ap_port_config import ApPortConfig


class Rules1(object):

    """Implementation of the 'Rules1' model.

    TODO: type model description here.

    Attributes:
        match_model (string): TODO: type description here.
        name (string): TODO: type description here.
        port_config (dict): The property key is the interface(s) name (e.g.
            "eth1,eth2")

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "match_model": 'match_model',
        "name": 'name',
        "port_config": 'port_config'
    }

    _optionals = [
        'match_model',
        'name',
        'port_config',
    ]

    def __init__(self,
                 match_model=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 port_config=APIHelper.SKIP):
        """Constructor for the Rules1 class"""

        # Initialize members of the class
        if match_model is not APIHelper.SKIP:
            self.match_model = match_model 
        if name is not APIHelper.SKIP:
            self.name = name 
        if port_config is not APIHelper.SKIP:
            self.port_config = port_config 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        match_model = dictionary.get("match_model") if dictionary.get("match_model") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        port_config = ApPortConfig.from_dictionary(dictionary.get('port_config')) if 'port_config' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(match_model,
                   name,
                   port_config)
