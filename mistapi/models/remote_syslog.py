# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.archive import Archive
from mistapi.models.console import Console
from mistapi.models.file import File
from mistapi.models.server_1 import Server1
from mistapi.models.user_1 import User1


class RemoteSyslog(object):

    """Implementation of the 'remote_syslog' model.

    TODO: type model description here.

    Attributes:
        archive (Archive): TODO: type description here.
        console (Console): TODO: type description here.
        enabled (bool): TODO: type description here.
        files (list of typing.BinaryIO): TODO: type description here.
        network (string): if source_address is configured, will use the vlan
            firstly otherwise use source_ip
        send_to_all_servers (bool): TODO: type description here.
        servers (list of Server1): TODO: type description here.
        time_format (TimeFormatEnum): TODO: type description here.
        users (list of User1): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "archive": 'archive',
        "console": 'console',
        "enabled": 'enabled',
        "files": 'files',
        "network": 'network',
        "send_to_all_servers": 'send_to_all_servers',
        "servers": 'servers',
        "time_format": 'time_format',
        "users": 'users'
    }

    _optionals = [
        'archive',
        'console',
        'enabled',
        'files',
        'network',
        'send_to_all_servers',
        'servers',
        'time_format',
        'users',
    ]

    def __init__(self,
                 archive=APIHelper.SKIP,
                 console=APIHelper.SKIP,
                 enabled=False,
                 files=APIHelper.SKIP,
                 network=APIHelper.SKIP,
                 send_to_all_servers=True,
                 servers=APIHelper.SKIP,
                 time_format=APIHelper.SKIP,
                 users=APIHelper.SKIP):
        """Constructor for the RemoteSyslog class"""

        # Initialize members of the class
        if archive is not APIHelper.SKIP:
            self.archive = archive 
        if console is not APIHelper.SKIP:
            self.console = console 
        self.enabled = enabled 
        if files is not APIHelper.SKIP:
            self.files = files 
        if network is not APIHelper.SKIP:
            self.network = network 
        self.send_to_all_servers = send_to_all_servers 
        if servers is not APIHelper.SKIP:
            self.servers = servers 
        if time_format is not APIHelper.SKIP:
            self.time_format = time_format 
        if users is not APIHelper.SKIP:
            self.users = users 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        archive = Archive.from_dictionary(dictionary.get('archive')) if 'archive' in dictionary.keys() else APIHelper.SKIP
        console = Console.from_dictionary(dictionary.get('console')) if 'console' in dictionary.keys() else APIHelper.SKIP
        enabled = dictionary.get("enabled") if dictionary.get("enabled") else False
        files = None
        if dictionary.get('files') is not None:
            files = [File.from_dictionary(x) for x in dictionary.get('files')]
        else:
            files = APIHelper.SKIP
        network = dictionary.get("network") if dictionary.get("network") else APIHelper.SKIP
        send_to_all_servers = dictionary.get("send_to_all_servers") if dictionary.get("send_to_all_servers") else True
        servers = None
        if dictionary.get('servers') is not None:
            servers = [Server1.from_dictionary(x) for x in dictionary.get('servers')]
        else:
            servers = APIHelper.SKIP
        time_format = dictionary.get("time_format") if dictionary.get("time_format") else APIHelper.SKIP
        users = None
        if dictionary.get('users') is not None:
            users = [User1.from_dictionary(x) for x in dictionary.get('users')]
        else:
            users = APIHelper.SKIP
        # Return an object of this model
        return cls(archive,
                   console,
                   enabled,
                   files,
                   network,
                   send_to_all_servers,
                   servers,
                   time_format,
                   users)
