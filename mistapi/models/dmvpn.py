# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Dmvpn(object):

    """Implementation of the 'Dmvpn' model.

    Dynamic Multipoint VPN configurations

    Attributes:
        enabled (bool): whether DMVPN is enabled
        holding_time (int): optional; the holding time for NHRP ‘registration
            requests’ and ‘resolution replies’ sent from the Mist AP (in
            seconds); default 600
        host_routes (list of string): optional; list of IPv4 DMVPN peer host
            ip-addresses to which traffic is forwarded

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enabled": 'enabled',
        "holding_time": 'holding_time',
        "host_routes": 'host_routes'
    }

    _optionals = [
        'enabled',
        'holding_time',
        'host_routes',
    ]

    def __init__(self,
                 enabled=False,
                 holding_time=APIHelper.SKIP,
                 host_routes=APIHelper.SKIP):
        """Constructor for the Dmvpn class"""

        # Initialize members of the class
        self.enabled = enabled 
        if holding_time is not APIHelper.SKIP:
            self.holding_time = holding_time 
        if host_routes is not APIHelper.SKIP:
            self.host_routes = host_routes 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        enabled = dictionary.get("enabled") if dictionary.get("enabled") else False
        holding_time = dictionary.get("holding_time") if dictionary.get("holding_time") else APIHelper.SKIP
        host_routes = dictionary.get("host_routes") if dictionary.get("host_routes") else APIHelper.SKIP
        # Return an object of this model
        return cls(enabled,
                   holding_time,
                   host_routes)
