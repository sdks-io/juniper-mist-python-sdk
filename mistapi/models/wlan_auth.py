# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class WlanAuth(object):

    """Implementation of the 'wlan_auth' model.

    authentication wlan settings

    Attributes:
        anticlog_threshold (int): SAE anti-clogging token threshold
        eap_reauth (bool): whether to trigger EAP reauth when the session
            ends
        enable_mac_auth (bool): whether to enable MAC Auth, uses the same
            auth_servers
        key_idx (int): when type=wep
        keys (list of string): when type=wep, four 10-character or
            26-character hex string, null can be used. All keys, if provided,
            have to be in the same length
        multi_psk_only (bool): whether to only use multi_psk
        owe (string): TODO: type description here.
        pairwise (list of string): when type=psk / eap, one or more of
            wpa2-ccmp / wpa1-tkip / wpa1-ccmp / wpa2-tkip
        private_wlan (bool): whether private wlan is enabled. only applicable
            to multi_psk mode
        psk (string): when type=psk, 8-64 characters, or 64 hex characters
        mtype (Type38Enum): TODO: type description here.
        wep_as_secondary_auth (bool): enable WEP as secondary auth

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "anticlog_threshold": 'anticlog_threshold',
        "eap_reauth": 'eap_reauth',
        "enable_mac_auth": 'enable_mac_auth',
        "key_idx": 'key_idx',
        "keys": 'keys',
        "multi_psk_only": 'multi_psk_only',
        "owe": 'owe',
        "pairwise": 'pairwise',
        "private_wlan": 'private_wlan',
        "psk": 'psk',
        "wep_as_secondary_auth": 'wep_as_secondary_auth'
    }

    _optionals = [
        'anticlog_threshold',
        'eap_reauth',
        'enable_mac_auth',
        'key_idx',
        'keys',
        'multi_psk_only',
        'owe',
        'pairwise',
        'private_wlan',
        'psk',
        'wep_as_secondary_auth',
    ]

    _nullables = [
        'psk',
    ]

    def __init__(self,
                 mtype='open',
                 anticlog_threshold=16,
                 eap_reauth=False,
                 enable_mac_auth=False,
                 key_idx=1,
                 keys=APIHelper.SKIP,
                 multi_psk_only=False,
                 owe=APIHelper.SKIP,
                 pairwise=None,
                 private_wlan=APIHelper.SKIP,
                 psk=APIHelper.SKIP,
                 wep_as_secondary_auth=APIHelper.SKIP):
        """Constructor for the WlanAuth class"""

        # Initialize members of the class
        self.anticlog_threshold = anticlog_threshold 
        self.eap_reauth = eap_reauth 
        self.enable_mac_auth = enable_mac_auth 
        self.key_idx = key_idx 
        if keys is not APIHelper.SKIP:
            self.keys = keys 
        self.multi_psk_only = multi_psk_only 
        if owe is not APIHelper.SKIP:
            self.owe = owe 
        self.pairwise = pairwise 
        if private_wlan is not APIHelper.SKIP:
            self.private_wlan = private_wlan 
        if psk is not APIHelper.SKIP:
            self.psk = psk 
        self.mtype = mtype 
        if wep_as_secondary_auth is not APIHelper.SKIP:
            self.wep_as_secondary_auth = wep_as_secondary_auth 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        mtype = dictionary.get("type") if dictionary.get("type") else 'open'
        anticlog_threshold = dictionary.get("anticlog_threshold") if dictionary.get("anticlog_threshold") else 16
        eap_reauth = dictionary.get("eap_reauth") if dictionary.get("eap_reauth") else False
        enable_mac_auth = dictionary.get("enable_mac_auth") if dictionary.get("enable_mac_auth") else False
        key_idx = dictionary.get("key_idx") if dictionary.get("key_idx") else 1
        keys = dictionary.get("keys") if dictionary.get("keys") else APIHelper.SKIP
        multi_psk_only = dictionary.get("multi_psk_only") if dictionary.get("multi_psk_only") else False
        owe = dictionary.get("owe") if dictionary.get("owe") else APIHelper.SKIP
        pairwise = dictionary.get("pairwise") if dictionary.get("pairwise") else None
        private_wlan = dictionary.get("private_wlan") if "private_wlan" in dictionary.keys() else APIHelper.SKIP
        psk = dictionary.get("psk") if "psk" in dictionary.keys() else APIHelper.SKIP
        wep_as_secondary_auth = dictionary.get("wep_as_secondary_auth") if "wep_as_secondary_auth" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   anticlog_threshold,
                   eap_reauth,
                   enable_mac_auth,
                   key_idx,
                   keys,
                   multi_psk_only,
                   owe,
                   pairwise,
                   private_wlan,
                   psk,
                   wep_as_secondary_auth)
