# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Neighbors(object):

    """Implementation of the 'Neighbors' model.

    TODO: type model description here.

    Attributes:
        export_policy (string): TODO: type description here.
        hold_time (int): TODO: type description here.
        import_policy (string): TODO: type description here.
        multihop_ttl (int): assuming BGP neighbor is directly connected
        neighbor_as (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "export_policy": 'export_policy',
        "hold_time": 'hold_time',
        "import_policy": 'import_policy',
        "multihop_ttl": 'multihop_ttl',
        "neighbor_as": 'neighbor_as'
    }

    _optionals = [
        'export_policy',
        'hold_time',
        'import_policy',
        'multihop_ttl',
        'neighbor_as',
    ]

    def __init__(self,
                 export_policy=APIHelper.SKIP,
                 hold_time=90,
                 import_policy=APIHelper.SKIP,
                 multihop_ttl=APIHelper.SKIP,
                 neighbor_as=APIHelper.SKIP):
        """Constructor for the Neighbors class"""

        # Initialize members of the class
        if export_policy is not APIHelper.SKIP:
            self.export_policy = export_policy 
        self.hold_time = hold_time 
        if import_policy is not APIHelper.SKIP:
            self.import_policy = import_policy 
        if multihop_ttl is not APIHelper.SKIP:
            self.multihop_ttl = multihop_ttl 
        if neighbor_as is not APIHelper.SKIP:
            self.neighbor_as = neighbor_as 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        export_policy = dictionary.get("export_policy") if dictionary.get("export_policy") else APIHelper.SKIP
        hold_time = dictionary.get("hold_time") if dictionary.get("hold_time") else 90
        import_policy = dictionary.get("import_policy") if dictionary.get("import_policy") else APIHelper.SKIP
        multihop_ttl = dictionary.get("multihop_ttl") if dictionary.get("multihop_ttl") else APIHelper.SKIP
        neighbor_as = dictionary.get("neighbor_as") if dictionary.get("neighbor_as") else APIHelper.SKIP
        # Return an object of this model
        return cls(export_policy,
                   hold_time,
                   import_policy,
                   multihop_ttl,
                   neighbor_as)
