# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Result19(object):

    """Implementation of the 'Result19' model.

    TODO: type model description here.

    Attributes:
        ap_mac (string): mac of the device that had strongest signal strength
            for ssid/bssid pair
        avg_rssi (float): average signal strength of ap_mac for ssid/bssid
            pair
        bssid (string): bssid of the network detected as threat
        channel (string): channel over which ap_mac heard ssid/bssid pair
        delta_x (float): X position relative to the reporting AP (`ap_mac`)
        delta_y (float): Y position relative to the reporting AP (`ap_mac`)
        num_aps (int): num of aps that heard the ssid/bssid pair
        seen_on_lan (bool): whether the reporting AP see a wireless client (on
            LAN) connecting to it
        ssid (string): ssid of the network detected as threat
        times_heard (int): represents number of times the pair was heard in
            the interval. Each count roughly corresponds to a minute.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ap_mac": 'ap_mac',
        "avg_rssi": 'avg_rssi',
        "bssid": 'bssid',
        "channel": 'channel',
        "num_aps": 'num_aps',
        "delta_x": 'delta_x',
        "delta_y": 'delta_y',
        "seen_on_lan": 'seen_on_lan',
        "ssid": 'ssid',
        "times_heard": 'times_heard'
    }

    _optionals = [
        'delta_x',
        'delta_y',
        'seen_on_lan',
        'ssid',
        'times_heard',
    ]

    def __init__(self,
                 ap_mac=None,
                 avg_rssi=None,
                 bssid=None,
                 channel=None,
                 num_aps=None,
                 delta_x=APIHelper.SKIP,
                 delta_y=APIHelper.SKIP,
                 seen_on_lan=APIHelper.SKIP,
                 ssid=APIHelper.SKIP,
                 times_heard=APIHelper.SKIP):
        """Constructor for the Result19 class"""

        # Initialize members of the class
        self.ap_mac = ap_mac 
        self.avg_rssi = avg_rssi 
        self.bssid = bssid 
        self.channel = channel 
        if delta_x is not APIHelper.SKIP:
            self.delta_x = delta_x 
        if delta_y is not APIHelper.SKIP:
            self.delta_y = delta_y 
        self.num_aps = num_aps 
        if seen_on_lan is not APIHelper.SKIP:
            self.seen_on_lan = seen_on_lan 
        if ssid is not APIHelper.SKIP:
            self.ssid = ssid 
        if times_heard is not APIHelper.SKIP:
            self.times_heard = times_heard 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ap_mac = dictionary.get("ap_mac") if dictionary.get("ap_mac") else None
        avg_rssi = dictionary.get("avg_rssi") if dictionary.get("avg_rssi") else None
        bssid = dictionary.get("bssid") if dictionary.get("bssid") else None
        channel = dictionary.get("channel") if dictionary.get("channel") else None
        num_aps = dictionary.get("num_aps") if dictionary.get("num_aps") else None
        delta_x = dictionary.get("delta_x") if dictionary.get("delta_x") else APIHelper.SKIP
        delta_y = dictionary.get("delta_y") if dictionary.get("delta_y") else APIHelper.SKIP
        seen_on_lan = dictionary.get("seen_on_lan") if "seen_on_lan" in dictionary.keys() else APIHelper.SKIP
        ssid = dictionary.get("ssid") if dictionary.get("ssid") else APIHelper.SKIP
        times_heard = dictionary.get("times_heard") if dictionary.get("times_heard") else APIHelper.SKIP
        # Return an object of this model
        return cls(ap_mac,
                   avg_rssi,
                   bssid,
                   channel,
                   num_aps,
                   delta_x,
                   delta_y,
                   seen_on_lan,
                   ssid,
                   times_heard)
