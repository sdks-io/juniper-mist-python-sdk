# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.delivery import Delivery
from mistapi.models.rules import Rules


class Alarmtemplate(object):

    """Implementation of the 'alarmtemplate' model.

    Alarm Template

    Attributes:
        created_time (float): TODO: type description here.
        delivery (Delivery): Delivery object to configure the alarm delivery
        id (uuid|string): TODO: type description here.
        modified_time (float): TODO: type description here.
        name (string): Some string to name the alarm template
        org_id (uuid|string): TODO: type description here.
        rules (dict): Alarm Rules object to configure the individual alarm
            keys/types. Property key is the alarm name.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "delivery": 'delivery',
        "rules": 'rules',
        "created_time": 'created_time',
        "id": 'id',
        "modified_time": 'modified_time',
        "name": 'name',
        "org_id": 'org_id'
    }

    _optionals = [
        'created_time',
        'id',
        'modified_time',
        'name',
        'org_id',
    ]

    def __init__(self,
                 delivery=None,
                 rules=None,
                 created_time=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 org_id=APIHelper.SKIP):
        """Constructor for the Alarmtemplate class"""

        # Initialize members of the class
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        self.delivery = delivery 
        if id is not APIHelper.SKIP:
            self.id = id 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        if name is not APIHelper.SKIP:
            self.name = name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        self.rules = rules 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        delivery = Delivery.from_dictionary(dictionary.get('delivery')) if dictionary.get('delivery') else None
        rules = Rules.from_dictionary(dictionary.get('rules')) if dictionary.get('rules') else None
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(delivery,
                   rules,
                   created_time,
                   id,
                   modified_time,
                   name,
                   org_id)
