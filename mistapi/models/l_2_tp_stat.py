# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.session import Session


class L2tpStat(object):

    """Implementation of the 'L2tpStat' model.

    the property key is the L2TP tunnel id

    Attributes:
        sessions (list of Session): list of sessions
        state (string): idle / wait-ctrl-reply / wait-ctrl-conn / established
            / established_with_sessions
        uptime (int): uptime
        wxtunnel_id (uuid|string): WxlanTunnel ID

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sessions": 'sessions',
        "state": 'state',
        "uptime": 'uptime',
        "wxtunnel_id": 'wxtunnel_id'
    }

    _optionals = [
        'sessions',
        'state',
        'uptime',
        'wxtunnel_id',
    ]

    def __init__(self,
                 sessions=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 uptime=APIHelper.SKIP,
                 wxtunnel_id=APIHelper.SKIP):
        """Constructor for the L2tpStat class"""

        # Initialize members of the class
        if sessions is not APIHelper.SKIP:
            self.sessions = sessions 
        if state is not APIHelper.SKIP:
            self.state = state 
        if uptime is not APIHelper.SKIP:
            self.uptime = uptime 
        if wxtunnel_id is not APIHelper.SKIP:
            self.wxtunnel_id = wxtunnel_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        sessions = None
        if dictionary.get('sessions') is not None:
            sessions = [Session.from_dictionary(x) for x in dictionary.get('sessions')]
        else:
            sessions = APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        uptime = dictionary.get("uptime") if dictionary.get("uptime") else APIHelper.SKIP
        wxtunnel_id = dictionary.get("wxtunnel_id") if dictionary.get("wxtunnel_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(sessions,
                   state,
                   uptime,
                   wxtunnel_id)
