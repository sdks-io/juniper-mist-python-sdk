# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApiV1SitesDevicesTracerouteRequest(object):

    """Implementation of the 'Api V1 Sites Devices Traceroute Request' model.

    TODO: type model description here.

    Attributes:
        host (string): host name
        network (string): optional for gateway only the source to initiate
            traceroute from. by default, host (internal for SSR, master RI for
            SRX) is assumed
        port (int): when protocol=udp, the udp port to use
        protocol (Protocol9Enum): udp (default) /icmp
        timeout (int): maximum time in seconds to wait for the response

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "host": 'host',
        "network": 'network',
        "port": 'port',
        "protocol": 'protocol',
        "timeout": 'timeout'
    }

    _optionals = [
        'network',
        'port',
        'protocol',
        'timeout',
    ]

    def __init__(self,
                 host=None,
                 network='internal',
                 port=APIHelper.SKIP,
                 protocol='udp',
                 timeout=60):
        """Constructor for the ApiV1SitesDevicesTracerouteRequest class"""

        # Initialize members of the class
        self.host = host 
        self.network = network 
        if port is not APIHelper.SKIP:
            self.port = port 
        self.protocol = protocol 
        self.timeout = timeout 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        host = dictionary.get("host") if dictionary.get("host") else None
        network = dictionary.get("network") if dictionary.get("network") else 'internal'
        port = dictionary.get("port") if dictionary.get("port") else APIHelper.SKIP
        protocol = dictionary.get("protocol") if dictionary.get("protocol") else 'udp'
        timeout = dictionary.get("timeout") if dictionary.get("timeout") else 60
        # Return an object of this model
        return cls(host,
                   network,
                   port,
                   protocol,
                   timeout)
