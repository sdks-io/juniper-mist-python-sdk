# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class EventCall(object):

    """Implementation of the 'event_call' model.

    TODO: type model description here.

    Attributes:
        app (string): TODO: type description here.
        audio_quality (string): TODO: type description here.
        meeting_id (string): TODO: type description here.
        org_id (string): TODO: type description here.
        reason (string): TODO: type description here.
        screen_share_quality (string): TODO: type description here.
        site_id (string): TODO: type description here.
        timestamp (int): TODO: type description here.
        mtype (string): TODO: type description here.
        video_quality (string): TODO: type description here.
        wcid (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "app": 'app',
        "audio_quality": 'audio_quality',
        "meeting_id": 'meeting_id',
        "org_id": 'org_id',
        "reason": 'reason',
        "screen_share_quality": 'screen_share_quality',
        "site_id": 'site_id',
        "timestamp": 'timestamp',
        "mtype": 'type',
        "video_quality": 'video_quality',
        "wcid": 'wcid'
    }

    _optionals = [
        'app',
        'audio_quality',
        'meeting_id',
        'org_id',
        'reason',
        'screen_share_quality',
        'site_id',
        'timestamp',
        'mtype',
        'video_quality',
        'wcid',
    ]

    def __init__(self,
                 app=APIHelper.SKIP,
                 audio_quality=APIHelper.SKIP,
                 meeting_id=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 reason=APIHelper.SKIP,
                 screen_share_quality=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 timestamp=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 video_quality=APIHelper.SKIP,
                 wcid=APIHelper.SKIP):
        """Constructor for the EventCall class"""

        # Initialize members of the class
        if app is not APIHelper.SKIP:
            self.app = app 
        if audio_quality is not APIHelper.SKIP:
            self.audio_quality = audio_quality 
        if meeting_id is not APIHelper.SKIP:
            self.meeting_id = meeting_id 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if reason is not APIHelper.SKIP:
            self.reason = reason 
        if screen_share_quality is not APIHelper.SKIP:
            self.screen_share_quality = screen_share_quality 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if timestamp is not APIHelper.SKIP:
            self.timestamp = timestamp 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if video_quality is not APIHelper.SKIP:
            self.video_quality = video_quality 
        if wcid is not APIHelper.SKIP:
            self.wcid = wcid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        app = dictionary.get("app") if dictionary.get("app") else APIHelper.SKIP
        audio_quality = dictionary.get("audio_quality") if dictionary.get("audio_quality") else APIHelper.SKIP
        meeting_id = dictionary.get("meeting_id") if dictionary.get("meeting_id") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        reason = dictionary.get("reason") if dictionary.get("reason") else APIHelper.SKIP
        screen_share_quality = dictionary.get("screen_share_quality") if dictionary.get("screen_share_quality") else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        video_quality = dictionary.get("video_quality") if dictionary.get("video_quality") else APIHelper.SKIP
        wcid = dictionary.get("wcid") if dictionary.get("wcid") else APIHelper.SKIP
        # Return an object of this model
        return cls(app,
                   audio_quality,
                   meeting_id,
                   org_id,
                   reason,
                   screen_share_quality,
                   site_id,
                   timestamp,
                   mtype,
                   video_quality,
                   wcid)
