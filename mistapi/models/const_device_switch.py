# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.defaults import Defaults


class ConstDeviceSwitch(object):

    """Implementation of the 'const_device_switch' model.

    TODO: type model description here.

    Attributes:
        alias (string): TODO: type description here.
        defaults (Defaults): TODO: type description here.
        description (string): TODO: type description here.
        display (string): TODO: type description here.
        evolved_os (bool): TODO: type description here.
        evpn_ri_type (string): TODO: type description here.
        experimental (bool): TODO: type description here.
        fans_pluggable (bool): TODO: type description here.
        has_bgp (bool): TODO: type description here.
        has_ets (bool): TODO: type description here.
        has_evpn (bool): TODO: type description here.
        has_irb (bool): TODO: type description here.
        has_poe_out (bool): TODO: type description here.
        has_snapshot (bool): TODO: type description here.
        has_vc (bool): TODO: type description here.
        model (string): TODO: type description here.
        modular (bool): TODO: type description here.
        no_shaping_rate (bool): TODO: type description here.
        number_fans (int): TODO: type description here.
        oc_device (bool): TODO: type description here.
        oob_interface (string): TODO: type description here.
        packet_action_drop_only (bool): TODO: type description here.
        pic (dict): Object Key is the PIC number
        sub_required (string): TODO: type description here.
        mtype (Type5Enum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "alias": 'alias',
        "defaults": 'defaults',
        "description": 'description',
        "display": 'display',
        "evolved_os": 'evolved_os',
        "evpn_ri_type": 'evpn_ri_type',
        "experimental": 'experimental',
        "fans_pluggable": 'fans_pluggable',
        "has_bgp": 'has_bgp',
        "has_ets": 'has_ets',
        "has_evpn": 'has_evpn',
        "has_irb": 'has_irb',
        "has_poe_out": 'has_poe_out',
        "has_snapshot": 'has_snapshot',
        "has_vc": 'has_vc',
        "model": 'model',
        "modular": 'modular',
        "no_shaping_rate": 'no_shaping_rate',
        "number_fans": 'number_fans',
        "oc_device": 'oc_device',
        "oob_interface": 'oob_interface',
        "packet_action_drop_only": 'packet_action_drop_only',
        "pic": 'pic',
        "sub_required": 'sub_required',
        "mtype": 'type'
    }

    _optionals = [
        'alias',
        'defaults',
        'description',
        'display',
        'evolved_os',
        'evpn_ri_type',
        'experimental',
        'fans_pluggable',
        'has_bgp',
        'has_ets',
        'has_evpn',
        'has_irb',
        'has_poe_out',
        'has_snapshot',
        'has_vc',
        'model',
        'modular',
        'no_shaping_rate',
        'number_fans',
        'oc_device',
        'oob_interface',
        'packet_action_drop_only',
        'pic',
        'sub_required',
        'mtype',
    ]

    def __init__(self,
                 alias=APIHelper.SKIP,
                 defaults=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 display=APIHelper.SKIP,
                 evolved_os=False,
                 evpn_ri_type=APIHelper.SKIP,
                 experimental=False,
                 fans_pluggable=False,
                 has_bgp=False,
                 has_ets=False,
                 has_evpn=False,
                 has_irb=False,
                 has_poe_out=False,
                 has_snapshot=True,
                 has_vc=True,
                 model=APIHelper.SKIP,
                 modular=False,
                 no_shaping_rate=False,
                 number_fans=APIHelper.SKIP,
                 oc_device=False,
                 oob_interface=APIHelper.SKIP,
                 packet_action_drop_only=False,
                 pic=APIHelper.SKIP,
                 sub_required=APIHelper.SKIP,
                 mtype=APIHelper.SKIP):
        """Constructor for the ConstDeviceSwitch class"""

        # Initialize members of the class
        if alias is not APIHelper.SKIP:
            self.alias = alias 
        if defaults is not APIHelper.SKIP:
            self.defaults = defaults 
        if description is not APIHelper.SKIP:
            self.description = description 
        if display is not APIHelper.SKIP:
            self.display = display 
        self.evolved_os = evolved_os 
        if evpn_ri_type is not APIHelper.SKIP:
            self.evpn_ri_type = evpn_ri_type 
        self.experimental = experimental 
        self.fans_pluggable = fans_pluggable 
        self.has_bgp = has_bgp 
        self.has_ets = has_ets 
        self.has_evpn = has_evpn 
        self.has_irb = has_irb 
        self.has_poe_out = has_poe_out 
        self.has_snapshot = has_snapshot 
        self.has_vc = has_vc 
        if model is not APIHelper.SKIP:
            self.model = model 
        self.modular = modular 
        self.no_shaping_rate = no_shaping_rate 
        if number_fans is not APIHelper.SKIP:
            self.number_fans = number_fans 
        self.oc_device = oc_device 
        if oob_interface is not APIHelper.SKIP:
            self.oob_interface = oob_interface 
        self.packet_action_drop_only = packet_action_drop_only 
        if pic is not APIHelper.SKIP:
            self.pic = pic 
        if sub_required is not APIHelper.SKIP:
            self.sub_required = sub_required 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        alias = dictionary.get("alias") if dictionary.get("alias") else APIHelper.SKIP
        defaults = Defaults.from_dictionary(dictionary.get('defaults')) if 'defaults' in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        display = dictionary.get("display") if dictionary.get("display") else APIHelper.SKIP
        evolved_os = dictionary.get("evolved_os") if dictionary.get("evolved_os") else False
        evpn_ri_type = dictionary.get("evpn_ri_type") if dictionary.get("evpn_ri_type") else APIHelper.SKIP
        experimental = dictionary.get("experimental") if dictionary.get("experimental") else False
        fans_pluggable = dictionary.get("fans_pluggable") if dictionary.get("fans_pluggable") else False
        has_bgp = dictionary.get("has_bgp") if dictionary.get("has_bgp") else False
        has_ets = dictionary.get("has_ets") if dictionary.get("has_ets") else False
        has_evpn = dictionary.get("has_evpn") if dictionary.get("has_evpn") else False
        has_irb = dictionary.get("has_irb") if dictionary.get("has_irb") else False
        has_poe_out = dictionary.get("has_poe_out") if dictionary.get("has_poe_out") else False
        has_snapshot = dictionary.get("has_snapshot") if dictionary.get("has_snapshot") else True
        has_vc = dictionary.get("has_vc") if dictionary.get("has_vc") else True
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        modular = dictionary.get("modular") if dictionary.get("modular") else False
        no_shaping_rate = dictionary.get("no_shaping_rate") if dictionary.get("no_shaping_rate") else False
        number_fans = dictionary.get("number_fans") if dictionary.get("number_fans") else APIHelper.SKIP
        oc_device = dictionary.get("oc_device") if dictionary.get("oc_device") else False
        oob_interface = dictionary.get("oob_interface") if dictionary.get("oob_interface") else APIHelper.SKIP
        packet_action_drop_only = dictionary.get("packet_action_drop_only") if dictionary.get("packet_action_drop_only") else False
        pic = dictionary.get("pic") if dictionary.get("pic") else APIHelper.SKIP
        sub_required = dictionary.get("sub_required") if dictionary.get("sub_required") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        # Return an object of this model
        return cls(alias,
                   defaults,
                   description,
                   display,
                   evolved_os,
                   evpn_ri_type,
                   experimental,
                   fans_pluggable,
                   has_bgp,
                   has_ets,
                   has_evpn,
                   has_irb,
                   has_poe_out,
                   has_snapshot,
                   has_vc,
                   model,
                   modular,
                   no_shaping_rate,
                   number_fans,
                   oc_device,
                   oob_interface,
                   packet_action_drop_only,
                   pic,
                   sub_required,
                   mtype)
