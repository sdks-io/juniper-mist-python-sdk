# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.org_auto_rules import OrgAutoRules


class AutoDeviceprofileAssignment(object):

    """Implementation of the 'AutoDeviceprofileAssignment' model.

    TODO: type model description here.

    Attributes:
        enable (bool): TODO: type description here.
        rules (list of OrgAutoRules): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enable": 'enable',
        "rules": 'rules'
    }

    _optionals = [
        'enable',
        'rules',
    ]

    _nullables = [
        'rules',
    ]

    def __init__(self,
                 enable=APIHelper.SKIP,
                 rules=APIHelper.SKIP):
        """Constructor for the AutoDeviceprofileAssignment class"""

        # Initialize members of the class
        if enable is not APIHelper.SKIP:
            self.enable = enable 
        if rules is not APIHelper.SKIP:
            self.rules = rules 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        enable = dictionary.get("enable") if "enable" in dictionary.keys() else APIHelper.SKIP
        if 'rules' in dictionary.keys():
            rules = [OrgAutoRules.from_dictionary(x) for x in dictionary.get('rules')] if dictionary.get('rules') else None
        else:
            rules = APIHelper.SKIP
        # Return an object of this model
        return cls(enable,
                   rules)
