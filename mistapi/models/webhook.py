# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Webhook(object):

    """Implementation of the 'webhook' model.

    TODO: type model description here.

    Attributes:
        created_time (float): TODO: type description here.
        enabled (bool): whether webhook is enabled
        for_site (bool): TODO: type description here.
        headers (object): custom headers : the headers name and value must be
            string, total bytes of headers name and value must be less than
            1000
        id (uuid|string): TODO: type description here.
        modified_time (float): TODO: type description here.
        name (string): name of the webhook
        org_id (uuid|string): TODO: type description here.
        secret (string): only if `type`=`http-post` when `secret` is provided,
            two HTTP headers will be added:   * X-Mist-Signature-v2:
            HMAC_SHA256(secret, body)   * X-Mist-Signature: HMAC_SHA1(secret,
            body)
        site_id (uuid|string): TODO: type description here.
        splunk_token (string): splunk token (If splunk_token is not defined
            for a type Splunk webhook, it will not send, regardless if the
            webhook receiver is configured to accept it.)
        topics (list of TopicEnum): N.B. For org webhooks, only
            device-events/alarms/audits/client-join/client-sessions/nac-session
            s topics are supported.
        mtype (Type41Enum): http-post (default) / splunk / google-pubsub /
            aws-sns
        url (string): TODO: type description here.
        verify_cert (bool): when url uses HTTPS, whether to verify the
            certificate

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "created_time": 'created_time',
        "enabled": 'enabled',
        "for_site": 'for_site',
        "headers": 'headers',
        "id": 'id',
        "modified_time": 'modified_time',
        "name": 'name',
        "org_id": 'org_id',
        "secret": 'secret',
        "site_id": 'site_id',
        "splunk_token": 'splunk_token',
        "topics": 'topics',
        "mtype": 'type',
        "url": 'url',
        "verify_cert": 'verify_cert'
    }

    _optionals = [
        'created_time',
        'enabled',
        'for_site',
        'headers',
        'id',
        'modified_time',
        'name',
        'org_id',
        'secret',
        'site_id',
        'splunk_token',
        'topics',
        'mtype',
        'url',
        'verify_cert',
    ]

    _nullables = [
        'headers',
        'name',
        'secret',
        'splunk_token',
        'mtype',
        'url',
    ]

    def __init__(self,
                 created_time=APIHelper.SKIP,
                 enabled=True,
                 for_site=APIHelper.SKIP,
                 headers=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 secret=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 splunk_token=APIHelper.SKIP,
                 topics=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 url=APIHelper.SKIP,
                 verify_cert=False):
        """Constructor for the Webhook class"""

        # Initialize members of the class
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        self.enabled = enabled 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        if headers is not APIHelper.SKIP:
            self.headers = headers 
        if id is not APIHelper.SKIP:
            self.id = id 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        if name is not APIHelper.SKIP:
            self.name = name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if secret is not APIHelper.SKIP:
            self.secret = secret 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if splunk_token is not APIHelper.SKIP:
            self.splunk_token = splunk_token 
        if topics is not APIHelper.SKIP:
            self.topics = topics 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if url is not APIHelper.SKIP:
            self.url = url 
        self.verify_cert = verify_cert 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        enabled = dictionary.get("enabled") if dictionary.get("enabled") else True
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        headers = dictionary.get("headers") if "headers" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        name = dictionary.get("name") if "name" in dictionary.keys() else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        secret = dictionary.get("secret") if "secret" in dictionary.keys() else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        splunk_token = dictionary.get("splunk_token") if "splunk_token" in dictionary.keys() else APIHelper.SKIP
        topics = dictionary.get("topics") if dictionary.get("topics") else APIHelper.SKIP
        mtype = dictionary.get("type") if "type" in dictionary.keys() else APIHelper.SKIP
        url = dictionary.get("url") if "url" in dictionary.keys() else APIHelper.SKIP
        verify_cert = dictionary.get("verify_cert") if dictionary.get("verify_cert") else False
        # Return an object of this model
        return cls(created_time,
                   enabled,
                   for_site,
                   headers,
                   id,
                   modified_time,
                   name,
                   org_id,
                   secret,
                   site_id,
                   splunk_token,
                   topics,
                   mtype,
                   url,
                   verify_cert)
