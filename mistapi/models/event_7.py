# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.service_packet_1 import ServicePacket1


class Event7(object):

    """Implementation of the 'Event7' model.

    TODO: type model description here.

    Attributes:
        ap_loc (list of float): coordinates (if any) of reporting AP (updated
            once in 60s per client)
        beam (int): antenna index, from 1-8, clock-wise starting from the LED
        device_id (uuid|string): device id of the reporting AP
        ibeacon_major (int): TODO: type description here.
        ibeacon_minor (int): TODO: type description here.
        ibeacon_uuid (uuid|string): TODO: type description here.
        is_asset (bool): TODO: type description here.
        mac (string): MAC of the asset/ beacon
        map_id (uuid|string): TODO: type description here.
        mfg_company_id (string): BLE manufacturing company ID
        mfg_data (string): BLE manufacturing data in hex byte-string format
            (ie: “112233AABBCC”)
        org_id (uuid|string): TODO: type description here.
        rssi (float): signal strength
        service_packets (list of ServicePacket1): TODO: type description
            here.
        site_id (uuid|string): TODO: type description here.
        timestamp (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "beam": 'beam',
        "device_id": 'device_id',
        "mac": 'mac',
        "map_id": 'map_id',
        "org_id": 'org_id',
        "rssi": 'rssi',
        "site_id": 'site_id',
        "ap_loc": 'ap_loc',
        "ibeacon_major": 'ibeacon_major',
        "ibeacon_minor": 'ibeacon_minor',
        "ibeacon_uuid": 'ibeacon_uuid',
        "is_asset": 'is_asset',
        "mfg_company_id": 'mfg_company_id',
        "mfg_data": 'mfg_data',
        "service_packets": 'service_packets',
        "timestamp": 'timestamp'
    }

    _optionals = [
        'ap_loc',
        'ibeacon_major',
        'ibeacon_minor',
        'ibeacon_uuid',
        'is_asset',
        'mfg_company_id',
        'mfg_data',
        'service_packets',
        'timestamp',
    ]

    def __init__(self,
                 beam=None,
                 device_id=None,
                 mac=None,
                 map_id=None,
                 org_id=None,
                 rssi=None,
                 site_id=None,
                 ap_loc=APIHelper.SKIP,
                 ibeacon_major=APIHelper.SKIP,
                 ibeacon_minor=APIHelper.SKIP,
                 ibeacon_uuid=APIHelper.SKIP,
                 is_asset=APIHelper.SKIP,
                 mfg_company_id=APIHelper.SKIP,
                 mfg_data=APIHelper.SKIP,
                 service_packets=APIHelper.SKIP,
                 timestamp=APIHelper.SKIP):
        """Constructor for the Event7 class"""

        # Initialize members of the class
        if ap_loc is not APIHelper.SKIP:
            self.ap_loc = ap_loc 
        self.beam = beam 
        self.device_id = device_id 
        if ibeacon_major is not APIHelper.SKIP:
            self.ibeacon_major = ibeacon_major 
        if ibeacon_minor is not APIHelper.SKIP:
            self.ibeacon_minor = ibeacon_minor 
        if ibeacon_uuid is not APIHelper.SKIP:
            self.ibeacon_uuid = ibeacon_uuid 
        if is_asset is not APIHelper.SKIP:
            self.is_asset = is_asset 
        self.mac = mac 
        self.map_id = map_id 
        if mfg_company_id is not APIHelper.SKIP:
            self.mfg_company_id = mfg_company_id 
        if mfg_data is not APIHelper.SKIP:
            self.mfg_data = mfg_data 
        self.org_id = org_id 
        self.rssi = rssi 
        if service_packets is not APIHelper.SKIP:
            self.service_packets = service_packets 
        self.site_id = site_id 
        if timestamp is not APIHelper.SKIP:
            self.timestamp = timestamp 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        beam = dictionary.get("beam") if dictionary.get("beam") else None
        device_id = dictionary.get("device_id") if dictionary.get("device_id") else None
        mac = dictionary.get("mac") if dictionary.get("mac") else None
        map_id = dictionary.get("map_id") if dictionary.get("map_id") else None
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else None
        rssi = dictionary.get("rssi") if dictionary.get("rssi") else None
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else None
        ap_loc = dictionary.get("ap_loc") if dictionary.get("ap_loc") else APIHelper.SKIP
        ibeacon_major = dictionary.get("ibeacon_major") if dictionary.get("ibeacon_major") else APIHelper.SKIP
        ibeacon_minor = dictionary.get("ibeacon_minor") if dictionary.get("ibeacon_minor") else APIHelper.SKIP
        ibeacon_uuid = dictionary.get("ibeacon_uuid") if dictionary.get("ibeacon_uuid") else APIHelper.SKIP
        is_asset = dictionary.get("is_asset") if "is_asset" in dictionary.keys() else APIHelper.SKIP
        mfg_company_id = dictionary.get("mfg_company_id") if dictionary.get("mfg_company_id") else APIHelper.SKIP
        mfg_data = dictionary.get("mfg_data") if dictionary.get("mfg_data") else APIHelper.SKIP
        service_packets = None
        if dictionary.get('service_packets') is not None:
            service_packets = [ServicePacket1.from_dictionary(x) for x in dictionary.get('service_packets')]
        else:
            service_packets = APIHelper.SKIP
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else APIHelper.SKIP
        # Return an object of this model
        return cls(beam,
                   device_id,
                   mac,
                   map_id,
                   org_id,
                   rssi,
                   site_id,
                   ap_loc,
                   ibeacon_major,
                   ibeacon_minor,
                   ibeacon_uuid,
                   is_asset,
                   mfg_company_id,
                   mfg_data,
                   service_packets,
                   timestamp)
