# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.protect_re_1 import ProtectRe1
from mistapi.models.tacacs_2 import Tacacs2


class SwitchMgmt2(object):

    """Implementation of the 'SwitchMgmt2' model.

    TODO: type model description here.

    Attributes:
        config_revert (int): TODO: type description here.
        protect_re (ProtectRe1): TODO: type description here.
        root_password (string): TODO: type description here.
        tacacs (Tacacs2): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "config_revert": 'config_revert',
        "protect_re": 'protect_re',
        "root_password": 'root_password',
        "tacacs": 'tacacs'
    }

    _optionals = [
        'config_revert',
        'protect_re',
        'root_password',
        'tacacs',
    ]

    def __init__(self,
                 config_revert=10,
                 protect_re=APIHelper.SKIP,
                 root_password=APIHelper.SKIP,
                 tacacs=APIHelper.SKIP):
        """Constructor for the SwitchMgmt2 class"""

        # Initialize members of the class
        self.config_revert = config_revert 
        if protect_re is not APIHelper.SKIP:
            self.protect_re = protect_re 
        if root_password is not APIHelper.SKIP:
            self.root_password = root_password 
        if tacacs is not APIHelper.SKIP:
            self.tacacs = tacacs 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        config_revert = dictionary.get("config_revert") if dictionary.get("config_revert") else 10
        protect_re = ProtectRe1.from_dictionary(dictionary.get('protect_re')) if 'protect_re' in dictionary.keys() else APIHelper.SKIP
        root_password = dictionary.get("root_password") if dictionary.get("root_password") else APIHelper.SKIP
        tacacs = Tacacs2.from_dictionary(dictionary.get('tacacs')) if 'tacacs' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(config_revert,
                   protect_re,
                   root_password,
                   tacacs)
