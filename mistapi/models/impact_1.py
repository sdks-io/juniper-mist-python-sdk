# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Impact1(object):

    """Implementation of the 'Impact1' model.

    TODO: type model description here.

    Attributes:
        num_aps (float): TODO: type description here.
        num_users (float): TODO: type description here.
        total_aps (float): TODO: type description here.
        total_users (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "num_aps": 'num_aps',
        "num_users": 'num_users',
        "total_aps": 'total_aps',
        "total_users": 'total_users'
    }

    def __init__(self,
                 num_aps=None,
                 num_users=None,
                 total_aps=None,
                 total_users=None):
        """Constructor for the Impact1 class"""

        # Initialize members of the class
        self.num_aps = num_aps 
        self.num_users = num_users 
        self.total_aps = total_aps 
        self.total_users = total_users 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        num_aps = dictionary.get("num_aps") if dictionary.get("num_aps") else None
        num_users = dictionary.get("num_users") if dictionary.get("num_users") else None
        total_aps = dictionary.get("total_aps") if dictionary.get("total_aps") else None
        total_users = dictionary.get("total_users") if dictionary.get("total_users") else None
        # Return an object of this model
        return cls(num_aps,
                   num_users,
                   total_aps,
                   total_users)
