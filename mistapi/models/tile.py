# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.metric import Metric
from mistapi.models.time_range import TimeRange


class Tile(object):

    """Implementation of the 'Tile' model.

    TODO: type model description here.

    Attributes:
        chart_band (string): TODO: type description here.
        chart_color (string): TODO: type description here.
        chart_direction (string): TODO: type description here.
        chart_rank_by (string): TODO: type description here.
        chart_type (string): TODO: type description here.
        colspan (int): TODO: type description here.
        column (int): TODO: type description here.
        hide_empty_rows (bool): TODO: type description here.
        id (string): TODO: type description here.
        metric (Metric): TODO: type description here.
        name (string): TODO: type description here.
        row (int): TODO: type description here.
        rowspan (int): TODO: type description here.
        scope_id (string): TODO: type description here.
        scope_type (string): TODO: type description here.
        sorted_columns (object): TODO: type description here.
        time_range (TimeRange): TODO: type description here.
        trend_type (string): TODO: type description here.
        viz_type (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "chart_band": 'chartBand',
        "chart_color": 'chartColor',
        "chart_direction": 'chartDirection',
        "chart_rank_by": 'chartRankBy',
        "chart_type": 'chartType',
        "colspan": 'colspan',
        "column": 'column',
        "hide_empty_rows": 'hideEmptyRows',
        "id": 'id',
        "metric": 'metric',
        "name": 'name',
        "row": 'row',
        "rowspan": 'rowspan',
        "scope_id": 'scopeId',
        "scope_type": 'scopeType',
        "sorted_columns": 'sortedColumns',
        "time_range": 'timeRange',
        "trend_type": 'trendType',
        "viz_type": 'vizType'
    }

    _optionals = [
        'chart_band',
        'chart_color',
        'chart_direction',
        'chart_rank_by',
        'chart_type',
        'colspan',
        'column',
        'hide_empty_rows',
        'id',
        'metric',
        'name',
        'row',
        'rowspan',
        'scope_id',
        'scope_type',
        'sorted_columns',
        'time_range',
        'trend_type',
        'viz_type',
    ]

    def __init__(self,
                 chart_band=APIHelper.SKIP,
                 chart_color=APIHelper.SKIP,
                 chart_direction=APIHelper.SKIP,
                 chart_rank_by=APIHelper.SKIP,
                 chart_type=APIHelper.SKIP,
                 colspan=APIHelper.SKIP,
                 column=APIHelper.SKIP,
                 hide_empty_rows=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 metric=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 row=APIHelper.SKIP,
                 rowspan=APIHelper.SKIP,
                 scope_id=APIHelper.SKIP,
                 scope_type=APIHelper.SKIP,
                 sorted_columns=APIHelper.SKIP,
                 time_range=APIHelper.SKIP,
                 trend_type=APIHelper.SKIP,
                 viz_type=APIHelper.SKIP):
        """Constructor for the Tile class"""

        # Initialize members of the class
        if chart_band is not APIHelper.SKIP:
            self.chart_band = chart_band 
        if chart_color is not APIHelper.SKIP:
            self.chart_color = chart_color 
        if chart_direction is not APIHelper.SKIP:
            self.chart_direction = chart_direction 
        if chart_rank_by is not APIHelper.SKIP:
            self.chart_rank_by = chart_rank_by 
        if chart_type is not APIHelper.SKIP:
            self.chart_type = chart_type 
        if colspan is not APIHelper.SKIP:
            self.colspan = colspan 
        if column is not APIHelper.SKIP:
            self.column = column 
        if hide_empty_rows is not APIHelper.SKIP:
            self.hide_empty_rows = hide_empty_rows 
        if id is not APIHelper.SKIP:
            self.id = id 
        if metric is not APIHelper.SKIP:
            self.metric = metric 
        if name is not APIHelper.SKIP:
            self.name = name 
        if row is not APIHelper.SKIP:
            self.row = row 
        if rowspan is not APIHelper.SKIP:
            self.rowspan = rowspan 
        if scope_id is not APIHelper.SKIP:
            self.scope_id = scope_id 
        if scope_type is not APIHelper.SKIP:
            self.scope_type = scope_type 
        if sorted_columns is not APIHelper.SKIP:
            self.sorted_columns = sorted_columns 
        if time_range is not APIHelper.SKIP:
            self.time_range = time_range 
        if trend_type is not APIHelper.SKIP:
            self.trend_type = trend_type 
        if viz_type is not APIHelper.SKIP:
            self.viz_type = viz_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        chart_band = dictionary.get("chartBand") if dictionary.get("chartBand") else APIHelper.SKIP
        chart_color = dictionary.get("chartColor") if dictionary.get("chartColor") else APIHelper.SKIP
        chart_direction = dictionary.get("chartDirection") if dictionary.get("chartDirection") else APIHelper.SKIP
        chart_rank_by = dictionary.get("chartRankBy") if dictionary.get("chartRankBy") else APIHelper.SKIP
        chart_type = dictionary.get("chartType") if dictionary.get("chartType") else APIHelper.SKIP
        colspan = dictionary.get("colspan") if dictionary.get("colspan") else APIHelper.SKIP
        column = dictionary.get("column") if dictionary.get("column") else APIHelper.SKIP
        hide_empty_rows = dictionary.get("hideEmptyRows") if "hideEmptyRows" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        metric = Metric.from_dictionary(dictionary.get('metric')) if 'metric' in dictionary.keys() else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        row = dictionary.get("row") if dictionary.get("row") else APIHelper.SKIP
        rowspan = dictionary.get("rowspan") if dictionary.get("rowspan") else APIHelper.SKIP
        scope_id = dictionary.get("scopeId") if dictionary.get("scopeId") else APIHelper.SKIP
        scope_type = dictionary.get("scopeType") if dictionary.get("scopeType") else APIHelper.SKIP
        sorted_columns = dictionary.get("sortedColumns") if dictionary.get("sortedColumns") else APIHelper.SKIP
        time_range = TimeRange.from_dictionary(dictionary.get('timeRange')) if 'timeRange' in dictionary.keys() else APIHelper.SKIP
        trend_type = dictionary.get("trendType") if dictionary.get("trendType") else APIHelper.SKIP
        viz_type = dictionary.get("vizType") if dictionary.get("vizType") else APIHelper.SKIP
        # Return an object of this model
        return cls(chart_band,
                   chart_color,
                   chart_direction,
                   chart_rank_by,
                   chart_type,
                   colspan,
                   column,
                   hide_empty_rows,
                   id,
                   metric,
                   name,
                   row,
                   rowspan,
                   scope_id,
                   scope_type,
                   sorted_columns,
                   time_range,
                   trend_type,
                   viz_type)
