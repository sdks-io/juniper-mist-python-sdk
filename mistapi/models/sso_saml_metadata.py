# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class SsoSamlMetadata(object):

    """Implementation of the 'SsoSamlMetadata' model.

    TODO: type model description here.

    Attributes:
        acs_url (string): TODO: type description here.
        entity_id (string): TODO: type description here.
        logout_url (string): TODO: type description here.
        metadata_xml (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "acs_url": 'acs_url',
        "entity_id": 'entity_id',
        "logout_url": 'logout_url',
        "metadata_xml": 'metadata_xml'
    }

    def __init__(self,
                 acs_url=None,
                 entity_id=None,
                 logout_url=None,
                 metadata_xml=None):
        """Constructor for the SsoSamlMetadata class"""

        # Initialize members of the class
        self.acs_url = acs_url 
        self.entity_id = entity_id 
        self.logout_url = logout_url 
        self.metadata_xml = metadata_xml 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        acs_url = dictionary.get("acs_url") if dictionary.get("acs_url") else None
        entity_id = dictionary.get("entity_id") if dictionary.get("entity_id") else None
        logout_url = dictionary.get("logout_url") if dictionary.get("logout_url") else None
        metadata_xml = dictionary.get("metadata_xml") if dictionary.get("metadata_xml") else None
        # Return an object of this model
        return cls(acs_url,
                   entity_id,
                   logout_url,
                   metadata_xml)
