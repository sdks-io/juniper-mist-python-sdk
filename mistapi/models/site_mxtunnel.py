# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.cluster import Cluster
from mistapi.models.radsec_1 import Radsec1


class SiteMxtunnel(object):

    """Implementation of the 'site_mxtunnel' model.

    Site MxTunnel

    Attributes:
        ap_subnets (list of string): list of subnets where we allow AP to
            establish Mist Tunnels from
        clusters (list of Cluster): for AP, how to connect to tunterm or
            radsecproxy
        created_time (float): TODO: type description here.
        for_site (bool): TODO: type description here.
        hello_interval (int): in seconds, used as heartbeat to detect if a
            tunnel is alive. AP will try another peer after missing N hellos
            specified by hello_retries
        hello_retries (int): TODO: type description here.
        hosts (list of string): hostnames or IPs where a Mist Tunnel will use
            as the Peer (i.e. they are reachable from AP)
        id (uuid|string): TODO: type description here.
        modified_time (float): TODO: type description here.
        mtu (int): 0 to enable PMTU, 552-1500 to start PMTU with a lower MTU
        org_id (uuid|string): TODO: type description here.
        protocol (Protocol3Enum): TODO: type description here.
        radsec (Radsec1): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        vlan_ids (list of object): list of vlan_ids that will be use

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ap_subnets": 'ap_subnets',
        "clusters": 'clusters',
        "created_time": 'created_time',
        "for_site": 'for_site',
        "hello_interval": 'hello_interval',
        "hello_retries": 'hello_retries',
        "hosts": 'hosts',
        "id": 'id',
        "modified_time": 'modified_time',
        "mtu": 'mtu',
        "org_id": 'org_id',
        "protocol": 'protocol',
        "radsec": 'radsec',
        "site_id": 'site_id',
        "vlan_ids": 'vlan_ids'
    }

    _optionals = [
        'ap_subnets',
        'clusters',
        'created_time',
        'for_site',
        'hello_interval',
        'hello_retries',
        'hosts',
        'id',
        'modified_time',
        'mtu',
        'org_id',
        'protocol',
        'radsec',
        'site_id',
        'vlan_ids',
    ]

    def __init__(self,
                 ap_subnets=APIHelper.SKIP,
                 clusters=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 for_site=APIHelper.SKIP,
                 hello_interval=60,
                 hello_retries=7,
                 hosts=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 mtu=0,
                 org_id=APIHelper.SKIP,
                 protocol=APIHelper.SKIP,
                 radsec=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 vlan_ids=APIHelper.SKIP):
        """Constructor for the SiteMxtunnel class"""

        # Initialize members of the class
        if ap_subnets is not APIHelper.SKIP:
            self.ap_subnets = ap_subnets 
        if clusters is not APIHelper.SKIP:
            self.clusters = clusters 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        self.hello_interval = hello_interval 
        self.hello_retries = hello_retries 
        if hosts is not APIHelper.SKIP:
            self.hosts = hosts 
        if id is not APIHelper.SKIP:
            self.id = id 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        self.mtu = mtu 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if protocol is not APIHelper.SKIP:
            self.protocol = protocol 
        if radsec is not APIHelper.SKIP:
            self.radsec = radsec 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if vlan_ids is not APIHelper.SKIP:
            self.vlan_ids = vlan_ids 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ap_subnets = dictionary.get("ap_subnets") if dictionary.get("ap_subnets") else APIHelper.SKIP
        clusters = None
        if dictionary.get('clusters') is not None:
            clusters = [Cluster.from_dictionary(x) for x in dictionary.get('clusters')]
        else:
            clusters = APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        hello_interval = dictionary.get("hello_interval") if dictionary.get("hello_interval") else 60
        hello_retries = dictionary.get("hello_retries") if dictionary.get("hello_retries") else 7
        hosts = dictionary.get("hosts") if dictionary.get("hosts") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        mtu = dictionary.get("mtu") if dictionary.get("mtu") else 0
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        protocol = dictionary.get("protocol") if dictionary.get("protocol") else APIHelper.SKIP
        radsec = Radsec1.from_dictionary(dictionary.get('radsec')) if 'radsec' in dictionary.keys() else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        vlan_ids = dictionary.get("vlan_ids") if dictionary.get("vlan_ids") else APIHelper.SKIP
        # Return an object of this model
        return cls(ap_subnets,
                   clusters,
                   created_time,
                   for_site,
                   hello_interval,
                   hello_retries,
                   hosts,
                   id,
                   modified_time,
                   mtu,
                   org_id,
                   protocol,
                   radsec,
                   site_id,
                   vlan_ids)
