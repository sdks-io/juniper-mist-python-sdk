# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class PasswordPolicy(object):

    """Implementation of the 'PasswordPolicy' model.

    password policy

    Attributes:
        enabled (bool): whether the policy is enabled
        freshness (int): days, required if password policy is enabled
        min_length (int): required password length
        requires_special_char (bool): whether to require special character
        requires_two_factor_auth (bool): whether to require two-factor auth

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enabled": 'enabled',
        "freshness": 'freshness',
        "min_length": 'min_length',
        "requires_special_char": 'requires_special_char',
        "requires_two_factor_auth": 'requires_two_factor_auth'
    }

    _optionals = [
        'enabled',
        'freshness',
        'min_length',
        'requires_special_char',
        'requires_two_factor_auth',
    ]

    def __init__(self,
                 enabled=False,
                 freshness=APIHelper.SKIP,
                 min_length=8,
                 requires_special_char=False,
                 requires_two_factor_auth=False):
        """Constructor for the PasswordPolicy class"""

        # Initialize members of the class
        self.enabled = enabled 
        if freshness is not APIHelper.SKIP:
            self.freshness = freshness 
        self.min_length = min_length 
        self.requires_special_char = requires_special_char 
        self.requires_two_factor_auth = requires_two_factor_auth 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        enabled = dictionary.get("enabled") if dictionary.get("enabled") else False
        freshness = dictionary.get("freshness") if dictionary.get("freshness") else APIHelper.SKIP
        min_length = dictionary.get("min_length") if dictionary.get("min_length") else 8
        requires_special_char = dictionary.get("requires_special_char") if dictionary.get("requires_special_char") else False
        requires_two_factor_auth = dictionary.get("requires_two_factor_auth") if dictionary.get("requires_two_factor_auth") else False
        # Return an object of this model
        return cls(enabled,
                   freshness,
                   min_length,
                   requires_special_char,
                   requires_two_factor_auth)
