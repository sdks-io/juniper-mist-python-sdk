# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Event5(object):

    """Implementation of the 'Event5' model.

    TODO: type model description here.

    Attributes:
        ap (string): (will be deprecated soon; please use mac instead) ap mac
        ap_name (string): (will be deprecated soon; please use device_name
            instead) ap name
        audit_id (uuid|string): (optional) audit id
        device_name (string): device name
        device_type (DeviceType1Enum): device type (ap/switch/gateway)
        ev_type (EvTypeEnum): (optional) event advisory (notice/warn)
        mac (string): device mac
        org_id (uuid|string): org id
        reason (string): (optional) event reason
        site_id (uuid|string): site id
        site_name (string): site name
        text (string): (optional) event description
        timestamp (int): time the event occurred e.g. 1565987313
        mtype (string): event type

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_name": 'device_name',
        "device_type": 'device_type',
        "ev_type": 'ev_type',
        "mac": 'mac',
        "org_id": 'org_id',
        "timestamp": 'timestamp',
        "mtype": 'type',
        "ap": 'ap',
        "ap_name": 'ap_name',
        "audit_id": 'audit_id',
        "reason": 'reason',
        "site_id": 'site_id',
        "site_name": 'site_name',
        "text": 'text'
    }

    _optionals = [
        'ap',
        'ap_name',
        'audit_id',
        'reason',
        'site_id',
        'site_name',
        'text',
    ]

    def __init__(self,
                 device_name=None,
                 device_type=None,
                 ev_type=None,
                 mac=None,
                 org_id=None,
                 timestamp=None,
                 mtype=None,
                 ap=APIHelper.SKIP,
                 ap_name=APIHelper.SKIP,
                 audit_id=APIHelper.SKIP,
                 reason=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 site_name=APIHelper.SKIP,
                 text=APIHelper.SKIP):
        """Constructor for the Event5 class"""

        # Initialize members of the class
        if ap is not APIHelper.SKIP:
            self.ap = ap 
        if ap_name is not APIHelper.SKIP:
            self.ap_name = ap_name 
        if audit_id is not APIHelper.SKIP:
            self.audit_id = audit_id 
        self.device_name = device_name 
        self.device_type = device_type 
        self.ev_type = ev_type 
        self.mac = mac 
        self.org_id = org_id 
        if reason is not APIHelper.SKIP:
            self.reason = reason 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if site_name is not APIHelper.SKIP:
            self.site_name = site_name 
        if text is not APIHelper.SKIP:
            self.text = text 
        self.timestamp = timestamp 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        device_name = dictionary.get("device_name") if dictionary.get("device_name") else None
        device_type = dictionary.get("device_type") if dictionary.get("device_type") else None
        ev_type = dictionary.get("ev_type") if dictionary.get("ev_type") else None
        mac = dictionary.get("mac") if dictionary.get("mac") else None
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        ap = dictionary.get("ap") if dictionary.get("ap") else APIHelper.SKIP
        ap_name = dictionary.get("ap_name") if dictionary.get("ap_name") else APIHelper.SKIP
        audit_id = dictionary.get("audit_id") if dictionary.get("audit_id") else APIHelper.SKIP
        reason = dictionary.get("reason") if dictionary.get("reason") else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        site_name = dictionary.get("site_name") if dictionary.get("site_name") else APIHelper.SKIP
        text = dictionary.get("text") if dictionary.get("text") else APIHelper.SKIP
        # Return an object of this model
        return cls(device_name,
                   device_type,
                   ev_type,
                   mac,
                   org_id,
                   timestamp,
                   mtype,
                   ap,
                   ap_name,
                   audit_id,
                   reason,
                   site_id,
                   site_name,
                   text)
