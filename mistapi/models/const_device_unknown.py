# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ConstDeviceUnknown(object):

    """Implementation of the 'const_device_unknown' model.

    TODO: type model description here.

    Attributes:
        ap_type (string): TODO: type description here.
        description (string): TODO: type description here.
        display (string): TODO: type description here.
        has_extio (bool): TODO: type description here.
        has_vble (bool): TODO: type description here.
        has_wifi_band_24 (bool): TODO: type description here.
        has_wifi_band_5 (bool): TODO: type description here.
        model (string): TODO: type description here.
        unmanaged (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ap_type": 'ap_type',
        "description": 'description',
        "display": 'display',
        "has_extio": 'has_extio',
        "has_vble": 'has_vble',
        "has_wifi_band_24": 'has_wifi_band24',
        "has_wifi_band_5": 'has_wifi_band5',
        "model": 'model',
        "unmanaged": 'unmanaged'
    }

    _optionals = [
        'ap_type',
        'description',
        'display',
        'has_extio',
        'has_vble',
        'has_wifi_band_24',
        'has_wifi_band_5',
        'model',
        'unmanaged',
    ]

    def __init__(self,
                 ap_type=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 display=APIHelper.SKIP,
                 has_extio=APIHelper.SKIP,
                 has_vble=APIHelper.SKIP,
                 has_wifi_band_24=APIHelper.SKIP,
                 has_wifi_band_5=APIHelper.SKIP,
                 model=APIHelper.SKIP,
                 unmanaged=APIHelper.SKIP):
        """Constructor for the ConstDeviceUnknown class"""

        # Initialize members of the class
        if ap_type is not APIHelper.SKIP:
            self.ap_type = ap_type 
        if description is not APIHelper.SKIP:
            self.description = description 
        if display is not APIHelper.SKIP:
            self.display = display 
        if has_extio is not APIHelper.SKIP:
            self.has_extio = has_extio 
        if has_vble is not APIHelper.SKIP:
            self.has_vble = has_vble 
        if has_wifi_band_24 is not APIHelper.SKIP:
            self.has_wifi_band_24 = has_wifi_band_24 
        if has_wifi_band_5 is not APIHelper.SKIP:
            self.has_wifi_band_5 = has_wifi_band_5 
        if model is not APIHelper.SKIP:
            self.model = model 
        if unmanaged is not APIHelper.SKIP:
            self.unmanaged = unmanaged 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ap_type = dictionary.get("ap_type") if dictionary.get("ap_type") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        display = dictionary.get("display") if dictionary.get("display") else APIHelper.SKIP
        has_extio = dictionary.get("has_extio") if "has_extio" in dictionary.keys() else APIHelper.SKIP
        has_vble = dictionary.get("has_vble") if "has_vble" in dictionary.keys() else APIHelper.SKIP
        has_wifi_band_24 = dictionary.get("has_wifi_band24") if "has_wifi_band24" in dictionary.keys() else APIHelper.SKIP
        has_wifi_band_5 = dictionary.get("has_wifi_band5") if "has_wifi_band5" in dictionary.keys() else APIHelper.SKIP
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        unmanaged = dictionary.get("unmanaged") if "unmanaged" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(ap_type,
                   description,
                   display,
                   has_extio,
                   has_vble,
                   has_wifi_band_24,
                   has_wifi_band_5,
                   model,
                   unmanaged)
