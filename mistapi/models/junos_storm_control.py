# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class JunosStormControl(object):

    """Implementation of the 'junos_storm_control' model.

    Switch storm control

    Attributes:
        no_broadcast (bool): whether to disable storm control on broadcast
            traffic
        no_multicast (bool): whether to disable storm control on multicast
            traffic
        no_registered_multicast (bool): whether to disable storm control on
            registered multicast traffic
        no_unknown_unicast (bool): whether to disable storm control on unknown
            unicast traffic
        percentage (int): bandwidth-percentage, configures the storm control
            level as a percentage of the available bandwidth

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "no_broadcast": 'no_broadcast',
        "no_multicast": 'no_multicast',
        "no_registered_multicast": 'no_registered_multicast',
        "no_unknown_unicast": 'no_unknown_unicast',
        "percentage": 'percentage'
    }

    _optionals = [
        'no_broadcast',
        'no_multicast',
        'no_registered_multicast',
        'no_unknown_unicast',
        'percentage',
    ]

    def __init__(self,
                 no_broadcast=False,
                 no_multicast=False,
                 no_registered_multicast=False,
                 no_unknown_unicast=False,
                 percentage=80):
        """Constructor for the JunosStormControl class"""

        # Initialize members of the class
        self.no_broadcast = no_broadcast 
        self.no_multicast = no_multicast 
        self.no_registered_multicast = no_registered_multicast 
        self.no_unknown_unicast = no_unknown_unicast 
        self.percentage = percentage 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        no_broadcast = dictionary.get("no_broadcast") if dictionary.get("no_broadcast") else False
        no_multicast = dictionary.get("no_multicast") if dictionary.get("no_multicast") else False
        no_registered_multicast = dictionary.get("no_registered_multicast") if dictionary.get("no_registered_multicast") else False
        no_unknown_unicast = dictionary.get("no_unknown_unicast") if dictionary.get("no_unknown_unicast") else False
        percentage = dictionary.get("percentage") if dictionary.get("percentage") else 80
        # Return an object of this model
        return cls(no_broadcast,
                   no_multicast,
                   no_registered_multicast,
                   no_unknown_unicast,
                   percentage)
