# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Vble(object):

    """Implementation of the 'Vble' model.

    TODO: type model description here.

    Attributes:
        beacon_rate (int): TODO: type description here.
        beams (int): TODO: type description here.
        power (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "beacon_rate": 'beacon_rate',
        "beams": 'beams',
        "power": 'power'
    }

    _optionals = [
        'beacon_rate',
        'beams',
        'power',
    ]

    def __init__(self,
                 beacon_rate=APIHelper.SKIP,
                 beams=APIHelper.SKIP,
                 power=APIHelper.SKIP):
        """Constructor for the Vble class"""

        # Initialize members of the class
        if beacon_rate is not APIHelper.SKIP:
            self.beacon_rate = beacon_rate 
        if beams is not APIHelper.SKIP:
            self.beams = beams 
        if power is not APIHelper.SKIP:
            self.power = power 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        beacon_rate = dictionary.get("beacon_rate") if dictionary.get("beacon_rate") else APIHelper.SKIP
        beams = dictionary.get("beams") if dictionary.get("beams") else APIHelper.SKIP
        power = dictionary.get("power") if dictionary.get("power") else APIHelper.SKIP
        # Return an object of this model
        return cls(beacon_rate,
                   beams,
                   power)
