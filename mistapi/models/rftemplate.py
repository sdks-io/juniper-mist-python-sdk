# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.ap_radio_band import ApRadioBand
from mistapi.models.model_specific import ModelSpecific


class Rftemplate(object):

    """Implementation of the 'rftemplate' model.

    RF Template

    Attributes:
        ant_gain_24 (int): TODO: type description here.
        ant_gain_5 (int): TODO: type description here.
        band_24 (ApRadioBand): Radio Band AP settings
        band_24_usage (Band24Usage1Enum): If `band_24_usage`==`5`, by default,
            `band_5` properties is used, if specific
            channel/bandwidth/power/... If desired, use `band_5_on_24_radio`
        band_5 (ApRadioBand): Radio Band AP settings
        band_5_on_24_radio (ApRadioBand): Radio Band AP settings
        country_code (string): optional, country code to use. If specified,
            this gets applied to all sites using the RF Template
        created_time (float): TODO: type description here.
        for_site (bool): TODO: type description here.
        id (uuid|string): TODO: type description here.
        model_specific (dict): overwrites for a specific model. If a band is
            specified, it will shadow the default. The property key is the
            model name (e.g. "AP63")
        modified_time (float): TODO: type description here.
        name (string): The name of the RF template
        org_id (uuid|string): TODO: type description here.
        scanning_enabled (bool): whether scanning radio is enabled
        site_id (uuid|string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "ant_gain_24": 'ant_gain_24',
        "ant_gain_5": 'ant_gain_5',
        "band_24": 'band_24',
        "band_24_usage": 'band_24_usage',
        "band_5": 'band_5',
        "band_5_on_24_radio": 'band_5_on_24_radio',
        "country_code": 'country_code',
        "created_time": 'created_time',
        "for_site": 'for_site',
        "id": 'id',
        "model_specific": 'model_specific',
        "modified_time": 'modified_time',
        "org_id": 'org_id',
        "scanning_enabled": 'scanning_enabled',
        "site_id": 'site_id'
    }

    _optionals = [
        'ant_gain_24',
        'ant_gain_5',
        'band_24',
        'band_24_usage',
        'band_5',
        'band_5_on_24_radio',
        'country_code',
        'created_time',
        'for_site',
        'id',
        'model_specific',
        'modified_time',
        'org_id',
        'scanning_enabled',
        'site_id',
    ]

    def __init__(self,
                 name=None,
                 ant_gain_24=APIHelper.SKIP,
                 ant_gain_5=APIHelper.SKIP,
                 band_24=APIHelper.SKIP,
                 band_24_usage='24',
                 band_5=APIHelper.SKIP,
                 band_5_on_24_radio=APIHelper.SKIP,
                 country_code=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 for_site=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 model_specific=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 scanning_enabled=APIHelper.SKIP,
                 site_id=APIHelper.SKIP):
        """Constructor for the Rftemplate class"""

        # Initialize members of the class
        if ant_gain_24 is not APIHelper.SKIP:
            self.ant_gain_24 = ant_gain_24 
        if ant_gain_5 is not APIHelper.SKIP:
            self.ant_gain_5 = ant_gain_5 
        if band_24 is not APIHelper.SKIP:
            self.band_24 = band_24 
        self.band_24_usage = band_24_usage 
        if band_5 is not APIHelper.SKIP:
            self.band_5 = band_5 
        if band_5_on_24_radio is not APIHelper.SKIP:
            self.band_5_on_24_radio = band_5_on_24_radio 
        if country_code is not APIHelper.SKIP:
            self.country_code = country_code 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if for_site is not APIHelper.SKIP:
            self.for_site = for_site 
        if id is not APIHelper.SKIP:
            self.id = id 
        if model_specific is not APIHelper.SKIP:
            self.model_specific = model_specific 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        self.name = name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if scanning_enabled is not APIHelper.SKIP:
            self.scanning_enabled = scanning_enabled 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        ant_gain_24 = dictionary.get("ant_gain_24") if dictionary.get("ant_gain_24") else APIHelper.SKIP
        ant_gain_5 = dictionary.get("ant_gain_5") if dictionary.get("ant_gain_5") else APIHelper.SKIP
        band_24 = ApRadioBand.from_dictionary(dictionary.get('band_24')) if 'band_24' in dictionary.keys() else APIHelper.SKIP
        band_24_usage = dictionary.get("band_24_usage") if dictionary.get("band_24_usage") else '24'
        band_5 = ApRadioBand.from_dictionary(dictionary.get('band_5')) if 'band_5' in dictionary.keys() else APIHelper.SKIP
        band_5_on_24_radio = ApRadioBand.from_dictionary(dictionary.get('band_5_on_24_radio')) if 'band_5_on_24_radio' in dictionary.keys() else APIHelper.SKIP
        country_code = dictionary.get("country_code") if dictionary.get("country_code") else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        for_site = dictionary.get("for_site") if "for_site" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        model_specific = ModelSpecific.from_dictionary(dictionary.get('model_specific')) if 'model_specific' in dictionary.keys() else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        scanning_enabled = dictionary.get("scanning_enabled") if "scanning_enabled" in dictionary.keys() else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   ant_gain_24,
                   ant_gain_5,
                   band_24,
                   band_24_usage,
                   band_5,
                   band_5_on_24_radio,
                   country_code,
                   created_time,
                   for_site,
                   id,
                   model_specific,
                   modified_time,
                   org_id,
                   scanning_enabled,
                   site_id)
