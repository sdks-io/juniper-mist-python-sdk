# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Services(object):

    """Implementation of the 'Services' model.

    TODO: type model description here.

    Attributes:
        disable_local (bool): whether to prevent wireless clients to discover
            bonjour devices on the same WLAN
        radius_groups (list of string): optional, if the service is further
            restricted for certain RADIUS groups
        scope (string): how bonjour services should be discovered for the same
            WLAN, same_site (default) / same_map / same_ap

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "disable_local": 'disable_local',
        "radius_groups": 'radius_groups',
        "scope": 'scope'
    }

    _optionals = [
        'disable_local',
        'radius_groups',
        'scope',
    ]

    def __init__(self,
                 disable_local=False,
                 radius_groups=APIHelper.SKIP,
                 scope=APIHelper.SKIP):
        """Constructor for the Services class"""

        # Initialize members of the class
        self.disable_local = disable_local 
        if radius_groups is not APIHelper.SKIP:
            self.radius_groups = radius_groups 
        if scope is not APIHelper.SKIP:
            self.scope = scope 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        disable_local = dictionary.get("disable_local") if dictionary.get("disable_local") else False
        radius_groups = dictionary.get("radius_groups") if dictionary.get("radius_groups") else APIHelper.SKIP
        scope = dictionary.get("scope") if dictionary.get("scope") else APIHelper.SKIP
        # Return an object of this model
        return cls(disable_local,
                   radius_groups,
                   scope)
