# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.version_compliance_1 import VersionCompliance1


class ApiV1SitesStatsGatewaysMetricsResponse(object):

    """Implementation of the 'Api V1 Sites Stats Gateways Metrics Response' model.

    TODO: type model description here.

    Attributes:
        config_success (float): config success score
        version_compliance (VersionCompliance1): version compliance score,
            major version for gateway, type

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "config_success": 'config_success',
        "version_compliance": 'version_compliance'
    }

    _optionals = [
        'config_success',
        'version_compliance',
    ]

    def __init__(self,
                 config_success=APIHelper.SKIP,
                 version_compliance=APIHelper.SKIP):
        """Constructor for the ApiV1SitesStatsGatewaysMetricsResponse class"""

        # Initialize members of the class
        if config_success is not APIHelper.SKIP:
            self.config_success = config_success 
        if version_compliance is not APIHelper.SKIP:
            self.version_compliance = version_compliance 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        config_success = dictionary.get("config_success") if dictionary.get("config_success") else APIHelper.SKIP
        version_compliance = VersionCompliance1.from_dictionary(dictionary.get('version_compliance')) if 'version_compliance' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(config_success,
                   version_compliance)
