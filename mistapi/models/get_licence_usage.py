# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class GetLicenceUsage(object):

    """Implementation of the 'getLicenceUsage' model.

    TODO: type model description here.

    Attributes:
        org_entitled (dict): license entitlement for the entire org
        svna_enabled (bool): license entitlement for the Switch device whether
            SVNA enabled
        trial_enabled (bool): TODO: type description here.
        usages (dict): subscriptions and their quantities
        vna_enabled (bool): license entitlement for the AP device whether VNA
            enabled
        wvna_enabled (bool): license entitlement for the Gateway device
            whether WVNA enabled

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "org_entitled": 'org_entitled',
        "svna_enabled": 'svna_enabled',
        "trial_enabled": 'trial_enabled',
        "usages": 'usages',
        "vna_enabled": 'vna_enabled',
        "wvna_enabled": 'wvna_enabled'
    }

    def __init__(self,
                 org_entitled=None,
                 svna_enabled=None,
                 trial_enabled=None,
                 usages=None,
                 vna_enabled=None,
                 wvna_enabled=None):
        """Constructor for the GetLicenceUsage class"""

        # Initialize members of the class
        self.org_entitled = org_entitled 
        self.svna_enabled = svna_enabled 
        self.trial_enabled = trial_enabled 
        self.usages = usages 
        self.vna_enabled = vna_enabled 
        self.wvna_enabled = wvna_enabled 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        org_entitled = dictionary.get("org_entitled") if dictionary.get("org_entitled") else None
        svna_enabled = dictionary.get("svna_enabled") if "svna_enabled" in dictionary.keys() else None
        trial_enabled = dictionary.get("trial_enabled") if "trial_enabled" in dictionary.keys() else None
        usages = dictionary.get("usages") if dictionary.get("usages") else None
        vna_enabled = dictionary.get("vna_enabled") if "vna_enabled" in dictionary.keys() else None
        wvna_enabled = dictionary.get("wvna_enabled") if "wvna_enabled" in dictionary.keys() else None
        # Return an object of this model
        return cls(org_entitled,
                   svna_enabled,
                   trial_enabled,
                   usages,
                   vna_enabled,
                   wvna_enabled)
