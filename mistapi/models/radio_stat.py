# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.band_242 import Band242
from mistapi.models.band_53 import Band53
from mistapi.models.band_62 import Band62


class RadioStat(object):

    """Implementation of the 'RadioStat' model.

    a map of radio stats, key can be band_24 / band_5

    Attributes:
        band_24 (Band242): radio stat of 2.4G radio
        band_5 (Band53): radio stat of 5G radio
        band_6 (Band62): radio stat of 6G radio

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "band_24": 'band_24',
        "band_5": 'band_5',
        "band_6": 'band_6'
    }

    _optionals = [
        'band_24',
        'band_5',
        'band_6',
    ]

    def __init__(self,
                 band_24=APIHelper.SKIP,
                 band_5=APIHelper.SKIP,
                 band_6=APIHelper.SKIP):
        """Constructor for the RadioStat class"""

        # Initialize members of the class
        if band_24 is not APIHelper.SKIP:
            self.band_24 = band_24 
        if band_5 is not APIHelper.SKIP:
            self.band_5 = band_5 
        if band_6 is not APIHelper.SKIP:
            self.band_6 = band_6 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        band_24 = Band242.from_dictionary(dictionary.get('band_24')) if 'band_24' in dictionary.keys() else APIHelper.SKIP
        band_5 = Band53.from_dictionary(dictionary.get('band_5')) if 'band_5' in dictionary.keys() else APIHelper.SKIP
        band_6 = Band62.from_dictionary(dictionary.get('band_6')) if 'band_6' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(band_24,
                   band_5,
                   band_6)
