# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class EventsClient(object):

    """Implementation of the 'events_client' model.

    client events

    Attributes:
        ap (string): TODO: type description here.
        band (Band7Enum): TODO: type description here.
        bssid (string): TODO: type description here.
        channel (int): TODO: type description here.
        proto (ProtoEnum): b / g / n / a / ac
        ssid (string): TODO: type description here.
        text (string): TODO: type description here.
        timestamp (float): TODO: type description here.
        mtype (string): event type, e.g. MARVIS_EVENT_CLIENT_FBT_FAILURE
        type_code (int): for assoc/disassoc events
        wlan_id (uuid|string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "band": 'band',
        "proto": 'proto',
        "timestamp": 'timestamp',
        "ap": 'ap',
        "bssid": 'bssid',
        "channel": 'channel',
        "ssid": 'ssid',
        "text": 'text',
        "mtype": 'type',
        "type_code": 'type_code',
        "wlan_id": 'wlan_id'
    }

    _optionals = [
        'ap',
        'bssid',
        'channel',
        'ssid',
        'text',
        'mtype',
        'type_code',
        'wlan_id',
    ]

    def __init__(self,
                 band=None,
                 proto=None,
                 timestamp=None,
                 ap=APIHelper.SKIP,
                 bssid=APIHelper.SKIP,
                 channel=APIHelper.SKIP,
                 ssid=APIHelper.SKIP,
                 text=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 type_code=APIHelper.SKIP,
                 wlan_id=APIHelper.SKIP):
        """Constructor for the EventsClient class"""

        # Initialize members of the class
        if ap is not APIHelper.SKIP:
            self.ap = ap 
        self.band = band 
        if bssid is not APIHelper.SKIP:
            self.bssid = bssid 
        if channel is not APIHelper.SKIP:
            self.channel = channel 
        self.proto = proto 
        if ssid is not APIHelper.SKIP:
            self.ssid = ssid 
        if text is not APIHelper.SKIP:
            self.text = text 
        self.timestamp = timestamp 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if type_code is not APIHelper.SKIP:
            self.type_code = type_code 
        if wlan_id is not APIHelper.SKIP:
            self.wlan_id = wlan_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        band = dictionary.get("band") if dictionary.get("band") else None
        proto = dictionary.get("proto") if dictionary.get("proto") else None
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else None
        ap = dictionary.get("ap") if dictionary.get("ap") else APIHelper.SKIP
        bssid = dictionary.get("bssid") if dictionary.get("bssid") else APIHelper.SKIP
        channel = dictionary.get("channel") if dictionary.get("channel") else APIHelper.SKIP
        ssid = dictionary.get("ssid") if dictionary.get("ssid") else APIHelper.SKIP
        text = dictionary.get("text") if dictionary.get("text") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        type_code = dictionary.get("type_code") if dictionary.get("type_code") else APIHelper.SKIP
        wlan_id = dictionary.get("wlan_id") if dictionary.get("wlan_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(band,
                   proto,
                   timestamp,
                   ap,
                   bssid,
                   channel,
                   ssid,
                   text,
                   mtype,
                   type_code,
                   wlan_id)
