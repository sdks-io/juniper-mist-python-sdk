# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.notify import Notify
from mistapi.models.notify_filter import NotifyFilter
from mistapi.models.target_address import TargetAddress
from mistapi.models.target_parameter import TargetParameter
from mistapi.models.usm import Usm
from mistapi.models.vacm import Vacm


class V3Config(object):

    """Implementation of the 'V3Config' model.

    TODO: type model description here.

    Attributes:
        notify (list of Notify): TODO: type description here.
        notify_filter (list of NotifyFilter): TODO: type description here.
        target_address (list of TargetAddress): TODO: type description here.
        target_parameters (list of TargetParameter): TODO: type description
            here.
        usm (Usm): TODO: type description here.
        vacm (Vacm): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "notify": 'notify',
        "notify_filter": 'notify_filter',
        "target_address": 'target_address',
        "target_parameters": 'target_parameters',
        "usm": 'usm',
        "vacm": 'vacm'
    }

    _optionals = [
        'notify',
        'notify_filter',
        'target_address',
        'target_parameters',
        'usm',
        'vacm',
    ]

    def __init__(self,
                 notify=APIHelper.SKIP,
                 notify_filter=APIHelper.SKIP,
                 target_address=APIHelper.SKIP,
                 target_parameters=APIHelper.SKIP,
                 usm=APIHelper.SKIP,
                 vacm=APIHelper.SKIP):
        """Constructor for the V3Config class"""

        # Initialize members of the class
        if notify is not APIHelper.SKIP:
            self.notify = notify 
        if notify_filter is not APIHelper.SKIP:
            self.notify_filter = notify_filter 
        if target_address is not APIHelper.SKIP:
            self.target_address = target_address 
        if target_parameters is not APIHelper.SKIP:
            self.target_parameters = target_parameters 
        if usm is not APIHelper.SKIP:
            self.usm = usm 
        if vacm is not APIHelper.SKIP:
            self.vacm = vacm 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        notify = None
        if dictionary.get('notify') is not None:
            notify = [Notify.from_dictionary(x) for x in dictionary.get('notify')]
        else:
            notify = APIHelper.SKIP
        notify_filter = None
        if dictionary.get('notify_filter') is not None:
            notify_filter = [NotifyFilter.from_dictionary(x) for x in dictionary.get('notify_filter')]
        else:
            notify_filter = APIHelper.SKIP
        target_address = None
        if dictionary.get('target_address') is not None:
            target_address = [TargetAddress.from_dictionary(x) for x in dictionary.get('target_address')]
        else:
            target_address = APIHelper.SKIP
        target_parameters = None
        if dictionary.get('target_parameters') is not None:
            target_parameters = [TargetParameter.from_dictionary(x) for x in dictionary.get('target_parameters')]
        else:
            target_parameters = APIHelper.SKIP
        usm = Usm.from_dictionary(dictionary.get('usm')) if 'usm' in dictionary.keys() else APIHelper.SKIP
        vacm = Vacm.from_dictionary(dictionary.get('vacm')) if 'vacm' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(notify,
                   notify_filter,
                   target_address,
                   target_parameters,
                   usm,
                   vacm)
