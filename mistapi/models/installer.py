# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Installer(object):

    """Implementation of the 'Installer' model.

    TODO: type model description here.

    Attributes:
        allow_all_devices (bool): TODO: type description here.
        allow_all_sites (bool): TODO: type description here.
        extra_site_ids (list of uuid|string): TODO: type description here.
        grace_period (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "allow_all_devices": 'allow_all_devices',
        "allow_all_sites": 'allow_all_sites',
        "extra_site_ids": 'extra_site_ids',
        "grace_period": 'grace_period'
    }

    _optionals = [
        'allow_all_devices',
        'allow_all_sites',
        'extra_site_ids',
        'grace_period',
    ]

    def __init__(self,
                 allow_all_devices=APIHelper.SKIP,
                 allow_all_sites=APIHelper.SKIP,
                 extra_site_ids=APIHelper.SKIP,
                 grace_period=APIHelper.SKIP):
        """Constructor for the Installer class"""

        # Initialize members of the class
        if allow_all_devices is not APIHelper.SKIP:
            self.allow_all_devices = allow_all_devices 
        if allow_all_sites is not APIHelper.SKIP:
            self.allow_all_sites = allow_all_sites 
        if extra_site_ids is not APIHelper.SKIP:
            self.extra_site_ids = extra_site_ids 
        if grace_period is not APIHelper.SKIP:
            self.grace_period = grace_period 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        allow_all_devices = dictionary.get("allow_all_devices") if "allow_all_devices" in dictionary.keys() else APIHelper.SKIP
        allow_all_sites = dictionary.get("allow_all_sites") if "allow_all_sites" in dictionary.keys() else APIHelper.SKIP
        extra_site_ids = dictionary.get("extra_site_ids") if dictionary.get("extra_site_ids") else APIHelper.SKIP
        grace_period = dictionary.get("grace_period") if dictionary.get("grace_period") else APIHelper.SKIP
        # Return an object of this model
        return cls(allow_all_devices,
                   allow_all_sites,
                   extra_site_ids,
                   grace_period)
