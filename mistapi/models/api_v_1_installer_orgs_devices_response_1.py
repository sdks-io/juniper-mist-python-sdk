# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.models.inventory_added import InventoryAdded
from mistapi.models.inventory_duplicated import InventoryDuplicated


class ApiV1InstallerOrgsDevicesResponse1(object):

    """Implementation of the 'Api V1 Installer Orgs Devices Response1' model.

    TODO: type model description here.

    Attributes:
        added (list of string): TODO: type description here.
        duplicated (list of string): TODO: type description here.
        error (list of string): TODO: type description here.
        inventory_added (list of InventoryAdded): TODO: type description
            here.
        inventory_duplicated (list of InventoryDuplicated): TODO: type
            description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "added": 'added',
        "duplicated": 'duplicated',
        "error": 'error',
        "inventory_added": 'inventory_added',
        "inventory_duplicated": 'inventory_duplicated'
    }

    def __init__(self,
                 added=None,
                 duplicated=None,
                 error=None,
                 inventory_added=None,
                 inventory_duplicated=None):
        """Constructor for the ApiV1InstallerOrgsDevicesResponse1 class"""

        # Initialize members of the class
        self.added = added 
        self.duplicated = duplicated 
        self.error = error 
        self.inventory_added = inventory_added 
        self.inventory_duplicated = inventory_duplicated 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        added = dictionary.get("added") if dictionary.get("added") else None
        duplicated = dictionary.get("duplicated") if dictionary.get("duplicated") else None
        error = dictionary.get("error") if dictionary.get("error") else None
        inventory_added = None
        if dictionary.get('inventory_added') is not None:
            inventory_added = [InventoryAdded.from_dictionary(x) for x in dictionary.get('inventory_added')]
        inventory_duplicated = None
        if dictionary.get('inventory_duplicated') is not None:
            inventory_duplicated = [InventoryDuplicated.from_dictionary(x) for x in dictionary.get('inventory_duplicated')]
        # Return an object of this model
        return cls(added,
                   duplicated,
                   error,
                   inventory_added,
                   inventory_duplicated)
