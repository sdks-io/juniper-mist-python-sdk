# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class JunosIdpConfig(object):

    """Implementation of the 'junos_idp_config' model.

    TODO: type model description here.

    Attributes:
        alert_only (string): TODO: type description here.
        enabled (bool): TODO: type description here.
        idpprofile_id (uuid|string): org-level IDP Profile can be used, this
            takes precedence over `profile`
        profile (string): `strict` (default) / `standard` / or keys from from
            idp_profiles

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "alert_only": 'alert_only',
        "enabled": 'enabled',
        "idpprofile_id": 'idpprofile_id',
        "profile": 'profile'
    }

    _optionals = [
        'alert_only',
        'enabled',
        'idpprofile_id',
        'profile',
    ]

    def __init__(self,
                 alert_only=APIHelper.SKIP,
                 enabled=False,
                 idpprofile_id=APIHelper.SKIP,
                 profile='strict'):
        """Constructor for the JunosIdpConfig class"""

        # Initialize members of the class
        if alert_only is not APIHelper.SKIP:
            self.alert_only = alert_only 
        self.enabled = enabled 
        if idpprofile_id is not APIHelper.SKIP:
            self.idpprofile_id = idpprofile_id 
        self.profile = profile 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        alert_only = dictionary.get("alert_only") if dictionary.get("alert_only") else APIHelper.SKIP
        enabled = dictionary.get("enabled") if dictionary.get("enabled") else False
        idpprofile_id = dictionary.get("idpprofile_id") if dictionary.get("idpprofile_id") else APIHelper.SKIP
        profile = dictionary.get("profile") if dictionary.get("profile") else 'strict'
        # Return an object of this model
        return cls(alert_only,
                   enabled,
                   idpprofile_id,
                   profile)
