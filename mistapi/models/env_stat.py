# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class EnvStat(object):

    """Implementation of the 'EnvStat' model.

    device environment, including CPU temperature, Ambient temperature,
    Humidity, Attitude, Pressure, Accelerometers, Magnetometers and vCore
    Voltage

    Attributes:
        accel_x (float): TODO: type description here.
        accel_y (float): TODO: type description here.
        accel_z (float): TODO: type description here.
        ambient_temp (int): TODO: type description here.
        attitude (int): TODO: type description here.
        cpu_temp (int): TODO: type description here.
        humidity (int): TODO: type description here.
        magne_x (float): TODO: type description here.
        magne_y (float): TODO: type description here.
        magne_z (float): TODO: type description here.
        pressure (int): TODO: type description here.
        vcore_voltage (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "accel_x": 'accel_x',
        "accel_y": 'accel_y',
        "accel_z": 'accel_z',
        "ambient_temp": 'ambient_temp',
        "attitude": 'attitude',
        "cpu_temp": 'cpu_temp',
        "humidity": 'humidity',
        "magne_x": 'magne_x',
        "magne_y": 'magne_y',
        "magne_z": 'magne_z',
        "pressure": 'pressure',
        "vcore_voltage": 'vcore_voltage'
    }

    _optionals = [
        'accel_x',
        'accel_y',
        'accel_z',
        'ambient_temp',
        'attitude',
        'cpu_temp',
        'humidity',
        'magne_x',
        'magne_y',
        'magne_z',
        'pressure',
        'vcore_voltage',
    ]

    def __init__(self,
                 accel_x=APIHelper.SKIP,
                 accel_y=APIHelper.SKIP,
                 accel_z=APIHelper.SKIP,
                 ambient_temp=APIHelper.SKIP,
                 attitude=APIHelper.SKIP,
                 cpu_temp=APIHelper.SKIP,
                 humidity=APIHelper.SKIP,
                 magne_x=APIHelper.SKIP,
                 magne_y=APIHelper.SKIP,
                 magne_z=APIHelper.SKIP,
                 pressure=APIHelper.SKIP,
                 vcore_voltage=APIHelper.SKIP):
        """Constructor for the EnvStat class"""

        # Initialize members of the class
        if accel_x is not APIHelper.SKIP:
            self.accel_x = accel_x 
        if accel_y is not APIHelper.SKIP:
            self.accel_y = accel_y 
        if accel_z is not APIHelper.SKIP:
            self.accel_z = accel_z 
        if ambient_temp is not APIHelper.SKIP:
            self.ambient_temp = ambient_temp 
        if attitude is not APIHelper.SKIP:
            self.attitude = attitude 
        if cpu_temp is not APIHelper.SKIP:
            self.cpu_temp = cpu_temp 
        if humidity is not APIHelper.SKIP:
            self.humidity = humidity 
        if magne_x is not APIHelper.SKIP:
            self.magne_x = magne_x 
        if magne_y is not APIHelper.SKIP:
            self.magne_y = magne_y 
        if magne_z is not APIHelper.SKIP:
            self.magne_z = magne_z 
        if pressure is not APIHelper.SKIP:
            self.pressure = pressure 
        if vcore_voltage is not APIHelper.SKIP:
            self.vcore_voltage = vcore_voltage 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        accel_x = dictionary.get("accel_x") if dictionary.get("accel_x") else APIHelper.SKIP
        accel_y = dictionary.get("accel_y") if dictionary.get("accel_y") else APIHelper.SKIP
        accel_z = dictionary.get("accel_z") if dictionary.get("accel_z") else APIHelper.SKIP
        ambient_temp = dictionary.get("ambient_temp") if dictionary.get("ambient_temp") else APIHelper.SKIP
        attitude = dictionary.get("attitude") if dictionary.get("attitude") else APIHelper.SKIP
        cpu_temp = dictionary.get("cpu_temp") if dictionary.get("cpu_temp") else APIHelper.SKIP
        humidity = dictionary.get("humidity") if dictionary.get("humidity") else APIHelper.SKIP
        magne_x = dictionary.get("magne_x") if dictionary.get("magne_x") else APIHelper.SKIP
        magne_y = dictionary.get("magne_y") if dictionary.get("magne_y") else APIHelper.SKIP
        magne_z = dictionary.get("magne_z") if dictionary.get("magne_z") else APIHelper.SKIP
        pressure = dictionary.get("pressure") if dictionary.get("pressure") else APIHelper.SKIP
        vcore_voltage = dictionary.get("vcore_voltage") if dictionary.get("vcore_voltage") else APIHelper.SKIP
        # Return an object of this model
        return cls(accel_x,
                   accel_y,
                   accel_z,
                   ambient_temp,
                   attitude,
                   cpu_temp,
                   humidity,
                   magne_x,
                   magne_y,
                   magne_z,
                   pressure,
                   vcore_voltage)
