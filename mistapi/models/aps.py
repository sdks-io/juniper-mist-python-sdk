# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Aps(object):

    """Implementation of the 'Aps' model.

    Property key is the AP MAC address (e.g. "5c5b35000001"). All optionals,
    parent parameters will be used if not defined

    Attributes:
        band (Band3Enum): Only Single value allowed
        channel (string): specify the channel value where scan PCAP has to be
            started
        tcpdump_expression (string): tcpdump expression, port specific if
            specified under ports dict, otherwise applicable across ports if
            specified at top level of payload. Port specific value overrides
            top level value when both exist.
        width (string): specify the bandwidth value with respect to the
            channel.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "band": 'band',
        "channel": 'channel',
        "tcpdump_expression": 'tcpdump_expression',
        "width": 'width'
    }

    _optionals = [
        'band',
        'channel',
        'tcpdump_expression',
        'width',
    ]

    def __init__(self,
                 band='24',
                 channel=APIHelper.SKIP,
                 tcpdump_expression=APIHelper.SKIP,
                 width=APIHelper.SKIP):
        """Constructor for the Aps class"""

        # Initialize members of the class
        self.band = band 
        if channel is not APIHelper.SKIP:
            self.channel = channel 
        if tcpdump_expression is not APIHelper.SKIP:
            self.tcpdump_expression = tcpdump_expression 
        if width is not APIHelper.SKIP:
            self.width = width 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        band = dictionary.get("band") if dictionary.get("band") else '24'
        channel = dictionary.get("channel") if dictionary.get("channel") else APIHelper.SKIP
        tcpdump_expression = dictionary.get("tcpdump_expression") if dictionary.get("tcpdump_expression") else APIHelper.SKIP
        width = dictionary.get("width") if dictionary.get("width") else APIHelper.SKIP
        # Return an object of this model
        return cls(band,
                   channel,
                   tcpdump_expression,
                   width)
