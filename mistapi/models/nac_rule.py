# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.nac_rule_matching import NacRuleMatching


class NacRule(object):

    """Implementation of the 'nac_rule' model.

    TODO: type model description here.

    Attributes:
        action (Action5Enum): TODO: type description here.
        apply_tags (list of string): all optional, this goes into
            Access-Accept
        created_time (int): TODO: type description here.
        enabled (bool): enabled or not
        id (uuid|string): TODO: type description here.
        matching (NacRuleMatching): TODO: type description here.
        modified_time (int): TODO: type description here.
        name (string): TODO: type description here.
        not_matching (NacRuleMatching): TODO: type description here.
        order (float): the order of the rule, lower value implies higher
            priority
        org_id (uuid|string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "action": 'action',
        "name": 'name',
        "apply_tags": 'apply_tags',
        "created_time": 'created_time',
        "enabled": 'enabled',
        "id": 'id',
        "matching": 'matching',
        "modified_time": 'modified_time',
        "not_matching": 'not_matching',
        "order": 'order',
        "org_id": 'org_id'
    }

    _optionals = [
        'apply_tags',
        'created_time',
        'enabled',
        'id',
        'matching',
        'modified_time',
        'not_matching',
        'order',
        'org_id',
    ]

    def __init__(self,
                 action=None,
                 name=None,
                 apply_tags=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 enabled=True,
                 id=APIHelper.SKIP,
                 matching=APIHelper.SKIP,
                 modified_time=APIHelper.SKIP,
                 not_matching=APIHelper.SKIP,
                 order=APIHelper.SKIP,
                 org_id=APIHelper.SKIP):
        """Constructor for the NacRule class"""

        # Initialize members of the class
        self.action = action 
        if apply_tags is not APIHelper.SKIP:
            self.apply_tags = apply_tags 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        self.enabled = enabled 
        if id is not APIHelper.SKIP:
            self.id = id 
        if matching is not APIHelper.SKIP:
            self.matching = matching 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        self.name = name 
        if not_matching is not APIHelper.SKIP:
            self.not_matching = not_matching 
        if order is not APIHelper.SKIP:
            self.order = order 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        action = dictionary.get("action") if dictionary.get("action") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        apply_tags = dictionary.get("apply_tags") if dictionary.get("apply_tags") else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        enabled = dictionary.get("enabled") if dictionary.get("enabled") else True
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        matching = NacRuleMatching.from_dictionary(dictionary.get('matching')) if 'matching' in dictionary.keys() else APIHelper.SKIP
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        not_matching = NacRuleMatching.from_dictionary(dictionary.get('not_matching')) if 'not_matching' in dictionary.keys() else APIHelper.SKIP
        order = dictionary.get("order") if dictionary.get("order") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(action,
                   name,
                   apply_tags,
                   created_time,
                   enabled,
                   id,
                   matching,
                   modified_time,
                   not_matching,
                   order,
                   org_id)
