# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.band_6 import Band6
from mistapi.models.defaults_1 import Defaults1
from mistapi.models.extio import Extio
from mistapi.models.ports_1 import Ports1
from mistapi.models.vble import Vble


class ConstDeviceModel(object):

    """Implementation of the 'ConstDeviceModel' model.

    TODO: type model description here.

    Attributes:
        ap_type (string): TODO: type description here.
        band_24 (Band6): TODO: type description here.
        band_5 (Band6): TODO: type description here.
        band_6 (Band6): TODO: type description here.
        ce_dfs_ok (bool): TODO: type description here.
        cisco_pace (bool): TODO: type description here.
        description (string): TODO: type description here.
        disallowed_channels (dict): Property key is a list of country codes
            (e.g. "GB, DE")
        display (string): TODO: type description here.
        extio (dict): Property key is the GPIO port name (e.g. "D0", "A1")
        fcc_dfs_ok (bool): TODO: type description here.
        has_11_ax (bool): TODO: type description here.
        has_compass (bool): TODO: type description here.
        has_ext_ant (bool): TODO: type description here.
        has_extio (bool): TODO: type description here.
        has_height (bool): TODO: type description here.
        has_module_port (bool): TODO: type description here.
        has_poe_out (bool): TODO: type description here.
        has_scanning_radio (bool): TODO: type description here.
        has_selectable_radio (bool): TODO: type description here.
        has_usb (bool): TODO: type description here.
        has_vble (bool): TODO: type description here.
        has_wifi_band_24 (bool): TODO: type description here.
        has_wifi_band_5 (bool): TODO: type description here.
        has_wifi_band_6 (bool): TODO: type description here.
        max_poe_out (int): TODO: type description here.
        max_wlans (int): TODO: type description here.
        model (string): TODO: type description here.
        other_dfs_ok (bool): TODO: type description here.
        outdoor (bool): TODO: type description here.
        radios (dict): Property key is the radio number (e.g. r0, r1, ...).
            Property value is the RF band (e.g. "24", "5", ...)
        shared_scanning_radio (bool): TODO: type description here.
        mtype (Type8Enum): TODO: type description here.
        unmanaged (bool): TODO: type description here.
        vble (Vble): TODO: type description here.
        alias (string): TODO: type description here.
        defaults (Defaults1): Object Key is the interface type name (e.g.
            "lan_ports", "wan_ports", ...)
        evolved_os (bool): TODO: type description here.
        evpn_ri_type (string): TODO: type description here.
        experimental (bool): TODO: type description here.
        fans_pluggable (bool): TODO: type description here.
        has_bgp (bool): TODO: type description here.
        has_ets (bool): TODO: type description here.
        has_evpn (bool): TODO: type description here.
        has_irb (bool): TODO: type description here.
        has_snapshot (bool): TODO: type description here.
        has_vc (bool): TODO: type description here.
        modular (bool): TODO: type description here.
        no_shaping_rate (bool): TODO: type description here.
        number_fans (int): TODO: type description here.
        oc_device (bool): TODO: type description here.
        oob_interface (string): TODO: type description here.
        packet_action_drop_only (bool): TODO: type description here.
        pic (dict): Object Key is the PIC number
        sub_required (string): TODO: type description here.
        ha_node_0_fpc (int): TODO: type description here.
        ha_node_1_fpc (int): TODO: type description here.
        has_fxp_0 (bool): TODO: type description here.
        has_ha_control (bool): TODO: type description here.
        has_ha_data (bool): TODO: type description here.
        irb_disabled_by_default (bool): TODO: type description here.
        ports (Ports1): Object Key is the interface name (e.g. "ge-0/0/1",
            ...)
        t_128_device (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ap_type": 'ap_type',
        "band_24": 'band24',
        "band_5": 'band5',
        "band_6": 'band6',
        "ce_dfs_ok": 'ce_dfs_ok',
        "cisco_pace": 'cisco_pace',
        "description": 'description',
        "disallowed_channels": 'disallowed_channels',
        "display": 'display',
        "extio": 'extio',
        "fcc_dfs_ok": 'fcc_dfs_ok',
        "has_11_ax": 'has_11ax',
        "has_compass": 'has_compass',
        "has_ext_ant": 'has_ext_ant',
        "has_extio": 'has_extio',
        "has_height": 'has_height',
        "has_module_port": 'has_module_port',
        "has_poe_out": 'has_poe_out',
        "has_scanning_radio": 'has_scanning_radio',
        "has_selectable_radio": 'has_selectable_radio',
        "has_usb": 'has_usb',
        "has_vble": 'has_vble',
        "has_wifi_band_24": 'has_wifi_band24',
        "has_wifi_band_5": 'has_wifi_band5',
        "has_wifi_band_6": 'has_wifi_band6',
        "max_poe_out": 'max_poe_out',
        "max_wlans": 'max_wlans',
        "model": 'model',
        "other_dfs_ok": 'other_dfs_ok',
        "outdoor": 'outdoor',
        "radios": 'radios',
        "shared_scanning_radio": 'shared_scanning_radio',
        "mtype": 'type',
        "unmanaged": 'unmanaged',
        "vble": 'vble',
        "alias": 'alias',
        "defaults": 'defaults',
        "evolved_os": 'evolved_os',
        "evpn_ri_type": 'evpn_ri_type',
        "experimental": 'experimental',
        "fans_pluggable": 'fans_pluggable',
        "has_bgp": 'has_bgp',
        "has_ets": 'has_ets',
        "has_evpn": 'has_evpn',
        "has_irb": 'has_irb',
        "has_snapshot": 'has_snapshot',
        "has_vc": 'has_vc',
        "modular": 'modular',
        "no_shaping_rate": 'no_shaping_rate',
        "number_fans": 'number_fans',
        "oc_device": 'oc_device',
        "oob_interface": 'oob_interface',
        "packet_action_drop_only": 'packet_action_drop_only',
        "pic": 'pic',
        "sub_required": 'sub_required',
        "ha_node_0_fpc": 'ha_node0_fpc',
        "ha_node_1_fpc": 'ha_node1_fpc',
        "has_fxp_0": 'has_fxp0',
        "has_ha_control": 'has_ha_control',
        "has_ha_data": 'has_ha_data',
        "irb_disabled_by_default": 'irb_disabled_by_default',
        "ports": 'ports',
        "t_128_device": 't128_device'
    }

    _optionals = [
        'ap_type',
        'band_24',
        'band_5',
        'band_6',
        'ce_dfs_ok',
        'cisco_pace',
        'description',
        'disallowed_channels',
        'display',
        'extio',
        'fcc_dfs_ok',
        'has_11_ax',
        'has_compass',
        'has_ext_ant',
        'has_extio',
        'has_height',
        'has_module_port',
        'has_poe_out',
        'has_scanning_radio',
        'has_selectable_radio',
        'has_usb',
        'has_vble',
        'has_wifi_band_24',
        'has_wifi_band_5',
        'has_wifi_band_6',
        'max_poe_out',
        'max_wlans',
        'model',
        'other_dfs_ok',
        'outdoor',
        'radios',
        'shared_scanning_radio',
        'mtype',
        'unmanaged',
        'vble',
        'alias',
        'defaults',
        'evolved_os',
        'evpn_ri_type',
        'experimental',
        'fans_pluggable',
        'has_bgp',
        'has_ets',
        'has_evpn',
        'has_irb',
        'has_snapshot',
        'has_vc',
        'modular',
        'no_shaping_rate',
        'number_fans',
        'oc_device',
        'oob_interface',
        'packet_action_drop_only',
        'pic',
        'sub_required',
        'ha_node_0_fpc',
        'ha_node_1_fpc',
        'has_fxp_0',
        'has_ha_control',
        'has_ha_data',
        'irb_disabled_by_default',
        'ports',
        't_128_device',
    ]

    def __init__(self,
                 ap_type=APIHelper.SKIP,
                 band_24=APIHelper.SKIP,
                 band_5=APIHelper.SKIP,
                 band_6=APIHelper.SKIP,
                 ce_dfs_ok=APIHelper.SKIP,
                 cisco_pace=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 disallowed_channels=APIHelper.SKIP,
                 display=APIHelper.SKIP,
                 extio=APIHelper.SKIP,
                 fcc_dfs_ok=APIHelper.SKIP,
                 has_11_ax=APIHelper.SKIP,
                 has_compass=APIHelper.SKIP,
                 has_ext_ant=APIHelper.SKIP,
                 has_extio=APIHelper.SKIP,
                 has_height=APIHelper.SKIP,
                 has_module_port=APIHelper.SKIP,
                 has_poe_out=APIHelper.SKIP,
                 has_scanning_radio=APIHelper.SKIP,
                 has_selectable_radio=APIHelper.SKIP,
                 has_usb=APIHelper.SKIP,
                 has_vble=APIHelper.SKIP,
                 has_wifi_band_24=APIHelper.SKIP,
                 has_wifi_band_5=APIHelper.SKIP,
                 has_wifi_band_6=APIHelper.SKIP,
                 max_poe_out=APIHelper.SKIP,
                 max_wlans=APIHelper.SKIP,
                 model=APIHelper.SKIP,
                 other_dfs_ok=APIHelper.SKIP,
                 outdoor=APIHelper.SKIP,
                 radios=APIHelper.SKIP,
                 shared_scanning_radio=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 unmanaged=APIHelper.SKIP,
                 vble=APIHelper.SKIP,
                 alias=APIHelper.SKIP,
                 defaults=APIHelper.SKIP,
                 evolved_os=False,
                 evpn_ri_type=APIHelper.SKIP,
                 experimental=False,
                 fans_pluggable=False,
                 has_bgp=False,
                 has_ets=False,
                 has_evpn=False,
                 has_irb=False,
                 has_snapshot=True,
                 has_vc=True,
                 modular=False,
                 no_shaping_rate=False,
                 number_fans=APIHelper.SKIP,
                 oc_device=False,
                 oob_interface=APIHelper.SKIP,
                 packet_action_drop_only=False,
                 pic=APIHelper.SKIP,
                 sub_required=APIHelper.SKIP,
                 ha_node_0_fpc=APIHelper.SKIP,
                 ha_node_1_fpc=APIHelper.SKIP,
                 has_fxp_0=True,
                 has_ha_control=False,
                 has_ha_data=False,
                 irb_disabled_by_default=False,
                 ports=APIHelper.SKIP,
                 t_128_device=False):
        """Constructor for the ConstDeviceModel class"""

        # Initialize members of the class
        if ap_type is not APIHelper.SKIP:
            self.ap_type = ap_type 
        if band_24 is not APIHelper.SKIP:
            self.band_24 = band_24 
        if band_5 is not APIHelper.SKIP:
            self.band_5 = band_5 
        if band_6 is not APIHelper.SKIP:
            self.band_6 = band_6 
        if ce_dfs_ok is not APIHelper.SKIP:
            self.ce_dfs_ok = ce_dfs_ok 
        if cisco_pace is not APIHelper.SKIP:
            self.cisco_pace = cisco_pace 
        if description is not APIHelper.SKIP:
            self.description = description 
        if disallowed_channels is not APIHelper.SKIP:
            self.disallowed_channels = disallowed_channels 
        if display is not APIHelper.SKIP:
            self.display = display 
        if extio is not APIHelper.SKIP:
            self.extio = extio 
        if fcc_dfs_ok is not APIHelper.SKIP:
            self.fcc_dfs_ok = fcc_dfs_ok 
        if has_11_ax is not APIHelper.SKIP:
            self.has_11_ax = has_11_ax 
        if has_compass is not APIHelper.SKIP:
            self.has_compass = has_compass 
        if has_ext_ant is not APIHelper.SKIP:
            self.has_ext_ant = has_ext_ant 
        if has_extio is not APIHelper.SKIP:
            self.has_extio = has_extio 
        if has_height is not APIHelper.SKIP:
            self.has_height = has_height 
        if has_module_port is not APIHelper.SKIP:
            self.has_module_port = has_module_port 
        if has_poe_out is not APIHelper.SKIP:
            self.has_poe_out = has_poe_out 
        if has_scanning_radio is not APIHelper.SKIP:
            self.has_scanning_radio = has_scanning_radio 
        if has_selectable_radio is not APIHelper.SKIP:
            self.has_selectable_radio = has_selectable_radio 
        if has_usb is not APIHelper.SKIP:
            self.has_usb = has_usb 
        if has_vble is not APIHelper.SKIP:
            self.has_vble = has_vble 
        if has_wifi_band_24 is not APIHelper.SKIP:
            self.has_wifi_band_24 = has_wifi_band_24 
        if has_wifi_band_5 is not APIHelper.SKIP:
            self.has_wifi_band_5 = has_wifi_band_5 
        if has_wifi_band_6 is not APIHelper.SKIP:
            self.has_wifi_band_6 = has_wifi_band_6 
        if max_poe_out is not APIHelper.SKIP:
            self.max_poe_out = max_poe_out 
        if max_wlans is not APIHelper.SKIP:
            self.max_wlans = max_wlans 
        if model is not APIHelper.SKIP:
            self.model = model 
        if other_dfs_ok is not APIHelper.SKIP:
            self.other_dfs_ok = other_dfs_ok 
        if outdoor is not APIHelper.SKIP:
            self.outdoor = outdoor 
        if radios is not APIHelper.SKIP:
            self.radios = radios 
        if shared_scanning_radio is not APIHelper.SKIP:
            self.shared_scanning_radio = shared_scanning_radio 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if unmanaged is not APIHelper.SKIP:
            self.unmanaged = unmanaged 
        if vble is not APIHelper.SKIP:
            self.vble = vble 
        if alias is not APIHelper.SKIP:
            self.alias = alias 
        if defaults is not APIHelper.SKIP:
            self.defaults = defaults 
        self.evolved_os = evolved_os 
        if evpn_ri_type is not APIHelper.SKIP:
            self.evpn_ri_type = evpn_ri_type 
        self.experimental = experimental 
        self.fans_pluggable = fans_pluggable 
        self.has_bgp = has_bgp 
        self.has_ets = has_ets 
        self.has_evpn = has_evpn 
        self.has_irb = has_irb 
        self.has_snapshot = has_snapshot 
        self.has_vc = has_vc 
        self.modular = modular 
        self.no_shaping_rate = no_shaping_rate 
        if number_fans is not APIHelper.SKIP:
            self.number_fans = number_fans 
        self.oc_device = oc_device 
        if oob_interface is not APIHelper.SKIP:
            self.oob_interface = oob_interface 
        self.packet_action_drop_only = packet_action_drop_only 
        if pic is not APIHelper.SKIP:
            self.pic = pic 
        if sub_required is not APIHelper.SKIP:
            self.sub_required = sub_required 
        if ha_node_0_fpc is not APIHelper.SKIP:
            self.ha_node_0_fpc = ha_node_0_fpc 
        if ha_node_1_fpc is not APIHelper.SKIP:
            self.ha_node_1_fpc = ha_node_1_fpc 
        self.has_fxp_0 = has_fxp_0 
        self.has_ha_control = has_ha_control 
        self.has_ha_data = has_ha_data 
        self.irb_disabled_by_default = irb_disabled_by_default 
        if ports is not APIHelper.SKIP:
            self.ports = ports 
        self.t_128_device = t_128_device 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ap_type = dictionary.get("ap_type") if dictionary.get("ap_type") else APIHelper.SKIP
        band_24 = Band6.from_dictionary(dictionary.get('band24')) if 'band24' in dictionary.keys() else APIHelper.SKIP
        band_5 = Band6.from_dictionary(dictionary.get('band5')) if 'band5' in dictionary.keys() else APIHelper.SKIP
        band_6 = Band6.from_dictionary(dictionary.get('band6')) if 'band6' in dictionary.keys() else APIHelper.SKIP
        ce_dfs_ok = dictionary.get("ce_dfs_ok") if "ce_dfs_ok" in dictionary.keys() else APIHelper.SKIP
        cisco_pace = dictionary.get("cisco_pace") if "cisco_pace" in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        disallowed_channels = dictionary.get("disallowed_channels") if dictionary.get("disallowed_channels") else APIHelper.SKIP
        display = dictionary.get("display") if dictionary.get("display") else APIHelper.SKIP
        extio = Extio.from_dictionary(dictionary.get('extio')) if 'extio' in dictionary.keys() else APIHelper.SKIP
        fcc_dfs_ok = dictionary.get("fcc_dfs_ok") if "fcc_dfs_ok" in dictionary.keys() else APIHelper.SKIP
        has_11_ax = dictionary.get("has_11ax") if "has_11ax" in dictionary.keys() else APIHelper.SKIP
        has_compass = dictionary.get("has_compass") if "has_compass" in dictionary.keys() else APIHelper.SKIP
        has_ext_ant = dictionary.get("has_ext_ant") if "has_ext_ant" in dictionary.keys() else APIHelper.SKIP
        has_extio = dictionary.get("has_extio") if "has_extio" in dictionary.keys() else APIHelper.SKIP
        has_height = dictionary.get("has_height") if "has_height" in dictionary.keys() else APIHelper.SKIP
        has_module_port = dictionary.get("has_module_port") if "has_module_port" in dictionary.keys() else APIHelper.SKIP
        has_poe_out = dictionary.get("has_poe_out") if "has_poe_out" in dictionary.keys() else APIHelper.SKIP
        has_scanning_radio = dictionary.get("has_scanning_radio") if "has_scanning_radio" in dictionary.keys() else APIHelper.SKIP
        has_selectable_radio = dictionary.get("has_selectable_radio") if "has_selectable_radio" in dictionary.keys() else APIHelper.SKIP
        has_usb = dictionary.get("has_usb") if "has_usb" in dictionary.keys() else APIHelper.SKIP
        has_vble = dictionary.get("has_vble") if "has_vble" in dictionary.keys() else APIHelper.SKIP
        has_wifi_band_24 = dictionary.get("has_wifi_band24") if "has_wifi_band24" in dictionary.keys() else APIHelper.SKIP
        has_wifi_band_5 = dictionary.get("has_wifi_band5") if "has_wifi_band5" in dictionary.keys() else APIHelper.SKIP
        has_wifi_band_6 = dictionary.get("has_wifi_band6") if "has_wifi_band6" in dictionary.keys() else APIHelper.SKIP
        max_poe_out = dictionary.get("max_poe_out") if dictionary.get("max_poe_out") else APIHelper.SKIP
        max_wlans = dictionary.get("max_wlans") if dictionary.get("max_wlans") else APIHelper.SKIP
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        other_dfs_ok = dictionary.get("other_dfs_ok") if "other_dfs_ok" in dictionary.keys() else APIHelper.SKIP
        outdoor = dictionary.get("outdoor") if "outdoor" in dictionary.keys() else APIHelper.SKIP
        radios = dictionary.get("radios") if dictionary.get("radios") else APIHelper.SKIP
        shared_scanning_radio = dictionary.get("shared_scanning_radio") if "shared_scanning_radio" in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        unmanaged = dictionary.get("unmanaged") if "unmanaged" in dictionary.keys() else APIHelper.SKIP
        vble = Vble.from_dictionary(dictionary.get('vble')) if 'vble' in dictionary.keys() else APIHelper.SKIP
        alias = dictionary.get("alias") if dictionary.get("alias") else APIHelper.SKIP
        defaults = Defaults1.from_dictionary(dictionary.get('defaults')) if 'defaults' in dictionary.keys() else APIHelper.SKIP
        evolved_os = dictionary.get("evolved_os") if dictionary.get("evolved_os") else False
        evpn_ri_type = dictionary.get("evpn_ri_type") if dictionary.get("evpn_ri_type") else APIHelper.SKIP
        experimental = dictionary.get("experimental") if dictionary.get("experimental") else False
        fans_pluggable = dictionary.get("fans_pluggable") if dictionary.get("fans_pluggable") else False
        has_bgp = dictionary.get("has_bgp") if dictionary.get("has_bgp") else False
        has_ets = dictionary.get("has_ets") if dictionary.get("has_ets") else False
        has_evpn = dictionary.get("has_evpn") if dictionary.get("has_evpn") else False
        has_irb = dictionary.get("has_irb") if dictionary.get("has_irb") else False
        has_snapshot = dictionary.get("has_snapshot") if dictionary.get("has_snapshot") else True
        has_vc = dictionary.get("has_vc") if dictionary.get("has_vc") else True
        modular = dictionary.get("modular") if dictionary.get("modular") else False
        no_shaping_rate = dictionary.get("no_shaping_rate") if dictionary.get("no_shaping_rate") else False
        number_fans = dictionary.get("number_fans") if dictionary.get("number_fans") else APIHelper.SKIP
        oc_device = dictionary.get("oc_device") if dictionary.get("oc_device") else False
        oob_interface = dictionary.get("oob_interface") if dictionary.get("oob_interface") else APIHelper.SKIP
        packet_action_drop_only = dictionary.get("packet_action_drop_only") if dictionary.get("packet_action_drop_only") else False
        pic = dictionary.get("pic") if dictionary.get("pic") else APIHelper.SKIP
        sub_required = dictionary.get("sub_required") if dictionary.get("sub_required") else APIHelper.SKIP
        ha_node_0_fpc = dictionary.get("ha_node0_fpc") if dictionary.get("ha_node0_fpc") else APIHelper.SKIP
        ha_node_1_fpc = dictionary.get("ha_node1_fpc") if dictionary.get("ha_node1_fpc") else APIHelper.SKIP
        has_fxp_0 = dictionary.get("has_fxp0") if dictionary.get("has_fxp0") else True
        has_ha_control = dictionary.get("has_ha_control") if dictionary.get("has_ha_control") else False
        has_ha_data = dictionary.get("has_ha_data") if dictionary.get("has_ha_data") else False
        irb_disabled_by_default = dictionary.get("irb_disabled_by_default") if dictionary.get("irb_disabled_by_default") else False
        ports = Ports1.from_dictionary(dictionary.get('ports')) if 'ports' in dictionary.keys() else APIHelper.SKIP
        t_128_device = dictionary.get("t128_device") if dictionary.get("t128_device") else False
        # Return an object of this model
        return cls(ap_type,
                   band_24,
                   band_5,
                   band_6,
                   ce_dfs_ok,
                   cisco_pace,
                   description,
                   disallowed_channels,
                   display,
                   extio,
                   fcc_dfs_ok,
                   has_11_ax,
                   has_compass,
                   has_ext_ant,
                   has_extio,
                   has_height,
                   has_module_port,
                   has_poe_out,
                   has_scanning_radio,
                   has_selectable_radio,
                   has_usb,
                   has_vble,
                   has_wifi_band_24,
                   has_wifi_band_5,
                   has_wifi_band_6,
                   max_poe_out,
                   max_wlans,
                   model,
                   other_dfs_ok,
                   outdoor,
                   radios,
                   shared_scanning_radio,
                   mtype,
                   unmanaged,
                   vble,
                   alias,
                   defaults,
                   evolved_os,
                   evpn_ri_type,
                   experimental,
                   fans_pluggable,
                   has_bgp,
                   has_ets,
                   has_evpn,
                   has_irb,
                   has_snapshot,
                   has_vc,
                   modular,
                   no_shaping_rate,
                   number_fans,
                   oc_device,
                   oob_interface,
                   packet_action_drop_only,
                   pic,
                   sub_required,
                   ha_node_0_fpc,
                   ha_node_1_fpc,
                   has_fxp_0,
                   has_ha_control,
                   has_ha_data,
                   irb_disabled_by_default,
                   ports,
                   t_128_device)
