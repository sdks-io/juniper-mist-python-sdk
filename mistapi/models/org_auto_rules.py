# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class OrgAutoRules(object):

    """Implementation of the 'org_auto_rules' model.

    auto_rules in org settings

    Attributes:
        expression (string): "[0:3]"            // "abcdef" -> "abc"
            "split(.)[1]"      // "a.b.c" -> "b" "split(-)[1][0:3]" //
            "a1234-b5678-c90" -> "b56"
        model (string): TODO: type description here.
        prefix (string): TODO: type description here.
        src (Src1Enum): TODO: type description here.
        subnet (string): TODO: type description here.
        suffix (string): TODO: type description here.
        value (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "src": 'src',
        "expression": 'expression',
        "model": 'model',
        "prefix": 'prefix',
        "subnet": 'subnet',
        "suffix": 'suffix',
        "value": 'value'
    }

    _optionals = [
        'expression',
        'model',
        'prefix',
        'subnet',
        'suffix',
        'value',
    ]

    _nullables = [
        'expression',
        'prefix',
        'suffix',
    ]

    def __init__(self,
                 src=None,
                 expression=APIHelper.SKIP,
                 model=APIHelper.SKIP,
                 prefix=APIHelper.SKIP,
                 subnet=APIHelper.SKIP,
                 suffix=APIHelper.SKIP,
                 value=APIHelper.SKIP):
        """Constructor for the OrgAutoRules class"""

        # Initialize members of the class
        if expression is not APIHelper.SKIP:
            self.expression = expression 
        if model is not APIHelper.SKIP:
            self.model = model 
        if prefix is not APIHelper.SKIP:
            self.prefix = prefix 
        self.src = src 
        if subnet is not APIHelper.SKIP:
            self.subnet = subnet 
        if suffix is not APIHelper.SKIP:
            self.suffix = suffix 
        if value is not APIHelper.SKIP:
            self.value = value 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        src = dictionary.get("src") if dictionary.get("src") else None
        expression = dictionary.get("expression") if "expression" in dictionary.keys() else APIHelper.SKIP
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        prefix = dictionary.get("prefix") if "prefix" in dictionary.keys() else APIHelper.SKIP
        subnet = dictionary.get("subnet") if dictionary.get("subnet") else APIHelper.SKIP
        suffix = dictionary.get("suffix") if "suffix" in dictionary.keys() else APIHelper.SKIP
        value = dictionary.get("value") if dictionary.get("value") else APIHelper.SKIP
        # Return an object of this model
        return cls(src,
                   expression,
                   model,
                   prefix,
                   subnet,
                   suffix,
                   value)
