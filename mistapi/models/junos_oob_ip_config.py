# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.node_1 import Node1


class JunosOobIpConfig(object):

    """Implementation of the 'junos_oob_ip_config' model.

    Junos out-of-band (vme/em0/fxp0) IP config

    Attributes:
        dns (list of string): TODO: type description here.
        dns_suffix (list of string): TODO: type description here.
        gateway (string): TODO: type description here.
        ip (string): TODO: type description here.
        netmask (string): used only if `subnet` is not specified in
            `networks`
        network (string): optional, the network to be used for mgmt
        node_1 (Node1): for HA Cluster, node1 can have different IP Config
        mtype (Type11Enum): TODO: type description here.
        use_mgmt_vrf (bool): if supported on the platform. If enabled, DNS
            will be using this routing-instance, too
        use_mgmt_vrf_for_host_out (bool): whether to use `mgmt_junos` for
            host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative
            service is desired
        vlan_id (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "dns": 'dns',
        "dns_suffix": 'dns_suffix',
        "gateway": 'gateway',
        "ip": 'ip',
        "netmask": 'netmask',
        "network": 'network',
        "node_1": 'node1',
        "mtype": 'type',
        "use_mgmt_vrf": 'use_mgmt_vrf',
        "use_mgmt_vrf_for_host_out": 'use_mgmt_vrf_for_host_out',
        "vlan_id": 'vlan_id'
    }

    _optionals = [
        'dns',
        'dns_suffix',
        'gateway',
        'ip',
        'netmask',
        'network',
        'node_1',
        'mtype',
        'use_mgmt_vrf',
        'use_mgmt_vrf_for_host_out',
        'vlan_id',
    ]

    def __init__(self,
                 dns=APIHelper.SKIP,
                 dns_suffix=APIHelper.SKIP,
                 gateway=APIHelper.SKIP,
                 ip=APIHelper.SKIP,
                 netmask=APIHelper.SKIP,
                 network=APIHelper.SKIP,
                 node_1=APIHelper.SKIP,
                 mtype='dynamic',
                 use_mgmt_vrf=True,
                 use_mgmt_vrf_for_host_out=False,
                 vlan_id=APIHelper.SKIP):
        """Constructor for the JunosOobIpConfig class"""

        # Initialize members of the class
        if dns is not APIHelper.SKIP:
            self.dns = dns 
        if dns_suffix is not APIHelper.SKIP:
            self.dns_suffix = dns_suffix 
        if gateway is not APIHelper.SKIP:
            self.gateway = gateway 
        if ip is not APIHelper.SKIP:
            self.ip = ip 
        if netmask is not APIHelper.SKIP:
            self.netmask = netmask 
        if network is not APIHelper.SKIP:
            self.network = network 
        if node_1 is not APIHelper.SKIP:
            self.node_1 = node_1 
        self.mtype = mtype 
        self.use_mgmt_vrf = use_mgmt_vrf 
        self.use_mgmt_vrf_for_host_out = use_mgmt_vrf_for_host_out 
        if vlan_id is not APIHelper.SKIP:
            self.vlan_id = vlan_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        dns = dictionary.get("dns") if dictionary.get("dns") else APIHelper.SKIP
        dns_suffix = dictionary.get("dns_suffix") if dictionary.get("dns_suffix") else APIHelper.SKIP
        gateway = dictionary.get("gateway") if dictionary.get("gateway") else APIHelper.SKIP
        ip = dictionary.get("ip") if dictionary.get("ip") else APIHelper.SKIP
        netmask = dictionary.get("netmask") if dictionary.get("netmask") else APIHelper.SKIP
        network = dictionary.get("network") if dictionary.get("network") else APIHelper.SKIP
        node_1 = Node1.from_dictionary(dictionary.get('node1')) if 'node1' in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else 'dynamic'
        use_mgmt_vrf = dictionary.get("use_mgmt_vrf") if dictionary.get("use_mgmt_vrf") else True
        use_mgmt_vrf_for_host_out = dictionary.get("use_mgmt_vrf_for_host_out") if dictionary.get("use_mgmt_vrf_for_host_out") else False
        vlan_id = dictionary.get("vlan_id") if dictionary.get("vlan_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(dns,
                   dns_suffix,
                   gateway,
                   ip,
                   netmask,
                   network,
                   node_1,
                   mtype,
                   use_mgmt_vrf,
                   use_mgmt_vrf_for_host_out,
                   vlan_id)
