# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.active_ports_summary import ActivePortsSummary
from mistapi.models.config_success import ConfigSuccess
from mistapi.models.version_compliance_2 import VersionCompliance2


class ApiV1SitesStatsSwitchesMetricsResponse(object):

    """Implementation of the 'Api V1 Sites Stats Switches Metrics Response' model.

    TODO: type model description here.

    Attributes:
        active_ports_summary (ActivePortsSummary): TODO: type description
            here.
        config_success (ConfigSuccess): TODO: type description here.
        version_compliance (VersionCompliance2): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "active_ports_summary": 'active_ports_summary',
        "config_success": 'config_success',
        "version_compliance": 'version_compliance'
    }

    _optionals = [
        'active_ports_summary',
        'config_success',
        'version_compliance',
    ]

    def __init__(self,
                 active_ports_summary=APIHelper.SKIP,
                 config_success=APIHelper.SKIP,
                 version_compliance=APIHelper.SKIP):
        """Constructor for the ApiV1SitesStatsSwitchesMetricsResponse class"""

        # Initialize members of the class
        if active_ports_summary is not APIHelper.SKIP:
            self.active_ports_summary = active_ports_summary 
        if config_success is not APIHelper.SKIP:
            self.config_success = config_success 
        if version_compliance is not APIHelper.SKIP:
            self.version_compliance = version_compliance 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        active_ports_summary = ActivePortsSummary.from_dictionary(dictionary.get('active_ports_summary')) if 'active_ports_summary' in dictionary.keys() else APIHelper.SKIP
        config_success = ConfigSuccess.from_dictionary(dictionary.get('config_success')) if 'config_success' in dictionary.keys() else APIHelper.SKIP
        version_compliance = VersionCompliance2.from_dictionary(dictionary.get('version_compliance')) if 'version_compliance' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(active_ports_summary,
                   config_success,
                   version_compliance)
