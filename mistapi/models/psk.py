# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Psk(object):

    """Implementation of the 'psk' model.

    PSK

    Attributes:
        admin_sso_id (string): sso id for psk created from psk portal
        created_time (float): TODO: type description here.
        email (string): email to send psk expiring notifications to
        expire_time (int): Expire time for this PSK key (epoch time in
            seconds). Default `null` (as no expiration)
        expiry_notification_time (int): Number of days before psk is expired.
            Used as to when to start sending reminder notification when the
            psk is about to expire
        id (uuid|string): TODO: type description here.
        mac (string): if `usage`==`single`, the mac that this PSK ties to,
            empty if `auto-binding`
        max_usage (int): For Org PSK Only. Max concurrent users for this PSK
            key. Default is 0 (unlimited)
        modified_time (float): TODO: type description here.
        name (string): TODO: type description here.
        note (string): TODO: type description here.
        notify_expiry (bool): If set to true, reminder notification will be
            sent when psk is about to expire
        notify_on_create_or_edit (bool): If set to true, notification will be
            sent when psk is created or edited
        old_passphrase (string): previous passphrase of the PSK if it has been
            rotated
        org_id (uuid|string): TODO: type description here.
        passphrase (string): passphrase of the PSK (8-63 character or 64 in
            hex)
        role (string): TODO: type description here.
        site_id (uuid|string): TODO: type description here.
        ssid (string): SSID this PSK should be applicable to
        usage (Usage2Enum): TODO: type description here.
        vlan_id (int): VLAN for this PSK key

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "passphrase": 'passphrase',
        "ssid": 'ssid',
        "admin_sso_id": 'admin_sso_id',
        "created_time": 'created_time',
        "email": 'email',
        "expire_time": 'expire_time',
        "expiry_notification_time": 'expiry_notification_time',
        "id": 'id',
        "mac": 'mac',
        "max_usage": 'max_usage',
        "modified_time": 'modified_time',
        "note": 'note',
        "notify_expiry": 'notify_expiry',
        "notify_on_create_or_edit": 'notify_on_create_or_edit',
        "old_passphrase": 'old_passphrase',
        "org_id": 'org_id',
        "role": 'role',
        "site_id": 'site_id',
        "usage": 'usage',
        "vlan_id": 'vlan_id'
    }

    _optionals = [
        'admin_sso_id',
        'created_time',
        'email',
        'expire_time',
        'expiry_notification_time',
        'id',
        'mac',
        'max_usage',
        'modified_time',
        'note',
        'notify_expiry',
        'notify_on_create_or_edit',
        'old_passphrase',
        'org_id',
        'role',
        'site_id',
        'usage',
        'vlan_id',
    ]

    _nullables = [
        'expire_time',
    ]

    def __init__(self,
                 name=None,
                 passphrase=None,
                 ssid=None,
                 admin_sso_id=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 expire_time=APIHelper.SKIP,
                 expiry_notification_time=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 mac=APIHelper.SKIP,
                 max_usage=0,
                 modified_time=APIHelper.SKIP,
                 note=APIHelper.SKIP,
                 notify_expiry=False,
                 notify_on_create_or_edit=APIHelper.SKIP,
                 old_passphrase=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 role=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 usage='multi',
                 vlan_id=APIHelper.SKIP):
        """Constructor for the Psk class"""

        # Initialize members of the class
        if admin_sso_id is not APIHelper.SKIP:
            self.admin_sso_id = admin_sso_id 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if email is not APIHelper.SKIP:
            self.email = email 
        if expire_time is not APIHelper.SKIP:
            self.expire_time = expire_time 
        if expiry_notification_time is not APIHelper.SKIP:
            self.expiry_notification_time = expiry_notification_time 
        if id is not APIHelper.SKIP:
            self.id = id 
        if mac is not APIHelper.SKIP:
            self.mac = mac 
        self.max_usage = max_usage 
        if modified_time is not APIHelper.SKIP:
            self.modified_time = modified_time 
        self.name = name 
        if note is not APIHelper.SKIP:
            self.note = note 
        self.notify_expiry = notify_expiry 
        if notify_on_create_or_edit is not APIHelper.SKIP:
            self.notify_on_create_or_edit = notify_on_create_or_edit 
        if old_passphrase is not APIHelper.SKIP:
            self.old_passphrase = old_passphrase 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        self.passphrase = passphrase 
        if role is not APIHelper.SKIP:
            self.role = role 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        self.ssid = ssid 
        self.usage = usage 
        if vlan_id is not APIHelper.SKIP:
            self.vlan_id = vlan_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        passphrase = dictionary.get("passphrase") if dictionary.get("passphrase") else None
        ssid = dictionary.get("ssid") if dictionary.get("ssid") else None
        admin_sso_id = dictionary.get("admin_sso_id") if dictionary.get("admin_sso_id") else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        expire_time = dictionary.get("expire_time") if "expire_time" in dictionary.keys() else APIHelper.SKIP
        expiry_notification_time = dictionary.get("expiry_notification_time") if dictionary.get("expiry_notification_time") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        mac = dictionary.get("mac") if dictionary.get("mac") else APIHelper.SKIP
        max_usage = dictionary.get("max_usage") if dictionary.get("max_usage") else 0
        modified_time = dictionary.get("modified_time") if dictionary.get("modified_time") else APIHelper.SKIP
        note = dictionary.get("note") if dictionary.get("note") else APIHelper.SKIP
        notify_expiry = dictionary.get("notify_expiry") if dictionary.get("notify_expiry") else False
        notify_on_create_or_edit = dictionary.get("notify_on_create_or_edit") if "notify_on_create_or_edit" in dictionary.keys() else APIHelper.SKIP
        old_passphrase = dictionary.get("old_passphrase") if dictionary.get("old_passphrase") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        role = dictionary.get("role") if dictionary.get("role") else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        usage = dictionary.get("usage") if dictionary.get("usage") else 'multi'
        vlan_id = dictionary.get("vlan_id") if dictionary.get("vlan_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   passphrase,
                   ssid,
                   admin_sso_id,
                   created_time,
                   email,
                   expire_time,
                   expiry_notification_time,
                   id,
                   mac,
                   max_usage,
                   modified_time,
                   note,
                   notify_expiry,
                   notify_on_create_or_edit,
                   old_passphrase,
                   org_id,
                   role,
                   site_id,
                   usage,
                   vlan_id)
