# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Msp(object):

    """Implementation of the 'Msp' model.

    TODO: type model description here.

    Attributes:
        allow_mist (bool): TODO: type description here.
        created_time (int): TODO: type description here.
        id (uuid|string): TODO: type description here.
        logo_url (string): For advanced tier (uMSPs) only
        name (string): TODO: type description here.
        tier (TierEnum): TODO: type description here.
        url (string): For advanced tier (uMSPs) only

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "allow_mist": 'allow_mist',
        "created_time": 'created_time',
        "id": 'id',
        "logo_url": 'logo_url',
        "name": 'name',
        "tier": 'tier',
        "url": 'url'
    }

    _optionals = [
        'allow_mist',
        'created_time',
        'id',
        'logo_url',
        'name',
        'tier',
        'url',
    ]

    def __init__(self,
                 allow_mist=APIHelper.SKIP,
                 created_time=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 logo_url=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 tier='base',
                 url=APIHelper.SKIP):
        """Constructor for the Msp class"""

        # Initialize members of the class
        if allow_mist is not APIHelper.SKIP:
            self.allow_mist = allow_mist 
        if created_time is not APIHelper.SKIP:
            self.created_time = created_time 
        if id is not APIHelper.SKIP:
            self.id = id 
        if logo_url is not APIHelper.SKIP:
            self.logo_url = logo_url 
        if name is not APIHelper.SKIP:
            self.name = name 
        self.tier = tier 
        if url is not APIHelper.SKIP:
            self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        allow_mist = dictionary.get("allow_mist") if "allow_mist" in dictionary.keys() else APIHelper.SKIP
        created_time = dictionary.get("created_time") if dictionary.get("created_time") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        logo_url = dictionary.get("logo_url") if dictionary.get("logo_url") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        tier = dictionary.get("tier") if dictionary.get("tier") else 'base'
        url = dictionary.get("url") if dictionary.get("url") else APIHelper.SKIP
        # Return an object of this model
        return cls(allow_mist,
                   created_time,
                   id,
                   logo_url,
                   name,
                   tier,
                   url)
