# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class SiteOccupancyAnalytics(object):

    """Implementation of the 'site_occupancy_analytics' model.

    Occupancy Analytics settings

    Attributes:
        assets_enabled (bool): indicate whether named BLE assets should be
            included in the zone occupancy calculation
        clients_enabled (bool): indicate whether connected WiFi clients should
            be included in the zone occupancy calculation
        min_duration (int): minimum duration
        sdkclients_enabled (bool): indicate whether SDK clients should be
            included in the zone occupancy calculation
        unconnected_clients_enabled (bool): indicate whether unconnected WiFi
            clients should be included in the zone occupancy calculation

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "assets_enabled": 'assets_enabled',
        "clients_enabled": 'clients_enabled',
        "min_duration": 'min_duration',
        "sdkclients_enabled": 'sdkclients_enabled',
        "unconnected_clients_enabled": 'unconnected_clients_enabled'
    }

    _optionals = [
        'assets_enabled',
        'clients_enabled',
        'min_duration',
        'sdkclients_enabled',
        'unconnected_clients_enabled',
    ]

    def __init__(self,
                 assets_enabled=False,
                 clients_enabled=True,
                 min_duration=3000,
                 sdkclients_enabled=False,
                 unconnected_clients_enabled=False):
        """Constructor for the SiteOccupancyAnalytics class"""

        # Initialize members of the class
        self.assets_enabled = assets_enabled 
        self.clients_enabled = clients_enabled 
        self.min_duration = min_duration 
        self.sdkclients_enabled = sdkclients_enabled 
        self.unconnected_clients_enabled = unconnected_clients_enabled 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        assets_enabled = dictionary.get("assets_enabled") if dictionary.get("assets_enabled") else False
        clients_enabled = dictionary.get("clients_enabled") if dictionary.get("clients_enabled") else True
        min_duration = dictionary.get("min_duration") if dictionary.get("min_duration") else 3000
        sdkclients_enabled = dictionary.get("sdkclients_enabled") if dictionary.get("sdkclients_enabled") else False
        unconnected_clients_enabled = dictionary.get("unconnected_clients_enabled") if dictionary.get("unconnected_clients_enabled") else False
        # Return an object of this model
        return cls(assets_enabled,
                   clients_enabled,
                   min_duration,
                   sdkclients_enabled,
                   unconnected_clients_enabled)
