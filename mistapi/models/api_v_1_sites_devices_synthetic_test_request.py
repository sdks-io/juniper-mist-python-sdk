# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class ApiV1SitesDevicesSyntheticTestRequest(object):

    """Implementation of the 'Api V1 Sites Devices Synthetic Test Request' model.

    TODO: type model description here.

    Attributes:
        hostname (string): if `type`==`dns`
        ip (string): if `type`==`arp`
        password (string): if `type`==`radius`
        mtype (Type54Enum): TODO: type description here.
        url (string): if `type`==`curl`
        username (string): if `type`==`radius`
        vlan_id (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "hostname": 'hostname',
        "ip": 'ip',
        "password": 'password',
        "mtype": 'type',
        "url": 'url',
        "username": 'username',
        "vlan_id": 'vlan_id'
    }

    _optionals = [
        'hostname',
        'ip',
        'password',
        'mtype',
        'url',
        'username',
        'vlan_id',
    ]

    def __init__(self,
                 hostname=APIHelper.SKIP,
                 ip=APIHelper.SKIP,
                 password=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 url=APIHelper.SKIP,
                 username=APIHelper.SKIP,
                 vlan_id=APIHelper.SKIP):
        """Constructor for the ApiV1SitesDevicesSyntheticTestRequest class"""

        # Initialize members of the class
        if hostname is not APIHelper.SKIP:
            self.hostname = hostname 
        if ip is not APIHelper.SKIP:
            self.ip = ip 
        if password is not APIHelper.SKIP:
            self.password = password 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if url is not APIHelper.SKIP:
            self.url = url 
        if username is not APIHelper.SKIP:
            self.username = username 
        if vlan_id is not APIHelper.SKIP:
            self.vlan_id = vlan_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        hostname = dictionary.get("hostname") if dictionary.get("hostname") else APIHelper.SKIP
        ip = dictionary.get("ip") if dictionary.get("ip") else APIHelper.SKIP
        password = dictionary.get("password") if dictionary.get("password") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        url = dictionary.get("url") if dictionary.get("url") else APIHelper.SKIP
        username = dictionary.get("username") if dictionary.get("username") else APIHelper.SKIP
        vlan_id = dictionary.get("vlan_id") if dictionary.get("vlan_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(hostname,
                   ip,
                   password,
                   mtype,
                   url,
                   username,
                   vlan_id)
