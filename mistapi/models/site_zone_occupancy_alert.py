# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class SiteZoneOccupancyAlert(object):

    """Implementation of the 'site_zone_occupancy_alert' model.

    Zone Occupancy alert site settings

    Attributes:
        email_notifiers (list of string): list of email addresses to send
            email notifications when the alert threshold is reached
        enabled (bool): indicate whether zone occupancy alert is enabled for
            the site
        threshold (int): sending zone-occupancy-alert webhook message only if
            a zone stays non-compliant (i.e. actual occupancy >
            occupancy_limit) for a minimum duration specified in the
            threshold, in minutes

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "email_notifiers": 'email_notifiers',
        "enabled": 'enabled',
        "threshold": 'threshold'
    }

    _optionals = [
        'email_notifiers',
        'enabled',
        'threshold',
    ]

    def __init__(self,
                 email_notifiers=APIHelper.SKIP,
                 enabled=False,
                 threshold=5):
        """Constructor for the SiteZoneOccupancyAlert class"""

        # Initialize members of the class
        if email_notifiers is not APIHelper.SKIP:
            self.email_notifiers = email_notifiers 
        self.enabled = enabled 
        self.threshold = threshold 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        email_notifiers = dictionary.get("email_notifiers") if dictionary.get("email_notifiers") else APIHelper.SKIP
        enabled = dictionary.get("enabled") if dictionary.get("enabled") else False
        threshold = dictionary.get("threshold") if dictionary.get("threshold") else 5
        # Return an object of this model
        return cls(email_notifiers,
                   enabled,
                   threshold)
