# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class DynamicVlan1(object):

    """Implementation of the 'DynamicVlan1' model.

    for 802.1x

    Attributes:
        default_vlan_id (int): vlan_id to use when thereâ€™s no match from
            RADIUS
        enabled (bool): whether to enable dynamic vlan
        local_vlan_ids (list of int): vlan_ids to be locally bridged
        mtype (Type39Enum): standard (using Tunnel-Private-Group-ID, widely
            supported), airespace-interface-name (Airespace/Cisco)
        vlans (dict): map between vlan_id (as string) to airespace interface
            names (comma-separated) or null for stndard mapping

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "default_vlan_id": 'default_vlan_id',
        "enabled": 'enabled',
        "local_vlan_ids": 'local_vlan_ids',
        "mtype": 'type',
        "vlans": 'vlans'
    }

    _optionals = [
        'default_vlan_id',
        'enabled',
        'local_vlan_ids',
        'mtype',
        'vlans',
    ]

    _nullables = [
        'default_vlan_id',
        'mtype',
    ]

    def __init__(self,
                 default_vlan_id=999,
                 enabled=False,
                 local_vlan_ids=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 vlans=APIHelper.SKIP):
        """Constructor for the DynamicVlan1 class"""

        # Initialize members of the class
        self.default_vlan_id = default_vlan_id 
        self.enabled = enabled 
        if local_vlan_ids is not APIHelper.SKIP:
            self.local_vlan_ids = local_vlan_ids 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if vlans is not APIHelper.SKIP:
            self.vlans = vlans 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        default_vlan_id = dictionary.get("default_vlan_id") if dictionary.get("default_vlan_id") else 999
        enabled = dictionary.get("enabled") if dictionary.get("enabled") else False
        local_vlan_ids = dictionary.get("local_vlan_ids") if dictionary.get("local_vlan_ids") else APIHelper.SKIP
        mtype = dictionary.get("type") if "type" in dictionary.keys() else APIHelper.SKIP
        vlans = dictionary.get("vlans") if dictionary.get("vlans") else APIHelper.SKIP
        # Return an object of this model
        return cls(default_vlan_id,
                   enabled,
                   local_vlan_ids,
                   mtype,
                   vlans)
