# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class Result24(object):

    """Implementation of the 'Result24' model.

    TODO: type model description here.

    Attributes:
        details (object): TODO: type description here.
        org_id (string): TODO: type description here.
        scope (string): TODO: type description here.
        score (int): TODO: type description here.
        site_id (string): TODO: type description here.
        timestamp (int): TODO: type description here.
        mtype (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "details": 'details',
        "org_id": 'org_id',
        "scope": 'scope',
        "score": 'score',
        "site_id": 'site_id',
        "timestamp": 'timestamp',
        "mtype": 'type'
    }

    _optionals = [
        'details',
        'org_id',
        'scope',
        'score',
        'site_id',
        'timestamp',
        'mtype',
    ]

    def __init__(self,
                 details=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 scope=APIHelper.SKIP,
                 score=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 timestamp=APIHelper.SKIP,
                 mtype=APIHelper.SKIP):
        """Constructor for the Result24 class"""

        # Initialize members of the class
        if details is not APIHelper.SKIP:
            self.details = details 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if scope is not APIHelper.SKIP:
            self.scope = scope 
        if score is not APIHelper.SKIP:
            self.score = score 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if timestamp is not APIHelper.SKIP:
            self.timestamp = timestamp 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        details = dictionary.get("details") if dictionary.get("details") else APIHelper.SKIP
        org_id = dictionary.get("org_id") if dictionary.get("org_id") else APIHelper.SKIP
        scope = dictionary.get("scope") if dictionary.get("scope") else APIHelper.SKIP
        score = dictionary.get("score") if dictionary.get("score") else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        # Return an object of this model
        return cls(details,
                   org_id,
                   scope,
                   score,
                   site_id,
                   timestamp,
                   mtype)
