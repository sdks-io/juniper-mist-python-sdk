# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.models.inventory_added import InventoryAdded
from mistapi.models.inventory_duplicated import InventoryDuplicated
from mistapi.models.license_added import LicenseAdded
from mistapi.models.license_duplicated import LicenseDuplicated
from mistapi.models.license_error import LicenseError


class ClaimLicense(object):

    """Implementation of the 'claimLicense' model.

    TODO: type model description here.

    Attributes:
        inventory_added (list of InventoryAdded): TODO: type description
            here.
        inventory_duplicated (list of InventoryDuplicated): TODO: type
            description here.
        license_added (list of LicenseAdded): TODO: type description here.
        license_duplicated (list of LicenseDuplicated): TODO: type description
            here.
        license_error (list of LicenseError): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "inventory_added": 'inventory_added',
        "inventory_duplicated": 'inventory_duplicated',
        "license_added": 'license_added',
        "license_duplicated": 'license_duplicated',
        "license_error": 'license_error'
    }

    def __init__(self,
                 inventory_added=None,
                 inventory_duplicated=None,
                 license_added=None,
                 license_duplicated=None,
                 license_error=None):
        """Constructor for the ClaimLicense class"""

        # Initialize members of the class
        self.inventory_added = inventory_added 
        self.inventory_duplicated = inventory_duplicated 
        self.license_added = license_added 
        self.license_duplicated = license_duplicated 
        self.license_error = license_error 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        inventory_added = None
        if dictionary.get('inventory_added') is not None:
            inventory_added = [InventoryAdded.from_dictionary(x) for x in dictionary.get('inventory_added')]
        inventory_duplicated = None
        if dictionary.get('inventory_duplicated') is not None:
            inventory_duplicated = [InventoryDuplicated.from_dictionary(x) for x in dictionary.get('inventory_duplicated')]
        license_added = None
        if dictionary.get('license_added') is not None:
            license_added = [LicenseAdded.from_dictionary(x) for x in dictionary.get('license_added')]
        license_duplicated = None
        if dictionary.get('license_duplicated') is not None:
            license_duplicated = [LicenseDuplicated.from_dictionary(x) for x in dictionary.get('license_duplicated')]
        license_error = None
        if dictionary.get('license_error') is not None:
            license_error = [LicenseError.from_dictionary(x) for x in dictionary.get('license_error')]
        # Return an object of this model
        return cls(inventory_added,
                   inventory_duplicated,
                   license_added,
                   license_duplicated,
                   license_error)
