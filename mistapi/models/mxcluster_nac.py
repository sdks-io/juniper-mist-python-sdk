# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.client_ips import ClientIps


class MxclusterNac(object):

    """Implementation of the 'mxcluster_nac' model.

    TODO: type model description here.

    Attributes:
        acct_server_port (int): TODO: type description here.
        auth_server_port (int): TODO: type description here.
        client_ips (dict): TODO: type description here.
        enabled (bool): TODO: type description here.
        secret (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "acct_server_port": 'acct_server_port',
        "auth_server_port": 'auth_server_port',
        "client_ips": 'client_ips',
        "enabled": 'enabled',
        "secret": 'secret'
    }

    _optionals = [
        'acct_server_port',
        'auth_server_port',
        'client_ips',
        'enabled',
        'secret',
    ]

    def __init__(self,
                 acct_server_port=1813,
                 auth_server_port=1812,
                 client_ips=APIHelper.SKIP,
                 enabled=APIHelper.SKIP,
                 secret=APIHelper.SKIP):
        """Constructor for the MxclusterNac class"""

        # Initialize members of the class
        self.acct_server_port = acct_server_port 
        self.auth_server_port = auth_server_port 
        if client_ips is not APIHelper.SKIP:
            self.client_ips = client_ips 
        if enabled is not APIHelper.SKIP:
            self.enabled = enabled 
        if secret is not APIHelper.SKIP:
            self.secret = secret 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        acct_server_port = dictionary.get("acct_server_port") if dictionary.get("acct_server_port") else 1813
        auth_server_port = dictionary.get("auth_server_port") if dictionary.get("auth_server_port") else 1812
        client_ips = ClientIps.from_dictionary(dictionary.get('client_ips')) if 'client_ips' in dictionary.keys() else APIHelper.SKIP
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else APIHelper.SKIP
        secret = dictionary.get("secret") if dictionary.get("secret") else APIHelper.SKIP
        # Return an object of this model
        return cls(acct_server_port,
                   auth_server_port,
                   client_ips,
                   enabled,
                   secret)
